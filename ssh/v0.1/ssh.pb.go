// Code generated by protoc-gen-go.
// source: ssh.proto
// DO NOT EDIT!

/*
Package ssh is a generated protocol buffer package.

It is generated from these files:
	ssh.proto

It has these top-level messages:
	SecureShellGetRequest
	SecureShellGetResponse
	SSHKey
*/
package ssh

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Use specific requests for protos
type SecureShellGetRequest struct {
	JenkinsNamespace string `protobuf:"bytes,1,opt,name=jenkins_namespace" json:"jenkins_namespace,omitempty"`
	ClusterNamespace string `protobuf:"bytes,2,opt,name=cluster_namespace" json:"cluster_namespace,omitempty"`
	ClusterName      string `protobuf:"bytes,3,opt,name=cluster_name" json:"cluster_name,omitempty"`
	InstanceName     string `protobuf:"bytes,4,opt,name=instance_name" json:"instance_name,omitempty"`
}

func (m *SecureShellGetRequest) Reset()                    { *m = SecureShellGetRequest{} }
func (m *SecureShellGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SecureShellGetRequest) ProtoMessage()               {}
func (*SecureShellGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// return phid ?
type SecureShellGetResponse struct {
	Status       *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	SshKey       *SSHKey        `protobuf:"bytes,2,opt,name=ssh_key" json:"ssh_key,omitempty"`
	InstanceAddr string         `protobuf:"bytes,3,opt,name=instance_addr" json:"instance_addr,omitempty"`
	InstancePort int32          `protobuf:"varint,4,opt,name=instance_port" json:"instance_port,omitempty"`
	User         string         `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
}

func (m *SecureShellGetResponse) Reset()                    { *m = SecureShellGetResponse{} }
func (m *SecureShellGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SecureShellGetResponse) ProtoMessage()               {}
func (*SecureShellGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SecureShellGetResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SecureShellGetResponse) GetSshKey() *SSHKey {
	if m != nil {
		return m.SshKey
	}
	return nil
}

type SSHKey struct {
	PublicKey          []byte `protobuf:"bytes,1,opt,name=public_key,proto3" json:"public_key,omitempty"`
	PrivateKey         []byte `protobuf:"bytes,2,opt,name=private_key,proto3" json:"private_key,omitempty"`
	AwsFingerprint     string `protobuf:"bytes,3,opt,name=aws_fingerprint" json:"aws_fingerprint,omitempty"`
	OpensshFingerprint string `protobuf:"bytes,4,opt,name=openssh_fingerprint" json:"openssh_fingerprint,omitempty"`
}

func (m *SSHKey) Reset()                    { *m = SSHKey{} }
func (m *SSHKey) String() string            { return proto.CompactTextString(m) }
func (*SSHKey) ProtoMessage()               {}
func (*SSHKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*SecureShellGetRequest)(nil), "ssh.SecureShellGetRequest")
	proto.RegisterType((*SecureShellGetResponse)(nil), "ssh.SecureShellGetResponse")
	proto.RegisterType((*SSHKey)(nil), "ssh.SSHKey")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for SecureShell service

type SecureShellClient interface {
	Get(ctx context.Context, in *SecureShellGetRequest, opts ...grpc.CallOption) (*SecureShellGetResponse, error)
}

type secureShellClient struct {
	cc *grpc.ClientConn
}

func NewSecureShellClient(cc *grpc.ClientConn) SecureShellClient {
	return &secureShellClient{cc}
}

func (c *secureShellClient) Get(ctx context.Context, in *SecureShellGetRequest, opts ...grpc.CallOption) (*SecureShellGetResponse, error) {
	out := new(SecureShellGetResponse)
	err := grpc.Invoke(ctx, "/ssh.SecureShell/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SecureShell service

type SecureShellServer interface {
	Get(context.Context, *SecureShellGetRequest) (*SecureShellGetResponse, error)
}

func RegisterSecureShellServer(s *grpc.Server, srv SecureShellServer) {
	s.RegisterService(&_SecureShell_serviceDesc, srv)
}

func _SecureShell_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecureShellGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureShellServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.SecureShell/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureShellServer).Get(ctx, req.(*SecureShellGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecureShell_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ssh.SecureShell",
	HandlerType: (*SecureShellServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SecureShell_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0x4d, 0x4e, 0xc3, 0x30,
	0x10, 0x85, 0xd5, 0x5f, 0xd4, 0x49, 0x28, 0xc2, 0xfd, 0xa1, 0xa4, 0x15, 0x42, 0x5d, 0xb1, 0x4a,
	0xa0, 0x1c, 0x02, 0x24, 0x76, 0x84, 0x7d, 0xe5, 0xa6, 0x43, 0x1a, 0x1a, 0x6c, 0x63, 0x3b, 0x45,
	0x65, 0xc9, 0x11, 0xe0, 0x68, 0x5c, 0x81, 0x83, 0xe0, 0xd8, 0x15, 0x0a, 0xa8, 0x9b, 0x28, 0x7a,
	0x6f, 0xe4, 0xf7, 0xbd, 0x19, 0xe8, 0x28, 0xb5, 0x0a, 0x85, 0xe4, 0x9a, 0x93, 0x86, 0xf9, 0x0d,
	0x26, 0x29, 0xe7, 0x69, 0x8e, 0x11, 0x15, 0x59, 0x44, 0x19, 0xe3, 0x9a, 0xea, 0x8c, 0x33, 0xe5,
	0x46, 0x82, 0x61, 0x29, 0x2f, 0xf5, 0x56, 0xa0, 0x8a, 0xec, 0xd7, 0xe9, 0xd3, 0x37, 0x18, 0xc4,
	0x98, 0x14, 0x12, 0xe3, 0x15, 0xe6, 0xf9, 0x0d, 0xea, 0x7b, 0x7c, 0x29, 0x50, 0x69, 0x72, 0x0a,
	0xc7, 0x4f, 0xc8, 0xd6, 0x19, 0x53, 0x73, 0x46, 0x9f, 0x51, 0x09, 0x9a, 0xe0, 0xa8, 0x76, 0x5e,
	0xbb, 0xe8, 0x94, 0x56, 0x92, 0x17, 0x4a, 0xa3, 0xac, 0x58, 0x75, 0x6b, 0xf5, 0xc1, 0xaf, 0x5a,
	0xa3, 0x86, 0x55, 0x07, 0x70, 0x68, 0xde, 0xd1, 0x94, 0x25, 0xe8, 0xe4, 0x66, 0x29, 0x4f, 0x3f,
	0x6a, 0x30, 0xfc, 0x1f, 0xae, 0x84, 0x61, 0x46, 0x72, 0x06, 0x6d, 0x33, 0xaf, 0x0b, 0x65, 0x23,
	0xbd, 0x59, 0x37, 0x74, 0xec, 0x61, 0x6c, 0x55, 0x32, 0x81, 0x03, 0xd3, 0x79, 0xbe, 0xc6, 0xad,
	0x0d, 0xf6, 0x66, 0x5e, 0x58, 0xae, 0x23, 0x8e, 0x6f, 0xef, 0x70, 0xfb, 0x27, 0x8f, 0x2e, 0x97,
	0x72, 0x0f, 0x86, 0xe0, 0x52, 0x5b, 0x8c, 0x16, 0xf1, 0xa1, 0x59, 0x28, 0x94, 0xa3, 0x96, 0x85,
	0x4a, 0xa1, 0xbd, 0x7b, 0x85, 0x00, 0x88, 0x62, 0x91, 0x67, 0x89, 0x8d, 0x29, 0x39, 0x7c, 0xd2,
	0x03, 0x4f, 0xc8, 0x6c, 0x43, 0x35, 0xfe, 0x66, 0xfb, 0xe4, 0x04, 0x8e, 0xe8, 0xab, 0x9a, 0x3f,
	0x66, 0x2c, 0x45, 0x69, 0x6c, 0xa6, 0x77, 0x81, 0x63, 0xe8, 0x71, 0x81, 0xac, 0x24, 0xad, 0x9a,
	0xb6, 0xfd, 0x2c, 0x01, 0xaf, 0x52, 0x9e, 0x3c, 0x40, 0xc3, 0x2c, 0x80, 0x04, 0xae, 0xc7, 0xbe,
	0x93, 0x04, 0xe3, 0xbd, 0x9e, 0xdb, 0xd8, 0xb4, 0xff, 0xfe, 0xf5, 0xfd, 0x59, 0xef, 0x12, 0x3f,
	0x32, 0x43, 0x86, 0x2d, 0xda, 0x5c, 0x86, 0x57, 0x8b, 0xb6, 0xbd, 0xf2, 0xf5, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x2b, 0xb9, 0x91, 0x5b, 0x2d, 0x02, 0x00, 0x00,
}
