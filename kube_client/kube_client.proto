syntax = "proto3";

package kube_client;

import "google/api/annotations.proto";
import "api/dtypes/types.proto";
import "api/kubernetes/kubernetes.proto";

service KubeClient {
  rpc KubeClusterDetails(KubeRequest) returns (KubeClusterDetailsResponse) {
    option (google.api.http) = {
      get : "/api/kube/v0/{cluster_name}"
    };
  }

  rpc KubeNodeList(KubeRequest) returns (KubeNodeListResponse) {
    option (google.api.http) = {
      get : "/api/kube/v0/{cluster_name}/nodes"
    };
  }

  rpc KubeSecretList(KubeRequest) returns (KubeSecretListResponse) {
    option (google.api.http) = {
      get : "/api/kube/v0/{cluster_name}/secrets"
    };
  }

  rpc KubeJobList(KubeRequest) returns (KubeJobListResponse) {
    option (google.api.http) = {
      get : "/api/kube/v0/{cluster_name}/jobs"
    };
  }

  rpc KubeNamespaceList(KubeRequest) returns (KubeNamespaceListResponse) {
    option (google.api.http) = {
      get : "/api/kube/v0/{cluster_name}/namespaces"
    };
  }

  rpc KubePodList(KubeRequest) returns (KubePodListResponse) {
    option (google.api.http) = {
      get : "/api/kube/v0/{cluster_name}/pods"
    };
  }

  rpc KubeServiceList(KubeRequest) returns (KubeServiceListResponse) {
    option (google.api.http) = {
      get : "/api/kube/v0/{cluster_name}/services"
    };
  }

  rpc KubeReplicationControllerList(KubeRequest) returns (KubeReplicationControllerListResponse) {
    option (google.api.http) = {
      get : "/api/kube/v0/{cluster_name}/rcs"
    };
  }

  rpc KubeAppList(KubeRequest) returns (KubeAppListResponse) {
    option (google.api.http) = {
      get : "/api/kube/v0/{cluster_name}/apps"
    };
  }

  rpc KubeAppDetails(KubeAppDetailsRequest) returns (KubeAppDetailsResponse) {
    option (google.api.http) = {
      get : "/api/kube/v0/{cluster_name}/apps/{namespace}/{name}"
    };
  }

  rpc KubeAppPodList(KubeAppDetailsRequest) returns (KubePodListResponse) {
    option (google.api.http) = {
      get : "/api/kube/v0/{cluster_name}/apps/{namespace}/{name}/pods"
    };
  }
}


message KubeRequest {
  string cluster_name = 1;
}

message KubeClusterDetailsResponse {
  dtypes.Status status = 1;
  kubernetes.ClusterDetails cluster = 2;

  message Specs {
    int32 containers = 1;
    int32 pods = 2;
    int32 services = 3;
    int32 rcs = 4;

    int64 cpu_core = 5;
    int64 total_memory = 6;
  }
  Specs specs = 3;
}

message KubeNodeListResponse {
  dtypes.Status status = 1;
  repeated KubeNode nodes = 2;
}

message KubeNode {
  string name = 1;
  string provider_id = 2;

  string created_at = 3;

  message NodeCapacity {
    int64 cpu = 1;
    int64 memory = 2;
    int64 pods = 3;
  }
  NodeCapacity capacity = 4;

  string os_image = 5;
  string kernel_version = 6;
  string container_runtime = 7;

  string kubelet_version = 8;
}

message KubeNamespaceListResponse {
  dtypes.Status status = 1;
  repeated KubeNamespace namespaces = 2;
}

message KubeNamespace {
  string name = 1;
  string created_at = 2;
  string phase = 3;
}

message KubeSecretListResponse {
  dtypes.Status status = 1;
  repeated KubeSecret secrets = 2;
}

message KubeSecret {
  string name = 1;
  string namespace = 2;

  string resource_version = 3;
  string secret_type = 4;

  string created_at = 5;
}

message KubeJobListResponse {
  dtypes.Status status = 1;
  repeated KubeJob jobs = 2;
}

message KubeJob {
  string name = 1;
  string namespace = 2;
  string app = 3;
  string created_at = 4;

  int32 parallelism = 5;
  int32 completions = 6;

  repeated KubeContainer containers = 7;

  string start_time = 8;
  string completion_time = 9;

  int32 active = 10;
  int32 succeeded = 11;
  int32 failed = 12;
}

message KubePodListResponse {
  dtypes.Status status = 1;
  repeated KubePod pods = 2;
}

message KubePod {
  string name = 1;
  string namespace = 2;
  string app = 3;
  string created_at = 4;

  repeated KubeContainer containers = 5;

  string service_account = 6;
  string node_name = 7;

  string phase = 8;
  string start_time = 9;
  string message = 10;
}

message KubeContainer {
  string name = 1;
  string image = 2;
  repeated string commands = 3;
}

message KubeServiceListResponse {
  dtypes.Status status = 1;
  repeated KubeService services = 2;
}

message KubeService {
  string name = 1;
  string namespace = 2;
  string app = 3;
  string created_at = 4;

  string type = 5;
  string cluster_ip = 6;

  message Port {
    string name = 1;
    string protocol = 2;
    int32 port = 3;
    string target_port = 4;
    int32 node_port = 5;
  }
  repeated Port ports = 7;
  repeated string external_ips = 8;

  message LoadBalancerIngress {
    string host_name = 1;
    string ip = 2;
  }
  repeated LoadBalancerIngress loadbalancer_ingresses = 9;
}

message KubeAppDetailsRequest {
  string name = 1;
  string cluster_name = 2;
  string namespace = 3;
}

message KubeAppDetailsResponse {
  dtypes.Status status = 1;
  KubeService app = 2;
}

message KubeAppListResponse {
  dtypes.Status status = 1;
  repeated KubeApp apps = 2;
}

message KubeApp {
  string name = 1;
  string namespace = 2;
  string created_at = 4;

  string type = 5;
  string cluster_ip = 6;
}


message KubeReplicationControllerListResponse {
  dtypes.Status status = 1;
  repeated KubeReplicationController replication_controllers = 2;
}

message KubeReplicationController {
  string name = 1;
  string namespace = 2;
  string app = 3;
  string created_at = 4;

  int64 generation = 5;
  int32 current_replicas = 6;
  int32 replicas = 7;
  int64 observed_generation = 8;

  repeated KubeContainer containers = 9;
}
