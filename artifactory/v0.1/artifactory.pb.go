// Code generated by protoc-gen-go.
// source: artifactory.proto
// DO NOT EDIT!

/*
Package artifactory is a generated protocol buffer package.

It is generated from these files:
	artifactory.proto

It has these top-level messages:
	SearchRequest
	SearchResponse
	ListRequest
	ListResponse
	DescribeRequest
	DescribeResponse
	Artifacts
	JavaSpec
	DockerSpec
	PhpSpec
	NpmSpec
*/
package artifactory

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type SearchRequest struct {
	QueryString string `protobuf:"bytes,1,opt,name=query_string,json=queryString" json:"query_string,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	From        int32  `protobuf:"varint,3,opt,name=from" json:"from,omitempty"`
	Size        int32  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SearchResponse struct {
	Status   string       `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Artifact []*Artifacts `protobuf:"bytes,2,rep,name=artifact" json:"artifact,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SearchResponse) GetArtifact() []*Artifacts {
	if m != nil {
		return m.Artifact
	}
	return nil
}

type ListRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListResponse struct {
	Status   string       `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Artifact []*Artifacts `protobuf:"bytes,2,rep,name=artifact" json:"artifact,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListResponse) GetArtifact() []*Artifacts {
	if m != nil {
		return m.Artifact
	}
	return nil
}

type DescribeRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *DescribeRequest) Reset()                    { *m = DescribeRequest{} }
func (m *DescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*DescribeRequest) ProtoMessage()               {}
func (*DescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DescribeResponse struct {
	Status   string     `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Artifact *Artifacts `protobuf:"bytes,2,opt,name=artifact" json:"artifact,omitempty"`
}

func (m *DescribeResponse) Reset()                    { *m = DescribeResponse{} }
func (m *DescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*DescribeResponse) ProtoMessage()               {}
func (*DescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DescribeResponse) GetArtifact() *Artifacts {
	if m != nil {
		return m.Artifact
	}
	return nil
}

type Artifacts struct {
	Id               string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Version          string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	LastModifiedTime string `protobuf:"bytes,4,opt,name=last_modified_time,json=lastModifiedTime" json:"last_modified_time,omitempty"`
	Type             string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	// Types that are valid to be assigned to ModelArtifacts:
	//	*Artifacts_Java
	//	*Artifacts_Docker
	//	*Artifacts_Php
	//	*Artifacts_Npm
	ModelArtifacts isArtifacts_ModelArtifacts `protobuf_oneof:"model_artifacts"`
}

func (m *Artifacts) Reset()                    { *m = Artifacts{} }
func (m *Artifacts) String() string            { return proto.CompactTextString(m) }
func (*Artifacts) ProtoMessage()               {}
func (*Artifacts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isArtifacts_ModelArtifacts interface {
	isArtifacts_ModelArtifacts()
}

type Artifacts_Java struct {
	Java *JavaSpec `protobuf:"bytes,6,opt,name=java,oneof"`
}
type Artifacts_Docker struct {
	Docker *DockerSpec `protobuf:"bytes,7,opt,name=docker,oneof"`
}
type Artifacts_Php struct {
	Php *PhpSpec `protobuf:"bytes,8,opt,name=php,oneof"`
}
type Artifacts_Npm struct {
	Npm *NpmSpec `protobuf:"bytes,9,opt,name=npm,oneof"`
}

func (*Artifacts_Java) isArtifacts_ModelArtifacts()   {}
func (*Artifacts_Docker) isArtifacts_ModelArtifacts() {}
func (*Artifacts_Php) isArtifacts_ModelArtifacts()    {}
func (*Artifacts_Npm) isArtifacts_ModelArtifacts()    {}

func (m *Artifacts) GetModelArtifacts() isArtifacts_ModelArtifacts {
	if m != nil {
		return m.ModelArtifacts
	}
	return nil
}

func (m *Artifacts) GetJava() *JavaSpec {
	if x, ok := m.GetModelArtifacts().(*Artifacts_Java); ok {
		return x.Java
	}
	return nil
}

func (m *Artifacts) GetDocker() *DockerSpec {
	if x, ok := m.GetModelArtifacts().(*Artifacts_Docker); ok {
		return x.Docker
	}
	return nil
}

func (m *Artifacts) GetPhp() *PhpSpec {
	if x, ok := m.GetModelArtifacts().(*Artifacts_Php); ok {
		return x.Php
	}
	return nil
}

func (m *Artifacts) GetNpm() *NpmSpec {
	if x, ok := m.GetModelArtifacts().(*Artifacts_Npm); ok {
		return x.Npm
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Artifacts) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Artifacts_OneofMarshaler, _Artifacts_OneofUnmarshaler, _Artifacts_OneofSizer, []interface{}{
		(*Artifacts_Java)(nil),
		(*Artifacts_Docker)(nil),
		(*Artifacts_Php)(nil),
		(*Artifacts_Npm)(nil),
	}
}

func _Artifacts_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Artifacts)
	// model_artifacts
	switch x := m.ModelArtifacts.(type) {
	case *Artifacts_Java:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Java); err != nil {
			return err
		}
	case *Artifacts_Docker:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Docker); err != nil {
			return err
		}
	case *Artifacts_Php:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Php); err != nil {
			return err
		}
	case *Artifacts_Npm:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Npm); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Artifacts.ModelArtifacts has unexpected type %T", x)
	}
	return nil
}

func _Artifacts_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Artifacts)
	switch tag {
	case 6: // model_artifacts.java
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JavaSpec)
		err := b.DecodeMessage(msg)
		m.ModelArtifacts = &Artifacts_Java{msg}
		return true, err
	case 7: // model_artifacts.docker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DockerSpec)
		err := b.DecodeMessage(msg)
		m.ModelArtifacts = &Artifacts_Docker{msg}
		return true, err
	case 8: // model_artifacts.php
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PhpSpec)
		err := b.DecodeMessage(msg)
		m.ModelArtifacts = &Artifacts_Php{msg}
		return true, err
	case 9: // model_artifacts.npm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NpmSpec)
		err := b.DecodeMessage(msg)
		m.ModelArtifacts = &Artifacts_Npm{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Artifacts_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Artifacts)
	// model_artifacts
	switch x := m.ModelArtifacts.(type) {
	case *Artifacts_Java:
		s := proto.Size(x.Java)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Artifacts_Docker:
		s := proto.Size(x.Docker)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Artifacts_Php:
		s := proto.Size(x.Php)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Artifacts_Npm:
		s := proto.Size(x.Npm)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type JavaSpec struct {
	GroupId     string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	ArtifactId  string `protobuf:"bytes,2,opt,name=artifact_id,json=artifactId" json:"artifact_id,omitempty"`
	ArtifactUrl string `protobuf:"bytes,3,opt,name=artifact_url,json=artifactUrl" json:"artifact_url,omitempty"`
}

func (m *JavaSpec) Reset()                    { *m = JavaSpec{} }
func (m *JavaSpec) String() string            { return proto.CompactTextString(m) }
func (*JavaSpec) ProtoMessage()               {}
func (*JavaSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DockerSpec struct {
	Tar_Sums    []string `protobuf:"bytes,1,rep,name=tar_Sums,json=tarSums" json:"tar_Sums,omitempty"`
	ManifestUrl string   `protobuf:"bytes,2,opt,name=manifest_url,json=manifestUrl" json:"manifest_url,omitempty"`
}

func (m *DockerSpec) Reset()                    { *m = DockerSpec{} }
func (m *DockerSpec) String() string            { return proto.CompactTextString(m) }
func (*DockerSpec) ProtoMessage()               {}
func (*DockerSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type PhpSpec struct {
	DownloadUrl string `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl" json:"download_url,omitempty"`
	Shasum      string `protobuf:"bytes,2,opt,name=shasum" json:"shasum,omitempty"`
}

func (m *PhpSpec) Reset()                    { *m = PhpSpec{} }
func (m *PhpSpec) String() string            { return proto.CompactTextString(m) }
func (*PhpSpec) ProtoMessage()               {}
func (*PhpSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type NpmSpec struct {
	Description string   `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	ArtifactId  string   `protobuf:"bytes,2,opt,name=artifact_id,json=artifactId" json:"artifact_id,omitempty"`
	Shasum      string   `protobuf:"bytes,3,opt,name=shasum" json:"shasum,omitempty"`
	Keywords    []string `protobuf:"bytes,4,rep,name=keywords" json:"keywords,omitempty"`
	ArtifactUrl string   `protobuf:"bytes,5,opt,name=artifact_url,json=artifactUrl" json:"artifact_url,omitempty"`
}

func (m *NpmSpec) Reset()                    { *m = NpmSpec{} }
func (m *NpmSpec) String() string            { return proto.CompactTextString(m) }
func (*NpmSpec) ProtoMessage()               {}
func (*NpmSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*SearchRequest)(nil), "artifactory.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "artifactory.SearchResponse")
	proto.RegisterType((*ListRequest)(nil), "artifactory.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "artifactory.ListResponse")
	proto.RegisterType((*DescribeRequest)(nil), "artifactory.DescribeRequest")
	proto.RegisterType((*DescribeResponse)(nil), "artifactory.DescribeResponse")
	proto.RegisterType((*Artifacts)(nil), "artifactory.Artifacts")
	proto.RegisterType((*JavaSpec)(nil), "artifactory.JavaSpec")
	proto.RegisterType((*DockerSpec)(nil), "artifactory.DockerSpec")
	proto.RegisterType((*PhpSpec)(nil), "artifactory.PhpSpec")
	proto.RegisterType((*NpmSpec)(nil), "artifactory.NpmSpec")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for ArtifactoryServices service

type ArtifactoryServicesClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
}

type artifactoryServicesClient struct {
	cc *grpc.ClientConn
}

func NewArtifactoryServicesClient(cc *grpc.ClientConn) ArtifactoryServicesClient {
	return &artifactoryServicesClient{cc}
}

func (c *artifactoryServicesClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/artifactory.ArtifactoryServices/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactoryServicesClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/artifactory.ArtifactoryServices/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactoryServicesClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := grpc.Invoke(ctx, "/artifactory.ArtifactoryServices/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArtifactoryServices service

type ArtifactoryServicesServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
}

func RegisterArtifactoryServicesServer(s *grpc.Server, srv ArtifactoryServicesServer) {
	s.RegisterService(&_ArtifactoryServices_serviceDesc, srv)
}

func _ArtifactoryServices_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactoryServicesServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactory.ArtifactoryServices/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactoryServicesServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactoryServices_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactoryServicesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactory.ArtifactoryServices/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactoryServicesServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactoryServices_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactoryServicesServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactory.ArtifactoryServices/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactoryServicesServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArtifactoryServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "artifactory.ArtifactoryServices",
	HandlerType: (*ArtifactoryServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _ArtifactoryServices_Search_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ArtifactoryServices_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _ArtifactoryServices_Describe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0x5d, 0x6e, 0xd3, 0x4a,
	0x14, 0xbe, 0x4e, 0xd2, 0xfc, 0x9c, 0xf4, 0xf6, 0x67, 0xee, 0xbd, 0xbd, 0xae, 0x29, 0xa2, 0xf5,
	0x53, 0x25, 0x50, 0x43, 0x8b, 0x58, 0x40, 0xab, 0x3e, 0x40, 0x05, 0xa8, 0x72, 0xe0, 0x05, 0x01,
	0xd6, 0xd4, 0x9e, 0x24, 0x43, 0x63, 0x8f, 0x99, 0x71, 0x52, 0x05, 0xc4, 0x0b, 0x5b, 0x60, 0x09,
	0x6c, 0x85, 0x15, 0xc0, 0x16, 0x58, 0x08, 0x33, 0xe3, 0x19, 0x27, 0x56, 0x0b, 0x94, 0x07, 0xde,
	0xce, 0xf9, 0xce, 0xe7, 0xf3, 0x3f, 0xc7, 0xb0, 0x8e, 0x79, 0x4e, 0x07, 0x38, 0xca, 0x19, 0x9f,
	0xed, 0x65, 0x9c, 0xe5, 0x0c, 0x75, 0x17, 0x20, 0x6f, 0x6b, 0xc8, 0xd8, 0x70, 0x4c, 0x7a, 0x38,
	0xa3, 0x3d, 0x9c, 0xa6, 0x2c, 0xc7, 0x39, 0x65, 0xa9, 0x28, 0xa8, 0x7e, 0x0a, 0x7f, 0xf7, 0x09,
	0xe6, 0xd1, 0x28, 0x20, 0x6f, 0x26, 0x44, 0xe4, 0x68, 0x07, 0x96, 0xa5, 0xc0, 0x67, 0xa1, 0xc8,
	0x39, 0x4d, 0x87, 0xae, 0xb3, 0xed, 0xec, 0x76, 0x82, 0xae, 0xc6, 0xfa, 0x1a, 0x42, 0x08, 0x1a,
	0xf9, 0x2c, 0x23, 0x6e, 0x4d, 0x9b, 0xb4, 0xac, 0xb0, 0x01, 0x67, 0x89, 0x5b, 0x97, 0xd8, 0x52,
	0xa0, 0x65, 0x85, 0x09, 0xfa, 0x96, 0xb8, 0x8d, 0x02, 0x53, 0xb2, 0xff, 0x02, 0x56, 0x6c, 0x3c,
	0x91, 0xc9, 0x34, 0x08, 0xda, 0x80, 0xa6, 0x90, 0x39, 0x4d, 0x84, 0x09, 0x65, 0x34, 0x74, 0x00,
	0x6d, 0x5b, 0x86, 0x8c, 0x54, 0xdf, 0xed, 0x1e, 0x6c, 0xec, 0x2d, 0x96, 0x7a, 0x68, 0x64, 0x11,
	0x94, 0x3c, 0x7f, 0x07, 0xba, 0x8f, 0xa8, 0xc8, 0x6d, 0x2d, 0x36, 0x51, 0x67, 0x9e, 0xa8, 0xff,
	0x1c, 0x96, 0x0b, 0xca, 0x1f, 0x08, 0x7f, 0x1f, 0x56, 0x8f, 0x89, 0x88, 0x38, 0x3d, 0x23, 0x3f,
	0x49, 0x01, 0xad, 0x40, 0x8d, 0xc6, 0xa6, 0x7b, 0x52, 0xf2, 0x5f, 0xc1, 0xda, 0xfc, 0xb3, 0xdf,
	0x4a, 0xcb, 0xb9, 0x56, 0x5a, 0x5f, 0x6a, 0xd0, 0x29, 0x71, 0x13, 0xdd, 0xb1, 0xd1, 0x55, 0x86,
	0x29, 0x4e, 0xca, 0x69, 0x2a, 0x19, 0xb9, 0xd0, 0x9a, 0x12, 0x2e, 0xe4, 0x9e, 0xe8, 0x81, 0x76,
	0x02, 0xab, 0xa2, 0x3b, 0x80, 0xc6, 0x58, 0xe4, 0x61, 0xc2, 0x62, 0x3a, 0xa0, 0x24, 0x0e, 0x73,
	0x9a, 0x14, 0x13, 0xee, 0x04, 0x6b, 0xca, 0xf2, 0xd8, 0x18, 0x9e, 0x4a, 0xbc, 0xac, 0x7e, 0x69,
	0xa1, 0xfa, 0xdb, 0xd0, 0x78, 0x8d, 0xa7, 0xd8, 0x6d, 0xea, 0xec, 0xff, 0xab, 0x64, 0x7f, 0x22,
	0x0d, 0xfd, 0x8c, 0x44, 0x0f, 0xfe, 0x0a, 0x34, 0x09, 0xed, 0x43, 0x33, 0x66, 0xd1, 0x39, 0xe1,
	0x6e, 0x4b, 0xd3, 0xff, 0xaf, 0xd0, 0x8f, 0xb5, 0xc9, 0x7c, 0x60, 0x88, 0x68, 0x17, 0xea, 0xd9,
	0x28, 0x73, 0xdb, 0x9a, 0xff, 0x6f, 0x85, 0x7f, 0x3a, 0xca, 0x0c, 0x59, 0x51, 0x14, 0x33, 0xcd,
	0x12, 0xb7, 0x73, 0x05, 0xf3, 0x49, 0x96, 0x58, 0xa6, 0xa4, 0x1c, 0xad, 0xc3, 0xaa, 0x2c, 0x98,
	0x8c, 0x43, 0xcb, 0x11, 0x3e, 0x85, 0xb6, 0xcd, 0x16, 0x6d, 0x42, 0x7b, 0xc8, 0xd9, 0x24, 0x0b,
	0xcb, 0xc6, 0xb6, 0xb4, 0xfe, 0x30, 0x46, 0xb7, 0xa0, 0x7c, 0x8c, 0x61, 0x39, 0x74, 0xb0, 0x90,
	0x24, 0xc8, 0xf7, 0x56, 0x12, 0x26, 0x7c, 0x6c, 0xfa, 0x5d, 0x7e, 0xf4, 0x8c, 0x8f, 0xfd, 0x13,
	0x80, 0x79, 0xa5, 0x2a, 0x58, 0x8e, 0x79, 0xd8, 0x9f, 0x24, 0x6a, 0x37, 0xea, 0x2a, 0x98, 0xd4,
	0x95, 0xaa, 0x7c, 0x25, 0x38, 0xa5, 0x03, 0xb9, 0x78, 0xda, 0x57, 0x11, 0xad, 0x6b, 0x31, 0xe5,
	0xeb, 0x18, 0x5a, 0xa6, 0x0b, 0x8a, 0x1d, 0xb3, 0x8b, 0x74, 0xcc, 0x70, 0xac, 0xd9, 0xe6, 0xa5,
	0x5b, 0x4c, 0xb2, 0xf5, 0x16, 0x8e, 0xb0, 0x98, 0x24, 0xc6, 0x95, 0xd1, 0xfc, 0x4f, 0x0e, 0xb4,
	0x4c, 0x8b, 0xd0, 0x36, 0x74, 0x63, 0xbd, 0xbd, 0x99, 0xba, 0x2b, 0xa5, 0x97, 0x39, 0xf4, 0xeb,
	0x1e, 0xcc, 0xc3, 0xd4, 0x17, 0xc3, 0x20, 0x0f, 0xda, 0xe7, 0x64, 0x76, 0xc1, 0x78, 0x2c, 0xe4,
	0x8a, 0xa9, 0x52, 0x4b, 0xfd, 0x52, 0xdf, 0x96, 0x2e, 0xf5, 0xed, 0xe0, 0x73, 0x0d, 0xfe, 0x39,
	0x9c, 0x0f, 0xb5, 0x4f, 0xf8, 0x94, 0x46, 0x44, 0xa0, 0x08, 0x9a, 0xc5, 0x0d, 0x42, 0x5e, 0x65,
	0xe8, 0x95, 0x43, 0xe8, 0xdd, 0xb8, 0xd2, 0x56, 0x3c, 0x4f, 0x7f, 0xfb, 0xc3, 0xd7, 0x6f, 0x1f,
	0x6b, 0x1e, 0x72, 0x7b, 0x0b, 0xa4, 0xde, 0xf4, 0xee, 0xde, 0x7e, 0xef, 0x9d, 0xda, 0xf2, 0xf7,
	0xe8, 0x25, 0x34, 0xd4, 0x9d, 0x41, 0x6e, 0xc5, 0xcd, 0xc2, 0x75, 0xf2, 0x36, 0xaf, 0xb0, 0x5c,
	0xdb, 0xbd, 0x5c, 0x3f, 0x7b, 0x33, 0xd0, 0x56, 0xf5, 0x51, 0x54, 0x2f, 0x90, 0x77, 0xf3, 0x07,
	0xd6, 0xeb, 0x86, 0x3a, 0xaa, 0x9d, 0x3a, 0x67, 0x4d, 0xfd, 0xb7, 0xb8, 0xf7, 0x3d, 0x00, 0x00,
	0xff, 0xff, 0xc6, 0xdd, 0xaf, 0x07, 0x6d, 0x06, 0x00, 0x00,
}
