{
  "basePath": "/",
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "artifactoryArtifact": {
      "properties": {
        "docker": {
          "$ref": "#/definitions/artifactoryDockerSpec"
        },
        "id": {
          "format": "string",
          "type": "string"
        },
        "java": {
          "$ref": "#/definitions/artifactoryJavaSpec"
        },
        "last_modified_time": {
          "format": "string",
          "type": "string"
        },
        "name": {
          "format": "string",
          "type": "string"
        },
        "npm": {
          "$ref": "#/definitions/artifactoryNpmSpec"
        },
        "php": {
          "$ref": "#/definitions/artifactoryPhpSpec"
        },
        "type": {
          "format": "string",
          "type": "string"
        },
        "version": {
          "format": "string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "artifactoryDescribeRequest": {
      "properties": {
        "id": {
          "format": "string",
          "type": "string"
        },
        "type": {
          "format": "string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "artifactoryDescribeResponse": {
      "properties": {
        "artifact": {
          "$ref": "#/definitions/artifactoryArtifact"
        },
        "status": {
          "$ref": "#/definitions/dtypesStatus"
        }
      },
      "type": "object"
    },
    "artifactoryDockerSpec": {
      "properties": {
        "manifest_url": {
          "format": "string",
          "type": "string"
        },
        "tar_sums": {
          "items": {
            "format": "string",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "artifactoryJavaSpec": {
      "properties": {
        "artifact_id": {
          "format": "string",
          "type": "string"
        },
        "artifact_url": {
          "format": "string",
          "type": "string"
        },
        "group_id": {
          "format": "string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "artifactoryListRequest": {
      "properties": {
        "type": {
          "format": "string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "artifactoryListResponse": {
      "properties": {
        "artifacts": {
          "items": {
            "$ref": "#/definitions/artifactoryArtifact"
          },
          "type": "array"
        },
        "status": {
          "$ref": "#/definitions/dtypesStatus"
        }
      },
      "type": "object"
    },
    "artifactoryNpmSpec": {
      "properties": {
        "artifact_id": {
          "format": "string",
          "type": "string"
        },
        "artifact_url": {
          "format": "string",
          "type": "string"
        },
        "description": {
          "format": "string",
          "type": "string"
        },
        "keywords": {
          "items": {
            "format": "string",
            "type": "string"
          },
          "type": "array"
        },
        "shasum": {
          "format": "string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "artifactoryPhpSpec": {
      "properties": {
        "download_url": {
          "format": "string",
          "type": "string"
        },
        "shasum": {
          "format": "string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "artifactorySearchRequest": {
      "properties": {
        "query": {
          "format": "string",
          "type": "string"
        },
        "type": {
          "format": "string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "artifactorySearchResponse": {
      "properties": {
        "artifacts": {
          "items": {
            "$ref": "#/definitions/artifactoryArtifact"
          },
          "type": "array"
        },
        "status": {
          "$ref": "#/definitions/dtypesStatus"
        }
      },
      "type": "object"
    },
    "dtypesHelp": {
      "properties": {
        "description": {
          "format": "string",
          "title": "Describe what link offers",
          "type": "string"
        },
        "url": {
          "description": "The URL of The link.",
          "format": "string",
          "type": "string"
        }
      },
      "title": "Provides links to documentation or for performing an out of band action.\nNext Id 3;",
      "type": "object"
    },
    "dtypesStatus": {
      "description": "Next Id 5.",
      "properties": {
        "code": {
          "format": "string",
          "title": "Response status code",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "type": "array"
        },
        "help": {
          "$ref": "#/definitions/dtypesHelp",
          "description": "Optional. Help link if there is an error."
        },
        "message": {
          "description": "User facing message.",
          "format": "string",
          "type": "string"
        },
        "status": {
          "description": "Response status code string.",
          "format": "string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "protobufAny": {
      "description": "`Any` contains an arbitrary serialized message along with a URL\nthat describes the type of the serialized message.\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the the `@type`\nfield. Example (for message [google.protobuf.Duration][google.protobuf.Duration]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
      "properties": {
        "type_url": {
          "description": "A URL/resource name whose content describes the type of the\nserialized message.\n\nFor URLs which use the schema `http`, `https`, or no schema, the\nfollowing restrictions and interpretations apply:\n\n* If no schema is provided, `https` is assumed.\n* The last segment of the URL's path must represent the fully\n  qualified name of the type (as in `path/google.protobuf.Duration`).\n* An HTTP GET on the URL must yield a [google.protobuf.Type][google.protobuf.Type]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nSchemas other than `http`, `https` (or the empty schema) might be\nused with implementation specific semantics.",
          "format": "string",
          "type": "string"
        },
        "value": {
          "description": "Must be valid serialized data of the above specified type.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "host": "api.appscode.com",
  "info": {
    "title": "artifactory.proto",
    "version": "0.1"
  },
  "paths": {
    "/appscode/api/artifactory/v0.1/search": {
      "get": {
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "Description",
            "schema": {
              "$ref": "#/definitions/artifactorySearchResponse"
            }
          }
        },
        "tags": [
          "Artifactory"
        ]
      }
    },
    "/appscode/api/artifactory/v0.1/{type}": {
      "get": {
        "operationId": "List",
        "parameters": [
          {
            "format": "string",
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Description",
            "schema": {
              "$ref": "#/definitions/artifactoryListResponse"
            }
          }
        },
        "tags": [
          "Artifactory"
        ]
      }
    },
    "/appscode/api/artifactory/v0.1/{type}/{id}": {
      "get": {
        "operationId": "Describe",
        "parameters": [
          {
            "format": "string",
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "format": "string",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Description",
            "schema": {
              "$ref": "#/definitions/artifactoryDescribeResponse"
            }
          }
        },
        "tags": [
          "Artifactory"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0"
}