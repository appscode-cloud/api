// Code generated by protoc-gen-go.
// source: artifact.proto
// DO NOT EDIT!

/*
Package artifactory is a generated protocol buffer package.

It is generated from these files:
	artifact.proto

It has these top-level messages:
	SearchRequest
	SearchResponse
	ListRequest
	ListResponse
	DescribeRequest
	DescribeResponse
	Artifact
	JavaSpec
	DockerSpec
	PhpSpec
	NpmSpec
*/
package artifactory

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SearchRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SearchResponse struct {
	Status    *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Artifacts []*Artifact    `protobuf:"bytes,2,rep,name=artifacts" json:"artifacts,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SearchResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SearchResponse) GetArtifacts() []*Artifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

type ListRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListResponse struct {
	Status    *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Artifacts []*Artifact    `protobuf:"bytes,2,rep,name=artifacts" json:"artifacts,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListResponse) GetArtifacts() []*Artifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

type DescribeRequest struct {
	Id   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *DescribeRequest) Reset()                    { *m = DescribeRequest{} }
func (m *DescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*DescribeRequest) ProtoMessage()               {}
func (*DescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DescribeResponse struct {
	Status   *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Artifact *Artifact      `protobuf:"bytes,2,opt,name=artifact" json:"artifact,omitempty"`
}

func (m *DescribeResponse) Reset()                    { *m = DescribeResponse{} }
func (m *DescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*DescribeResponse) ProtoMessage()               {}
func (*DescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DescribeResponse) GetArtifact() *Artifact {
	if m != nil {
		return m.Artifact
	}
	return nil
}

type Artifact struct {
	Id               string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Version          string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	LastModifiedTime string `protobuf:"bytes,4,opt,name=last_modified_time" json:"last_modified_time,omitempty"`
	Type             string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	// Types that are valid to be assigned to Specs:
	//	*Artifact_Java
	//	*Artifact_Docker
	//	*Artifact_Php
	//	*Artifact_Npm
	Specs isArtifact_Specs `protobuf_oneof:"specs"`
}

func (m *Artifact) Reset()                    { *m = Artifact{} }
func (m *Artifact) String() string            { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()               {}
func (*Artifact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isArtifact_Specs interface {
	isArtifact_Specs()
}

type Artifact_Java struct {
	Java *JavaSpec `protobuf:"bytes,6,opt,name=java,oneof"`
}
type Artifact_Docker struct {
	Docker *DockerSpec `protobuf:"bytes,7,opt,name=docker,oneof"`
}
type Artifact_Php struct {
	Php *PhpSpec `protobuf:"bytes,8,opt,name=php,oneof"`
}
type Artifact_Npm struct {
	Npm *NpmSpec `protobuf:"bytes,9,opt,name=npm,oneof"`
}

func (*Artifact_Java) isArtifact_Specs()   {}
func (*Artifact_Docker) isArtifact_Specs() {}
func (*Artifact_Php) isArtifact_Specs()    {}
func (*Artifact_Npm) isArtifact_Specs()    {}

func (m *Artifact) GetSpecs() isArtifact_Specs {
	if m != nil {
		return m.Specs
	}
	return nil
}

func (m *Artifact) GetJava() *JavaSpec {
	if x, ok := m.GetSpecs().(*Artifact_Java); ok {
		return x.Java
	}
	return nil
}

func (m *Artifact) GetDocker() *DockerSpec {
	if x, ok := m.GetSpecs().(*Artifact_Docker); ok {
		return x.Docker
	}
	return nil
}

func (m *Artifact) GetPhp() *PhpSpec {
	if x, ok := m.GetSpecs().(*Artifact_Php); ok {
		return x.Php
	}
	return nil
}

func (m *Artifact) GetNpm() *NpmSpec {
	if x, ok := m.GetSpecs().(*Artifact_Npm); ok {
		return x.Npm
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Artifact) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Artifact_OneofMarshaler, _Artifact_OneofUnmarshaler, _Artifact_OneofSizer, []interface{}{
		(*Artifact_Java)(nil),
		(*Artifact_Docker)(nil),
		(*Artifact_Php)(nil),
		(*Artifact_Npm)(nil),
	}
}

func _Artifact_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Artifact)
	// specs
	switch x := m.Specs.(type) {
	case *Artifact_Java:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Java); err != nil {
			return err
		}
	case *Artifact_Docker:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Docker); err != nil {
			return err
		}
	case *Artifact_Php:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Php); err != nil {
			return err
		}
	case *Artifact_Npm:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Npm); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Artifact.Specs has unexpected type %T", x)
	}
	return nil
}

func _Artifact_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Artifact)
	switch tag {
	case 6: // specs.java
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JavaSpec)
		err := b.DecodeMessage(msg)
		m.Specs = &Artifact_Java{msg}
		return true, err
	case 7: // specs.docker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DockerSpec)
		err := b.DecodeMessage(msg)
		m.Specs = &Artifact_Docker{msg}
		return true, err
	case 8: // specs.php
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PhpSpec)
		err := b.DecodeMessage(msg)
		m.Specs = &Artifact_Php{msg}
		return true, err
	case 9: // specs.npm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NpmSpec)
		err := b.DecodeMessage(msg)
		m.Specs = &Artifact_Npm{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Artifact_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Artifact)
	// specs
	switch x := m.Specs.(type) {
	case *Artifact_Java:
		s := proto.Size(x.Java)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Artifact_Docker:
		s := proto.Size(x.Docker)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Artifact_Php:
		s := proto.Size(x.Php)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Artifact_Npm:
		s := proto.Size(x.Npm)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type JavaSpec struct {
	GroupId     string `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	ArtifactId  string `protobuf:"bytes,2,opt,name=artifact_id" json:"artifact_id,omitempty"`
	ArtifactUrl string `protobuf:"bytes,3,opt,name=artifact_url" json:"artifact_url,omitempty"`
}

func (m *JavaSpec) Reset()                    { *m = JavaSpec{} }
func (m *JavaSpec) String() string            { return proto.CompactTextString(m) }
func (*JavaSpec) ProtoMessage()               {}
func (*JavaSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DockerSpec struct {
	TarSums     []string `protobuf:"bytes,1,rep,name=tar_sums" json:"tar_sums,omitempty"`
	ManifestUrl string   `protobuf:"bytes,2,opt,name=manifest_url" json:"manifest_url,omitempty"`
}

func (m *DockerSpec) Reset()                    { *m = DockerSpec{} }
func (m *DockerSpec) String() string            { return proto.CompactTextString(m) }
func (*DockerSpec) ProtoMessage()               {}
func (*DockerSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type PhpSpec struct {
	DownloadUrl string `protobuf:"bytes,1,opt,name=download_url" json:"download_url,omitempty"`
	Shasum      string `protobuf:"bytes,2,opt,name=shasum" json:"shasum,omitempty"`
}

func (m *PhpSpec) Reset()                    { *m = PhpSpec{} }
func (m *PhpSpec) String() string            { return proto.CompactTextString(m) }
func (*PhpSpec) ProtoMessage()               {}
func (*PhpSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type NpmSpec struct {
	Description string   `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	ArtifactId  string   `protobuf:"bytes,2,opt,name=artifact_id" json:"artifact_id,omitempty"`
	Shasum      string   `protobuf:"bytes,3,opt,name=shasum" json:"shasum,omitempty"`
	Keywords    []string `protobuf:"bytes,4,rep,name=keywords" json:"keywords,omitempty"`
	ArtifactUrl string   `protobuf:"bytes,5,opt,name=artifact_url" json:"artifact_url,omitempty"`
}

func (m *NpmSpec) Reset()                    { *m = NpmSpec{} }
func (m *NpmSpec) String() string            { return proto.CompactTextString(m) }
func (*NpmSpec) ProtoMessage()               {}
func (*NpmSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*SearchRequest)(nil), "artifactory.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "artifactory.SearchResponse")
	proto.RegisterType((*ListRequest)(nil), "artifactory.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "artifactory.ListResponse")
	proto.RegisterType((*DescribeRequest)(nil), "artifactory.DescribeRequest")
	proto.RegisterType((*DescribeResponse)(nil), "artifactory.DescribeResponse")
	proto.RegisterType((*Artifact)(nil), "artifactory.Artifact")
	proto.RegisterType((*JavaSpec)(nil), "artifactory.JavaSpec")
	proto.RegisterType((*DockerSpec)(nil), "artifactory.DockerSpec")
	proto.RegisterType((*PhpSpec)(nil), "artifactory.PhpSpec")
	proto.RegisterType((*NpmSpec)(nil), "artifactory.NpmSpec")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Artifacts service

type ArtifactsClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
}

type artifactsClient struct {
	cc *grpc.ClientConn
}

func NewArtifactsClient(cc *grpc.ClientConn) ArtifactsClient {
	return &artifactsClient{cc}
}

func (c *artifactsClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/artifactory.Artifacts/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/artifactory.Artifacts/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := grpc.Invoke(ctx, "/artifactory.Artifacts/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Artifacts service

type ArtifactsServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
}

func RegisterArtifactsServer(s *grpc.Server, srv ArtifactsServer) {
	s.RegisterService(&_Artifacts_serviceDesc, srv)
}

func _Artifacts_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactory.Artifacts/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artifacts_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactory.Artifacts/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artifacts_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifactory.Artifacts/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Artifacts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "artifactory.Artifacts",
	HandlerType: (*ArtifactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Artifacts_Search_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Artifacts_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Artifacts_Describe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func init() { proto.RegisterFile("artifact.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x59, 0xff, 0xa6, 0xa7, 0x5d, 0x37, 0x99, 0x01, 0x21, 0x0c, 0x84, 0x82, 0xa6, 0xae,
	0x02, 0x12, 0xd8, 0xe0, 0x8a, 0x2b, 0xd0, 0x24, 0x10, 0x42, 0x08, 0xd1, 0x1b, 0x04, 0x17, 0x95,
	0x97, 0xb8, 0x6d, 0x68, 0x13, 0x1b, 0x3b, 0xed, 0x54, 0x4d, 0xbb, 0x41, 0x7b, 0x03, 0x1e, 0x8d,
	0x57, 0xe0, 0x09, 0x78, 0x02, 0x1c, 0x3b, 0x6e, 0x17, 0x29, 0x83, 0x5d, 0x70, 0x13, 0xd9, 0xc7,
	0x9f, 0xcf, 0xf7, 0x8b, 0x8f, 0x8f, 0xa1, 0x8b, 0x79, 0x1a, 0x8d, 0x70, 0x90, 0x7a, 0x8c, 0xd3,
	0x94, 0xa2, 0xb6, 0x99, 0x53, 0xbe, 0x74, 0x76, 0xc7, 0x94, 0x8e, 0x67, 0xc4, 0xc7, 0x2c, 0xf2,
	0x71, 0x92, 0xd0, 0x14, 0xa7, 0x11, 0x4d, 0x84, 0x96, 0x3a, 0x37, 0xb3, 0x70, 0x98, 0x2e, 0x19,
	0x11, 0xbe, 0xfa, 0xea, 0xb8, 0xfb, 0x08, 0x36, 0x07, 0x04, 0xf3, 0x60, 0xf2, 0x91, 0x7c, 0x9b,
	0x13, 0x91, 0xa2, 0x4d, 0xa8, 0xcb, 0x01, 0x5f, 0xda, 0x1b, 0xf7, 0x37, 0xf6, 0x5b, 0xa8, 0x03,
	0xb5, 0x4c, 0x6e, 0x57, 0xb2, 0x99, 0xfb, 0x19, 0xba, 0x46, 0x2d, 0x98, 0x4c, 0x4e, 0xd0, 0x3d,
	0x68, 0x08, 0xe9, 0x34, 0x17, 0x4a, 0xdf, 0x3e, 0xe8, 0x7a, 0xda, 0xc4, 0x1b, 0xa8, 0x28, 0xda,
	0x87, 0x96, 0x81, 0x14, 0x32, 0x49, 0x55, 0x4a, 0x6e, 0x78, 0x17, 0xb0, 0xbd, 0x97, 0xf9, 0xd8,
	0xed, 0x43, 0xfb, 0x5d, 0x24, 0x52, 0xc3, 0x61, 0x8c, 0x57, 0x18, 0x09, 0x8e, 0x0d, 0xc6, 0x27,
	0xe8, 0x68, 0xe9, 0x7f, 0x87, 0x78, 0x08, 0x5b, 0x47, 0x44, 0x04, 0x3c, 0x3a, 0x26, 0x06, 0x04,
	0xa0, 0x12, 0x85, 0xda, 0xb8, 0x08, 0xe5, 0x7e, 0x81, 0xed, 0xb5, 0xf8, 0x8a, 0x28, 0x3d, 0xb0,
	0x8c, 0xb1, 0xca, 0x79, 0x29, 0xc9, 0x79, 0x05, 0x2c, 0x33, 0xc9, 0x19, 0x4a, 0x8e, 0x02, 0x6d,
	0x41, 0x73, 0x41, 0xb8, 0x90, 0x95, 0xb6, 0xab, 0x2a, 0xe0, 0x00, 0x9a, 0x61, 0x91, 0x0e, 0x63,
	0x1a, 0x46, 0xa3, 0x88, 0x84, 0xc3, 0x34, 0x92, 0xe2, 0x5a, 0x01, 0xbf, 0xae, 0x66, 0x7b, 0x50,
	0xfb, 0x8a, 0x17, 0xd8, 0x6e, 0x94, 0x60, 0xbc, 0x95, 0x0b, 0x03, 0x46, 0x82, 0x37, 0xd7, 0x50,
	0x1f, 0x1a, 0x21, 0x0d, 0xa6, 0x84, 0xdb, 0x4d, 0x25, 0xbc, 0x55, 0x10, 0x1e, 0xa9, 0xa5, 0x5c,
	0xfa, 0x00, 0xaa, 0x6c, 0xc2, 0x6c, 0x4b, 0xe9, 0x76, 0x0a, 0xba, 0x0f, 0x13, 0xb6, 0x16, 0x25,
	0x2c, 0xb6, 0x5b, 0x25, 0xa2, 0xf7, 0x2c, 0xd6, 0xa2, 0x57, 0x4d, 0xa8, 0x0b, 0x39, 0x12, 0xee,
	0x6b, 0xb0, 0x0c, 0x0b, 0xda, 0x06, 0x6b, 0xcc, 0xe9, 0x9c, 0x0d, 0x57, 0x67, 0x71, 0x1d, 0x56,
	0x2d, 0x30, 0x5c, 0x15, 0x69, 0x07, 0x3a, 0xab, 0xe0, 0x9c, 0xcf, 0xf4, 0xb9, 0xb8, 0xcf, 0x00,
	0xd6, 0xac, 0x59, 0xaa, 0x14, 0xf3, 0xa1, 0x98, 0xc7, 0x59, 0xa1, 0xaa, 0x7a, 0x57, 0x8c, 0x93,
	0x68, 0x24, 0x4b, 0xae, 0x76, 0xe9, 0x9b, 0xe6, 0x43, 0x33, 0x27, 0xcf, 0x04, 0x21, 0x3d, 0x49,
	0x66, 0x14, 0x87, 0x4a, 0xa0, 0x09, 0xba, 0xb2, 0xde, 0x13, 0x2c, 0xf3, 0xe4, 0x1b, 0xa6, 0xd0,
	0xcc, 0xff, 0x22, 0x83, 0x0b, 0xd5, 0xf5, 0x60, 0x59, 0x23, 0xfe, 0x8d, 0x78, 0x9d, 0x44, 0xd7,
	0x50, 0xd2, 0x4d, 0xc9, 0xf2, 0x84, 0xf2, 0x50, 0xc8, 0xca, 0x55, 0x4b, 0xfe, 0x49, 0x55, 0xf0,
	0xe0, 0x77, 0x05, 0x5a, 0xe6, 0x8e, 0x08, 0xc4, 0xa0, 0xa1, 0x9b, 0x13, 0x39, 0x85, 0x53, 0x2d,
	0xf4, 0xb7, 0x73, 0xa7, 0x74, 0x4d, 0xdf, 0x5e, 0xf7, 0xf1, 0xf7, 0x9f, 0xbf, 0x7e, 0x54, 0x7a,
	0x68, 0x4f, 0xbe, 0x22, 0x4c, 0x04, 0x34, 0xcc, 0x9f, 0x93, 0xf5, 0x0e, 0x7f, 0xf1, 0xc4, 0x7b,
	0xea, 0x0b, 0xed, 0x33, 0x83, 0x5a, 0xd6, 0x87, 0xc8, 0x2e, 0xe4, 0xbc, 0xd0, 0xc5, 0xce, 0xed,
	0x92, 0x95, 0xdc, 0xcb, 0x57, 0x5e, 0x7d, 0xd4, 0xfb, 0x87, 0x97, 0x09, 0xa0, 0xf3, 0x0d, 0xb0,
	0x4c, 0xbf, 0xa1, 0xdd, 0xe2, 0x2d, 0x2c, 0xf6, 0xac, 0x73, 0xf7, 0x92, 0xd5, 0xdc, 0xfa, 0x85,
	0xb2, 0x7e, 0x8e, 0x0e, 0xaf, 0x68, 0xed, 0x9f, 0x46, 0xe1, 0x99, 0x7f, 0x9a, 0xf5, 0xce, 0xd9,
	0x71, 0x43, 0x3d, 0x9c, 0x87, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x7f, 0xc7, 0xc1, 0x8d,
	0x05, 0x00, 0x00,
}
