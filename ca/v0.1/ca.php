<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: ca.proto
//   Date: 2016-04-19 16:27:20

namespace ca {

  class CertificateCreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $csr = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ca.CertificateCreateRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING csr = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "csr";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ca\CertificateCreateRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ca\CertificateCreateRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <csr> has a value
     *
     * @return boolean
     */
    public function hasCsr(){
      return $this->_has(2);
    }
    
    /**
     * Clear <csr> value
     *
     * @return \ca\CertificateCreateRequest
     */
    public function clearCsr(){
      return $this->_clear(2);
    }
    
    /**
     * Get <csr> value
     *
     * @return string
     */
    public function getCsr(){
      return $this->_get(2);
    }
    
    /**
     * Set <csr> value
     *
     * @param string $value
     * @return \ca\CertificateCreateRequest
     */
    public function setCsr( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ca {

  class CertificateCreateResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $phid = null;
    
    /**  @var string */
    public $cert = null;
    
    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $root = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ca.CertificateCreateResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING phid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES cert = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cert";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES key = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES root = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "root";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \ca\CertificateCreateResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \ca\CertificateCreateResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <phid> has a value
     *
     * @return boolean
     */
    public function hasPhid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <phid> value
     *
     * @return \ca\CertificateCreateResponse
     */
    public function clearPhid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <phid> value
     *
     * @return string
     */
    public function getPhid(){
      return $this->_get(2);
    }
    
    /**
     * Set <phid> value
     *
     * @param string $value
     * @return \ca\CertificateCreateResponse
     */
    public function setPhid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cert> has a value
     *
     * @return boolean
     */
    public function hasCert(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cert> value
     *
     * @return \ca\CertificateCreateResponse
     */
    public function clearCert(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cert> value
     *
     * @return string
     */
    public function getCert(){
      return $this->_get(3);
    }
    
    /**
     * Set <cert> value
     *
     * @param string $value
     * @return \ca\CertificateCreateResponse
     */
    public function setCert( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(4);
    }
    
    /**
     * Clear <key> value
     *
     * @return \ca\CertificateCreateResponse
     */
    public function clearKey(){
      return $this->_clear(4);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(4);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \ca\CertificateCreateResponse
     */
    public function setKey( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <root> has a value
     *
     * @return boolean
     */
    public function hasRoot(){
      return $this->_has(5);
    }
    
    /**
     * Clear <root> value
     *
     * @return \ca\CertificateCreateResponse
     */
    public function clearRoot(){
      return $this->_clear(5);
    }
    
    /**
     * Get <root> value
     *
     * @return string
     */
    public function getRoot(){
      return $this->_get(5);
    }
    
    /**
     * Set <root> value
     *
     * @param string $value
     * @return \ca\CertificateCreateResponse
     */
    public function setRoot( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace ca {

  class AuthorityCertificateClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param ca\CertificateCreateRequest $input
     */
    public function Create(\ca\CertificateCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ca.AuthorityCertificate/Create', $argument, '\ca\CertificateCreateResponse::deserialize', $metadata, $options);
    }
  }
}
namespace ca {

  class ClientCertificateClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param ca\CertificateCreateRequest $input
     */
    public function Create(\ca\CertificateCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ca.ClientCertificate/Create', $argument, '\ca\CertificateCreateResponse::deserialize', $metadata, $options);
    }
  }
}
