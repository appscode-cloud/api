syntax = "proto3";

package dtypes;

// The canonical error codes for AppsCode APIs.
// The framework related errors code are defined here.
// Application specific error codes will define as enum
// in the application service.

// Available Next Id 9.
enum StatusCode {
    // Not an error. Returned on success.
    // Similar to HTTP Status code 2**.
    OK = 0;

    // The request does not have valid authentication credentials for the
    // operation. Similar to HTTP status code 401.
    UNAUTHORIZED = 1;

    // The request contains invalid arguments.
    // Similar to HTTP status code 400
    BADREQUEST = 2;

    // The caller does not have permission to execute the specified
    // operation. Reserved For further use.
    // Similar to HTTP Status code 403
    PERMISSION_DENIED = 3;

    // Requested entity not found.
    // Similar to HTTP status code 404
    NOT_FOUND = 4;

    // The operation is not implemented or is not supported/enabled
    // Similar to HTTP status code 501
    UNIMPLEMENTED = 5;

    // Internal errors. This means that some invariants expected by the
    // underlying system have been broken.
    // Similar to HTTP status code 500
    INTERNAL = 6;

    // External Server Refusus Connection or Sends Invalid Data.
    EXTERNAL = 7;

    // Unknown error.
    // Errors raised by APIs that do not return enough error information
    // may be converted to this error.
    // Similar to HTTP status code 500
    UNKNOWN_ERROR = 8;
}


// The `Status` type defines an logical stats of the response message.
// It contains 4 feilds.
// code should be an enum value of [api.StatusCode] or an application
// specific error code defined by application service. All OK response
// will return [StatusCode.Ok](0). Other codes will marked as error
// and treated as so. message is user faceing information targeted to
// user. It will display any information sends from server to users.
// Both of success and errors can contains message for users.
// Help Contains help url to display to user for further helping with
// the tasks. Description field is of type `Any` to include the developer
// faceing stacktrace of the request. Those will be logged in a file
// that will help debug the issue in support mode if nessassry.

// Next Id 5.
message Status {
    // Response status code of type [api.StatusCode]
    string code = 1;

    // User facing message.
    string message = 2;

    // Optional. Help link if there is an error.
    Help help = 3;

    // A list of messages that carry the error details.  There will be a
    // common set of message types for APIs to use.
    repeated Any details = 4;
}


// Provides links to documentation or for performing an out of band action.
// Next Id 3;
message Help {
    // Describe what link offers
    string description = 1;

    // The URL of The link.
    string url = 2;
}

// Basic Error details message to send in response. Application specific
// error messages can be provided.
message ErrorDetails {
    string requested_resource = 1;
    string stacktrace = 2;
}


// Types for long running operation. usually called as jobs.

// Available Next ID: 6
message LongRunningResponse {
    Status status = 1;
    string type_id = 2;
    string job_id = 3;
    string job_type = 4;
}


// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// `Any` contains an arbitrary serialized message along with a URL
// that describes the type of the serialized message.
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the the `@type`
// field. Example (for message [google.protobuf.Duration][google.protobuf.Duration]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
//
message Any {
    // A URL/resource name whose content describes the type of the
    // serialized message.
    //
    // For URLs which use the schema `http`, `https`, or no schema, the
    // following restrictions and interpretations apply:
    //
    // * If no schema is provided, `https` is assumed.
    // * The last segment of the URL's path must represent the fully
    //   qualified name of the type (as in `path/google.protobuf.Duration`).
    // * An HTTP GET on the URL must yield a [google.protobuf.Type][google.protobuf.Type]
    //   value in binary format, or produce an error.
    // * Applications are allowed to cache lookup results based on the
    //   URL, or have them precompiled into a binary to avoid any
    //   lookup. Therefore, binary compatibility needs to be preserved
    //   on changes to types. (Use versioned type names to manage
    //   breaking changes.)
    //
    // Schemas other than `http`, `https` (or the empty schema) might be
    // used with implementation specific semantics.
    //
    string type_url = 1;

    // Must be valid serialized data of the above specified type.
    bytes value = 2;
}

// Void Requests and response to use with other types.
message VoidRequest{}
message VoidResponse {
    Status status = 1;
}