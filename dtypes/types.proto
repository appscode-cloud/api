syntax = "proto3";

package dtypes;

import "google/protobuf/any.proto";

// The canonical error codes for AppsCode APIs.
// The framework related errors code are defined here.
// Application specific error codes will define as enum
// in the application service.

// Available Next Id 9.
enum StatusCode {
    // Not an error. Returned on success.
    // Similar to HTTP Status code 2**.
    OK = 0;

    // The request does not have valid authentication credentials for the
    // operation. Similar to HTTP status code 401.
    UNAUTHORIZED = 1;

    // The request contains invalid arguments.
    // Similar to HTTP status code 400
    BADREQUEST = 2;

    // The caller does not have permission to execute the specified
    // operation. Reserved For further use.
    // Similar to HTTP Status code 403
    PERMISSION_DENIED = 3;

    // Requested entity not found.
    // Similar to HTTP status code 404
    NOT_FOUND = 4;

    // The operation is not implemented or is not supported/enabled
    // Similar to HTTP status code 501
    UNIMPLEMENTED = 5;

    // Internal errors. This means that some invariants expected by the
    // underlying system have been broken.
    // Similar to HTTP status code 500
    INTERNAL = 6;

    // External Server Refuses Connection or Sends Invalid Data.
    EXTERNAL = 7;

    // The response contains invalid arguments.
    BAD_RESPONSE = 8;

    // Unknown error.
    // Errors raised by APIs that do not return enough error information
    // may be converted to this error.
    // Similar to HTTP status code 500
    UNKNOWN_ERROR = 9;
}


// The `Status` type defines an logical stats of the response message.
// It contains 4 feilds.
// code should be an enum value of [api.StatusCode] or an application
// specific error code defined by application service. All OK response
// will return [StatusCode.Ok](0). Other codes will marked as error
// and treated as so. message is user faceing information targeted to
// user. It will display any information sends from server to users.
// Both of success and errors can contains message for users.
// Help Contains help url to display to user for further helping with
// the tasks. Description field is of type `Any` to include the developer
// faceing stacktrace of the request. Those will be logged in a file
// that will help debug the issue in support mode if nessassry.

// Next Id 5.
message Status {
    // Response status code of type [api.StatusCode]
    string code = 1;

    // User facing message.
    string message = 2;

    // Optional. Help link if there is an error.
    Help help = 3;

    // A list of messages that carry the error details.  There will be a
    // common set of message types for APIs to use.
    repeated google.protobuf.Any details = 4;
}


// Provides links to documentation or for performing an out of band action.
// Next Id 3;
message Help {
    // Describe what link offers
    string description = 1;

    // The URL of The link.
    string url = 2;
}

// Basic Error details message to send in response. Application specific
// error messages can be provided.
message ErrorDetails {
    string requested_resource = 1;
    string stacktrace = 2;
}


// Types for long running operation. usually called as jobs.

// Available Next ID: 6
message LongRunningResponse {
    Status status = 1;
    string type_id = 2;
    string job_id = 3;
    string job_type = 4;
}

// Void Requests and response to use with other types.
message VoidRequest{}

message VoidResponse {
    Status status = 1;
}