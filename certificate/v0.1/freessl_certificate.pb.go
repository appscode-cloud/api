// Code generated by protoc-gen-go.
// source: freessl_certificate.proto
// DO NOT EDIT!

package certificate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FreeSSLCertificateRegisterRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *FreeSSLCertificateRegisterRequest) Reset()         { *m = FreeSSLCertificateRegisterRequest{} }
func (m *FreeSSLCertificateRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*FreeSSLCertificateRegisterRequest) ProtoMessage()    {}
func (*FreeSSLCertificateRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0}
}

type FreeSSLCertificateRegisterResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Phid   string         `protobuf:"bytes,2,opt,name=phid" json:"phid,omitempty"`
}

func (m *FreeSSLCertificateRegisterResponse) Reset()         { *m = FreeSSLCertificateRegisterResponse{} }
func (m *FreeSSLCertificateRegisterResponse) String() string { return proto.CompactTextString(m) }
func (*FreeSSLCertificateRegisterResponse) ProtoMessage()    {}
func (*FreeSSLCertificateRegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1}
}

func (m *FreeSSLCertificateRegisterResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type FreeSSLCertificateListResponse struct {
	Status       *dtypes.Status        `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Certificates []*FreeSSLCertificate `protobuf:"bytes,2,rep,name=certificates" json:"certificates,omitempty"`
}

func (m *FreeSSLCertificateListResponse) Reset()                    { *m = FreeSSLCertificateListResponse{} }
func (m *FreeSSLCertificateListResponse) String() string            { return proto.CompactTextString(m) }
func (*FreeSSLCertificateListResponse) ProtoMessage()               {}
func (*FreeSSLCertificateListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *FreeSSLCertificateListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FreeSSLCertificateListResponse) GetCertificates() []*FreeSSLCertificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type FreeSSLCertificateDescribeResponse struct {
	Status      *dtypes.Status      `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Certificate *FreeSSLCertificate `protobuf:"bytes,2,opt,name=certificate" json:"certificate,omitempty"`
}

func (m *FreeSSLCertificateDescribeResponse) Reset()         { *m = FreeSSLCertificateDescribeResponse{} }
func (m *FreeSSLCertificateDescribeResponse) String() string { return proto.CompactTextString(m) }
func (*FreeSSLCertificateDescribeResponse) ProtoMessage()    {}
func (*FreeSSLCertificateDescribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3}
}

func (m *FreeSSLCertificateDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FreeSSLCertificateDescribeResponse) GetCertificate() *FreeSSLCertificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type FreeSSLCertificate struct {
	Phid       string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CommonName string `protobuf:"bytes,3,opt,name=common_name,json=commonName" json:"common_name,omitempty"`
	IssuedBy   string `protobuf:"bytes,4,opt,name=issued_by,json=issuedBy" json:"issued_by,omitempty"`
	ValidFrom  string `protobuf:"bytes,5,opt,name=valid_from,json=validFrom" json:"valid_from,omitempty"`
	ExpireDate string `protobuf:"bytes,6,opt,name=expire_date,json=expireDate" json:"expire_date,omitempty"`
	// those feilds will not included into list response.
	// only describe response will include the underlying
	// feilds.
	Sans         []string `protobuf:"bytes,7,rep,name=sans" json:"sans,omitempty"`
	Cert         string   `protobuf:"bytes,8,opt,name=cert" json:"cert,omitempty"`
	Key          string   `protobuf:"bytes,9,opt,name=key" json:"key,omitempty"`
	Version      int32    `protobuf:"varint,10,opt,name=version" json:"version,omitempty"`
	SerialNumber string   `protobuf:"bytes,11,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
}

func (m *FreeSSLCertificate) Reset()                    { *m = FreeSSLCertificate{} }
func (m *FreeSSLCertificate) String() string            { return proto.CompactTextString(m) }
func (*FreeSSLCertificate) ProtoMessage()               {}
func (*FreeSSLCertificate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type FreeSSLCertificateCreateRequest struct {
	Name       string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CommonName string   `protobuf:"bytes,2,opt,name=common_name,json=commonName" json:"common_name,omitempty"`
	San        []string `protobuf:"bytes,3,rep,name=san" json:"san,omitempty"`
	Bundle     bool     `protobuf:"varint,4,opt,name=bundle" json:"bundle,omitempty"`
	KeyData    string   `protobuf:"bytes,5,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
}

func (m *FreeSSLCertificateCreateRequest) Reset()                    { *m = FreeSSLCertificateCreateRequest{} }
func (m *FreeSSLCertificateCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*FreeSSLCertificateCreateRequest) ProtoMessage()               {}
func (*FreeSSLCertificateCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type FreeSSLCertificateRevokeRequest struct {
	AccountPhid string `protobuf:"bytes,1,opt,name=account_phid,json=accountPhid" json:"account_phid,omitempty"`
	CertPhid    string `protobuf:"bytes,2,opt,name=cert_phid,json=certPhid" json:"cert_phid,omitempty"`
}

func (m *FreeSSLCertificateRevokeRequest) Reset()                    { *m = FreeSSLCertificateRevokeRequest{} }
func (m *FreeSSLCertificateRevokeRequest) String() string            { return proto.CompactTextString(m) }
func (*FreeSSLCertificateRevokeRequest) ProtoMessage()               {}
func (*FreeSSLCertificateRevokeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type FreeSSLCertificateRenewRequest struct {
	AccountPhid string `protobuf:"bytes,1,opt,name=account_phid,json=accountPhid" json:"account_phid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CertPhid    string `protobuf:"bytes,3,opt,name=cert_phid,json=certPhid" json:"cert_phid,omitempty"`
}

func (m *FreeSSLCertificateRenewRequest) Reset()                    { *m = FreeSSLCertificateRenewRequest{} }
func (m *FreeSSLCertificateRenewRequest) String() string            { return proto.CompactTextString(m) }
func (*FreeSSLCertificateRenewRequest) ProtoMessage()               {}
func (*FreeSSLCertificateRenewRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type FreeSSLCertificateRenewResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Cert   string         `protobuf:"bytes,2,opt,name=cert" json:"cert,omitempty"`
}

func (m *FreeSSLCertificateRenewResponse) Reset()                    { *m = FreeSSLCertificateRenewResponse{} }
func (m *FreeSSLCertificateRenewResponse) String() string            { return proto.CompactTextString(m) }
func (*FreeSSLCertificateRenewResponse) ProtoMessage()               {}
func (*FreeSSLCertificateRenewResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *FreeSSLCertificateRenewResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type FreeSSLCertificateDeleteRequest struct {
	Cert string `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
}

func (m *FreeSSLCertificateDeleteRequest) Reset()                    { *m = FreeSSLCertificateDeleteRequest{} }
func (m *FreeSSLCertificateDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*FreeSSLCertificateDeleteRequest) ProtoMessage()               {}
func (*FreeSSLCertificateDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type FreeSSLCertificateDescribeRequest struct {
	Cert string `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
}

func (m *FreeSSLCertificateDescribeRequest) Reset()         { *m = FreeSSLCertificateDescribeRequest{} }
func (m *FreeSSLCertificateDescribeRequest) String() string { return proto.CompactTextString(m) }
func (*FreeSSLCertificateDescribeRequest) ProtoMessage()    {}
func (*FreeSSLCertificateDescribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{10}
}

type FreeSSLCertificateDeployRequest struct {
	Cert        string `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	SecretName  string `protobuf:"bytes,2,opt,name=secret_name,json=secretName" json:"secret_name,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	Namespace   string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *FreeSSLCertificateDeployRequest) Reset()         { *m = FreeSSLCertificateDeployRequest{} }
func (m *FreeSSLCertificateDeployRequest) String() string { return proto.CompactTextString(m) }
func (*FreeSSLCertificateDeployRequest) ProtoMessage()    {}
func (*FreeSSLCertificateDeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{11}
}

func init() {
	proto.RegisterType((*FreeSSLCertificateRegisterRequest)(nil), "certificate.FreeSSLCertificateRegisterRequest")
	proto.RegisterType((*FreeSSLCertificateRegisterResponse)(nil), "certificate.FreeSSLCertificateRegisterResponse")
	proto.RegisterType((*FreeSSLCertificateListResponse)(nil), "certificate.FreeSSLCertificateListResponse")
	proto.RegisterType((*FreeSSLCertificateDescribeResponse)(nil), "certificate.FreeSSLCertificateDescribeResponse")
	proto.RegisterType((*FreeSSLCertificate)(nil), "certificate.FreeSSLCertificate")
	proto.RegisterType((*FreeSSLCertificateCreateRequest)(nil), "certificate.FreeSSLCertificateCreateRequest")
	proto.RegisterType((*FreeSSLCertificateRevokeRequest)(nil), "certificate.FreeSSLCertificateRevokeRequest")
	proto.RegisterType((*FreeSSLCertificateRenewRequest)(nil), "certificate.FreeSSLCertificateRenewRequest")
	proto.RegisterType((*FreeSSLCertificateRenewResponse)(nil), "certificate.FreeSSLCertificateRenewResponse")
	proto.RegisterType((*FreeSSLCertificateDeleteRequest)(nil), "certificate.FreeSSLCertificateDeleteRequest")
	proto.RegisterType((*FreeSSLCertificateDescribeRequest)(nil), "certificate.FreeSSLCertificateDescribeRequest")
	proto.RegisterType((*FreeSSLCertificateDeployRequest)(nil), "certificate.FreeSSLCertificateDeployRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for FreeSSLCertificates service

type FreeSSLCertificatesClient interface {
	Register(ctx context.Context, in *FreeSSLCertificateRegisterRequest, opts ...grpc.CallOption) (*FreeSSLCertificateRegisterResponse, error)
	List(ctx context.Context, in *dtypes.VoidRequest, opts ...grpc.CallOption) (*FreeSSLCertificateListResponse, error)
	Describe(ctx context.Context, in *FreeSSLCertificateDescribeRequest, opts ...grpc.CallOption) (*FreeSSLCertificateDescribeResponse, error)
	Create(ctx context.Context, in *FreeSSLCertificateCreateRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Revoke(ctx context.Context, in *FreeSSLCertificateRevokeRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Renew(ctx context.Context, in *FreeSSLCertificateRenewRequest, opts ...grpc.CallOption) (*FreeSSLCertificateRenewResponse, error)
	Delete(ctx context.Context, in *FreeSSLCertificateDeleteRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Deploy(ctx context.Context, in *FreeSSLCertificateDeployRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type freeSSLCertificatesClient struct {
	cc *grpc.ClientConn
}

func NewFreeSSLCertificatesClient(cc *grpc.ClientConn) FreeSSLCertificatesClient {
	return &freeSSLCertificatesClient{cc}
}

func (c *freeSSLCertificatesClient) Register(ctx context.Context, in *FreeSSLCertificateRegisterRequest, opts ...grpc.CallOption) (*FreeSSLCertificateRegisterResponse, error) {
	out := new(FreeSSLCertificateRegisterResponse)
	err := grpc.Invoke(ctx, "/certificate.FreeSSLCertificates/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeSSLCertificatesClient) List(ctx context.Context, in *dtypes.VoidRequest, opts ...grpc.CallOption) (*FreeSSLCertificateListResponse, error) {
	out := new(FreeSSLCertificateListResponse)
	err := grpc.Invoke(ctx, "/certificate.FreeSSLCertificates/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeSSLCertificatesClient) Describe(ctx context.Context, in *FreeSSLCertificateDescribeRequest, opts ...grpc.CallOption) (*FreeSSLCertificateDescribeResponse, error) {
	out := new(FreeSSLCertificateDescribeResponse)
	err := grpc.Invoke(ctx, "/certificate.FreeSSLCertificates/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeSSLCertificatesClient) Create(ctx context.Context, in *FreeSSLCertificateCreateRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/certificate.FreeSSLCertificates/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeSSLCertificatesClient) Revoke(ctx context.Context, in *FreeSSLCertificateRevokeRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/certificate.FreeSSLCertificates/Revoke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeSSLCertificatesClient) Renew(ctx context.Context, in *FreeSSLCertificateRenewRequest, opts ...grpc.CallOption) (*FreeSSLCertificateRenewResponse, error) {
	out := new(FreeSSLCertificateRenewResponse)
	err := grpc.Invoke(ctx, "/certificate.FreeSSLCertificates/Renew", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeSSLCertificatesClient) Delete(ctx context.Context, in *FreeSSLCertificateDeleteRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/certificate.FreeSSLCertificates/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeSSLCertificatesClient) Deploy(ctx context.Context, in *FreeSSLCertificateDeployRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/certificate.FreeSSLCertificates/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FreeSSLCertificates service

type FreeSSLCertificatesServer interface {
	Register(context.Context, *FreeSSLCertificateRegisterRequest) (*FreeSSLCertificateRegisterResponse, error)
	List(context.Context, *dtypes.VoidRequest) (*FreeSSLCertificateListResponse, error)
	Describe(context.Context, *FreeSSLCertificateDescribeRequest) (*FreeSSLCertificateDescribeResponse, error)
	Create(context.Context, *FreeSSLCertificateCreateRequest) (*dtypes.VoidResponse, error)
	Revoke(context.Context, *FreeSSLCertificateRevokeRequest) (*dtypes.VoidResponse, error)
	Renew(context.Context, *FreeSSLCertificateRenewRequest) (*FreeSSLCertificateRenewResponse, error)
	Delete(context.Context, *FreeSSLCertificateDeleteRequest) (*dtypes.VoidResponse, error)
	Deploy(context.Context, *FreeSSLCertificateDeployRequest) (*dtypes.VoidResponse, error)
}

func RegisterFreeSSLCertificatesServer(s *grpc.Server, srv FreeSSLCertificatesServer) {
	s.RegisterService(&_FreeSSLCertificates_serviceDesc, srv)
}

func _FreeSSLCertificates_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeSSLCertificateRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeSSLCertificatesServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.FreeSSLCertificates/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeSSLCertificatesServer).Register(ctx, req.(*FreeSSLCertificateRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeSSLCertificates_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dtypes.VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeSSLCertificatesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.FreeSSLCertificates/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeSSLCertificatesServer).List(ctx, req.(*dtypes.VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeSSLCertificates_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeSSLCertificateDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeSSLCertificatesServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.FreeSSLCertificates/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeSSLCertificatesServer).Describe(ctx, req.(*FreeSSLCertificateDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeSSLCertificates_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeSSLCertificateCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeSSLCertificatesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.FreeSSLCertificates/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeSSLCertificatesServer).Create(ctx, req.(*FreeSSLCertificateCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeSSLCertificates_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeSSLCertificateRevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeSSLCertificatesServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.FreeSSLCertificates/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeSSLCertificatesServer).Revoke(ctx, req.(*FreeSSLCertificateRevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeSSLCertificates_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeSSLCertificateRenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeSSLCertificatesServer).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.FreeSSLCertificates/Renew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeSSLCertificatesServer).Renew(ctx, req.(*FreeSSLCertificateRenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeSSLCertificates_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeSSLCertificateDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeSSLCertificatesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.FreeSSLCertificates/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeSSLCertificatesServer).Delete(ctx, req.(*FreeSSLCertificateDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeSSLCertificates_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeSSLCertificateDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeSSLCertificatesServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.FreeSSLCertificates/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeSSLCertificatesServer).Deploy(ctx, req.(*FreeSSLCertificateDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FreeSSLCertificates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "certificate.FreeSSLCertificates",
	HandlerType: (*FreeSSLCertificatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _FreeSSLCertificates_Register_Handler,
		},
		{
			MethodName: "List",
			Handler:    _FreeSSLCertificates_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _FreeSSLCertificates_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _FreeSSLCertificates_Create_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _FreeSSLCertificates_Revoke_Handler,
		},
		{
			MethodName: "Renew",
			Handler:    _FreeSSLCertificates_Renew_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FreeSSLCertificates_Delete_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _FreeSSLCertificates_Deploy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x06, 0x25, 0x4b, 0x96, 0x56, 0x6e, 0x51, 0xac, 0x5d, 0x97, 0x66, 0xfd, 0x4b, 0x17, 0x85,
	0x6b, 0x1b, 0x62, 0xeb, 0xa2, 0x28, 0xda, 0x5b, 0x6b, 0xc3, 0x27, 0xc3, 0x28, 0x68, 0xa0, 0xb7,
	0x80, 0xa1, 0xc8, 0xb1, 0x42, 0x98, 0x22, 0x19, 0x2e, 0x25, 0x47, 0x48, 0x7c, 0xc9, 0xd1, 0x40,
	0x10, 0x04, 0x39, 0xe4, 0x90, 0xc7, 0xc8, 0xa3, 0xe4, 0x15, 0xf2, 0x20, 0xd9, 0x9d, 0xa5, 0x2c,
	0xd2, 0xa2, 0x44, 0xe9, 0x22, 0x2c, 0xbf, 0xfd, 0xf9, 0x66, 0xbe, 0x99, 0xfd, 0x56, 0x64, 0xe3,
	0x3a, 0x06, 0x60, 0xcc, 0xb7, 0x1c, 0x88, 0x13, 0xef, 0xda, 0x73, 0xec, 0x04, 0xda, 0x51, 0x1c,
	0x26, 0x21, 0x6d, 0x65, 0x20, 0x6d, 0xb3, 0x1b, 0x86, 0x5d, 0x1f, 0x0c, 0x3b, 0xf2, 0x0c, 0x3b,
	0x08, 0xc2, 0xc4, 0x4e, 0xbc, 0x30, 0x60, 0x72, 0xa9, 0xb6, 0x2e, 0x60, 0x37, 0x19, 0x46, 0xc0,
	0x0c, 0xfc, 0x95, 0xb8, 0xfe, 0x17, 0xd9, 0x3b, 0xe7, 0xe7, 0x5f, 0x5d, 0x5d, 0x9c, 0x8e, 0xcf,
	0x32, 0xa1, 0xeb, 0xb1, 0x04, 0x62, 0x13, 0x9e, 0xf7, 0x81, 0x25, 0x74, 0x8d, 0xd4, 0xa0, 0x67,
	0x7b, 0xbe, 0xaa, 0xec, 0x2a, 0x07, 0x4d, 0x53, 0x7e, 0xe8, 0x4f, 0x89, 0x3e, 0x6b, 0x2b, 0x8b,
	0x38, 0x3b, 0xd0, 0x9f, 0x49, 0x9d, 0xf1, 0x50, 0xfa, 0x0c, 0x37, 0xb7, 0x4e, 0xbe, 0x6d, 0xcb,
	0x28, 0xda, 0x57, 0x88, 0x9a, 0xe9, 0x2c, 0xa5, 0x64, 0x29, 0x7a, 0xe6, 0xb9, 0x6a, 0x05, 0x29,
	0x70, 0xac, 0xbf, 0x51, 0xc8, 0xf6, 0x24, 0xc5, 0x05, 0x27, 0x58, 0xf8, 0xf8, 0x53, 0xb2, 0x92,
	0x11, 0x8b, 0x71, 0x9a, 0x2a, 0x5f, 0xbd, 0xd3, 0xce, 0x8a, 0x5a, 0x90, 0x4d, 0x6e, 0x93, 0xfe,
	0x56, 0x29, 0x4a, 0xf9, 0x0c, 0x98, 0x13, 0x7b, 0x1d, 0x58, 0x38, 0xa6, 0x7f, 0x48, 0xb6, 0x80,
	0x98, 0xf9, 0x1c, 0x21, 0x65, 0xf7, 0xe8, 0x9f, 0x2a, 0x84, 0x4e, 0xae, 0x79, 0x10, 0x53, 0x19,
	0x8b, 0x29, 0xb0, 0xc0, 0xee, 0xc1, 0x48, 0x60, 0x31, 0xa6, 0x3b, 0x3c, 0x82, 0xb0, 0xd7, 0x0b,
	0x03, 0x0b, 0xa7, 0xaa, 0x38, 0x45, 0x24, 0x74, 0x29, 0x16, 0xfc, 0x48, 0x9a, 0x1e, 0x63, 0x7d,
	0x70, 0xad, 0xce, 0x50, 0x5d, 0xc2, 0xe9, 0x86, 0x04, 0xfe, 0x1d, 0xd2, 0x2d, 0x42, 0x06, 0xb6,
	0xef, 0xb9, 0xd6, 0x75, 0x1c, 0xf6, 0xd4, 0x1a, 0xce, 0x36, 0x11, 0x39, 0xe7, 0x80, 0x38, 0x1c,
	0x5e, 0x44, 0x5e, 0x0c, 0x96, 0x2b, 0xd2, 0xab, 0xcb, 0xc3, 0x25, 0x74, 0x96, 0x46, 0xc9, 0xec,
	0x80, 0xa9, 0xcb, 0xbc, 0x16, 0x3c, 0x22, 0x31, 0x16, 0x98, 0xc8, 0x4f, 0x6d, 0xc8, 0x28, 0xc5,
	0x98, 0x7e, 0x47, 0xaa, 0x37, 0x30, 0x54, 0x9b, 0x08, 0x89, 0x21, 0x55, 0xc9, 0xf2, 0x00, 0x62,
	0xc6, 0xfb, 0x5b, 0x25, 0x1c, 0xad, 0x99, 0xa3, 0x4f, 0xba, 0x4f, 0xbe, 0x61, 0x10, 0x7b, 0xb6,
	0x6f, 0x05, 0xfd, 0x5e, 0x07, 0x62, 0xb5, 0x85, 0xbb, 0x56, 0x24, 0x78, 0x89, 0x98, 0xfe, 0x51,
	0x21, 0x3b, 0x93, 0xaa, 0x9d, 0xc6, 0x80, 0x0d, 0x2c, 0x7b, 0x7e, 0x24, 0x97, 0x32, 0x5d, 0xae,
	0xca, 0x84, 0x5c, 0x3c, 0x52, 0x9e, 0x05, 0xd7, 0x51, 0x24, 0x24, 0x86, 0x74, 0x9d, 0xd4, 0x3b,
	0xfd, 0xc0, 0xf5, 0x01, 0xd5, 0x6b, 0x98, 0xe9, 0x17, 0xdd, 0x20, 0x0d, 0x9e, 0x88, 0x50, 0xc6,
	0x4e, 0x95, 0x5b, 0xe6, 0xdf, 0x5c, 0x16, 0x5b, 0xb7, 0x8b, 0x82, 0x33, 0x61, 0x10, 0xde, 0x3c,
	0x04, 0xb7, 0x47, 0x56, 0x6c, 0xc7, 0x09, 0xfb, 0x41, 0x62, 0x65, 0xea, 0xdc, 0x4a, 0xb1, 0xff,
	0x44, 0xb9, 0x79, 0xe5, 0x84, 0x78, 0x56, 0xe6, 0x52, 0x35, 0x04, 0x20, 0x26, 0xf5, 0xa4, 0xe8,
	0x5e, 0x99, 0x10, 0xc0, 0xed, 0x02, 0x0c, 0x45, 0x0d, 0x95, 0x63, 0xad, 0x3e, 0x62, 0x7d, 0x52,
	0x9c, 0x18, 0xb2, 0x2e, 0xee, 0x16, 0xd8, 0x26, 0x95, 0x71, 0x9b, 0xe8, 0x7f, 0x14, 0x1d, 0x7f,
	0x06, 0x3e, 0xe4, 0x8a, 0x8a, 0xdb, 0x94, 0xcc, 0xb6, 0x3f, 0x8b, 0x1c, 0x70, 0x7c, 0xa7, 0xa7,
	0x6f, 0xfc, 0xa0, 0x14, 0x13, 0x46, 0x7e, 0x38, 0x9c, 0xb1, 0x4f, 0x74, 0x11, 0x03, 0x27, 0x86,
	0x24, 0xd7, 0x45, 0x12, 0xc2, 0x2e, 0xe2, 0xda, 0x3b, 0x7e, 0x5f, 0xb8, 0x68, 0xf6, 0x5a, 0xb6,
	0x52, 0x0c, 0x97, 0x6c, 0x92, 0xa6, 0x98, 0x62, 0x91, 0xed, 0x40, 0x7a, 0x2f, 0xc7, 0xc0, 0xc9,
	0x7d, 0x83, 0xac, 0x4e, 0x46, 0xc6, 0xe8, 0xbd, 0x42, 0x1a, 0x23, 0x83, 0xa6, 0xed, 0x32, 0xa3,
	0xc9, 0x3f, 0x02, 0x9a, 0x31, 0xf7, 0x7a, 0x59, 0x4b, 0x7d, 0xeb, 0xf5, 0xe7, 0x2f, 0xef, 0x2b,
	0x3f, 0xd0, 0xef, 0xf1, 0x49, 0x4a, 0x5f, 0x31, 0x63, 0xf0, 0x6b, 0xfb, 0x37, 0x23, 0xf1, 0x19,
	0xed, 0x92, 0x25, 0xe1, 0xe4, 0x74, 0x75, 0x54, 0xe2, 0xff, 0x43, 0xcf, 0x1d, 0x91, 0x1d, 0x95,
	0x90, 0x65, 0xdf, 0x80, 0x32, 0xa2, 0x77, 0x3c, 0xeb, 0x51, 0x3d, 0x4b, 0xb3, 0x7e, 0x54, 0xf8,
	0xd2, 0xac, 0x1f, 0x9b, 0xbf, 0xfe, 0x13, 0x06, 0xb3, 0x4d, 0x37, 0x0b, 0x83, 0x31, 0x5e, 0x8a,
	0xe3, 0xee, 0x68, 0x40, 0xea, 0xd2, 0x6e, 0xe8, 0x71, 0x09, 0x41, 0xce, 0x95, 0xb4, 0xb5, 0xbc,
	0x58, 0x29, 0xe7, 0x2e, 0x72, 0x6a, 0x5a, 0xb1, 0x00, 0x7f, 0x2b, 0x87, 0xf4, 0x96, 0xd4, 0xa5,
	0x83, 0x94, 0xf2, 0xe5, 0x8c, 0x66, 0x0a, 0xdf, 0x2f, 0xc8, 0xb7, 0x7f, 0xb8, 0x37, 0x23, 0x47,
	0xb4, 0x80, 0x3b, 0xca, 0x9f, 0xf0, 0x1a, 0x5e, 0x71, 0x7a, 0x54, 0x4a, 0x3c, 0xb6, 0x1f, 0xed,
	0x78, 0xbe, 0xc5, 0x8b, 0xc7, 0x13, 0x93, 0xba, 0xb4, 0x84, 0x52, 0x21, 0x72, 0xce, 0x31, 0x45,
	0x88, 0xb4, 0xd8, 0x87, 0xb3, 0x8b, 0xfd, 0x4a, 0x70, 0x0a, 0x57, 0x98, 0x83, 0x33, 0x63, 0x1e,
	0x53, 0x38, 0xdb, 0xc8, 0x79, 0xa0, 0xed, 0xcf, 0xe2, 0x34, 0x5c, 0x3c, 0x89, 0x97, 0xbe, 0x53,
	0xc7, 0x3f, 0x7a, 0xbf, 0x7f, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x44, 0x4a, 0xa3, 0xf7, 0x48, 0x0a,
	0x00, 0x00,
}
