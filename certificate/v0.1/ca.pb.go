// Code generated by protoc-gen-go.
// source: ca.proto
// DO NOT EDIT!

package certificate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Use specific requests for protos
type CACreateRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Csr  string `protobuf:"bytes,2,opt,name=csr" json:"csr,omitempty"`
}

func (m *CACreateRequest) Reset()                    { *m = CACreateRequest{} }
func (m *CACreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CACreateRequest) ProtoMessage()               {}
func (*CACreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type CACreateResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Phid   string         `protobuf:"bytes,2,opt,name=phid" json:"phid,omitempty"`
	Cert   []byte         `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert,omitempty"`
	Key    []byte         `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Root   []byte         `protobuf:"bytes,5,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *CACreateResponse) Reset()                    { *m = CACreateResponse{} }
func (m *CACreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CACreateResponse) ProtoMessage()               {}
func (*CACreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CACreateResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*CACreateRequest)(nil), "certificate.CACreateRequest")
	proto.RegisterType((*CACreateResponse)(nil), "certificate.CACreateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for CAs service

type CAsClient interface {
	Create(ctx context.Context, in *CACreateRequest, opts ...grpc.CallOption) (*CACreateResponse, error)
}

type cAsClient struct {
	cc *grpc.ClientConn
}

func NewCAsClient(cc *grpc.ClientConn) CAsClient {
	return &cAsClient{cc}
}

func (c *cAsClient) Create(ctx context.Context, in *CACreateRequest, opts ...grpc.CallOption) (*CACreateResponse, error) {
	out := new(CACreateResponse)
	err := grpc.Invoke(ctx, "/certificate.CAs/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CAs service

type CAsServer interface {
	Create(context.Context, *CACreateRequest) (*CACreateResponse, error)
}

func RegisterCAsServer(s *grpc.Server, srv CAsServer) {
	s.RegisterService(&_CAs_serviceDesc, srv)
}

func _CAs_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CACreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.CAs/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAsServer).Create(ctx, req.(*CACreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CAs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "certificate.CAs",
	HandlerType: (*CAsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CAs_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x99, 0x4e, 0x1d, 0x34, 0x2d, 0x5a, 0xb3, 0xd0, 0x30, 0x54, 0x90, 0x59, 0x88, 0xb8,
	0x48, 0xb4, 0x2e, 0x04, 0x77, 0x65, 0xde, 0x60, 0xdc, 0x0b, 0x31, 0xbd, 0xd6, 0x60, 0x9d, 0xc4,
	0xdc, 0x54, 0xe8, 0xd6, 0x95, 0x7b, 0x1f, 0xcd, 0x57, 0xf0, 0x41, 0x9c, 0x24, 0x03, 0x8a, 0xd0,
	0x4d, 0x38, 0x7c, 0xf7, 0xe7, 0xe4, 0x5c, 0xb2, 0xab, 0x24, 0xb7, 0xce, 0x78, 0x43, 0x47, 0x0a,
	0x9c, 0xd7, 0x8f, 0x5a, 0x49, 0x0f, 0xe5, 0x74, 0x69, 0xcc, 0x72, 0x05, 0x42, 0x5a, 0x2d, 0x64,
	0xdb, 0x1a, 0x2f, 0xbd, 0x36, 0x2d, 0xa6, 0xd6, 0xf2, 0x28, 0xe0, 0x85, 0xdf, 0x58, 0x40, 0x11,
	0xdf, 0xc4, 0xab, 0x1b, 0x72, 0x50, 0xcf, 0x6b, 0x07, 0xdd, 0x86, 0x06, 0x5e, 0xd7, 0x80, 0x9e,
	0x52, 0x32, 0x6c, 0xe5, 0x0b, 0xb0, 0xec, 0x34, 0x3b, 0xdf, 0x6b, 0xa2, 0xa6, 0x13, 0x92, 0x2b,
	0x74, 0x6c, 0x10, 0x51, 0x90, 0xd5, 0x47, 0x46, 0x26, 0xbf, 0x93, 0x68, 0x3b, 0x2b, 0xa0, 0x67,
	0xa4, 0xc0, 0xce, 0x77, 0x8d, 0x71, 0x78, 0x34, 0xdb, 0xe7, 0xc9, 0x92, 0xdf, 0x45, 0xda, 0xf4,
	0xd5, 0x60, 0x61, 0x9f, 0xf4, 0xa2, 0xdf, 0x17, 0x75, 0x60, 0x21, 0x0e, 0xcb, 0x3b, 0x36, 0x6e,
	0xa2, 0x0e, 0xb6, 0xcf, 0xb0, 0x61, 0xc3, 0x88, 0x82, 0x0c, 0x5d, 0xce, 0x18, 0xcf, 0x76, 0x52,
	0x57, 0xd0, 0x33, 0x20, 0x79, 0x3d, 0x47, 0x7a, 0x4f, 0x8a, 0xf4, 0x1d, 0x3a, 0xe5, 0x7f, 0x0e,
	0xc3, 0xff, 0xe5, 0x2b, 0x4f, 0xb6, 0x54, 0x53, 0x86, 0xea, 0xf8, 0xfd, 0xeb, 0xfb, 0x73, 0x70,
	0x58, 0x8d, 0x05, 0xe2, 0x4a, 0x28, 0x29, 0xde, 0x2e, 0xf9, 0xd5, 0x6d, 0x76, 0xf1, 0x50, 0xc4,
	0x8b, 0x5d, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xfa, 0x41, 0xa1, 0x80, 0x01, 0x00, 0x00,
}
