// Code generated by protoc-gen-go.
// source: tls_certificate.proto
// DO NOT EDIT!

package certificate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TLSCertificateListResponse struct {
	Status       *dtypes.Status    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Certificates []*TLSCertificate `protobuf:"bytes,2,rep,name=certificates" json:"certificates,omitempty"`
}

func (m *TLSCertificateListResponse) Reset()                    { *m = TLSCertificateListResponse{} }
func (m *TLSCertificateListResponse) String() string            { return proto.CompactTextString(m) }
func (*TLSCertificateListResponse) ProtoMessage()               {}
func (*TLSCertificateListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *TLSCertificateListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TLSCertificateListResponse) GetCertificates() []*TLSCertificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type TLSCertificateDescribeRequest struct {
}

func (m *TLSCertificateDescribeRequest) Reset()                    { *m = TLSCertificateDescribeRequest{} }
func (m *TLSCertificateDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*TLSCertificateDescribeRequest) ProtoMessage()               {}
func (*TLSCertificateDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type TLSCertificate struct {
	Phid       string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	CommonName string `protobuf:"bytes,2,opt,name=common_name" json:"common_name,omitempty"`
	IssuedBy   string `protobuf:"bytes,3,opt,name=issued_by" json:"issued_by,omitempty"`
	ValidFrom  string `protobuf:"bytes,4,opt,name=valid_from" json:"valid_from,omitempty"`
	ExpireDate string `protobuf:"bytes,5,opt,name=expire_date" json:"expire_date,omitempty"`
	// those feilds will not included into list response.
	// only describe response will include the underlying
	// feilds.
	Sans    []string `protobuf:"bytes,6,rep,name=sans" json:"sans,omitempty"`
	Cert    string   `protobuf:"bytes,7,opt,name=cert" json:"cert,omitempty"`
	Key     string   `protobuf:"bytes,8,opt,name=key" json:"key,omitempty"`
	Version int32    `protobuf:"varint,9,opt,name=version" json:"version,omitempty"`
}

func (m *TLSCertificate) Reset()                    { *m = TLSCertificate{} }
func (m *TLSCertificate) String() string            { return proto.CompactTextString(m) }
func (*TLSCertificate) ProtoMessage()               {}
func (*TLSCertificate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func init() {
	proto.RegisterType((*TLSCertificateListResponse)(nil), "certificate.TLSCertificateListResponse")
	proto.RegisterType((*TLSCertificateDescribeRequest)(nil), "certificate.TLSCertificateDescribeRequest")
	proto.RegisterType((*TLSCertificate)(nil), "certificate.TLSCertificate")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for TLSCertificates service

type TLSCertificatesClient interface {
}

type tLSCertificatesClient struct {
	cc *grpc.ClientConn
}

func NewTLSCertificatesClient(cc *grpc.ClientConn) TLSCertificatesClient {
	return &tLSCertificatesClient{cc}
}

// Server API for TLSCertificates service

type TLSCertificatesServer interface {
}

func RegisterTLSCertificatesServer(s *grpc.Server, srv TLSCertificatesServer) {
	s.RegisterService(&_TLSCertificates_serviceDesc, srv)
}

var _TLSCertificates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "certificate.TLSCertificates",
	HandlerType: (*TLSCertificatesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0x45, 0x55, 0xfa, 0xa2, 0x93, 0xaa, 0x55, 0x8d, 0x40, 0x56, 0x79, 0x55, 0x5d, 0xb1, 0x4a,
	0x45, 0xf9, 0x04, 0x58, 0x76, 0xd5, 0xb2, 0x8f, 0xdc, 0x64, 0x5a, 0x2c, 0x1a, 0xdb, 0x78, 0x9c,
	0x8a, 0x7c, 0x12, 0x7f, 0x89, 0xe3, 0x08, 0x91, 0x6c, 0x22, 0xcd, 0xc9, 0x9d, 0xeb, 0xa3, 0x81,
	0x6b, 0x77, 0xa2, 0x24, 0x45, 0xeb, 0xe4, 0x41, 0xa6, 0xc2, 0x61, 0x6c, 0xac, 0x76, 0x9a, 0x45,
	0x0d, 0x34, 0xbf, 0x3b, 0x6a, 0x7d, 0x3c, 0xe1, 0x4a, 0x18, 0xb9, 0x12, 0x4a, 0x69, 0x27, 0x9c,
	0xd4, 0x8a, 0xea, 0xe8, 0xfc, 0xa6, 0xc2, 0x99, 0x2b, 0x0d, 0xd2, 0x2a, 0x7c, 0x6b, 0xbe, 0xd4,
	0x30, 0x7f, 0xdf, 0xec, 0x5e, 0xff, 0x7b, 0x36, 0x92, 0xdc, 0x16, 0xc9, 0xf8, 0x55, 0x64, 0x0f,
	0x30, 0x20, 0xdf, 0x53, 0x10, 0xef, 0x2c, 0x3a, 0x4f, 0xd1, 0x7a, 0x12, 0xd7, 0x15, 0xf1, 0x2e,
	0x50, 0xf6, 0x0c, 0xe3, 0x86, 0x02, 0xf1, 0x8b, 0x45, 0xd7, 0xa7, 0x6e, 0xe3, 0xa6, 0x6a, 0xbb,
	0x7e, 0xf9, 0x08, 0xf7, 0x6d, 0xf2, 0x86, 0x94, 0x5a, 0xb9, 0xc7, 0x2d, 0x7e, 0x15, 0x48, 0x6e,
	0xf9, 0xd3, 0x81, 0x49, 0x3b, 0xc1, 0xc6, 0xd0, 0x33, 0x1f, 0x32, 0x0b, 0x12, 0x23, 0x76, 0x05,
	0x51, 0xaa, 0xf3, 0x5c, 0xab, 0x44, 0x89, 0x1c, 0xfd, 0x9b, 0x15, 0x9c, 0xc1, 0x48, 0x12, 0x15,
	0x98, 0x25, 0xfb, 0x92, 0x77, 0x03, 0x62, 0x00, 0x67, 0x71, 0x92, 0x59, 0x72, 0xb0, 0x3a, 0xe7,
	0xbd, 0xbf, 0x5d, 0xfc, 0x36, 0xd2, 0x62, 0x92, 0xf9, 0x62, 0xde, 0x0f, 0xd0, 0xd7, 0x93, 0x50,
	0xc4, 0x07, 0xde, 0x3e, 0x4c, 0x95, 0x3e, 0x1f, 0x86, 0x7f, 0x11, 0x74, 0x3f, 0xb1, 0xe4, 0x97,
	0x61, 0x98, 0xc2, 0xf0, 0x8c, 0x96, 0xfc, 0x59, 0xf9, 0xc8, 0x83, 0xfe, 0x7a, 0x06, 0xd3, 0xb6,
	0x2a, 0xed, 0x07, 0xe1, 0xae, 0x2f, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xae, 0xc1, 0x21,
	0xb3, 0x01, 0x00, 0x00,
}
