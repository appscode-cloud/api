// Code generated by protoc-gen-go.
// source: tls_certificate.proto
// DO NOT EDIT!

package certificate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TLSCertificateListResponse struct {
	Status       *dtypes.Status    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Certificates []*TLSCertificate `protobuf:"bytes,2,rep,name=certificates" json:"certificates,omitempty"`
}

func (m *TLSCertificateListResponse) Reset()                    { *m = TLSCertificateListResponse{} }
func (m *TLSCertificateListResponse) String() string            { return proto.CompactTextString(m) }
func (*TLSCertificateListResponse) ProtoMessage()               {}
func (*TLSCertificateListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *TLSCertificateListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TLSCertificateListResponse) GetCertificates() []*TLSCertificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type TLSCertificateDescribeResponse struct {
	Status      *dtypes.Status  `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Certificate *TLSCertificate `protobuf:"bytes,2,opt,name=certificate" json:"certificate,omitempty"`
}

func (m *TLSCertificateDescribeResponse) Reset()                    { *m = TLSCertificateDescribeResponse{} }
func (m *TLSCertificateDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*TLSCertificateDescribeResponse) ProtoMessage()               {}
func (*TLSCertificateDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *TLSCertificateDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TLSCertificateDescribeResponse) GetCertificate() *TLSCertificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type TLSCertificate struct {
	Phid       string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CommonName string `protobuf:"bytes,3,opt,name=common_name,json=commonName" json:"common_name,omitempty"`
	IssuedBy   string `protobuf:"bytes,4,opt,name=issued_by,json=issuedBy" json:"issued_by,omitempty"`
	ValidFrom  string `protobuf:"bytes,5,opt,name=valid_from,json=validFrom" json:"valid_from,omitempty"`
	ExpireDate string `protobuf:"bytes,6,opt,name=expire_date,json=expireDate" json:"expire_date,omitempty"`
	// those feilds will not included into list response.
	// only describe response will include the underlying
	// feilds.
	Sans         []string `protobuf:"bytes,7,rep,name=sans" json:"sans,omitempty"`
	Cert         string   `protobuf:"bytes,8,opt,name=cert" json:"cert,omitempty"`
	Key          string   `protobuf:"bytes,9,opt,name=key" json:"key,omitempty"`
	Version      int32    `protobuf:"varint,10,opt,name=version" json:"version,omitempty"`
	SerialNumber string   `protobuf:"bytes,11,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
}

func (m *TLSCertificate) Reset()                    { *m = TLSCertificate{} }
func (m *TLSCertificate) String() string            { return proto.CompactTextString(m) }
func (*TLSCertificate) ProtoMessage()               {}
func (*TLSCertificate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type TLSCertificateCreateRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CertData string `protobuf:"bytes,2,opt,name=cert_data,json=certData" json:"cert_data,omitempty"`
	KeyData  string `protobuf:"bytes,3,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
}

func (m *TLSCertificateCreateRequest) Reset()                    { *m = TLSCertificateCreateRequest{} }
func (m *TLSCertificateCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*TLSCertificateCreateRequest) ProtoMessage()               {}
func (*TLSCertificateCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type TLSCertificateDeleteRequest struct {
	Cert string `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
}

func (m *TLSCertificateDeleteRequest) Reset()                    { *m = TLSCertificateDeleteRequest{} }
func (m *TLSCertificateDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TLSCertificateDeleteRequest) ProtoMessage()               {}
func (*TLSCertificateDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type TLSCertificateDescribeRequest struct {
	Cert string `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
}

func (m *TLSCertificateDescribeRequest) Reset()                    { *m = TLSCertificateDescribeRequest{} }
func (m *TLSCertificateDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*TLSCertificateDescribeRequest) ProtoMessage()               {}
func (*TLSCertificateDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

type TLSCertificateDeployRequest struct {
	Cert        string `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	SecretName  string `protobuf:"bytes,2,opt,name=secret_name,json=secretName" json:"secret_name,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	Namespace   string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *TLSCertificateDeployRequest) Reset()                    { *m = TLSCertificateDeployRequest{} }
func (m *TLSCertificateDeployRequest) String() string            { return proto.CompactTextString(m) }
func (*TLSCertificateDeployRequest) ProtoMessage()               {}
func (*TLSCertificateDeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func init() {
	proto.RegisterType((*TLSCertificateListResponse)(nil), "certificate.TLSCertificateListResponse")
	proto.RegisterType((*TLSCertificateDescribeResponse)(nil), "certificate.TLSCertificateDescribeResponse")
	proto.RegisterType((*TLSCertificate)(nil), "certificate.TLSCertificate")
	proto.RegisterType((*TLSCertificateCreateRequest)(nil), "certificate.TLSCertificateCreateRequest")
	proto.RegisterType((*TLSCertificateDeleteRequest)(nil), "certificate.TLSCertificateDeleteRequest")
	proto.RegisterType((*TLSCertificateDescribeRequest)(nil), "certificate.TLSCertificateDescribeRequest")
	proto.RegisterType((*TLSCertificateDeployRequest)(nil), "certificate.TLSCertificateDeployRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for TLSCertificates service

type TLSCertificatesClient interface {
	List(ctx context.Context, in *dtypes.VoidRequest, opts ...grpc.CallOption) (*TLSCertificateListResponse, error)
	Describe(ctx context.Context, in *TLSCertificateDescribeRequest, opts ...grpc.CallOption) (*TLSCertificateDescribeResponse, error)
	Create(ctx context.Context, in *TLSCertificateCreateRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Delete(ctx context.Context, in *TLSCertificateDeleteRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Deploy(ctx context.Context, in *TLSCertificateDeployRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type tLSCertificatesClient struct {
	cc *grpc.ClientConn
}

func NewTLSCertificatesClient(cc *grpc.ClientConn) TLSCertificatesClient {
	return &tLSCertificatesClient{cc}
}

func (c *tLSCertificatesClient) List(ctx context.Context, in *dtypes.VoidRequest, opts ...grpc.CallOption) (*TLSCertificateListResponse, error) {
	out := new(TLSCertificateListResponse)
	err := grpc.Invoke(ctx, "/certificate.TLSCertificates/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tLSCertificatesClient) Describe(ctx context.Context, in *TLSCertificateDescribeRequest, opts ...grpc.CallOption) (*TLSCertificateDescribeResponse, error) {
	out := new(TLSCertificateDescribeResponse)
	err := grpc.Invoke(ctx, "/certificate.TLSCertificates/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tLSCertificatesClient) Create(ctx context.Context, in *TLSCertificateCreateRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/certificate.TLSCertificates/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tLSCertificatesClient) Delete(ctx context.Context, in *TLSCertificateDeleteRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/certificate.TLSCertificates/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tLSCertificatesClient) Deploy(ctx context.Context, in *TLSCertificateDeployRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/certificate.TLSCertificates/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TLSCertificates service

type TLSCertificatesServer interface {
	List(context.Context, *dtypes.VoidRequest) (*TLSCertificateListResponse, error)
	Describe(context.Context, *TLSCertificateDescribeRequest) (*TLSCertificateDescribeResponse, error)
	Create(context.Context, *TLSCertificateCreateRequest) (*dtypes.VoidResponse, error)
	Delete(context.Context, *TLSCertificateDeleteRequest) (*dtypes.VoidResponse, error)
	Deploy(context.Context, *TLSCertificateDeployRequest) (*dtypes.VoidResponse, error)
}

func RegisterTLSCertificatesServer(s *grpc.Server, srv TLSCertificatesServer) {
	s.RegisterService(&_TLSCertificates_serviceDesc, srv)
}

func _TLSCertificates_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dtypes.VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TLSCertificatesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.TLSCertificates/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TLSCertificatesServer).List(ctx, req.(*dtypes.VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TLSCertificates_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSCertificateDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TLSCertificatesServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.TLSCertificates/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TLSCertificatesServer).Describe(ctx, req.(*TLSCertificateDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TLSCertificates_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSCertificateCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TLSCertificatesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.TLSCertificates/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TLSCertificatesServer).Create(ctx, req.(*TLSCertificateCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TLSCertificates_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSCertificateDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TLSCertificatesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.TLSCertificates/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TLSCertificatesServer).Delete(ctx, req.(*TLSCertificateDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TLSCertificates_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSCertificateDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TLSCertificatesServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.TLSCertificates/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TLSCertificatesServer).Deploy(ctx, req.(*TLSCertificateDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TLSCertificates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "certificate.TLSCertificates",
	HandlerType: (*TLSCertificatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TLSCertificates_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _TLSCertificates_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TLSCertificates_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TLSCertificates_Delete_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _TLSCertificates_Deploy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor2 = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0x96, 0x93, 0x34, 0x97, 0x93, 0xfe, 0xfd, 0xd1, 0x70, 0x91, 0xeb, 0xb4, 0x25, 0x35, 0x88,
	0x46, 0x01, 0xc5, 0x34, 0xdd, 0x21, 0x21, 0x24, 0x1a, 0xb1, 0xaa, 0xba, 0x48, 0x11, 0x5b, 0xcb,
	0x89, 0x4f, 0xc3, 0x08, 0xc7, 0x36, 0x33, 0x4e, 0x44, 0x04, 0x6c, 0x90, 0x10, 0x2b, 0x56, 0x7d,
	0x10, 0x1e, 0x86, 0x57, 0x60, 0xc9, 0x43, 0x30, 0x17, 0x87, 0xd8, 0x45, 0x4e, 0x60, 0x13, 0x8d,
	0xbf, 0x73, 0xf9, 0xbe, 0x73, 0xfc, 0x8d, 0x03, 0xb7, 0x93, 0x80, 0xbb, 0x63, 0x64, 0x09, 0xbd,
	0xa4, 0x63, 0x2f, 0xc1, 0x5e, 0xcc, 0xa2, 0x24, 0x22, 0xcd, 0x0c, 0x64, 0xed, 0x4d, 0xa2, 0x68,
	0x12, 0xa0, 0xe3, 0xc5, 0xd4, 0xf1, 0xc2, 0x30, 0x4a, 0xbc, 0x84, 0x46, 0x21, 0xd7, 0xa9, 0xd6,
	0x1d, 0x09, 0xfb, 0xc9, 0x22, 0x46, 0xee, 0xa8, 0x5f, 0x8d, 0xdb, 0x9f, 0x0d, 0xb0, 0x5e, 0x9e,
	0x5d, 0x9c, 0xae, 0x1a, 0x9d, 0x51, 0x9e, 0x0c, 0x91, 0xc7, 0xa2, 0x16, 0xc9, 0x03, 0xa8, 0x72,
	0xd1, 0x68, 0xc6, 0x4d, 0xa3, 0x6d, 0x74, 0x9a, 0xfd, 0x9d, 0x9e, 0xee, 0xd1, 0xbb, 0x50, 0xe8,
	0x30, 0x8d, 0x92, 0x67, 0xb0, 0x9d, 0xd1, 0xc2, 0xcd, 0x52, 0xbb, 0x2c, 0xb2, 0x5b, 0xbd, 0xac,
	0xe6, 0x3c, 0xcd, 0x30, 0x57, 0x60, 0x7f, 0x31, 0xe0, 0x20, 0x9f, 0x30, 0x40, 0x3e, 0x66, 0x74,
	0x84, 0xff, 0xac, 0xe5, 0x29, 0x64, 0xf7, 0x22, 0xa4, 0x18, 0x9b, 0xa4, 0x64, 0xf3, 0xed, 0x6f,
	0x25, 0xd8, 0xc9, 0xc7, 0x09, 0x81, 0x4a, 0xfc, 0x9a, 0xfa, 0x8a, 0xb7, 0x31, 0x54, 0x67, 0x89,
	0x85, 0xde, 0x54, 0xb7, 0x17, 0x98, 0x3c, 0x93, 0xbb, 0x82, 0x39, 0x9a, 0x4e, 0xa3, 0xd0, 0x55,
	0xa1, 0xb2, 0x0a, 0x81, 0x86, 0xce, 0x65, 0x42, 0x0b, 0x1a, 0x94, 0xf3, 0x19, 0xfa, 0xee, 0x68,
	0x61, 0x56, 0x54, 0xb8, 0xae, 0x81, 0xe7, 0x0b, 0xb2, 0x0f, 0x30, 0xf7, 0x02, 0xea, 0xbb, 0x97,
	0x2c, 0x9a, 0x9a, 0x5b, 0x2a, 0xda, 0x50, 0xc8, 0x0b, 0x01, 0xc8, 0xe6, 0xf8, 0x2e, 0xa6, 0x0c,
	0x5d, 0x5f, 0x8e, 0x55, 0xd5, 0xcd, 0x35, 0x34, 0x48, 0x55, 0x72, 0x2f, 0xe4, 0x66, 0x4d, 0xec,
	0x5e, 0x28, 0x92, 0x67, 0x89, 0xc9, 0xd9, 0xcc, 0xba, 0x56, 0x29, 0xcf, 0xe4, 0x06, 0x94, 0xdf,
	0xe0, 0xc2, 0x6c, 0x28, 0x48, 0x1e, 0x89, 0x09, 0xb5, 0x39, 0x32, 0x2e, 0xec, 0x62, 0x82, 0x40,
	0xb7, 0x86, 0xcb, 0x47, 0x72, 0x0f, 0xfe, 0xe3, 0xc8, 0xa8, 0x17, 0xb8, 0xe1, 0x6c, 0x3a, 0x42,
	0x66, 0x36, 0x55, 0xd5, 0xb6, 0x06, 0xcf, 0x15, 0x66, 0x53, 0x68, 0xe5, 0x17, 0x76, 0xca, 0x50,
	0xae, 0x15, 0xdf, 0xce, 0x90, 0x27, 0xbf, 0x37, 0x65, 0x64, 0x36, 0x25, 0x16, 0x21, 0xb5, 0xc8,
	0x51, 0xbc, 0x74, 0x85, 0x75, 0x09, 0x88, 0x41, 0x3c, 0xb2, 0x0b, 0x75, 0xa1, 0x4a, 0xc7, 0xf4,
	0x0e, 0x6b, 0xe2, 0x59, 0x86, 0xec, 0xe3, 0xeb, 0x54, 0x03, 0x0c, 0x30, 0x47, 0xa5, 0xc6, 0x35,
	0x56, 0xe3, 0xda, 0x27, 0xb0, 0x5f, 0x64, 0xac, 0xe2, 0xa2, 0x2b, 0xe3, 0x4f, 0xa2, 0x38, 0x88,
	0x16, 0x6b, 0x6a, 0xe4, 0x0b, 0xe2, 0x38, 0x66, 0x98, 0xb8, 0x19, 0x63, 0x80, 0x86, 0xd4, 0xdb,
	0x3f, 0x14, 0x97, 0x24, 0x98, 0xf1, 0x04, 0x59, 0xd6, 0x1f, 0xcd, 0x14, 0x53, 0x29, 0x7b, 0xd0,
	0x90, 0x21, 0x1e, 0x7b, 0x63, 0x4c, 0x0d, 0xb2, 0x02, 0xfa, 0x3f, 0x2b, 0xf0, 0x7f, 0x5e, 0x15,
	0x27, 0x13, 0xa8, 0xc8, 0x1b, 0x4b, 0x6e, 0x2e, 0x6f, 0xc3, 0xab, 0x88, 0xfa, 0xa9, 0x4c, 0xeb,
	0x68, 0x8d, 0xeb, 0xb3, 0xf7, 0xdc, 0x3e, 0xfc, 0xf4, 0xfd, 0xc7, 0x55, 0xa9, 0x45, 0x76, 0xd5,
	0xe7, 0x23, 0x53, 0xe4, 0xcc, 0x1f, 0xf7, 0x8e, 0x1d, 0xf1, 0xf9, 0x21, 0x5f, 0x0d, 0xa8, 0x2f,
	0x57, 0x47, 0xba, 0x6b, 0x1a, 0x5f, 0xdb, 0xaf, 0xf5, 0xf0, 0xaf, 0x72, 0x53, 0x21, 0x1d, 0x25,
	0xc4, 0x26, 0xed, 0x42, 0x21, 0xce, 0x7b, 0x89, 0x7e, 0x24, 0x21, 0x54, 0xb5, 0xcf, 0x48, 0x67,
	0x0d, 0x41, 0xce, 0x8a, 0xd6, 0xad, 0xfc, 0x92, 0x52, 0xce, 0xfb, 0x8a, 0xf3, 0xc0, 0x2a, 0x1e,
	0xfe, 0x89, 0xd1, 0x25, 0x0c, 0xaa, 0xda, 0x6c, 0x6b, 0xf9, 0x72, 0x7e, 0x2c, 0xe0, 0x4b, 0x67,
	0xec, 0x6e, 0x9e, 0xf1, 0x83, 0xe4, 0x94, 0xbe, 0xdb, 0xc0, 0x99, 0xb1, 0x66, 0x01, 0x67, 0x5f,
	0x71, 0x3e, 0xb2, 0x8e, 0x36, 0x71, 0x3a, 0xbe, 0xea, 0x26, 0x26, 0x1e, 0x55, 0xd5, 0x5f, 0xc4,
	0xc9, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0xdb, 0x41, 0xaa, 0x7e, 0x06, 0x00, 0x00,
}
