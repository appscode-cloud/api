// Code generated by protoc-gen-go. DO NOT EDIT.
// source: certificate.proto

package v1alpha2

import (
	dtypes "appscode.com/api/dtypes"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/third_party/appscodeapis/appscode/api"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CertificateListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateListRequest) Reset()         { *m = CertificateListRequest{} }
func (m *CertificateListRequest) String() string { return proto.CompactTextString(m) }
func (*CertificateListRequest) ProtoMessage()    {}
func (*CertificateListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{0}
}

func (m *CertificateListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateListRequest.Unmarshal(m, b)
}
func (m *CertificateListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateListRequest.Marshal(b, m, deterministic)
}
func (m *CertificateListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateListRequest.Merge(m, src)
}
func (m *CertificateListRequest) XXX_Size() int {
	return xxx_messageInfo_CertificateListRequest.Size(m)
}
func (m *CertificateListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateListRequest proto.InternalMessageInfo

type CertificateListResponse struct {
	Certificates         []*Certificate `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CertificateListResponse) Reset()         { *m = CertificateListResponse{} }
func (m *CertificateListResponse) String() string { return proto.CompactTextString(m) }
func (*CertificateListResponse) ProtoMessage()    {}
func (*CertificateListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{1}
}

func (m *CertificateListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateListResponse.Unmarshal(m, b)
}
func (m *CertificateListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateListResponse.Marshal(b, m, deterministic)
}
func (m *CertificateListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateListResponse.Merge(m, src)
}
func (m *CertificateListResponse) XXX_Size() int {
	return xxx_messageInfo_CertificateListResponse.Size(m)
}
func (m *CertificateListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateListResponse proto.InternalMessageInfo

func (m *CertificateListResponse) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type CertificateDescribeRequest struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateDescribeRequest) Reset()         { *m = CertificateDescribeRequest{} }
func (m *CertificateDescribeRequest) String() string { return proto.CompactTextString(m) }
func (*CertificateDescribeRequest) ProtoMessage()    {}
func (*CertificateDescribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{2}
}

func (m *CertificateDescribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateDescribeRequest.Unmarshal(m, b)
}
func (m *CertificateDescribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateDescribeRequest.Marshal(b, m, deterministic)
}
func (m *CertificateDescribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateDescribeRequest.Merge(m, src)
}
func (m *CertificateDescribeRequest) XXX_Size() int {
	return xxx_messageInfo_CertificateDescribeRequest.Size(m)
}
func (m *CertificateDescribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateDescribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateDescribeRequest proto.InternalMessageInfo

func (m *CertificateDescribeRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type CertificateDescribeResponse struct {
	Certificate          *Certificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CertificateDescribeResponse) Reset()         { *m = CertificateDescribeResponse{} }
func (m *CertificateDescribeResponse) String() string { return proto.CompactTextString(m) }
func (*CertificateDescribeResponse) ProtoMessage()    {}
func (*CertificateDescribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{3}
}

func (m *CertificateDescribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateDescribeResponse.Unmarshal(m, b)
}
func (m *CertificateDescribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateDescribeResponse.Marshal(b, m, deterministic)
}
func (m *CertificateDescribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateDescribeResponse.Merge(m, src)
}
func (m *CertificateDescribeResponse) XXX_Size() int {
	return xxx_messageInfo_CertificateDescribeResponse.Size(m)
}
func (m *CertificateDescribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateDescribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateDescribeResponse proto.InternalMessageInfo

func (m *CertificateDescribeResponse) GetCertificate() *Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type Certificate struct {
	Phid       string `protobuf:"bytes,1,opt,name=phid,proto3" json:"phid,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CommonName string `protobuf:"bytes,3,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	IssuedBy   string `protobuf:"bytes,4,opt,name=issued_by,json=issuedBy,proto3" json:"issued_by,omitempty"`
	ValidFrom  int64  `protobuf:"varint,5,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ExpireDate int64  `protobuf:"varint,6,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	// those feilds will not included into list response.
	// only describe response will include the underlying
	// feilds.
	Sans                 []string `protobuf:"bytes,7,rep,name=sans,proto3" json:"sans,omitempty"`
	Cert                 string   `protobuf:"bytes,8,opt,name=cert,proto3" json:"cert,omitempty"`
	Key                  string   `protobuf:"bytes,9,opt,name=key,proto3" json:"key,omitempty"`
	Version              int32    `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	SerialNumber         string   `protobuf:"bytes,11,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{4}
}

func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Certificate.Unmarshal(m, b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return xxx_messageInfo_Certificate.Size(m)
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetPhid() string {
	if m != nil {
		return m.Phid
	}
	return ""
}

func (m *Certificate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Certificate) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *Certificate) GetIssuedBy() string {
	if m != nil {
		return m.IssuedBy
	}
	return ""
}

func (m *Certificate) GetValidFrom() int64 {
	if m != nil {
		return m.ValidFrom
	}
	return 0
}

func (m *Certificate) GetExpireDate() int64 {
	if m != nil {
		return m.ExpireDate
	}
	return 0
}

func (m *Certificate) GetSans() []string {
	if m != nil {
		return m.Sans
	}
	return nil
}

func (m *Certificate) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func (m *Certificate) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Certificate) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Certificate) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

type CertificateLoadRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CertData             string   `protobuf:"bytes,2,opt,name=cert_data,json=certData,proto3" json:"cert_data,omitempty"`
	KeyData              string   `protobuf:"bytes,3,opt,name=key_data,json=keyData,proto3" json:"key_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateLoadRequest) Reset()         { *m = CertificateLoadRequest{} }
func (m *CertificateLoadRequest) String() string { return proto.CompactTextString(m) }
func (*CertificateLoadRequest) ProtoMessage()    {}
func (*CertificateLoadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{5}
}

func (m *CertificateLoadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateLoadRequest.Unmarshal(m, b)
}
func (m *CertificateLoadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateLoadRequest.Marshal(b, m, deterministic)
}
func (m *CertificateLoadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateLoadRequest.Merge(m, src)
}
func (m *CertificateLoadRequest) XXX_Size() int {
	return xxx_messageInfo_CertificateLoadRequest.Size(m)
}
func (m *CertificateLoadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateLoadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateLoadRequest proto.InternalMessageInfo

func (m *CertificateLoadRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CertificateLoadRequest) GetCertData() string {
	if m != nil {
		return m.CertData
	}
	return ""
}

func (m *CertificateLoadRequest) GetKeyData() string {
	if m != nil {
		return m.KeyData
	}
	return ""
}

type CertificateDeleteRequest struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateDeleteRequest) Reset()         { *m = CertificateDeleteRequest{} }
func (m *CertificateDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*CertificateDeleteRequest) ProtoMessage()    {}
func (*CertificateDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{6}
}

func (m *CertificateDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateDeleteRequest.Unmarshal(m, b)
}
func (m *CertificateDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateDeleteRequest.Marshal(b, m, deterministic)
}
func (m *CertificateDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateDeleteRequest.Merge(m, src)
}
func (m *CertificateDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_CertificateDeleteRequest.Size(m)
}
func (m *CertificateDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateDeleteRequest proto.InternalMessageInfo

func (m *CertificateDeleteRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type CertificateDeployRequest struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	SecretName           string   `protobuf:"bytes,2,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	ClusterName          string   `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Namespace            string   `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateDeployRequest) Reset()         { *m = CertificateDeployRequest{} }
func (m *CertificateDeployRequest) String() string { return proto.CompactTextString(m) }
func (*CertificateDeployRequest) ProtoMessage()    {}
func (*CertificateDeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d34c34dd33be4b, []int{7}
}

func (m *CertificateDeployRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateDeployRequest.Unmarshal(m, b)
}
func (m *CertificateDeployRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateDeployRequest.Marshal(b, m, deterministic)
}
func (m *CertificateDeployRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateDeployRequest.Merge(m, src)
}
func (m *CertificateDeployRequest) XXX_Size() int {
	return xxx_messageInfo_CertificateDeployRequest.Size(m)
}
func (m *CertificateDeployRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateDeployRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateDeployRequest proto.InternalMessageInfo

func (m *CertificateDeployRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *CertificateDeployRequest) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *CertificateDeployRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *CertificateDeployRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterType((*CertificateListRequest)(nil), "appscode.cloud.v1alpha1.CertificateListRequest")
	proto.RegisterType((*CertificateListResponse)(nil), "appscode.cloud.v1alpha1.CertificateListResponse")
	proto.RegisterType((*CertificateDescribeRequest)(nil), "appscode.cloud.v1alpha1.CertificateDescribeRequest")
	proto.RegisterType((*CertificateDescribeResponse)(nil), "appscode.cloud.v1alpha1.CertificateDescribeResponse")
	proto.RegisterType((*Certificate)(nil), "appscode.cloud.v1alpha1.Certificate")
	proto.RegisterType((*CertificateLoadRequest)(nil), "appscode.cloud.v1alpha1.CertificateLoadRequest")
	proto.RegisterType((*CertificateDeleteRequest)(nil), "appscode.cloud.v1alpha1.CertificateDeleteRequest")
	proto.RegisterType((*CertificateDeployRequest)(nil), "appscode.cloud.v1alpha1.CertificateDeployRequest")
}

func init() { proto.RegisterFile("certificate.proto", fileDescriptor_c0d34c34dd33be4b) }

var fileDescriptor_c0d34c34dd33be4b = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xc1, 0x6e, 0xd3, 0x4a,
	0x14, 0x86, 0xe5, 0xa4, 0x4d, 0x93, 0x93, 0x5c, 0xa9, 0x77, 0x16, 0xb7, 0x73, 0xdd, 0xf6, 0x36,
	0xd7, 0x65, 0x11, 0x55, 0x28, 0x26, 0x29, 0x08, 0x09, 0x09, 0x21, 0xb5, 0xa1, 0x02, 0x84, 0xaa,
	0x2a, 0x12, 0x5d, 0xb0, 0x89, 0x26, 0xf6, 0xb4, 0x1d, 0x62, 0x7b, 0x8c, 0xc7, 0xa9, 0xb0, 0x50,
	0x37, 0x7d, 0x00, 0x36, 0x3c, 0x00, 0x5b, 0x16, 0x08, 0x89, 0x05, 0x1b, 0x5e, 0x83, 0x57, 0xe0,
	0x35, 0x90, 0xd0, 0xcc, 0xd8, 0xcd, 0xa4, 0x50, 0x9a, 0xb0, 0x89, 0x26, 0xff, 0x39, 0x67, 0xfc,
	0xcd, 0x3f, 0xe7, 0xd8, 0xf0, 0xb7, 0x47, 0x93, 0x94, 0x1d, 0x31, 0x8f, 0xa4, 0xb4, 0x1d, 0x27,
	0x3c, 0xe5, 0x68, 0x85, 0xc4, 0xb1, 0xf0, 0xb8, 0x4f, 0xdb, 0x5e, 0xc0, 0xc7, 0x7e, 0xfb, 0xb4,
	0x43, 0x82, 0xf8, 0x84, 0x74, 0xec, 0xb5, 0x63, 0xce, 0x8f, 0x03, 0xea, 0x92, 0x98, 0xb9, 0x24,
	0x8a, 0x78, 0x4a, 0x52, 0xc6, 0x23, 0xa1, 0xcb, 0xec, 0xff, 0x8a, 0xb2, 0x2b, 0xe2, 0x9b, 0x93,
	0x6d, 0x79, 0xa8, 0x72, 0xfc, 0x34, 0x8b, 0xa9, 0x70, 0xd5, 0xaf, 0x4e, 0x72, 0x30, 0xfc, 0xb3,
	0x3b, 0x01, 0x7a, 0xca, 0x44, 0xda, 0xa7, 0x2f, 0xc7, 0x54, 0xa4, 0x8e, 0x07, 0x2b, 0x3f, 0x45,
	0x44, 0xcc, 0x23, 0x41, 0xd1, 0x23, 0x68, 0x18, 0xa7, 0x10, 0xd8, 0x6a, 0x96, 0x5b, 0xf5, 0xee,
	0x8d, 0xf6, 0x15, 0xe7, 0x68, 0x1b, 0xfb, 0xf4, 0xa7, 0x2a, 0x9d, 0x36, 0xd8, 0x46, 0xb0, 0x47,
	0x85, 0x97, 0xb0, 0x21, 0xcd, 0x11, 0xd0, 0x32, 0x94, 0xc7, 0xcc, 0xc7, 0x56, 0xd3, 0x6a, 0xd5,
	0xfa, 0x72, 0xe9, 0x50, 0x58, 0xfd, 0x65, 0x7e, 0x0e, 0xb6, 0x07, 0x75, 0x63, 0x7b, 0x55, 0x38,
	0x2b, 0x97, 0x59, 0xe8, 0x7c, 0x28, 0x41, 0xdd, 0x08, 0x22, 0x04, 0x0b, 0xf1, 0xc9, 0x05, 0x89,
	0x5a, 0x4b, 0x2d, 0x22, 0x21, 0xc5, 0x25, 0xad, 0xc9, 0x35, 0xda, 0x80, 0xba, 0xc7, 0xc3, 0x90,
	0x47, 0x03, 0x15, 0x2a, 0xab, 0x10, 0x68, 0x69, 0x5f, 0x26, 0xac, 0x42, 0x8d, 0x09, 0x31, 0xa6,
	0xfe, 0x60, 0x98, 0xe1, 0x05, 0x15, 0xae, 0x6a, 0x61, 0x27, 0x43, 0xeb, 0x00, 0xa7, 0x24, 0x60,
	0xfe, 0xe0, 0x28, 0xe1, 0x21, 0x5e, 0x6c, 0x5a, 0xad, 0x72, 0xbf, 0xa6, 0x94, 0xbd, 0x84, 0x87,
	0x72, 0x73, 0xfa, 0x2a, 0x66, 0x09, 0x1d, 0xf8, 0xf2, 0x70, 0x15, 0x15, 0x07, 0x2d, 0xf5, 0x72,
	0x4a, 0x41, 0x22, 0x81, 0x97, 0x9a, 0x65, 0x49, 0x24, 0xd7, 0x52, 0x93, 0x07, 0xc3, 0x55, 0x4d,
	0x29, 0xd7, 0xd2, 0xd6, 0x11, 0xcd, 0x70, 0x4d, 0xdb, 0x3a, 0xa2, 0x19, 0xc2, 0xb0, 0x74, 0x4a,
	0x13, 0xc1, 0x78, 0x84, 0xa1, 0x69, 0xb5, 0x16, 0xfb, 0xc5, 0x5f, 0xb4, 0x09, 0x7f, 0x09, 0x9a,
	0x30, 0x12, 0x0c, 0xa2, 0x71, 0x38, 0xa4, 0x09, 0xae, 0xab, 0xaa, 0x86, 0x16, 0xf7, 0x95, 0xe6,
	0xf8, 0xd3, 0x4d, 0xc4, 0x89, 0x5f, 0xdc, 0x60, 0x61, 0x92, 0x65, 0x98, 0xb4, 0x0a, 0x35, 0x89,
	0x21, 0x4f, 0x41, 0x72, 0xf7, 0xaa, 0x52, 0xe8, 0x91, 0x94, 0xa0, 0x7f, 0xa1, 0x3a, 0xa2, 0x99,
	0x8e, 0x69, 0xfb, 0x96, 0x46, 0x34, 0x93, 0x21, 0xe7, 0x26, 0xe0, 0xa9, 0xbb, 0x0f, 0x68, 0xfa,
	0x9b, 0x4e, 0x79, 0x63, 0x5d, 0x4a, 0x8f, 0x03, 0x9e, 0x5d, 0x99, 0x2e, 0xcd, 0x15, 0xd4, 0x4b,
	0x68, 0x3a, 0x30, 0x2e, 0x15, 0xb4, 0xa4, 0x6e, 0xee, 0x7f, 0x68, 0x78, 0xc1, 0x58, 0xa4, 0x34,
	0x31, 0xef, 0xb6, 0x9e, 0x6b, 0x2a, 0x65, 0x0d, 0x6a, 0x32, 0x24, 0x62, 0xe2, 0xd1, 0xfc, 0x72,
	0x27, 0x42, 0xf7, 0x7b, 0x05, 0x1a, 0x06, 0x90, 0x40, 0xef, 0x2d, 0x58, 0x90, 0x63, 0x85, 0xdc,
	0x59, 0x1a, 0xd4, 0x18, 0x4d, 0xfb, 0xd6, 0xec, 0x05, 0x7a, 0x30, 0x9c, 0xfb, 0xe7, 0x9f, 0x71,
	0xa9, 0x6a, 0x9d, 0x7f, 0xfd, 0xf6, 0xb6, 0xd4, 0x41, 0xae, 0x3b, 0x98, 0x7a, 0x77, 0xa8, 0x4d,
	0xdc, 0x7c, 0x93, 0xae, 0x6b, 0x4e, 0xa8, 0xfb, 0x42, 0xf0, 0x08, 0x7d, 0xb1, 0xa0, 0x5a, 0x0c,
	0x1b, 0xda, 0x9e, 0xe5, 0xe9, 0x97, 0x46, 0xd9, 0xbe, 0x3d, 0x5f, 0x51, 0x8e, 0xbd, 0x6b, 0x60,
	0xdf, 0x45, 0x77, 0xe6, 0xc0, 0x7e, 0x3d, 0x66, 0xfe, 0x99, 0x86, 0xff, 0x28, 0x7d, 0xe6, 0xc4,
	0x9f, 0xd1, 0xe7, 0x49, 0xf7, 0xda, 0xeb, 0x93, 0x02, 0xfd, 0xea, 0x6c, 0x1f, 0x72, 0xe6, 0x5f,
	0xd0, 0x1d, 0x1a, 0x74, 0x4f, 0xec, 0x87, 0xf3, 0xd0, 0xc9, 0xb6, 0x38, 0x73, 0x89, 0xa7, 0xde,
	0xd7, 0x2e, 0x1f, 0xa6, 0x84, 0x45, 0x8a, 0xf6, 0x9e, 0xb5, 0x85, 0xde, 0x59, 0x50, 0xd1, 0xed,
	0x8d, 0x3a, 0xb3, 0xd9, 0x66, 0x8c, 0xc2, 0x75, 0xd0, 0x53, 0x96, 0x6e, 0xfd, 0xa1, 0xa5, 0x9f,
	0x14, 0xa1, 0x9c, 0xa8, 0x59, 0x09, 0x8d, 0xe9, 0xbb, 0x8e, 0xf0, 0x99, 0x41, 0xf8, 0xd8, 0xee,
	0xcd, 0x4d, 0x58, 0xb8, 0xea, 0xab, 0x87, 0x16, 0xae, 0xee, 0x3c, 0x80, 0x0d, 0x8f, 0x87, 0x93,
	0x47, 0x93, 0x98, 0x4d, 0x13, 0x77, 0x77, 0x96, 0x0d, 0xe4, 0x03, 0xf9, 0x79, 0x3c, 0xb0, 0x9e,
	0x57, 0x8b, 0xe8, 0xb0, 0xa2, 0xbe, 0x98, 0xdb, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xae,
	0x56, 0x2e, 0xc2, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CertificatesClient is the client API for Certificates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificatesClient interface {
	List(ctx context.Context, in *CertificateListRequest, opts ...grpc.CallOption) (*CertificateListResponse, error)
	Describe(ctx context.Context, in *CertificateDescribeRequest, opts ...grpc.CallOption) (*CertificateDescribeResponse, error)
	Load(ctx context.Context, in *CertificateLoadRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Delete(ctx context.Context, in *CertificateDeleteRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Deploy(ctx context.Context, in *CertificateDeployRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type certificatesClient struct {
	cc *grpc.ClientConn
}

func NewCertificatesClient(cc *grpc.ClientConn) CertificatesClient {
	return &certificatesClient{cc}
}

func (c *certificatesClient) List(ctx context.Context, in *CertificateListRequest, opts ...grpc.CallOption) (*CertificateListResponse, error) {
	out := new(CertificateListResponse)
	err := c.cc.Invoke(ctx, "/appscode.cloud.v1alpha1.Certificates/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) Describe(ctx context.Context, in *CertificateDescribeRequest, opts ...grpc.CallOption) (*CertificateDescribeResponse, error) {
	out := new(CertificateDescribeResponse)
	err := c.cc.Invoke(ctx, "/appscode.cloud.v1alpha1.Certificates/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) Load(ctx context.Context, in *CertificateLoadRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := c.cc.Invoke(ctx, "/appscode.cloud.v1alpha1.Certificates/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) Delete(ctx context.Context, in *CertificateDeleteRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := c.cc.Invoke(ctx, "/appscode.cloud.v1alpha1.Certificates/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificatesClient) Deploy(ctx context.Context, in *CertificateDeployRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := c.cc.Invoke(ctx, "/appscode.cloud.v1alpha1.Certificates/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificatesServer is the server API for Certificates service.
type CertificatesServer interface {
	List(context.Context, *CertificateListRequest) (*CertificateListResponse, error)
	Describe(context.Context, *CertificateDescribeRequest) (*CertificateDescribeResponse, error)
	Load(context.Context, *CertificateLoadRequest) (*dtypes.VoidResponse, error)
	Delete(context.Context, *CertificateDeleteRequest) (*dtypes.VoidResponse, error)
	Deploy(context.Context, *CertificateDeployRequest) (*dtypes.VoidResponse, error)
}

func RegisterCertificatesServer(s *grpc.Server, srv CertificatesServer) {
	s.RegisterService(&_Certificates_serviceDesc, srv)
}

func _Certificates_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Certificates/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).List(ctx, req.(*CertificateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Certificates/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).Describe(ctx, req.(*CertificateDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Certificates/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).Load(ctx, req.(*CertificateLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Certificates/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).Delete(ctx, req.(*CertificateDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certificates_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificatesServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.cloud.v1alpha1.Certificates/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificatesServer).Deploy(ctx, req.(*CertificateDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Certificates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.cloud.v1alpha1.Certificates",
	HandlerType: (*CertificatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Certificates_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Certificates_Describe_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _Certificates_Load_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Certificates_Delete_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _Certificates_Deploy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certificate.proto",
}
