// Code generated by go-bindata.
// sources:
// data/ci_products.json
// data/cloud_providers.json
// data/db_products.json
// data/kubernetes_products.json
// data/subscriptions.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCi_productsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\xc1\x6a\x84\x30\x10\x86\xef\x79\x8a\x90\xb3\x85\x8d\x35\x22\x5e\x7b\xea\xb5\xd7\x52\x96\xd4\x84\x25\x34\x46\xd1\x58\x5a\x24\xef\xde\x69\x89\x5a\x61\xa0\x35\xde\x66\x3e\x33\xbf\x1f\xc3\xcc\x84\x52\xf6\x3a\x19\xab\xae\xf2\xa6\x9d\x1f\x59\xfd\x8d\x00\x5a\xe3\xa6\x8f\xa5\x83\xde\xc9\x56\xb3\x3a\xe2\x6c\xa1\xfd\xd0\xbd\x1b\xa5\x07\xf8\xa2\xcc\xcd\x78\x69\xbb\x46\x4b\xb7\x3d\xf8\x49\xbd\xfa\xcf\x5e\x43\xf4\x73\xa4\x94\xce\x6b\x05\x6f\xc6\xb7\x09\xe6\x1f\x1e\xef\x9e\x04\xcf\xd7\xd1\x98\x6f\x1a\xf8\xed\xbd\xd8\x51\xa5\xbd\x34\x76\xdc\xec\x22\x6f\x7a\x08\xe2\xd9\x1e\x0e\xb2\x65\x35\x04\xff\xa2\x61\xad\x43\xf6\x97\x12\x47\x85\xc4\x59\x21\x9e\xa8\x83\xef\x87\x5f\x2e\xff\xf7\xc9\x31\x9f\xd4\xf5\x14\xb8\x4f\x79\xd6\xa7\x48\xf4\xa9\x50\x9f\x5c\x1c\xf0\x29\x30\x9f\x2a\xf5\x7c\x4a\xfc\xa0\x8f\x2c\xa8\x42\x0f\xa8\xc4\x8d\x62\xf5\x42\x96\x2e\x90\x40\xbe\x02\x00\x00\xff\xff\xec\xc4\xd9\x02\xe7\x03\x00\x00")

func dataCi_productsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataCi_productsJson,
		"data/ci_products.json",
	)
}

func dataCi_productsJson() (*asset, error) {
	bytes, err := dataCi_productsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ci_products.json", size: 999, mode: os.FileMode(420), modTime: time.Unix(1462638500, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataCloud_providersJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x99\xcf\x6e\xe3\xb6\x13\xc7\xef\x79\x0a\x42\x67\x5b\xb0\x28\xad\x63\xec\xed\x17\x63\x91\x5f\x80\x16\x1b\xc0\x9b\xf6\x50\x2c\x16\x5c\x89\x91\x89\x48\xa4\x40\x49\x4d\xbd\x8b\x3c\x4d\x1f\xa5\x2f\x56\xfa\x1f\x63\x59\xa4\xcd\x11\x4c\xd4\x37\x99\x43\xd1\x9f\xd1\x7c\x67\x24\x72\x7e\xde\x20\x14\xa4\x85\x68\xb3\x6f\x95\x14\x7f\xb2\x8c\xca\x3a\xf8\xb8\x1e\x55\xe3\xe4\x55\x5f\xab\x5f\x9c\x94\x34\xf8\xb8\x19\x1c\xed\xc7\x24\xcd\x99\xe0\x6a\xd6\x1f\xbb\x11\x84\x7e\xea\x2b\x65\x2f\x44\x4a\x1a\x35\x43\xdd\xf7\x1b\x93\x39\xe3\x8c\xe8\x9b\x0f\x16\x50\xe6\xb6\x1e\x53\x52\x37\xe3\xa8\x6b\xff\x21\x38\xed\x2c\xbf\x19\xd5\x93\xbb\xab\x1d\x5a\xbe\x5b\x2d\xa9\xd5\x92\x59\x2d\x34\x38\x30\x7c\xd5\xd7\x6f\xa3\xb3\x6e\xcf\x49\xc1\x9e\x85\x3c\xe9\xf8\x2b\x05\x38\xbe\x9d\x6c\x72\x7c\x6b\x31\x39\xbe\xb5\xa4\x83\x9d\xf8\xac\x68\xd5\xc5\x69\x07\x70\xdf\x01\x2b\x3f\xb6\xf2\x63\x2b\x3f\x1e\xce\xff\x20\x69\x41\x78\x66\x71\x80\xb6\x80\x08\xe8\xc9\x3d\x0f\xb4\xa5\xe7\x81\xb6\x0c\xf7\x60\xc1\x78\x4e\x2a\x21\xa9\xc5\x07\x52\x8d\x6b\xd1\x36\x4b\xf7\x1c\xea\xde\xd1\xf3\xa6\x6b\xfe\x3e\x18\xfc\x8b\x78\x59\x09\x3b\x34\x17\x12\x08\x7d\x70\x87\x09\xfa\xc0\xdc\x8b\x43\xd7\x0c\x0c\x86\xf9\x51\x1f\x89\xfe\x30\x62\xab\x8c\xd3\x15\x38\x12\xfd\xcc\xe8\x9a\x81\x91\xd0\xd4\x35\x31\xd6\xd7\x43\xe0\x7f\xfe\x16\xe8\x91\xb4\x85\x70\x81\xd6\xeb\xf5\x78\xb5\xc5\x86\xba\xbb\xfa\xaa\xdf\x22\x8c\xd7\x0d\xe1\x29\xfd\xd6\xac\x2a\x6a\x7f\x99\x28\x52\x55\x86\xe4\x4a\xb1\xde\x53\x4e\x25\x29\xd0\x63\x2b\x2b\x51\x1f\x25\x45\xfd\xd2\xaa\x29\x0d\x0e\x4b\x96\xca\x23\x67\xd2\x4a\xd9\xa2\xce\x50\x49\xcb\xcd\xa2\xd1\xd9\x87\x09\x06\xa8\x4b\x52\x14\xce\x00\xf8\xf2\x00\x25\xcd\x58\x5b\x1a\x08\xb0\x91\x20\xb9\x3c\x41\x41\x64\x4e\x9d\x01\x66\x17\x06\x28\x93\xff\x1e\xe0\x2f\x1b\x41\x62\x96\xe1\xf4\xf2\x08\xd8\xca\x30\x33\x32\xc4\x97\x96\xa2\x62\x48\xac\x0c\xd1\xd4\x08\x31\xbd\xb4\x1a\x15\x44\x34\xb1\x47\x63\x62\x09\xc7\xe4\xd2\x18\xb1\x3d\x2d\xcd\x85\x21\x0e\x6f\x3f\x5c\x1e\x02\x96\x18\xb7\xa1\x07\x04\x68\x6a\x78\x40\x00\xa7\x06\x48\x0e\x73\x51\x56\x6d\x43\xd1\xe7\xaa\x61\x25\xfb\x41\x33\x13\x45\x0a\x2d\x52\x50\x3d\xb8\x52\x00\xc3\x01\x94\x84\x2b\x05\x34\x22\x30\x55\xb8\x52\x80\xcb\x95\x1f\x61\xcc\xac\x18\xb1\xa5\x6a\x7a\xc0\x80\xd6\x0a\x3f\xfa\x04\x97\x0b\x2f\xfa\x84\x57\x0c\x1f\xfa\x8c\xaf\x43\x9f\xf1\x29\x7d\x9a\xb5\x01\x7c\x9d\x3e\x3e\xa1\x87\xdd\xee\xa0\x36\x21\xe4\xd8\x73\x3c\x5c\x08\x3c\x3f\x84\x5f\x37\x77\x21\x71\x2a\x14\x12\x9a\xa3\xb0\xa7\xe0\x88\x00\x4c\xd0\x78\x02\xcb\x50\x47\x0a\xa8\x20\xa6\xa0\x9d\x9f\x23\x04\x38\x3f\x23\x0c\xfa\xe8\x76\xc4\x00\x4b\x13\x27\xa0\xcf\xee\x45\x23\x24\xc9\xcf\xd4\x09\x86\x7d\x2b\xc3\x15\xc3\xaf\x34\x5c\x29\x7c\x6b\xc3\x95\xe3\x2a\xc4\x91\x5d\x87\x38\xb2\xab\x10\x47\x76\x25\xe2\xc8\x4e\x8a\xc3\xcc\xd1\x11\xc7\xee\x6a\x7b\xea\xb7\xa3\x0a\xf2\x94\xf6\xfb\x49\xeb\xc1\xfd\x7a\x67\xfb\x49\xfa\x38\xf3\x13\xa9\x1b\x2a\x39\x7a\x5a\x74\x01\x7f\x79\x3f\xcf\xbc\xa3\xf2\x85\x16\x74\x85\xe6\xa2\xe5\xcd\x6a\x84\x16\xeb\x53\x54\x34\x27\x52\x14\x8c\x13\x40\x9f\x29\x1a\xdb\xba\x49\xd1\xd8\xd6\x4d\x8a\xc6\xd9\xc0\x93\xda\x39\xe5\xcd\x7a\xdf\x7a\xc2\xb5\xb5\x47\x29\x2b\xd0\x5d\xd1\x3e\x3f\xd7\x23\xf4\x20\x5e\x5d\xfd\x49\xb7\xab\x47\x63\x53\x07\x46\x1b\x4d\xfe\x6a\xa3\xc9\x65\x6d\x7c\x1e\xe8\xf5\xef\x74\x1b\xd0\x4f\xad\x14\x15\xb5\x7a\xbe\x68\x42\x74\xbf\x64\x75\x41\x18\x1f\xa1\x3b\x5a\xe4\xbd\x83\x14\x5b\xdf\x66\xbd\xee\xa6\x0f\x63\x70\xaf\x63\xed\xf9\xd7\xb1\x0e\x0d\xeb\x5a\xb1\xe8\x7f\xf5\x71\x1f\xf0\x30\xaa\x4b\xc2\xf3\x65\x4b\xb4\x60\xbf\x10\xf6\x4a\xb8\x53\x0b\x41\xad\xbb\x93\x5d\xbf\x7f\xf0\x6e\xeb\x77\x44\xde\x6d\xb6\x76\xc8\x3e\x93\x75\x8e\xc2\x4f\xeb\x17\xfd\x63\xf0\xdd\xb7\x73\x34\x86\x1d\x91\x07\x51\x78\x3b\xb9\xbf\x0b\x60\x05\x8f\xf0\x8c\x48\x63\x9d\xe3\x0a\x60\x67\x3e\xee\x8c\x9c\xa2\x58\x6f\x70\x3d\x51\x60\xe7\x2f\xf8\x40\xed\x6f\x3d\x41\x24\xce\xef\xe2\x20\xf2\xc5\x30\x73\x7e\x0f\x07\xb1\x37\x49\x4c\xdd\x5f\xc3\xc1\xd4\x17\x45\x8c\x4d\x18\x96\x4f\xb4\x20\xc2\x50\x8e\xff\xb3\x7c\x89\xb6\xfb\x09\x0b\xca\x52\xcd\x50\x7f\x00\x11\x67\x14\x7b\xa3\x00\xa8\x13\x4f\xbd\x51\x00\xf4\xf9\x01\x7b\xa3\x00\x29\x34\x9a\x24\xde\x40\x60\x22\xc5\x93\xd9\x10\x92\xf9\xe3\xd3\x09\x0c\xf5\x8f\x20\x85\x86\xb3\x41\x99\x72\x1e\x02\x20\xd0\x38\x04\x97\x0d\x47\x08\x80\x3e\x6f\xc3\x61\x35\xe3\x3c\x04\x4c\x9e\x49\x98\x78\xe2\x00\xaa\x73\x76\x2c\x8d\xfd\x47\xd0\xcd\xfe\xd7\xdb\xcd\xdb\xcd\xbf\x01\x00\x00\xff\xff\x26\x57\x9f\x74\x3c\x27\x00\x00")

func dataCloud_providersJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataCloud_providersJson,
		"data/cloud_providers.json",
	)
}

func dataCloud_providersJson() (*asset, error) {
	bytes, err := dataCloud_providersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cloud_providers.json", size: 10044, mode: os.FileMode(420), modTime: time.Unix(1462547931, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDb_productsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x92\x51\x6b\xc2\x30\x14\x85\xdf\xfb\x2b\x24\xcf\x1a\x5a\x45\xc6\x7c\x6b\xad\x6e\x42\xd9\xc6\x4a\x61\x30\xc6\x48\xdb\xb8\x86\x75\x6d\xc9\x4d\xc7\x86\xf8\xdf\x77\x65\xb1\xb5\x18\x14\x71\xee\x41\x30\xe7\x5e\xf2\x9d\xf4\x9c\x95\xd5\xeb\x91\x94\x29\x16\x33\xe0\x40\x26\x9b\x33\x2a\x55\x09\xea\x4d\xb6\x02\x4a\x05\xfb\xe0\x64\xd2\x4e\xfa\xdb\xc1\x27\x97\x20\xca\x02\x77\x9f\xb5\x84\xe2\x35\x1d\x13\x7d\x7a\x69\x36\xd3\xf8\x55\x7d\x57\xbc\xb3\xb9\x6a\xfe\xe1\x02\xbc\xd7\x88\xf0\xbd\xc1\xc3\xcd\xc0\x73\xc3\xc5\xb4\xa1\xfc\xba\x92\x22\x41\x0f\x76\x47\xd4\xbe\xd0\xbf\x48\x48\x33\x58\xf7\x8f\x13\xfc\xe8\xd1\xf5\x82\x99\x91\x31\x36\x31\xd2\x5a\xb2\x38\xe7\xa7\x51\x6e\x5d\x23\x60\x68\x7c\x45\xc6\x4e\xbb\x7c\x1a\xdc\x47\xbe\xf9\x7e\xe3\x0b\x92\xbc\xac\xd3\x1d\xc4\x36\x22\x6b\x07\x48\x78\xce\x40\x89\x04\x38\x93\x49\xb6\xdf\x80\xee\xf8\x70\x0d\x1c\x7a\x85\x45\x68\x9d\x90\x21\x1d\x51\xe7\x9c\x66\xcc\xc2\x4b\x37\x03\x09\xff\xd0\x0c\xa4\xcc\x43\x23\xc0\x31\x12\x96\x30\x80\x82\x55\x90\x95\xea\x58\x7e\xa2\x58\xe6\xf5\xd7\x7e\x70\x5a\x3f\x9c\x98\x4d\x1d\x9b\x8e\xce\x49\x68\x71\x37\x0f\xa2\xa7\x4b\xa7\xa4\x29\x7f\x90\x54\xf7\x1b\x5a\x9b\xdf\xda\xfa\x09\x00\x00\xff\xff\x0d\xe5\xa3\x20\x18\x05\x00\x00")

func dataDb_productsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataDb_productsJson,
		"data/db_products.json",
	)
}

func dataDb_productsJson() (*asset, error) {
	bytes, err := dataDb_productsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/db_products.json", size: 1304, mode: os.FileMode(420), modTime: time.Unix(1462548032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataKubernetes_productsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\xca\x2e\x4d\x4a\x8d\x4f\x4c\x4f\xcd\x2b\x29\x56\xb2\x8a\x06\x8a\x28\x28\x54\x83\x49\xa0\x5c\x71\x76\xa9\x92\x95\x92\x9f\xbf\x8b\xab\xae\xb3\xa1\x92\x0e\x4c\xb8\xa0\x28\x33\x39\x55\xc9\xca\xd0\x00\x2e\x92\x5c\x00\x54\x68\x08\xe6\xd5\xea\xe0\x36\xc3\x08\xd3\x0c\x53\x54\x33\x8c\x08\x9a\x61\x82\x61\x86\x31\x9a\x3b\x4c\x08\x9a\x61\x81\x61\x86\x19\x9a\x19\x16\x04\xcd\x30\x34\xc3\xf4\x8c\x11\x7a\x88\x98\x11\x34\xc6\x18\x33\x4c\x8c\x4c\xd0\x8c\x31\x26\x1c\x2a\xc6\x98\xae\x31\xb2\x40\x37\x86\xb0\x6b\x4c\x0c\xb0\x84\x2e\x7a\xf0\x1a\x40\x8c\x01\x92\xb1\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x64\x2f\x92\xdb\x45\x02\x00\x00")

func dataKubernetes_productsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataKubernetes_productsJson,
		"data/kubernetes_products.json",
	)
}

func dataKubernetes_productsJson() (*asset, error) {
	bytes, err := dataKubernetes_productsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/kubernetes_products.json", size: 581, mode: os.FileMode(420), modTime: time.Unix(1462540529, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSubscriptionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x95\x41\x6b\xb3\x30\x18\xc7\xef\x7e\x0a\xc9\xb9\x82\xc9\x8b\xef\x0b\xde\x3c\xbc\x63\x3b\x14\x0a\x3b\x8e\x31\x52\x4d\xdb\x50\xa7\x92\x44\xd8\x56\xfa\xdd\x17\xc7\x5a\xb3\x68\x6c\xec\x61\x53\x96\x8b\x63\x4f\xf2\xcf\xa3\xf9\xf1\xf4\x77\xf0\x7c\x1f\x54\x8c\x3e\x63\xf6\x0a\xe2\x07\xf9\x9f\xef\x1f\x3e\x9e\xb2\xce\xf7\x35\x88\xc1\x6d\xb0\x44\xcb\xe0\x86\x11\x02\x16\xa7\x15\x99\x48\x09\x88\xc3\x73\x21\x23\x02\xd3\x9c\x83\xf8\x14\x96\xb5\x9a\x13\x06\xe2\x3f\x8b\xb6\x52\xed\xf0\x5a\x26\xb1\x28\x99\xba\xb3\xc9\x53\xbe\x7f\xe2\xf4\x4d\x1e\x8a\xce\xf5\xa3\x12\xc5\x4c\xd0\x0d\x4e\x85\x39\x07\xc3\xde\xe0\xbe\x5e\x13\x2d\x94\xe6\x35\x17\xcd\xbb\xc1\x85\x5a\x2e\xca\x8c\x70\x53\xff\x94\x6a\x87\xe0\x2d\x29\xe4\xdb\xf4\x37\xcd\xd6\xda\xee\xaa\xe4\x62\xcb\x9a\xe3\xc3\x2f\x3d\x49\x8e\xb9\xa0\x29\x27\x98\xa5\x3b\x7d\x91\x16\x9b\xbc\x7e\x69\xce\x52\xba\x78\xea\xdf\xcf\x9e\xbd\xc4\xee\x8a\x8c\x76\x91\x41\x64\x03\x0d\x86\xa3\xa9\xf5\x5f\x84\x0d\xb6\xf1\xdc\x82\x5e\x70\x01\x1c\x45\xce\xb0\x7d\x00\x5d\x34\x84\x2e\x32\xa0\x8b\xae\x40\x77\x2f\xe4\xbd\xd5\x55\x17\xde\x3f\x1b\x78\x28\x1a\x0b\xcf\xc4\xe0\x32\xbd\x68\x3e\xf4\xe0\xe0\xe4\x41\xd3\xe8\xc1\x6b\x66\x6f\xc5\xca\x0d\xe1\x9c\x96\x05\xce\x3b\x14\x91\xe5\x08\x8e\x9f\xc1\xe8\x17\x60\x44\x83\x18\x91\x09\x23\xba\x06\xe3\xff\x42\x7e\xa9\xa4\xc6\xbb\xbf\xa3\xed\xd7\x0f\x30\x54\xaf\xc8\x0e\xa1\xe1\x3e\x2e\x13\x34\x04\x27\x08\x50\x6b\xab\x01\xd4\x56\x5b\x80\x6a\x23\x2b\x80\xc9\xca\xe8\x40\xe8\x1c\x38\x69\x07\x36\xe8\x8c\x0e\xfc\xeb\x1c\x38\x79\x07\x36\x00\x87\x1d\x68\x39\x82\xce\x81\xed\xf6\xef\x77\x60\x83\xd1\x39\xb0\x4d\xcd\xd0\x81\x89\xc9\x81\xa1\x73\xe0\xc4\x1d\x98\x98\x1d\x18\x39\x07\xce\xc0\x81\xc9\x05\x07\x5a\x8e\xa0\x73\x60\xbb\xfd\x27\x1c\x98\x38\x07\xce\xc2\x81\xf2\xf9\xe8\x1d\xbd\xf7\x00\x00\x00\xff\xff\x06\x39\x29\x1e\xd3\x16\x00\x00")

func dataSubscriptionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataSubscriptionsJson,
		"data/subscriptions.json",
	)
}

func dataSubscriptionsJson() (*asset, error) {
	bytes, err := dataSubscriptionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/subscriptions.json", size: 5843, mode: os.FileMode(420), modTime: time.Unix(1462638500, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/ci_products.json": dataCi_productsJson,
	"data/cloud_providers.json": dataCloud_providersJson,
	"data/db_products.json": dataDb_productsJson,
	"data/kubernetes_products.json": dataKubernetes_productsJson,
	"data/subscriptions.json": dataSubscriptionsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"ci_products.json": &bintree{dataCi_productsJson, map[string]*bintree{}},
		"cloud_providers.json": &bintree{dataCloud_providersJson, map[string]*bintree{}},
		"db_products.json": &bintree{dataDb_productsJson, map[string]*bintree{}},
		"kubernetes_products.json": &bintree{dataKubernetes_productsJson, map[string]*bintree{}},
		"subscriptions.json": &bintree{dataSubscriptionsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

