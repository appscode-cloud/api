// Code generated by go-bindata.
// sources:
// data/files/ci.latest.json
// data/files/cloud_provider.json
// data/files/cluster.latest.json
// data/files/configs.yaml
// data/files/db.latest.json
// data/files/pkg.latest.json
// DO NOT EDIT!

package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFilesCiLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x96\x51\x6b\xdb\x30\x10\xc7\xdf\xf3\x29\x8c\x9e\x97\x20\x39\x8e\x31\x79\xcb\x9a\x52\x02\x5d\x3b\x42\xfa\xb0\x8d\x21\x14\xfb\x96\x8a\x5a\x52\x2a\x4b\x23\xa5\xf4\xbb\xef\xe2\xa5\xa9\x5d\x75\xc3\x50\x48\xf3\x10\x30\x7e\xb8\xff\xff\xee\x74\xbe\x1f\x46\x8f\xbd\x28\x22\x4b\x2f\xcb\x82\x8b\x15\x68\x47\xc6\x3f\x30\x12\x45\x8f\xf5\x1b\xb5\xea\xce\x93\x31\x39\x9b\xf5\xcf\xd8\x9c\xf5\xa7\xd7\xe4\xd3\xb3\xe2\x1e\xd6\x50\x4b\x2f\xa1\xca\x2f\xf9\x2e\xfc\xf9\x66\x76\x39\xe5\x93\x8b\xf3\xab\xc5\x8b\x7e\xef\x8d\x13\xdc\xc2\xbd\x97\x16\x0a\x74\xe5\x72\xd0\x6c\xbe\x37\x16\xb2\x5a\x97\xe2\x81\x6b\xa1\xea\x62\x5b\x4f\x34\x69\x7b\xd6\x56\xe6\x52\xaf\xb8\x32\x05\x94\x68\xfa\x3a\xf9\x76\xd1\x38\x9d\x54\xc0\xbd\x96\x38\x11\xf9\x32\xbb\xba\x59\x9c\x87\x99\xbf\x8c\x55\xbe\x14\xe8\xa0\x03\x16\x36\xdf\xda\xb0\x46\x85\x07\x7d\xfe\x1c\xdb\x64\xb0\xfc\xd6\x78\x8b\x59\xc3\x7d\xce\x2e\xae\x8c\x76\xb7\x28\x8c\x46\x64\x27\x3c\xed\xab\x2a\x70\xa2\x10\x4e\xb4\x8b\x59\xf3\x5b\x16\xb0\x2d\x36\x95\x2b\xe9\x44\x79\x9d\x83\xd0\xcd\xba\xa6\x42\xf1\x52\x6a\xbf\x69\x46\xf3\x35\xae\x85\x35\x02\x56\xa8\x76\x00\xa7\xb8\x23\xe3\x21\x6d\x7a\x20\x37\x4a\x81\x2e\xa0\xe0\xb0\x81\xdc\x3b\x63\xab\x76\x16\x6c\x1c\x58\x2d\x4a\xfe\x77\xef\x6c\xb5\x6c\x76\xdd\xef\x2f\x5c\x5d\x30\x2f\xce\x0a\xbc\x72\xc2\xba\x7a\xd3\x31\x65\x69\x9f\x32\x7c\x16\x94\x8e\xeb\x67\x40\x29\xfd\x4e\xda\x09\xf5\xe1\x6a\xfb\x90\xbe\x69\xef\x35\xba\xbc\x01\x69\x3c\x8f\x4f\x90\x76\x83\x94\x51\x7a\x10\x4a\xe3\xd7\x94\xc6\x01\xa5\x49\x07\x4a\xe3\x7f\x53\x1a\x23\xa5\x47\xc3\x5f\x72\xe2\xaf\x23\x7f\xe9\x07\xf1\x97\x04\xfc\xa5\xef\xe3\x2f\x39\x1e\xfe\x92\x79\x76\xe2\xaf\x1b\x7f\xf1\xe8\x30\xfc\x25\xaf\xf9\xcb\x02\xfe\xb2\xf7\xf1\x97\x1d\x0f\x7f\xd9\x1c\xdb\x9c\x00\xec\x04\xe0\xf0\x40\x3f\xc0\x2c\xb8\x26\xa6\x01\x81\xac\xcb\x2f\x30\xf9\xcf\x45\x31\x3d\x38\x83\xf8\xfe\xd9\x7b\xea\xfd\x09\x00\x00\xff\xff\x20\x9b\xef\x18\xc2\x0c\x00\x00")

func dataFilesCiLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesCiLatestJson,
		"data/files/ci.latest.json",
	)
}

func dataFilesCiLatestJson() (*asset, error) {
	bytes, err := dataFilesCiLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/ci.latest.json", size: 3266, mode: os.FileMode(436), modTime: time.Unix(1465449190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesCloud_providerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x9a\xe1\x6e\xdb\x36\x10\xc7\xbf\xe7\x29\x08\x7f\x8e\x0d\x8b\x52\x1d\x23\xdf\x1a\xa3\xeb\x02\x74\x6b\x00\x27\x1b\x86\xa1\x08\x18\x89\x96\x09\x4b\xa4\x40\x49\x4b\xdd\x22\x4f\xb3\x47\xd9\x8b\x8d\x92\x6d\x45\xb2\x48\x87\xa7\x96\x80\xbf\x29\x3c\x8a\xf9\x1d\xef\x7f\x34\xc9\xd3\xf7\x0b\x84\x46\x61\x22\xca\xe8\x31\x93\xe2\x1f\x16\x51\x39\xba\xae\x1a\x55\x33\x79\xce\x0f\xcf\xea\x2f\x4e\x52\x3a\xba\xae\x1b\x2f\x0f\x6d\x59\xf9\x94\xb0\x70\x74\x8d\x0a\x59\xd2\xa6\x55\xd2\x98\x09\xae\xde\xfd\x7b\xdf\x82\xd0\xf7\xe6\x49\xd9\x13\x11\x92\x42\xf5\x50\xa3\xfd\xc1\x64\xcc\x38\x23\xcd\x90\xad\x01\x94\xb9\xcc\xc7\x94\xe4\xc5\xd8\xeb\xda\xbf\x09\x4e\x3b\xc3\xd7\xad\x4d\xe7\xee\x68\x6d\xcb\x93\xd1\x12\x1a\x2d\x91\xd1\x42\x47\x2d\xc3\x97\xe6\xf9\xe5\xf2\x4d\xb7\x17\x24\x61\x2b\x21\x4f\x3a\xfe\x4c\x01\x8e\xef\x3a\xeb\x1c\xdf\x59\x74\x8e\xef\x2c\xe1\x60\x27\x3e\x2b\x5a\xf5\x70\xda\x01\xdc\x77\xc0\xc8\x8f\x8d\xfc\xd8\xc8\x8f\x87\xf3\xdf\x4a\x9a\x10\x1e\x19\x1c\xa0\x25\x20\x02\x4d\xe7\x9e\x07\x8d\xa5\xe7\x41\x63\x19\xee\xc1\x92\xf1\x98\x64\x42\x52\x83\x0f\x24\x1b\xe7\xa2\x2c\xd6\xf6\x39\xd4\x7d\xa3\xe7\x4d\xd7\xfc\x34\x18\xfc\x5e\x6c\xb6\xc2\x0c\xcd\x85\x04\x42\xb7\xde\xd0\x41\xb7\xcc\xbd\x38\x74\xcd\xc0\x60\xe8\xa7\xfa\x48\xf4\xed\x88\x6d\x23\x4e\xb7\xe0\x48\xf4\x33\xa3\x6b\x06\x46\xa2\xa1\xce\x89\x76\x7d\x6d\x03\xff\xf7\xaf\x40\x77\xa4\x4c\x84\x0d\x74\x33\x5e\x8f\xb7\xb1\x98\x50\xf7\x4f\x5f\x9a\x5f\x11\xc6\xf3\x82\xf0\x90\x3e\x16\xdb\x8c\x9a\x7f\x4c\x14\xa9\x5a\x86\xe4\x56\xb1\x7e\xa4\x9c\x4a\x92\xa0\xbb\x52\x66\x22\x3f\x4a\x0a\xfa\xb5\xa0\x92\x93\xe4\x31\xdf\x94\xaa\x6f\x81\x27\x29\x0b\xe5\x91\x57\x61\xa6\x6c\x5e\xa7\x29\xa5\x69\x3d\xba\xf7\xe6\xac\x0e\x27\xc9\x53\x92\x24\xd6\x24\xd8\x21\x49\x4a\x23\x56\xa6\x1a\x14\xac\x45\x09\x1c\xa2\x24\x44\xc6\xd4\x9a\x64\xee\x8a\x24\x0d\xce\x88\xe4\xab\x09\x25\xd0\x6b\x76\xe6\x90\x05\x1b\x61\xe6\x5a\x18\xdf\x99\x6e\x15\x4c\x60\x84\xf1\x66\x5a\x9a\x99\x33\xe9\x2a\x1a\x6f\x6a\x0e\xd4\xd4\x10\xa9\xa9\x33\x1e\xdf\x9c\xd5\xfa\x05\xc6\x9f\x5c\xbd\x73\x48\x03\x4b\xa7\xab\x89\x4b\x16\x68\x42\xb9\x64\x01\x27\x14\x48\x32\x0b\x91\x66\x65\x41\xd1\xe7\xac\x60\x29\xfb\x46\xa3\x93\x38\x21\x74\xd5\x83\x6a\x06\x8c\x03\x8c\x14\x50\x36\x60\x1c\x68\xb0\x60\xca\x01\xe3\x80\xd7\x3f\xc7\xe2\x99\x1b\x79\x7c\xc3\x7a\xec\x92\x07\xba\xe6\x38\x16\x33\x78\xd9\x71\x2b\x66\xf8\xca\xe3\x54\xcc\xfe\x99\x89\xd9\x3f\x25\x66\xbd\x7e\x80\x3f\xe6\x77\x0f\xe8\x76\x7f\xd8\xc9\x4f\xb2\xc4\xd8\x71\xa8\x40\x28\x8e\xa7\xe5\xb7\xfa\x2d\x24\xac\xa2\x24\xa1\x29\x0e\x9b\x17\x28\x0b\x30\xbf\xfd\x29\x2c\xc1\xa1\x38\x50\xd1\xcc\x40\x87\x5d\x28\x0d\x38\xbd\x3d\x0c\x3a\x3a\x40\x79\xc0\x3a\xc6\x01\xe8\xf0\xb0\x2c\x84\x24\xb1\xed\x7a\xc3\xb0\x6b\xf5\x80\x79\xdc\xca\x07\x8c\xe3\x5a\x3f\x60\xa0\xf3\x12\x50\x74\x66\x02\x8a\xce\x4b\x40\xd1\xb9\x09\x28\x3a\x29\x20\x3d\x50\x47\x40\xfb\xa7\xdd\x5d\xea\x1e\x6f\x14\x87\xb4\x5f\xbb\xab\x1a\x0f\xe3\x0d\xac\xdd\x35\x57\xc7\x1f\x48\x5e\xb9\x81\x1e\x96\x5d\xec\x4f\xaf\x77\xc7\x37\x54\x6e\x68\x42\xb7\x68\x21\x4a\x5e\x6c\x2f\xd1\xb2\xba\xb1\x46\x0b\x22\x45\xc2\x38\x01\xd4\xf4\xbc\xb1\xa9\x72\xe7\x8d\x4d\x95\x3b\x6f\x1c\x0d\xbc\x15\x5f\x50\x5e\x54\xe7\xf6\x13\xae\x55\x1e\x85\x2c\x41\x37\x49\xb9\x5a\xe5\x97\xe8\x56\x3c\xdb\xfa\x13\xee\x46\xf7\xc6\xba\x6a\x57\x63\xd4\xf9\xdb\x18\x75\x2e\x37\xc6\xd5\x40\xaf\xff\xa4\xbb\x80\x7e\x28\xa5\xc8\xa8\xd1\xf3\x65\x31\x41\x1f\xd7\x2c\x4f\x08\xe3\x97\xe8\x86\x26\x71\xef\x6a\xc9\x54\x23\xab\xc6\xad\x6b\x5e\x1a\xf7\x3a\xd6\x9e\x7f\x1d\xeb\xd0\xb0\x56\x8a\x45\xef\xf3\xe3\x9a\x6b\x3b\xaa\x6b\xc2\xe3\x75\x49\x1a\xc1\xde\x13\xf6\x4c\xb8\x55\xb9\x46\x8d\xbb\x97\x5d\xbf\x56\xf3\x6a\xeb\x57\x9f\x5e\x6d\xa6\xd2\xd3\x21\xbf\x9b\x1c\x85\x57\x46\x96\xfd\x02\xc3\xf1\x7e\xde\x1b\xc3\xaa\x10\xde\xe4\x0a\xb6\x26\x12\x1e\x11\x79\x7a\x29\xe4\x0a\x62\xdf\xef\xb8\x24\xf5\x13\xaf\x2b\xc1\x28\xd8\xd5\x65\x25\x98\x24\x70\x74\x53\x09\x06\x99\x3b\xba\xa5\x84\xcb\x64\x06\xb8\xf3\x77\x8b\xe2\x63\x1d\x8b\x61\x0b\xe8\x61\x10\xcc\xaf\x2c\x5e\xa3\xdd\xc1\xe6\x2d\x9e\xb5\xea\xaa\xfe\x0b\x40\xb5\x9e\xef\x18\xc5\x5e\xb6\x18\x54\xb1\x1a\x80\x62\x2f\xdc\x77\xa0\x3d\xdf\x00\x14\x88\x74\xbd\x29\xe8\xc4\x30\x80\x06\xa4\x5e\x3c\x05\x55\x39\x6b\x9c\xc5\xdd\x83\x0d\x8b\xfa\xb7\x10\xe9\x4e\x9c\x82\xd8\x0b\xd7\x9f\xc0\x95\x0b\x00\xb1\x97\xed\xd5\x04\xae\x5b\x00\x08\x48\xb4\xc1\x04\xae\x5a\x00\x0b\x4c\xb2\xf3\xb6\x54\x0e\x7b\xaa\x8b\x16\xda\x28\x62\x31\x2b\x48\x22\x42\xaa\xf6\x7c\xbd\xc3\x53\xc7\xda\x3f\x45\xad\x48\x92\x0f\xfa\x04\xf2\x77\xfa\x8c\xfe\x12\x72\x83\x8e\x76\x3c\xcd\xbe\x95\x6f\x43\xab\xcf\xa0\xea\x7e\xa0\xad\x71\xfb\x3b\x1f\xc2\xd1\x2f\x52\xed\x2a\x59\x1e\x0a\x23\x4a\xbe\x12\x56\x28\x75\xbf\xa1\x28\xcd\x84\x60\xf3\x84\x68\x3e\x2b\xd4\x4e\x08\x1e\x4c\xf1\x3e\xad\x8e\x43\x11\x49\x8d\x18\x24\xcd\xad\x30\xea\x7e\x83\xe3\x72\xf8\xc4\xcf\x1c\x93\x38\xb3\x8b\x49\xd5\x6f\x28\xc6\x27\xc1\x23\xc1\x8d\x0c\x89\xe0\x56\x0c\x75\xbf\x1f\xd6\x85\x6f\xd6\x85\x6f\xa9\x0b\x7f\x30\x45\x95\x24\x9b\x55\x29\x0b\xe3\x64\xac\x24\xb1\x9a\x8c\xba\xdf\x50\x8c\x7b\x21\x05\x2f\xcc\x99\x5a\x08\x69\x05\x51\xf7\x1b\x0a\x71\xa3\x8e\xcb\x6a\x45\x3c\x21\xce\xa7\xc4\x0e\xa3\xee\xa7\xc7\x38\x2c\xd5\x3f\x70\xfc\x85\x7c\x88\xe1\xc5\x4f\x6f\x9e\x3c\x25\x49\x8f\x9b\x22\x96\x6f\xa0\x87\x1d\x08\x16\xd6\x62\xe1\x3e\x16\xd6\x60\x05\xce\xb0\x02\x5b\xac\x40\x83\xe5\xee\x9b\xa7\xb9\x16\x2b\xe8\x63\xcd\x35\x58\x73\x67\x58\xde\x4c\xcb\x35\xd7\x88\x6b\xa6\x01\x73\xf8\x91\x98\xaf\xd7\x97\xa7\x89\xa4\xaf\x53\x98\x0f\x3b\xce\x82\x24\xa6\x0f\xe6\xd1\x0c\xed\x44\xa6\x0b\x67\xe0\x2e\x9e\x33\x83\xfc\xa7\x7d\xb4\x99\x36\x01\xda\x89\x79\x58\xe7\x2e\x0e\x7f\xbd\x5c\xbc\x5c\xfc\x1f\x00\x00\xff\xff\xd1\x90\xc3\x13\x9f\x33\x00\x00")

func dataFilesCloud_providerJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesCloud_providerJson,
		"data/files/cloud_provider.json",
	)
}

func dataFilesCloud_providerJson() (*asset, error) {
	bytes, err := dataFilesCloud_providerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/cloud_provider.json", size: 13215, mode: os.FileMode(436), modTime: time.Unix(1467172533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesClusterLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xcf\x6a\xf2\x40\x14\xc5\xf7\x3e\xc5\x30\xcb\xef\xab\x61\xa2\xd8\x45\x76\x69\x09\x22\x6d\x6d\x69\xe3\xa2\x2d\x65\x18\x93\x5b\x1d\xcc\x4c\xe2\xfc\x59\x88\xe4\xdd\x7b\x33\x44\x63\xb1\x30\x5c\xc2\x3d\xbf\x73\x38\xb9\xc7\x11\x21\x74\xe7\xd7\xc0\xc5\x06\xb4\xa3\xc9\x27\x2e\x08\x39\x86\x89\x92\xdd\x79\x9a\xd0\x87\xd5\x5d\x36\x4e\xe7\xd9\x32\x1f\xa7\x8b\x67\x7a\x73\x52\xdd\xa1\x01\x94\xef\x1f\xdf\xf2\xd7\x61\x6b\xfd\x9a\xf7\x4a\x67\xe4\xc1\x38\xc8\x7b\x5f\x3b\xc1\x0d\xec\xbd\x34\x50\x22\x54\x54\xde\x3a\x30\xd1\x45\x8d\x33\x5c\x4a\xdb\x54\xe2\xc0\xb5\x50\x21\x0f\x11\xa3\xc1\x81\x1d\x90\xc6\xc8\x42\xea\x0d\x57\x75\x09\x15\x32\x2f\xe9\xfb\xfc\xa2\xa2\x54\xc0\xbd\x96\xf8\x6b\xf4\x69\xb1\x5c\xe5\xd9\xb5\xf3\xbb\x36\xca\x57\x02\x09\x16\xcd\xc8\x3f\x52\x34\x9e\xfc\x27\x2c\x8a\xf1\xdb\x08\x75\xdd\xa6\x33\x62\xaa\xc5\xf6\xa7\x4b\x75\x71\x60\xf8\xb6\xf6\x06\x73\xa6\x67\x4f\xbf\x57\xb5\x76\x5b\x14\x26\xd1\x8c\xf6\x4a\x3b\xc4\x0a\x07\xdc\x3a\x61\x5c\xb8\xc7\x84\xc5\xb7\x63\x16\xe3\xcb\x19\x4b\xc2\x8b\x18\x63\x1f\xf4\xb7\x01\x74\xd9\xe3\x53\xf6\x27\x1e\xe8\x16\xe7\xd7\xa8\x1d\xfd\x04\x00\x00\xff\xff\x94\x83\x36\x08\xe9\x01\x00\x00")

func dataFilesClusterLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesClusterLatestJson,
		"data/files/cluster.latest.json",
	)
}

func dataFilesClusterLatestJson() (*asset, error) {
	bytes, err := dataFilesClusterLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/cluster.latest.json", size: 489, mode: os.FileMode(436), modTime: time.Unix(1464582277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesConfigsYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x41\x6f\xe2\x30\x10\x85\xef\xf9\x15\xa3\x70\xde\x44\xbb\x47\x6e\x11\x8b\x76\x91\x68\x55\x89\xb6\x77\x63\x0f\x64\x54\x67\x26\xb2\xc7\xa9\xf8\xf7\x75\x40\x50\x10\x52\xe8\x29\x2f\x79\xdf\x1b\x3f\x65\x3c\x83\x85\xf0\x8e\xf6\x29\x18\x25\xe1\x08\x3b\x09\xd0\xbc\xac\x96\xec\x7a\x21\xd6\x58\x8d\x6f\x1b\x0c\x03\x06\xf8\x24\xef\x8b\x19\x18\xab\x20\x0c\xc4\x8e\x06\x72\xc9\x78\xe8\x50\x5b\x71\x11\x52\x9f\xbf\x6b\x8b\x60\x6f\x86\xe6\x4c\x1f\x24\xb3\xe8\xaa\xa2\xd0\x43\x8f\x73\x28\x57\xac\x18\x2c\xf6\x2a\xe1\x54\xa1\x2c\x4c\xca\x59\x56\xb2\xc7\xd8\x15\x30\x2f\x00\x24\x38\x0c\x73\xf8\x9d\x65\xe2\x2b\x12\xdd\xb9\xeb\x48\x01\xfc\x82\xb2\x6e\xd1\x78\x6d\xab\xff\xc7\x47\xbd\x51\xa3\x29\x96\x17\x77\x0c\x57\xcd\xcd\x59\xf5\x5a\xf6\xc4\x0f\x11\x49\x3a\xcd\xbc\xca\x07\x5e\x8d\xe9\x0c\x79\xe2\xbd\xa7\xa8\xd5\xd3\x49\xaf\xb3\xae\x37\xc8\x6e\x39\x9a\x3f\x40\xd3\x36\xda\x40\x5b\x7c\x8c\xbe\x71\xbc\x87\xd9\x74\x18\x7b\x63\xb1\x7a\x3e\xab\x7a\x11\x30\xff\xb7\x69\xe6\x1f\xea\x34\xb0\x8a\xcd\x90\x0f\x37\x5b\x7f\x9c\x14\x0f\x51\xb1\x6b\xa6\xf7\x62\x29\x17\xce\x5c\xb8\xab\xf0\xed\xfc\x45\x8f\xa3\x33\x18\x4f\x6e\xe2\x22\xfc\xc9\x92\xe5\xfd\x42\x3d\xd8\xfe\x57\x00\x00\x00\xff\xff\xf0\x0b\x0b\x49\xe9\x02\x00\x00")

func dataFilesConfigsYamlBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesConfigsYaml,
		"data/files/configs.yaml",
	)
}

func dataFilesConfigsYaml() (*asset, error) {
	bytes, err := dataFilesConfigsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/configs.yaml", size: 745, mode: os.FileMode(436), modTime: time.Unix(1465471678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesDbLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\xdb\x6e\xda\x40\x10\x7d\xf7\x57\x44\x7e\x2e\xd6\x12\x94\x56\xe5\xcd\x18\x87\x20\xd1\x04\x61\x90\x7a\x51\x65\x2d\x78\x08\xab\xfa\x96\xbd\x54\x8d\xa2\xfc\x7b\x87\x65\x51\x8c\x65\x5a\x9b\x24\xe2\xc5\xc8\x12\x30\x67\x66\x76\x3c\xc7\x3e\xe7\xc9\xba\xb8\xb0\xf3\x4c\xc8\x7b\x0e\xc2\xee\x6f\xff\x62\x20\xa5\x09\xd8\xfd\x97\xf8\x87\x5d\xf8\x37\x70\xc1\xb2\x14\xf3\x7e\xe8\x00\x86\x3e\x3b\x57\xb6\xfe\xfd\xd3\xe4\x44\xcb\x17\xf4\xc9\x7c\x63\x58\xfc\x52\xd8\x70\x38\xe8\x4c\x47\x9d\x81\x1b\x8c\x3d\xd3\x53\x83\xf2\x31\x07\x8d\x16\x83\x42\x2d\x43\x03\x4c\xef\x82\xf9\x68\xe6\x07\x45\xf8\x41\x65\x92\x86\x1c\x1e\x14\xe3\x10\x61\x52\xb4\x74\xd6\x1c\xc0\x29\x0d\xbd\x1b\x8a\x89\x3c\xa6\x8f\xa1\xb9\xaf\x01\x15\x6c\x55\xc4\x73\xce\x56\x2c\xbd\x0f\x93\x2c\x82\x18\x13\xae\x67\xbe\x7f\x30\x20\x4b\x20\x54\x29\x93\x88\x7d\x19\xdf\x2e\xe6\x7e\x55\xf5\x3a\xe3\x89\x8a\x29\xe6\x10\xa7\x5b\x75\xfc\x36\x11\xfb\x88\x68\xbf\xe8\x7d\x03\xe0\xe1\x26\x53\x1c\x2b\x7b\x85\x3a\x83\x24\x59\x2a\x37\x08\x5d\x99\x4d\x6f\x3f\xcf\xc5\xee\x54\x42\x28\x24\xe5\x52\xef\xe1\x92\x74\x3f\x76\x48\x17\xaf\x39\x21\x7d\x7d\x39\x84\x90\xef\x76\xb9\x04\xd2\xc8\x14\xf4\x48\x65\x81\x55\x3a\xeb\x08\x9d\xc3\xc5\xcc\x1d\x4c\xfc\xf7\x20\x34\xa7\x2c\xaa\x43\xe8\x50\x71\xba\x8c\xe1\x5f\x94\x4e\xdd\x6f\xa3\x96\xd2\x9a\x94\xde\xb8\xe7\x64\xf3\xf0\xf4\x96\xc8\x57\x10\xe9\x4d\xee\x16\xc3\x73\x72\xe9\xc5\x99\x8a\x5a\x3a\xeb\xd2\xb9\xb3\x52\xcb\x9c\x6a\x43\x4c\x85\x64\x2b\x01\x94\xaf\x36\x65\x77\x3e\x04\x8f\x5b\x74\xd7\xf9\x84\x26\xbd\x1f\xc9\xbe\x74\x7a\xb8\xb2\x46\x9e\xed\x07\xcd\x3d\xdb\x9f\xb8\xc1\x7c\xec\x05\xbe\x3b\xf3\x6e\x6a\x19\x77\xd5\xfd\x54\x3d\x52\xad\x7b\xbf\x99\x42\x20\xb1\x27\xb8\x77\x23\x6a\xb5\x50\xd4\xa5\xb6\xf5\xf1\xd7\xe9\x05\x4b\xd7\xb1\xfa\x53\x16\x0a\x13\x3d\xae\x10\xb8\x13\xe2\xf4\x9a\x69\xc2\xf8\xf6\x7a\xb2\xf8\xda\x5c\x17\x76\x75\xb5\x04\xe1\x60\xee\xaa\xc7\xa5\x55\x82\x37\x53\x02\x43\xe7\x09\x6a\x50\x8f\x50\x2d\x03\xff\x25\xb4\x7d\xff\x4f\x7e\xff\xad\x67\xeb\x6f\x00\x00\x00\xff\xff\x4f\xcc\xb8\xbc\xcc\x0f\x00\x00")

func dataFilesDbLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesDbLatestJson,
		"data/files/db.latest.json",
	)
}

func dataFilesDbLatestJson() (*asset, error) {
	bytes, err := dataFilesDbLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/db.latest.json", size: 4044, mode: os.FileMode(436), modTime: time.Unix(1464582277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesPkgLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xd8\x5d\x8b\x9b\x4c\x14\x07\xf0\xfb\x7c\x8a\xe0\xf5\x13\x19\xb3\xec\x73\xe1\x9d\x65\xdd\x56\xda\xec\x8a\x71\x2f\xb6\xa5\xc8\xa8\x93\x64\xc8\x38\xba\xf3\x52\xba\x2c\xfb\xdd\x7b\x4c\x93\x26\x6e\x42\xa1\xac\x09\x5e\x1c\x08\x12\xfc\x9f\x19\x8f\xc3\x0f\x19\xe6\x65\x34\x1e\x3b\xcd\x7a\xe9\xf8\xdf\xe0\xdf\x78\xfc\xb2\xb9\xc2\x3d\xbd\xb6\x8e\xef\x7c\x9a\x44\x77\x37\x51\x38\x49\x93\x28\xf8\xe2\xfc\xb7\x0b\xcd\x73\xc3\x20\x8d\x3f\x7f\xdc\xdf\xd3\x36\xcf\xb6\xf7\x1f\xe6\x61\xb2\x0f\x9e\x6c\x6d\x68\xa6\xd8\x93\xe5\x8a\x95\x10\xc3\xe3\x5c\xab\x99\xda\x97\x94\x5c\x37\x82\x3e\x67\x92\x56\xed\xf8\x48\x96\x9c\xed\xd3\x46\xf1\x82\xcb\x65\x56\xd5\x25\x13\x10\xdf\x26\x61\xd8\x79\xae\x2e\x14\x6f\x0c\xaf\xe5\xae\x81\xb7\xed\xf2\x8a\x65\x56\x72\x03\xd1\x4d\xf0\x78\x3c\xf3\xa2\x56\x95\x15\x14\x62\xe2\x7a\xc7\x6d\xb5\x65\x30\x81\x86\xe6\x77\xeb\xd3\x0e\x66\x0a\x5a\x92\x66\x95\x55\xd3\x0a\x86\x5e\xfd\x19\xd8\x09\x69\xd3\x86\x53\xf7\xda\xd9\xa6\xaf\xdd\x95\xe9\xce\xb9\x5b\x1a\xdf\x23\x87\xb3\xad\x68\x0e\x3d\x50\x53\x2b\x17\x9a\x5a\x67\xcb\xdc\xf1\xa7\x87\x15\x54\x19\xbe\xa0\x85\xd9\xc7\x1e\x39\xcc\x0b\xee\xe6\x96\x8b\x32\xa3\x4b\x26\x61\x1d\x26\xde\x61\x28\xac\x36\x4c\xb9\x6b\x9b\xb3\x93\x05\x65\xee\x36\x94\x97\x6e\x53\x6b\xb3\x54\x4c\x3b\xfe\xf5\x89\x94\x09\xaa\x0d\x2f\x34\xa3\xaa\x58\x9d\x2e\xe1\x72\x21\xec\x4f\xc8\x8e\xd6\xa2\xa4\x86\x65\xda\xc0\x7b\x6c\x8c\x4c\x89\xf7\xff\x84\x78\xf0\x4b\x09\xf1\x37\x3f\x97\x10\xf2\xd5\xe9\x0e\x60\xb2\xdc\x96\x5f\x91\x93\xe5\xa3\x83\xa7\x1c\xd9\x9e\xa7\x41\x92\x3e\xc4\x17\xd6\x3d\x6f\x5f\xd2\x36\xe8\x1b\x7d\x9f\xd9\x77\x9c\xdc\x5f\xd8\x76\xac\xea\x05\xd3\x1a\xa8\x52\x81\xc0\x11\xf8\x99\x81\x87\x77\xe9\xe4\x43\x98\x06\x17\xf3\x1d\x4a\x58\x66\xd0\xa4\xdf\xb5\x3d\x79\xd3\x32\xe2\x46\xdc\x47\xb8\xe3\xcb\xc2\x8e\x15\xff\x01\x2d\x8f\x23\x09\x6f\x29\x04\x6d\xb9\x22\x71\x24\x7e\xde\xef\x77\xd7\xd1\x99\x89\xdf\x2a\xf6\xae\xaf\x76\x9c\x44\xb3\x20\x79\x44\xd5\xa8\xfa\xef\xaa\x67\xd3\xd9\xef\x63\x93\xa1\x1c\x98\x40\x43\x48\x1b\x69\xf7\x44\x7b\x7b\x6a\x32\x9c\xf3\x12\xe4\x8d\xbc\xfb\xe3\x1d\x27\xf7\x03\x3b\x2e\x41\xdf\xe8\xbb\x1f\xdf\x41\x3c\xb0\x9d\x09\x34\x84\xb4\x91\x76\x4f\xb4\x07\xb7\x33\x41\xde\xc8\xbb\x3f\xde\xc3\xdb\x99\xa0\x6f\xf4\xfd\x8f\xbe\xe1\xfa\x7d\xf4\x3a\xfa\x15\x00\x00\xff\xff\x09\xaf\x41\x3a\x78\x22\x00\x00")

func dataFilesPkgLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesPkgLatestJson,
		"data/files/pkg.latest.json",
	)
}

func dataFilesPkgLatestJson() (*asset, error) {
	bytes, err := dataFilesPkgLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/pkg.latest.json", size: 8824, mode: os.FileMode(436), modTime: time.Unix(1464677971, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/files/ci.latest.json": dataFilesCiLatestJson,
	"data/files/cloud_provider.json": dataFilesCloud_providerJson,
	"data/files/cluster.latest.json": dataFilesClusterLatestJson,
	"data/files/configs.yaml": dataFilesConfigsYaml,
	"data/files/db.latest.json": dataFilesDbLatestJson,
	"data/files/pkg.latest.json": dataFilesPkgLatestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"files": &bintree{nil, map[string]*bintree{
			"ci.latest.json": &bintree{dataFilesCiLatestJson, map[string]*bintree{}},
			"cloud_provider.json": &bintree{dataFilesCloud_providerJson, map[string]*bintree{}},
			"cluster.latest.json": &bintree{dataFilesClusterLatestJson, map[string]*bintree{}},
			"configs.yaml": &bintree{dataFilesConfigsYaml, map[string]*bintree{}},
			"db.latest.json": &bintree{dataFilesDbLatestJson, map[string]*bintree{}},
			"pkg.latest.json": &bintree{dataFilesPkgLatestJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

