// Code generated by go-bindata.
// sources:
// data/files/ci.latest.json
// data/files/cloud_provider.json
// data/files/cluster.latest.json
// data/files/configs.yaml
// data/files/database.latest.json
// data/files/subscription.latest.json
// DO NOT EDIT!

package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFilesCiLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x96\x5f\x6b\xdb\x30\x14\xc5\xdf\xf3\x29\x8c\x9e\x9b\x22\x29\x8e\x31\x7e\xcb\xda\x31\x02\xeb\x3a\xcc\x5e\xba\x31\x84\x62\x5d\x52\x51\x5b\x32\xfa\x33\x52\x4a\xbf\xfb\x24\x6f\x4d\xdd\x2a\x1b\x85\x42\x12\x08\x18\x13\xce\x39\xf7\xde\x5c\xf3\x43\xe8\x61\x92\x65\x68\xe5\x65\x2b\x18\x5f\x83\x72\xa8\xca\x7e\x04\x29\xcb\x1e\x86\x77\x30\xed\x9d\x0f\x22\xba\x58\x4e\x2f\x48\x4d\xa6\x97\xd7\xe8\xec\xc9\x52\xbc\x83\xe8\x7d\x88\xf5\xd9\x62\xa8\xdf\x9a\xbd\x91\x8d\x54\x6b\xd6\x69\x01\x2d\xaa\xd0\xd7\xc5\xcd\xa7\x67\xd7\xfa\x95\x6d\x8c\xec\x9d\xd4\x8a\xb9\xfb\x1e\x62\xa2\x5e\x5e\x2d\xea\x9b\x1d\x2d\xc0\x85\x5f\x31\xf1\xb1\x66\x57\xcb\x2f\xcf\x09\xaf\xa4\x63\x31\x06\xcc\x5b\x81\x2a\x7c\x4e\xb6\x9e\x90\xb6\x6f\xf9\xfd\xd8\x7e\x5a\x2a\xf6\x06\xc3\x6e\xb5\x37\xa8\x9a\x9d\xbd\x54\x3b\xad\xdc\x2d\xaa\xe6\xf3\xbf\xf2\xe3\xb6\x63\xf8\x1f\x5c\x70\xc7\xc3\xce\xe3\x4e\x46\xff\x92\x02\x4c\xfc\x12\x97\x72\x2d\x1d\x6f\xaf\x1b\xe0\x0a\x8d\xfa\x6a\x1b\xdd\xcf\x52\xf9\xcd\x58\x6e\xfa\xf8\x6d\xc9\x48\x31\xbc\x7b\xa5\x84\x35\xee\x82\x34\xc3\xe3\x14\x34\xba\xeb\x40\x09\x10\x0c\x36\xd0\x78\xa7\x8d\x7d\x55\x07\x1b\x07\x46\xf1\x96\x49\x11\x67\x93\xf5\x0a\x25\x0b\x85\x65\x80\x59\xc7\x8d\x83\x21\x44\x31\x29\xa6\x98\x84\xe7\x1b\xc6\xd5\xf0\x9c\x63\x8c\xbf\xa3\x97\x15\xc3\xe0\x3f\xf9\x19\xde\x99\x9f\x8c\xe6\xec\x22\x89\xd6\xf4\x74\x48\x22\x18\xef\x0b\x25\x9a\xa0\x44\x53\x94\xf2\xb7\xa0\x44\xff\x8d\x12\x3d\x32\x94\xf2\x13\x42\xa9\x38\x20\x4a\x79\x8a\x52\xf1\x4e\x94\xf2\xa3\x42\x29\xaf\xcb\xd3\x41\x89\xce\xf7\x86\x52\x9e\xa0\x54\xa6\x28\x95\xef\x44\xa9\x3c\x2a\x94\xca\x3a\x0c\x3a\x19\x96\x66\xfb\x3b\x96\xca\xf4\xb2\x54\xa4\x30\x91\x37\x1d\x4c\xf9\x7f\xae\x4b\xc5\x01\x70\x0a\xef\x9f\x93\xc7\xc9\xef\x00\x00\x00\xff\xff\x51\x06\x80\xd5\x94\x0b\x00\x00")

func dataFilesCiLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesCiLatestJson,
		"data/files/ci.latest.json",
	)
}

func dataFilesCiLatestJson() (*asset, error) {
	bytes, err := dataFilesCiLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/ci.latest.json", size: 2964, mode: os.FileMode(420), modTime: time.Unix(1464211133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesCloud_providerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x99\xcf\x6e\xe3\xb6\x13\xc7\xef\x79\x0a\x42\x67\x5b\xb0\x28\xad\x63\xec\xed\x17\x63\x91\x5f\x80\x16\x1b\xc0\x9b\xf6\x50\x2c\x16\x5c\x89\x91\x89\x48\xa4\x40\x49\x4d\xbd\x8b\x3c\x4d\x1f\xa5\x2f\x56\xfa\x1f\x63\x59\xa4\xcd\x11\x4c\xd4\x37\x99\x43\xd1\x9f\xd1\x7c\x67\x24\x72\x7e\xde\x20\x14\xa4\x85\x68\xb3\x6f\x95\x14\x7f\xb2\x8c\xca\xe0\xe3\x7a\x50\x0d\x93\xd7\x7a\x7f\xad\x7e\x71\x52\xd2\xe0\xe3\x66\x70\xb4\x1f\x93\x34\x67\x82\xab\x59\x7f\xec\x46\x10\xfa\xa9\xaf\x94\xbd\x10\x29\x69\xd4\x0c\x75\xdf\x6f\x4c\xe6\x8c\x33\xa2\x6f\x3e\x58\x40\x99\xdb\x7a\x4c\x49\xdd\x8c\xa3\xae\xfd\x87\xe0\xb4\xb3\xfc\x66\x54\x4f\xee\xae\x76\x68\xf9\x6e\xb5\xa4\x56\x4b\x66\xb5\xd0\xe0\xc0\xf0\x55\x5f\xbf\x8d\xce\xba\x3d\x27\x05\x7b\x16\xf2\xa4\xe3\xaf\x14\xe0\xf8\x76\xb2\xc9\xf1\xad\xc5\xe4\xf8\xd6\x92\x0e\x76\xe2\xb3\xa2\x55\x17\xa7\x1d\xc0\x7d\x07\xac\xfc\xd8\xca\x8f\xad\xfc\x78\x38\xff\x83\xa4\x05\xe1\x99\xc5\x01\xda\x02\x22\xa0\x27\xf7\x3c\xd0\x96\x9e\x07\xda\x32\xdc\x83\x05\xe3\x39\xa9\x84\xa4\x16\x1f\x48\x35\xae\x45\xdb\x2c\xdd\x73\xa8\x7b\x47\xcf\x9b\xae\xf9\xfb\x60\xf0\x2f\xe2\x65\x25\xec\xd0\x5c\x48\x20\xf4\xc1\x1d\x26\xe8\x03\x73\x2f\x0e\x5d\x33\x30\x18\xe6\x47\x7d\x24\xfa\xc3\x88\xad\x32\x4e\x57\xe0\x48\xf4\x33\xa3\x6b\x06\x46\x42\x53\xd7\xc4\x58\x5f\x0f\x81\xff\xf9\x5b\xa0\x47\xd2\x16\xc2\x05\x5a\xaf\xd7\xe3\xd5\x16\x1b\xea\xee\xea\xab\x7e\x8b\x30\x5e\x37\x84\xa7\xf4\x5b\xb3\xaa\xa8\xfd\x65\xa2\x48\x55\x19\x92\x2b\xc5\x7a\x4f\x39\x95\xa4\x40\x8f\xad\xac\x44\x7d\x94\x14\xf5\x4b\xab\xa6\x34\x38\x2c\x59\x2a\x8f\x9c\x49\x2b\x65\x8b\x3a\x43\x25\x2d\x37\x8b\x46\x67\x1f\x26\x18\xa0\x2e\x49\x51\x38\x03\xe0\xcb\x03\x94\x34\x63\x6d\x69\x20\xc0\x46\x82\xe4\xf2\x04\x05\x91\x39\x75\x06\x98\x5d\x18\xa0\x4c\xfe\x7b\x80\xbf\x6c\x04\x89\x59\x86\xd3\xcb\x23\x60\x2b\xc3\xcc\xc8\x10\x5f\x5a\x8a\x8a\x21\xb1\x32\x44\x53\x23\xc4\xf4\xd2\x6a\x54\x10\xd1\xc4\x1e\x8d\x89\x25\x1c\x93\x4b\x63\xc4\xf6\xb4\x34\x17\x86\x38\xbc\xfd\x70\x79\x08\x58\x62\xdc\x86\x1e\x10\xa0\xa9\xe1\x01\x01\x9c\x1a\x20\x39\xcc\x45\x59\xb5\x0d\x45\x9f\xab\x86\x95\xec\x07\xcd\x4c\x14\x29\xb4\x48\x41\xf5\xe0\x4a\x01\x0c\x07\x50\x12\xae\x14\xd0\x88\xc0\x54\xe1\x4a\x01\x2e\x57\x7e\x84\x31\xb3\x62\xc4\x96\xaa\xe9\x01\x03\x5a\x2b\xfc\xe8\x13\x5c\x2e\xbc\xe8\x13\x5e\x31\x7c\xe8\x33\xbe\x0e\x7d\xc6\xa7\xf4\x69\xd6\x06\xf0\x75\xfa\xf8\x84\x1e\x76\xbb\x83\xda\x84\x90\x63\xcf\xf1\x70\x21\xf0\xfc\x10\x7e\xdd\xdc\x85\xc4\xa9\x50\x48\x68\x8e\xc2\x9e\x82\x23\x02\x30\x41\xe3\x09\x2c\x43\x1d\x29\xa0\x82\x98\x82\x76\x7e\x8e\x10\xe0\xfc\x8c\x30\xe8\xa3\xdb\x11\x03\x2c\x4d\x9c\x80\x3e\xbb\x17\x8d\x90\x24\x3f\x53\x27\x18\xf6\xad\x0c\x57\x0c\xbf\xd2\x70\xa5\xf0\xad\x0d\x57\x8e\xab\x10\x47\x76\x1d\xe2\xc8\xae\x42\x1c\xd9\x95\x88\x23\x3b\x29\x0e\x33\x47\x47\x1c\xbb\xab\xed\xa9\xdf\x8e\x2a\xc8\x53\xda\xef\x27\xad\x07\xf7\xeb\x9d\xed\x27\xe9\xe3\xcc\x4f\xa4\x6e\xa8\xe4\xe8\x69\xd1\x05\xfc\xe5\xfd\x3c\xf3\x8e\xca\x17\x5a\xd0\x15\x9a\x8b\x96\x37\xab\x11\x5a\xac\x4f\x51\xd1\x9c\x48\x51\x30\x4e\x00\x7d\xa6\x68\x6c\xeb\x26\x45\x63\x5b\x37\x29\x1a\x67\x03\x4f\x6a\xe7\x94\x37\xeb\x7d\xeb\x09\xd7\xd6\x1e\xa5\xac\x40\x77\x45\xfb\xfc\x5c\x8f\xd0\x83\x78\x75\xf5\x27\xdd\xae\x1e\x8d\x4d\x1d\x18\x6d\x34\xf9\xab\x8d\x26\x97\xb5\xf1\x79\xa0\xd7\xbf\xd3\x6d\x40\x3f\xb5\x52\x54\xd4\xea\xf9\xa2\x09\xd1\xfd\x92\xd5\x05\x61\x7c\x84\xee\x68\x91\xf7\x0e\x52\x6c\x7d\x9b\xf5\xba\x9b\x3e\x8c\xc1\xbd\x8e\xb5\xe7\x5f\xc7\x3a\x34\xac\x6b\xc5\xa2\xff\xd5\xc7\x7d\xc0\xc3\xa8\x2e\x09\xcf\x97\x2d\xd1\x82\xfd\x42\xd8\x2b\xe1\x4e\x2d\x04\xb5\xee\x4e\x76\xfd\xfe\xc1\xbb\xad\xdf\x11\x79\xb7\xd9\xda\x21\xfb\x4c\xd6\x39\x0a\x3f\xad\x5f\xf4\x8f\xc1\x77\xdf\xce\xd1\x18\x76\x44\x1e\x44\xe1\xed\xe4\xfe\x2e\x80\x15\x3c\xc2\x33\x22\x8d\x75\x8e\x2b\x80\x9d\xf9\xb8\x33\x72\x8a\x62\xbd\xc1\xf5\x44\x81\x9d\xbf\xe0\x03\xb5\xbf\xf5\x04\x91\x38\xbf\x8b\x83\xc8\x17\xc3\xcc\xf9\x3d\x1c\xc4\xde\x24\x31\x75\x7f\x0d\x07\x53\x5f\x14\x31\x36\x61\x58\x3e\xd1\x82\x08\x43\x39\xfe\xcf\xf2\x25\xda\xee\x27\x2c\x28\x4b\x35\x43\xfd\x01\x44\x9c\x51\xec\x8d\x02\xa0\x4e\x3c\xf5\x46\x01\xd0\xe7\x07\xec\x8d\x02\xa4\xd0\x68\x92\x78\x03\x81\x89\x14\x4f\x66\x43\x48\xe6\x8f\x4f\x27\x30\xd4\x3f\x82\x14\x1a\xce\x06\x65\xca\x79\x08\x80\x40\xe3\x10\x5c\x36\x1c\x21\x00\xfa\xbc\x0d\x87\xd5\x8c\xf3\x10\x30\x79\x26\x61\xe2\x89\x03\xa8\xce\xd9\xb1\x34\xf6\x1f\x41\x37\xfb\x5f\x6f\x37\x6f\x37\xff\x06\x00\x00\xff\xff\xa3\x88\xf0\x08\x3b\x27\x00\x00")

func dataFilesCloud_providerJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesCloud_providerJson,
		"data/files/cloud_provider.json",
	)
}

func dataFilesCloud_providerJson() (*asset, error) {
	bytes, err := dataFilesCloud_providerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/cloud_provider.json", size: 10043, mode: os.FileMode(420), modTime: time.Unix(1464211133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesClusterLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x51\x6b\x83\x30\x10\xc7\xdf\xfd\x14\x92\xe7\x2a\xb1\x65\x7b\xc8\x9b\x03\x29\x32\xda\x15\xe9\x1e\xba\x31\x42\xaa\x47\x1b\x5a\xa3\x24\x97\x87\x52\xfc\xee\x3b\xa5\xad\x93\x15\x8e\x43\xee\xf7\xbb\xbf\x49\xae\x41\x18\xb2\x93\xdf\x83\x54\x07\x30\xc8\xc4\x37\x0d\xc2\xf0\x3a\x74\x42\xee\xe4\x99\x60\xef\x9f\x6f\x59\x94\x2e\xb3\xf5\x36\x4a\xf3\x0f\x36\xbb\x53\xa3\x6a\xe8\x31\xed\x5b\x03\x08\x6e\x44\xad\xd5\xa5\x36\x07\x59\x37\x15\x9c\xc9\xd9\xa4\xbb\xe5\x48\x9d\xdf\xbb\xd2\xea\x16\x75\x63\x24\x5e\xda\x3e\x65\x53\xe4\xab\xb4\xd8\x3d\x89\x00\xa4\xaf\xde\xc8\x0a\xb9\xca\xd7\xa3\xe1\x8d\x46\xd9\x6b\x20\xbd\xab\x98\xe0\x71\xf2\x60\x95\x76\xed\x59\x5d\xfe\xe2\xfb\xad\xfa\x6c\xb0\xf2\xd8\x78\xcb\xc4\x62\x36\x9d\xd6\x8d\xc1\x23\x13\xf3\xf8\xe5\x36\xef\x1e\x91\x74\x10\x55\x29\x54\x93\xa4\xb2\xa5\x17\x4a\xfe\xb9\xe4\x81\x74\xa8\x2c\x02\xfd\x99\xcd\x79\xf2\x1a\xf1\x84\x6a\xcb\xb9\x18\x2a\xe6\x9c\x7f\xb1\xe9\x02\x98\xea\xa6\x2f\xf8\x53\x7d\xb0\x3b\xea\x3f\x41\x17\xfc\x06\x00\x00\xff\xff\xdb\x05\xa7\x8f\xbd\x01\x00\x00")

func dataFilesClusterLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesClusterLatestJson,
		"data/files/cluster.latest.json",
	)
}

func dataFilesClusterLatestJson() (*asset, error) {
	bytes, err := dataFilesClusterLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/cluster.latest.json", size: 445, mode: os.FileMode(420), modTime: time.Unix(1464211133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesConfigsYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x4f\x6f\xf2\x30\x0c\xc6\xef\xfd\x14\x56\x39\xbf\xad\xde\x1d\xb9\x21\x86\x36\x24\x36\x4d\xea\xb6\x7b\x48\x0c\xb1\x48\x9d\x2a\x71\x98\xf8\xf6\x4b\x41\xfc\x1b\x13\xb0\x53\x9f\xf4\xf9\xd9\x75\x9f\x78\x00\x63\xcf\x0b\x5a\xa6\xa0\x84\x3c\x47\x58\xf8\x00\xa3\xb7\xe9\x84\x4d\xe7\x89\x25\x56\xfd\xa9\xc1\xb0\xc6\x00\x5f\xe4\x5c\x31\x00\xa5\x05\x3c\x03\xb1\xa1\x35\x99\xa4\x1c\xb4\x28\xd6\x9b\x08\xa9\xcb\xef\xc5\x22\xe8\xb3\xa6\xb9\xa6\x0b\x3e\xb3\x68\xaa\xa2\x90\x4d\x87\x43\x28\xa7\x2c\x18\x34\x76\xe2\xc3\x6e\x84\xb2\x50\x29\xd7\xb2\x90\xde\x96\x9d\x00\xc3\x02\xc0\x07\x83\x61\x08\xff\xb3\x4c\x7c\x42\xa2\xd9\xcf\xda\x53\x00\xff\xa0\xac\x2d\x2a\x27\xb6\x7a\xde\x3e\xea\x46\x94\xa4\x58\x1e\xdc\xf3\xcf\x54\xa3\xb3\x63\x3d\xf3\x4b\xe2\x3f\xc0\x3e\xc9\xbd\xf4\xbb\x5f\xe1\x49\xeb\x56\x91\x23\x5e\x3a\x8a\x52\xbd\xec\xf4\x2c\xeb\xba\x41\x36\x93\xde\xbc\x03\x4d\xf3\xa8\x03\xcd\xf1\x36\xfa\xc1\xf1\x12\x66\xd5\x62\xec\x94\xc6\xea\x75\xaf\xea\xb1\x45\xbd\xba\x81\x04\xcc\xc1\x5f\x67\x7e\xa6\xfe\x1b\x93\xe3\x3b\x02\x31\xda\xaa\x41\x9d\x02\x36\x16\x9d\xab\x9f\x70\x1b\x6c\xdc\x44\xc1\x76\x74\xfd\xc2\x35\xe5\x7f\xcd\x5c\xb8\x18\xed\xe8\x3c\xa2\xc3\xde\x59\x2b\x47\xe6\xca\x86\x3d\x64\xc9\xfe\xf3\x40\xdd\x58\xab\xef\x00\x00\x00\xff\xff\xa6\x90\xbd\x58\x42\x03\x00\x00")

func dataFilesConfigsYamlBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesConfigsYaml,
		"data/files/configs.yaml",
	)
}

func dataFilesConfigsYaml() (*asset, error) {
	bytes, err := dataFilesConfigsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/configs.yaml", size: 834, mode: os.FileMode(420), modTime: time.Unix(1463998369, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesDatabaseLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\xdf\x8b\xaa\x40\x18\x7d\xf7\xaf\x88\x79\x2e\x19\x93\xee\xe5\xfa\xa6\xd9\x6d\x85\x6a\xc3\x36\xd8\x76\x59\x64\xd2\xd9\x1a\xd6\x54\xe6\xc7\xb2\x11\xfd\xef\x3b\x96\x6d\x26\xf6\x12\x4b\xf5\x30\x30\xe0\x78\xbe\x33\xdf\x37\x7a\x38\x9c\x8d\xd6\x68\x80\x2c\x65\x7c\x41\x31\x03\x56\xfe\x2a\x81\x04\xad\x30\xb0\x8e\x78\x73\x0f\x7f\x62\xca\x48\x9a\x48\xde\xeb\x0e\x90\xd0\x3f\xbd\x03\x76\xfb\xb7\x82\x13\x21\x8e\xe6\x88\xe1\x23\x67\x53\x3c\x65\x91\x7d\x08\xd9\xd6\x75\x5a\xe3\x7e\xcb\xb1\x27\x5e\xb7\xe8\x5c\x1e\xea\x20\x46\xc2\x32\x9e\x51\x12\x92\x64\x11\xac\xd2\x08\xc7\x92\x30\xb6\x67\xfd\x72\x9d\x89\x39\x0b\x29\xc9\xb8\xbc\x5a\xc0\xd7\x59\xde\x64\xec\x7b\x43\xdb\x9f\xd5\xb6\xc1\x5c\xee\x72\x4e\xcf\x0f\x86\xde\xa8\xcc\x11\x09\xe1\x41\x4e\xc4\x81\x60\x11\xb0\xa0\x6e\x94\xaa\x11\x61\x59\x8c\xd6\x65\xc2\xf1\xdb\xf2\x09\x98\x06\xcb\x54\x50\x60\x99\xcd\x2a\xbe\x4a\x13\xbe\x04\x56\xa7\xf3\x53\xd8\x96\x3b\x23\x8e\x03\xc6\x11\xe5\x58\x36\x6d\x80\x36\x34\xfe\xb4\xa0\x21\xd7\x13\x84\xd6\x6e\xe9\x10\xc2\x17\x50\x3d\x83\x93\xe8\x70\xc2\x84\xb5\x27\xb4\xca\xb4\x33\x6a\xb8\x53\xdf\x76\x06\xbd\x1a\x3d\x5c\x41\xd1\x3c\xc6\x4a\x91\x2b\x2b\xf2\x60\xd7\x88\x71\x0a\x2a\x1d\xae\xa0\x43\x77\xf0\x38\x75\x6b\xa4\xe8\xc6\xa9\x88\x94\x1a\xbf\xad\xc6\x3e\x4c\xb4\x62\x2e\xc0\x31\x62\x9c\x84\x0c\x23\x1a\x2e\xab\xf9\x74\x5a\x3c\x1f\x52\x86\xfe\x57\xc6\xd4\xe1\x4e\xa0\xad\x9b\xba\x71\x49\x6a\xf5\x26\x2a\xb5\xee\xc7\x9b\x52\x0d\x95\x5a\xb7\xf6\x27\x49\xde\x63\xf1\x55\x35\x66\x81\x9e\x77\xa4\xfc\x21\x50\x37\x2f\xf1\xa0\x37\xfa\x3f\x98\x3e\x2b\x1f\xde\x8f\x0f\x0b\x45\x94\x17\x6f\xe8\x45\x6d\xab\x7d\x07\x00\x00\xff\xff\x83\x96\xe1\x87\xca\x0d\x00\x00")

func dataFilesDatabaseLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesDatabaseLatestJson,
		"data/files/database.latest.json",
	)
}

func dataFilesDatabaseLatestJson() (*asset, error) {
	bytes, err := dataFilesDatabaseLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/database.latest.json", size: 3530, mode: os.FileMode(420), modTime: time.Unix(1464211133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesSubscriptionLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xd8\x4f\x6b\xa3\x40\x14\x00\xf0\x7b\x3f\x85\x78\xae\x65\xb4\x64\x0f\xde\x5c\x6a\xa9\xb0\x69\xc5\xba\x87\xee\xb2\xc8\xa8\x93\x64\x88\x99\xc8\xcc\xb8\x6c\x29\xf9\xee\xfb\x4c\xf3\xc7\x18\x4d\x48\x7a\x49\x74\x20\x84\x32\x6f\xde\x9b\xa9\xfd\x21\xaf\xef\xe3\x46\xd3\x74\x51\xc4\x22\xe1\x34\x97\x74\xce\x74\xfb\x37\x2c\x69\xda\xc7\xf2\xbb\x0c\x4e\x0b\xdd\xd6\x9f\x0c\xef\xf9\xc1\x73\x8d\x30\xf0\x9c\x1f\xfa\xed\x3a\xc8\xf0\x8c\x40\xd4\x63\x29\x25\xdb\xd5\x9c\xd3\x84\xb2\x71\x34\x9b\xa7\x24\x83\xf0\x63\xe0\xba\xdb\x68\xf5\xb4\x48\xbe\xe7\x65\x81\x5a\xd9\x4d\x01\x22\xe1\x27\x88\xfb\x6e\x10\x3d\x38\x6f\xdb\x1d\x05\xa3\x32\x2a\xb7\x91\xa8\x10\xa9\x6e\xa3\x3b\x73\x13\x4b\xa9\xc8\x33\xfc\x5e\x0d\xaf\x7f\x9b\xb2\x36\xe1\x70\x31\x26\x27\xd1\xcc\x9a\xe9\xf6\xfd\x6d\x53\x08\xe7\x10\xb2\xee\x06\xab\xd8\x62\x53\x1b\x6e\x84\x53\x2c\xf1\x4e\xc9\x42\x10\xae\xdb\x26\xaa\x96\x9a\xe0\x18\x8e\xc7\x72\xce\xab\x5b\x3f\x6f\x37\x8d\xc6\x31\x94\x47\x9b\xe5\x45\x25\x13\x73\x49\x47\x38\x91\x6d\x69\x26\x6a\xce\x4b\x68\x2d\x23\x2e\x68\x96\x46\x78\x4c\x18\xd4\x32\xcc\xe6\xa4\xac\x10\x92\xd4\xaf\x38\x2d\x62\x72\x24\xb1\x7c\x06\x31\x16\xa4\x96\x99\xcf\x85\x1c\x73\x22\x74\x7b\x70\x5b\x5d\x27\x19\x16\x92\x26\x82\x60\x9e\x4c\xea\x41\xca\x46\x59\xf1\x0f\x56\xb7\x27\xed\x3d\x77\x38\x8f\x44\x42\xc2\xc3\x21\xf0\xe7\xd4\x2d\x64\x7e\x33\x90\x09\x9f\x10\x21\x7b\xf9\xb9\x43\x08\xfd\xd2\x77\x13\x08\x4b\x57\xdb\xef\x51\xe3\xf6\x9b\xca\x29\x7b\xe2\x5f\x43\x27\x08\x7f\xfa\x2d\xe6\x5f\xcb\xcb\x14\x79\xdf\xd5\x5b\x83\xd3\xd4\xb7\xf1\x3d\xc6\x7e\x70\x1d\xec\xab\x2f\x81\x7d\xf7\xb5\xe8\x1a\xbe\x89\x2e\x4c\xbe\x1f\xbc\xb4\xa8\xf7\xf9\x7c\x44\x84\x00\xc4\x38\xeb\x3b\x7d\xa0\x7c\xe2\x1b\x7f\xd0\x69\xfb\xd6\x41\xfb\x56\xb3\x7d\xeb\xd2\xec\xbb\xcf\xa1\xf1\xdd\x0d\x9d\x3d\xfa\x2e\x83\xc7\x06\xc4\xc4\x97\x3a\x9d\xdd\xd2\xfd\x70\xdf\x02\xea\x18\xfb\x36\xc0\x4a\xbd\x52\xaf\xd4\x2b\xf5\x5f\x55\xef\x37\x8b\xf7\x39\xfd\x0b\xa5\x35\x8f\xc1\x6d\xb2\x0c\x2f\xff\x2b\x56\xf6\x95\xfd\x2e\xd9\x7f\x32\x76\xe1\xae\xec\x3f\x72\x72\xe0\x3d\x3f\xb4\x86\x87\xa9\xfb\x81\x37\x74\x82\xb7\x2b\xd7\x6e\x9d\xd8\xd5\x9f\x45\xdd\xbc\x8a\x96\xfe\xa0\xf4\x66\xe8\x97\xe6\x1c\xd0\x7e\xce\x2e\x4f\x9d\x5a\xf6\x44\xbb\x1a\x5b\x76\x6c\x6c\x59\x82\x5f\x8d\x2e\x4f\x1f\x5a\xf6\x04\xbd\x9a\x5a\x6a\xdd\x9b\x5a\x96\xf0\xfd\xe0\xe5\xcc\x99\x65\x4f\xe4\xab\xa1\xa5\xd6\xc1\x66\xde\xf1\xcf\x6c\x72\x20\xb1\x1f\xea\x55\x93\xd3\xa9\x26\xa7\x04\x7f\x76\x93\xd3\x13\xf4\xaa\xc9\xe9\x60\x93\x53\xc2\x3f\xbf\xc9\xe9\x89\x7c\xd5\xe4\x68\xd7\xdc\xe4\xc0\xf7\x9f\x9b\xc5\xff\x00\x00\x00\xff\xff\x39\xc6\xda\xec\x9b\x26\x00\x00")

func dataFilesSubscriptionLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesSubscriptionLatestJson,
		"data/files/subscription.latest.json",
	)
}

func dataFilesSubscriptionLatestJson() (*asset, error) {
	bytes, err := dataFilesSubscriptionLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/subscription.latest.json", size: 9883, mode: os.FileMode(420), modTime: time.Unix(1464211133, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/files/ci.latest.json": dataFilesCiLatestJson,
	"data/files/cloud_provider.json": dataFilesCloud_providerJson,
	"data/files/cluster.latest.json": dataFilesClusterLatestJson,
	"data/files/configs.yaml": dataFilesConfigsYaml,
	"data/files/database.latest.json": dataFilesDatabaseLatestJson,
	"data/files/subscription.latest.json": dataFilesSubscriptionLatestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"files": &bintree{nil, map[string]*bintree{
			"ci.latest.json": &bintree{dataFilesCiLatestJson, map[string]*bintree{}},
			"cloud_provider.json": &bintree{dataFilesCloud_providerJson, map[string]*bintree{}},
			"cluster.latest.json": &bintree{dataFilesClusterLatestJson, map[string]*bintree{}},
			"configs.yaml": &bintree{dataFilesConfigsYaml, map[string]*bintree{}},
			"database.latest.json": &bintree{dataFilesDatabaseLatestJson, map[string]*bintree{}},
			"subscription.latest.json": &bintree{dataFilesSubscriptionLatestJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

