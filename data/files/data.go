// Code generated by go-bindata.
// sources:
// data/files/ci.latest.json
// data/files/cloud_provider.json
// data/files/cluster.latest.json
// data/files/db.latest.json
// data/files/pkg.latest.json
// DO NOT EDIT!

package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFilesCiLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x96\x51\x6b\xdb\x30\x10\xc7\xdf\xf3\x29\x8c\x9e\x97\x20\x39\x8e\x31\x79\xcb\x9a\x52\x02\x5d\x3b\x42\xfa\xb0\x8d\x21\x14\xfb\x96\x8a\x5a\x52\x2a\x4b\x23\xa5\xf4\xbb\xef\xe2\xa5\xa9\x5d\x75\xc3\x50\x48\xf3\x10\x30\x7e\xb8\xff\xff\xee\x74\xbe\x1f\x46\x8f\xbd\x28\x22\x4b\x2f\xcb\x82\x8b\x15\x68\x47\xc6\x3f\x30\x12\x45\x8f\xf5\x1b\xb5\xea\xce\x93\x31\x39\x9b\xf5\xcf\xd8\x9c\xf5\xa7\xd7\xe4\xd3\xb3\xe2\x1e\xd6\x50\x4b\x2f\xa1\xca\x2f\xf9\x2e\xfc\xf9\x66\x76\x39\xe5\x93\x8b\xf3\xab\xc5\x8b\x7e\xef\x8d\x13\xdc\xc2\xbd\x97\x16\x0a\x74\xe5\x72\xd0\x6c\xbe\x37\x16\xb2\x5a\x97\xe2\x81\x6b\xa1\xea\x62\x5b\x4f\x34\x69\x7b\xd6\x56\xe6\x52\xaf\xb8\x32\x05\x94\x68\xfa\x3a\xf9\x76\xd1\x38\x9d\x54\xc0\xbd\x96\x38\x11\xf9\x32\xbb\xba\x59\x9c\x87\x99\xbf\x8c\x55\xbe\x14\xe8\xa0\x03\x16\x36\xdf\xda\xb0\x46\x85\x07\x7d\xfe\x1c\xdb\x64\xb0\xfc\xd6\x78\x8b\x59\xc3\x7d\xce\x2e\xae\x8c\x76\xb7\x28\x8c\x46\x64\x27\x3c\xed\xab\x2a\x70\xa2\x10\x4e\xb4\x8b\x59\xf3\x5b\x16\xb0\x2d\x36\x95\x2b\xe9\x44\x79\x9d\x83\xd0\xcd\xba\xa6\x42\xf1\x52\x6a\xbf\x69\x46\xf3\x35\xae\x85\x35\x02\x56\xa8\x76\x00\xa7\xb8\x23\xe3\x21\x6d\x7a\x20\x37\x4a\x81\x2e\xa0\xe0\xb0\x81\xdc\x3b\x63\xab\x76\x16\x6c\x1c\x58\x2d\x4a\xfe\x77\xef\x6c\xb5\x6c\x76\xdd\xef\x2f\x5c\x5d\x30\x2f\xce\x0a\xbc\x72\xc2\xba\x7a\xd3\x31\x65\x69\x9f\x32\x7c\x16\x94\x8e\xeb\x67\x40\x29\xfd\x4e\xda\x09\xf5\xe1\x6a\xfb\x90\xbe\x69\xef\x35\xba\xbc\x01\x69\x3c\x8f\x4f\x90\x76\x83\x94\x51\x7a\x10\x4a\xe3\xd7\x94\xc6\x01\xa5\x49\x07\x4a\xe3\x7f\x53\x1a\x23\xa5\x47\xc3\x5f\x72\xe2\xaf\x23\x7f\xe9\x07\xf1\x97\x04\xfc\xa5\xef\xe3\x2f\x39\x1e\xfe\x92\x79\x76\xe2\xaf\x1b\x7f\xf1\xe8\x30\xfc\x25\xaf\xf9\xcb\x02\xfe\xb2\xf7\xf1\x97\x1d\x0f\x7f\xd9\x1c\xdb\x9c\x00\xec\x04\xe0\xf0\x40\x3f\xc0\x2c\xb8\x26\xa6\x01\x81\xac\xcb\x2f\x30\xf9\xcf\x45\x31\x3d\x38\x83\xf8\xfe\xd9\x7b\xea\xfd\x09\x00\x00\xff\xff\x20\x9b\xef\x18\xc2\x0c\x00\x00")

func dataFilesCiLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesCiLatestJson,
		"data/files/ci.latest.json",
	)
}

func dataFilesCiLatestJson() (*asset, error) {
	bytes, err := dataFilesCiLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/ci.latest.json", size: 3266, mode: os.FileMode(436), modTime: time.Unix(1465414007, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesCloud_providerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x9b\xdd\x6e\xdb\x38\x16\xc7\xef\xf3\x14\x44\xae\x6d\xc3\xfa\xb0\xe3\xf4\x2e\x75\x3b\xdd\x76\x3b\x33\x01\xdc\xce\xee\x62\x31\x28\x18\x89\x76\xb4\x96\x48\x83\x92\x9a\xf1\x0c\xe6\x69\xf6\x51\xf6\xc5\x96\xfa\xb0\x62\x5b\x87\x0a\x0f\x53\x76\x72\x51\x40\xd5\x39\x56\x7e\x87\xe7\x4f\xea\x90\x14\xff\xb8\x20\xe4\x32\x4a\x45\x19\x7f\xd9\x49\xf1\x35\x89\x99\xbc\x7c\x55\xdd\x54\xb7\xe9\x43\x7e\xb8\x56\xff\xe3\x34\x63\x97\xaf\xea\x9b\xa3\xc3\xbd\x5d\x79\x97\x26\xd1\xe5\x2b\x52\xc8\x92\x75\x77\x25\xdb\x24\x82\xab\xdf\xfe\xbb\xbd\x43\xc8\x1f\xdd\x95\xb2\xa7\x22\xa2\x85\xf2\x50\x4f\xfb\x25\x91\x9b\x84\x27\xb4\x7b\xe4\xd1\x03\x94\xb9\xcc\xc7\x8c\xe6\xc5\xd8\x3b\xb5\xff\x2e\x38\x3b\x79\x7c\x7d\xb7\x73\x3e\x7d\xda\xb1\xe5\x4e\x6b\x89\xb4\x96\x58\x6b\x61\x97\x47\x86\x5f\xbb\xeb\x3f\x47\x4f\x86\xbd\xa4\x69\xb2\x16\x72\x30\xf0\x07\x86\x08\xbc\x71\x86\x02\x6f\x2c\x50\xe0\x8d\x25\xb2\x0e\xe2\x67\x45\xab\x2e\x86\x03\xf0\xfb\x01\x68\xf9\x7d\x2d\xbf\xaf\xe5\xf7\xed\xf9\xdf\x4b\x96\x52\x1e\x6b\x02\x60\x25\x22\x03\x9d\x73\x2f\x82\xce\xd2\x8b\xa0\xb3\xd8\x47\xb0\x4a\xf8\x86\xee\x84\x64\x9a\x18\xe8\x6e\x9c\x8b\xb2\xb8\x37\xef\x43\xa7\xbf\xe8\x45\x73\x6a\xbe\xb3\x06\xff\x24\xb6\x7b\xa1\x87\xe6\x42\x22\xa1\x8f\x7e\x01\x41\x1f\x99\x7b\x79\x38\x35\x23\x93\x01\x37\xf5\x99\xe8\x8f\x33\xb6\x8f\x39\xdb\xa3\x33\xd1\xef\x19\xa7\x66\x64\x26\x3a\xea\x9c\x82\xe3\xeb\x31\xf0\xff\xfe\x2b\xc8\x2d\x2d\x53\x61\x02\xdd\x3d\xaf\xc7\xdb\x59\x74\xa8\xed\xd5\xaf\xdd\x5b\x24\xe1\x79\x41\x79\xc4\xbe\x14\xfb\x1d\xd3\xbf\x4c\x14\xa9\x1a\x86\xe4\x5e\xb1\xbe\x63\x9c\x49\x9a\x92\xdb\x52\xee\x44\x7e\xd6\x29\xd8\x6f\x05\x93\x9c\xa6\x5f\xf2\x6d\xa9\x7c\x0b\x7f\x92\x25\x91\x3c\x8b\x2a\xda\x29\x9b\x77\x72\x2b\x63\x59\xfd\x74\xef\xc9\x56\xb5\x27\xc9\x33\x9a\xa6\xc6\x24\xbe\x43\x92\x8c\xc5\x49\x99\x01\x28\x3e\x88\x12\x3a\x44\x49\xa9\xdc\x30\x63\x92\x85\x2b\x92\x2c\x7c\x41\x24\xbf\xe9\x50\x42\x58\xb3\x73\x87\x2c\xbe\x16\x66\x01\xc2\x04\xce\x74\xab\x60\x42\x2d\x8c\x37\x07\x69\xe6\xce\xa4\xab\x68\xbc\xa9\x3e\x51\x53\x4d\xa6\xa6\xce\x78\x02\x7d\xaf\x86\x07\x98\x60\x72\x35\x73\x48\x83\xeb\x4e\x57\x13\x97\x2c\xd8\x0e\xe5\x92\x05\xdd\xa1\x50\x92\x59\x8a\x6c\x57\x16\x8c\xfc\xbc\x2b\x92\x2c\xf9\x9d\xc5\x83\x38\x11\x76\xd4\xc3\x6a\x06\x8d\x83\xcc\x14\x52\x36\x68\x1c\x6c\xb2\x70\xca\x41\xe3\xa0\xc7\x3f\xc7\xe2\x59\x68\x79\x02\xcd\x78\xec\x92\x07\x3b\xe6\x38\x16\x33\x7a\xd8\x71\x2b\x66\xfc\xc8\xe3\x54\xcc\xc1\x0b\x13\x73\x30\x24\x66\x58\x3f\xc8\x97\xf9\xed\x67\xf2\xbe\x9d\xec\xe4\x83\x2c\x1b\xdf\x71\xaa\x50\x28\x8e\x9b\xe5\xc7\xfa\x57\x44\x18\x65\x49\x62\xbb\x38\xae\x5d\xb0\x2c\xc8\xfe\x1d\x4c\x71\x1d\x1c\x8b\x83\x15\xcd\x1c\x35\xd9\xc5\xd2\xa0\xbb\xb7\xe7\xa3\xa6\x0e\x58\x1e\xb4\x8e\xfd\x10\x35\x79\x58\x15\x42\xd2\x8d\xe9\x78\x93\xf8\xae\xd5\x83\xe6\x71\x2b\x1f\x34\x8e\x6b\xfd\xa0\x81\x5e\x96\x80\xe2\x17\x26\xa0\xf8\x65\x09\x28\x7e\x69\x02\x8a\x07\x05\x04\x03\x9d\x08\xa8\xbd\x6a\xd6\x52\x5b\xbc\xcb\x4d\xc4\xfa\x7b\x77\xd5\xcd\xc3\xf3\x2c\xf7\xee\xba\xa5\xe3\xb7\x34\xaf\xc2\x20\x9f\x57\xa7\xd8\x1f\x1f\xd7\x8e\x5f\x33\xb9\x65\x29\xdb\x93\xa5\x28\x79\xb1\x1f\x91\x55\xb5\x62\x4d\x96\x54\x8a\x34\xe1\x14\xb1\xa7\xe7\x8d\x75\x3b\x77\xde\x58\xb7\x73\xe7\x8d\x63\xcb\x55\xf1\x25\xe3\x45\x35\x6f\x1f\x08\xad\x8a\x28\x4a\x52\xf2\x3a\x2d\xd7\xeb\x7c\x44\xde\x8b\x07\xd3\x78\xa2\xe6\xe9\xde\x18\xda\xed\xea\x8c\x50\xbc\x9d\x11\x0a\xb9\x33\xae\x2d\xa3\xfe\x07\x6b\x12\xfa\xb6\x94\x62\xc7\xb4\x91\xaf\x8a\x09\x79\x77\x9f\xe4\x29\x4d\xf8\x88\xbc\x66\xe9\xa6\xb7\xb4\xa4\xdb\x23\xab\x9e\x5b\xef\x79\x01\xe1\x9d\x58\x7b\xf1\x9d\x58\x6d\xd3\x5a\x29\x96\xdc\xe4\xe7\x7b\xae\xc7\x59\xbd\xa7\x7c\x73\x5f\xd2\x4e\xb0\x9f\x68\xf2\x40\xb9\xd1\x76\x8d\x7a\x6e\x2b\xbb\xfe\x5e\xcd\xa3\xad\xbf\xfb\xf4\x68\xd3\x6d\x3d\x1d\xfa\x77\xd7\x47\xf1\x3b\x23\xab\xfe\x06\xc3\x79\x3d\xef\x8d\x71\xbb\x10\xde\xe4\x0a\x37\x26\x52\x1e\x53\x39\x3c\x14\x72\x05\xd1\xfa\x9d\x6f\x49\x7d\xc3\xe5\x4a\x34\x8a\xef\x6a\xb1\x12\x4d\x12\x3a\x5a\xa9\x44\x83\x2c\x1c\xad\x52\xe2\x65\x32\x47\xac\xf9\xbb\x45\x09\x7c\x88\x45\x53\x02\x7a\x3e\x0a\xe6\x6f\xc9\xe6\x9e\x34\x13\x9b\xa7\x78\xee\x95\xab\xfa\x2b\x08\xd5\x7a\x81\x63\x14\x73\xd9\xfa\xa8\x1d\x2b\x0b\x14\x73\xe1\xce\x50\x35\x9f\x05\x0a\x46\xba\xde\x14\x35\x63\xb0\xa0\x41\xa9\xd7\x9f\xa2\x76\x39\x6b\x9c\xe5\xed\x67\x13\x16\xf5\x67\x31\xd2\x9d\x38\x05\x31\x17\x6e\x30\xc1\x2b\x17\x01\x62\x2e\xdb\xab\x09\x5e\xb7\x08\x10\x94\x68\xc3\x09\x5e\xb5\x08\x16\x9c\x64\x17\xc7\x52\x39\xd4\x54\x17\x47\x68\x97\x71\xb2\x49\x0a\x9a\x8a\x88\xa9\x9a\xaf\x37\x79\x3a\xb1\xf6\x67\x51\x6b\x9a\xe6\x56\x9f\x40\xfe\xc4\x1e\xc8\xbf\x84\xdc\x92\xb3\x8a\xa7\xab\x5b\xf9\x3e\x32\xfa\x0c\xaa\xf6\x43\x95\xc6\xc7\xdf\xf9\x50\x4e\x7e\x90\xaa\xaa\x4c\xf2\x48\x68\x51\xf2\xb5\x30\x42\xa9\xfd\x6c\x51\xba\x06\xf1\xf5\x0d\x02\x7c\x56\x08\x36\x88\x6f\x4d\x71\x93\x55\xd3\xa1\x98\x66\x5a\x0c\x9a\xe5\x46\x18\xb5\x9f\x75\x5e\x0e\x9f\xf8\xe9\x73\xb2\xd9\x99\xe5\xa4\xf2\xb3\xc5\xf8\x28\x78\x2c\xb8\x96\x21\x15\xdc\x88\xa1\xf6\x7b\xb6\x2e\x02\xbd\x2e\x02\x43\x5d\x04\xd6\x14\x55\x27\xd9\xae\x4b\x59\x68\x1b\x63\x2d\xa9\x51\x63\xd4\x7e\xb6\x18\x9f\x84\x14\xbc\xd0\xf7\xd4\x42\x48\x23\x88\xda\xcf\x16\xe2\xb5\x9a\x2e\xab\x11\x71\x40\x9c\x77\xa9\x19\x46\xed\x07\x63\x1c\x86\xea\x67\x4c\x7f\x31\x1f\x62\x78\x9b\xbb\x27\x67\x9e\x92\x66\xe7\xb7\xe2\x24\xdf\x62\x27\x3b\x18\x2c\x1f\xc4\xf2\xfb\x58\x3e\x80\x15\x3a\xc3\x0a\x4d\xb1\x42\x00\xcb\xdd\x37\x4f\x0b\x10\x2b\xec\x63\x2d\x00\xac\x85\x33\x2c\x6f\x0e\x72\x2d\x00\x71\xcd\x01\x30\x87\x1f\x89\x05\xb0\xbe\x3c\x20\x93\x01\xa4\xb0\x00\x37\x9d\x45\x49\x0c\x4e\xe6\x59\x0b\x35\x22\x83\xd2\x19\xba\xcb\xe7\x5c\x23\xff\x69\x1f\x6d\x0e\x76\x80\xe3\x8e\x79\x18\xe7\x2e\x8e\x40\x2f\xd3\x84\x8b\x18\x58\xc9\x6f\xef\x7f\xc3\x32\xf4\x0d\x4d\x53\x9a\x8f\xc8\xa7\x7f\x8e\xc8\xe7\xd5\x8d\x66\x3c\x8f\x6b\x2f\x93\x11\xbd\xf5\xb4\x7f\xcd\xaa\xba\x9d\x17\x23\xb2\xbc\x19\xe2\x59\x37\x6e\x66\xaf\xdb\xc6\xd5\xba\x20\x2c\x52\xca\x0b\x3a\x22\xef\x06\x89\x68\xe3\x66\x54\x18\xb6\xae\xcf\x28\x88\xa8\xdc\x8e\xc8\x4f\x1f\x86\x80\x78\xed\x65\x54\x17\x35\x9e\xcf\xab\x11\x47\xe4\x2d\xdf\x54\xe7\x6a\x14\xd3\xdf\xf5\xe5\x62\x7c\x7e\x72\x48\x5b\x30\x56\x9e\xf6\x55\xd2\x76\x2f\x46\xe4\xc3\xad\xb6\x4a\xea\x9d\x43\xd1\x95\x49\x95\xa3\x2d\x46\x57\xc4\x8f\xc8\xea\x9d\xae\x8c\x87\xcf\xf2\x68\x6a\xf9\xce\xd9\xbe\x7f\xb5\x65\xec\x88\xbc\x79\xab\x2f\x64\x1b\x1f\xc3\x6a\xb6\x75\x76\x56\xc6\x7d\xac\x07\x3d\xe2\x4f\xc3\xc5\xf0\x6b\xd6\xac\x80\x83\xde\x63\x3e\x6a\xc1\xa2\x05\x0a\xa7\xd7\xf3\xe1\xe2\xcd\xbe\x46\x0a\x51\xeb\x5b\x2d\xd0\xc2\xbb\xf6\x87\xdf\xa9\xf6\xd5\xd1\x35\x6a\x9d\xab\x05\xf2\x7c\x7f\x31\x9c\x33\x68\x25\x07\x78\xc3\x7b\x50\xd2\x54\xb4\x16\x4c\x7e\x38\xbb\x1a\x4e\xdb\x95\x59\xad\xe6\x43\x79\x0b\x16\x56\x4a\xba\xf6\x66\xc3\x99\x83\x16\x02\xa1\x2a\x0d\x2c\x85\xae\xe6\x36\x6a\x9a\xcf\x66\xc1\x70\x43\x5d\x1b\xd6\x67\x60\x11\xe4\x79\xb8\x95\xf6\x23\x8d\x4f\x87\x87\x81\xa9\x61\x6d\xb6\x98\x42\x58\x2a\xe8\x27\x8a\xb3\xaf\x65\x5a\xc8\x7e\x6d\xd6\xdc\xfe\x86\xa5\xd9\x0d\x54\x52\xfc\x15\x05\xc7\xd0\xb1\xcd\xef\xf5\x2a\x05\x0e\x50\x3e\xbe\x43\x8d\x4f\x57\xb6\x9e\xb6\x14\xcb\xfb\x24\xa2\x1b\x5d\x53\x44\x90\x15\xe6\x38\xb8\xda\x82\xbc\x01\xea\xf1\xef\x5f\xac\xaf\x18\x2d\x8a\x54\x77\x0a\x39\x87\xac\x9a\xb4\xb4\xae\xb6\x20\xd5\x12\xe1\x07\x26\x73\xad\x42\x54\x89\xfb\x1f\xc0\xae\xad\x87\x5b\x67\xfb\xc2\x4f\x75\x7d\xc1\xc9\x2f\xaa\x7d\xf5\xaa\x6d\x9c\xbe\x02\x3e\xba\xea\xef\xf8\x07\xb6\x6c\xb7\x54\x26\x3a\xe5\xec\xfa\x36\x18\xa5\x71\xb4\x45\xf8\x31\xa1\x59\xa2\x41\xc8\xfa\x36\x18\xa1\x71\xb4\x45\xe8\x96\xf9\xf5\x8b\xfc\x90\x5d\xbb\xd2\xdf\x3a\xdb\xe2\x7c\x04\x66\x46\xdf\x7f\xda\xf4\x03\x5c\xf8\xbf\xd8\x89\xc1\xe1\x44\xc7\xe1\xe8\xc2\x70\xb1\x12\x3c\x63\x7a\x60\x75\xd0\xc4\x0c\x0b\xaa\xc9\x4d\xd7\x77\xad\xce\xe3\x98\x61\xcd\xec\xe7\x2e\xd7\x0e\x5b\x0b\x9a\x2f\x18\xce\x60\xbc\x99\x3b\x2e\xc3\x29\x03\xb8\xbc\x1b\x4c\xb5\xab\x81\x17\xd5\xbf\x3f\x2f\xfe\x1f\x00\x00\xff\xff\x76\x43\x08\xf0\xad\x47\x00\x00")

func dataFilesCloud_providerJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesCloud_providerJson,
		"data/files/cloud_provider.json",
	)
}

func dataFilesCloud_providerJson() (*asset, error) {
	bytes, err := dataFilesCloud_providerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/cloud_provider.json", size: 18349, mode: os.FileMode(436), modTime: time.Unix(1467728610, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesClusterLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xcf\x6a\xf2\x40\x14\xc5\xf7\x3e\xc5\x30\xcb\xef\xab\x61\xa2\xd8\x45\x76\x69\x09\x22\x6d\x6d\x69\xe3\xa2\x2d\x65\x18\x93\x5b\x1d\xcc\x4c\xe2\xfc\x59\x88\xe4\xdd\x7b\x33\x44\x63\xb1\x30\x5c\xc2\x3d\xbf\x73\x38\xb9\xc7\x11\x21\x74\xe7\xd7\xc0\xc5\x06\xb4\xa3\xc9\x27\x2e\x08\x39\x86\x89\x92\xdd\x79\x9a\xd0\x87\xd5\x5d\x36\x4e\xe7\xd9\x32\x1f\xa7\x8b\x67\x7a\x73\x52\xdd\xa1\x01\x94\xef\x1f\xdf\xf2\xd7\x61\x6b\xfd\x9a\xf7\x4a\x67\xe4\xc1\x38\xc8\x7b\x5f\x3b\xc1\x0d\xec\xbd\x34\x50\x22\x54\x54\xde\x3a\x30\xd1\x45\x8d\x33\x5c\x4a\xdb\x54\xe2\xc0\xb5\x50\x21\x0f\x11\xa3\xc1\x81\x1d\x90\xc6\xc8\x42\xea\x0d\x57\x75\x09\x15\x32\x2f\xe9\xfb\xfc\xa2\xa2\x54\xc0\xbd\x96\xf8\x6b\xf4\x69\xb1\x5c\xe5\xd9\xb5\xf3\xbb\x36\xca\x57\x02\x09\x16\xcd\xc8\x3f\x52\x34\x9e\xfc\x27\x2c\x8a\xf1\xdb\x08\x75\xdd\xa6\x33\x62\xaa\xc5\xf6\xa7\x4b\x75\x71\x60\xf8\xb6\xf6\x06\x73\xa6\x67\x4f\xbf\x57\xb5\x76\x5b\x14\x26\xd1\x8c\xf6\x4a\x3b\xc4\x0a\x07\xdc\x3a\x61\x5c\xb8\xc7\x84\xc5\xb7\x63\x16\xe3\xcb\x19\x4b\xc2\x8b\x18\x63\x1f\xf4\xb7\x01\x74\xd9\xe3\x53\xf6\x27\x1e\xe8\x16\xe7\xd7\xa8\x1d\xfd\x04\x00\x00\xff\xff\x94\x83\x36\x08\xe9\x01\x00\x00")

func dataFilesClusterLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesClusterLatestJson,
		"data/files/cluster.latest.json",
	)
}

func dataFilesClusterLatestJson() (*asset, error) {
	bytes, err := dataFilesClusterLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/cluster.latest.json", size: 489, mode: os.FileMode(420), modTime: time.Unix(1464354088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesDbLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\xdb\x6e\xda\x40\x10\x7d\xf7\x57\x44\x7e\x2e\xd6\x12\x94\x56\xe5\xcd\x18\x87\x20\xd1\x04\x61\x90\x7a\x51\x65\x2d\x78\x08\xab\xfa\x96\xbd\x54\x8d\xa2\xfc\x7b\x87\x65\x51\x8c\x65\x5a\x9b\x24\xe2\xc5\xc8\x12\x30\x67\x66\x76\x3c\xc7\x3e\xe7\xc9\xba\xb8\xb0\xf3\x4c\xc8\x7b\x0e\xc2\xee\x6f\xff\x62\x20\xa5\x09\xd8\xfd\x97\xf8\x87\x5d\xf8\x37\x70\xc1\xb2\x14\xf3\x7e\xe8\x00\x86\x3e\x3b\x57\xb6\xfe\xfd\xd3\xe4\x44\xcb\x17\xf4\xc9\x7c\x63\x58\xfc\x52\xd8\x70\x38\xe8\x4c\x47\x9d\x81\x1b\x8c\x3d\xd3\x53\x83\xf2\x31\x07\x8d\x16\x83\x42\x2d\x43\x03\x4c\xef\x82\xf9\x68\xe6\x07\x45\xf8\x41\x65\x92\x86\x1c\x1e\x14\xe3\x10\x61\x52\xb4\x74\xd6\x1c\xc0\x29\x0d\xbd\x1b\x8a\x89\x3c\xa6\x8f\xa1\xb9\xaf\x01\x15\x6c\x55\xc4\x73\xce\x56\x2c\xbd\x0f\x93\x2c\x82\x18\x13\xae\x67\xbe\x7f\x30\x20\x4b\x20\x54\x29\x93\x88\x7d\x19\xdf\x2e\xe6\x7e\x55\xf5\x3a\xe3\x89\x8a\x29\xe6\x10\xa7\x5b\x75\xfc\x36\x11\xfb\x88\x68\xbf\xe8\x7d\x03\xe0\xe1\x26\x53\x1c\x2b\x7b\x85\x3a\x83\x24\x59\x2a\x37\x08\x5d\x99\x4d\x6f\x3f\xcf\xc5\xee\x54\x42\x28\x24\xe5\x52\xef\xe1\x92\x74\x3f\x76\x48\x17\xaf\x39\x21\x7d\x7d\x39\x84\x90\xef\x76\xb9\x04\xd2\xc8\x14\xf4\x48\x65\x81\x55\x3a\xeb\x08\x9d\xc3\xc5\xcc\x1d\x4c\xfc\xf7\x20\x34\xa7\x2c\xaa\x43\xe8\x50\x71\xba\x8c\xe1\x5f\x94\x4e\xdd\x6f\xa3\x96\xd2\x9a\x94\xde\xb8\xe7\x64\xf3\xf0\xf4\x96\xc8\x57\x10\xe9\x4d\xee\x16\xc3\x73\x72\xe9\xc5\x99\x8a\x5a\x3a\xeb\xd2\xb9\xb3\x52\xcb\x9c\x6a\x43\x4c\x85\x64\x2b\x01\x94\xaf\x36\x65\x77\x3e\x04\x8f\x5b\x74\xd7\xf9\x84\x26\xbd\x1f\xc9\xbe\x74\x7a\xb8\xb2\x46\x9e\xed\x07\xcd\x3d\xdb\x9f\xb8\xc1\x7c\xec\x05\xbe\x3b\xf3\x6e\x6a\x19\x77\xd5\xfd\x54\x3d\x52\xad\x7b\xbf\x99\x42\x20\xb1\x27\xb8\x77\x23\x6a\xb5\x50\xd4\xa5\xb6\xf5\xf1\xd7\xe9\x05\x4b\xd7\xb1\xfa\x53\x16\x0a\x13\x3d\xae\x10\xb8\x13\xe2\xf4\x9a\x69\xc2\xf8\xf6\x7a\xb2\xf8\xda\x5c\x17\x76\x75\xb5\x04\xe1\x60\xee\xaa\xc7\xa5\x55\x82\x37\x53\x02\x43\xe7\x09\x6a\x50\x8f\x50\x2d\x03\xff\x25\xb4\x7d\xff\x4f\x7e\xff\xad\x67\xeb\x6f\x00\x00\x00\xff\xff\x4f\xcc\xb8\xbc\xcc\x0f\x00\x00")

func dataFilesDbLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesDbLatestJson,
		"data/files/db.latest.json",
	)
}

func dataFilesDbLatestJson() (*asset, error) {
	bytes, err := dataFilesDbLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/db.latest.json", size: 4044, mode: os.FileMode(420), modTime: time.Unix(1464354088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFilesPkgLatestJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xd8\x5d\x8b\x9b\x4c\x14\x07\xf0\xfb\x7c\x8a\xe0\xf5\x13\x19\xb3\xec\x73\xe1\x9d\x65\xdd\x56\xda\xec\x8a\x71\x2f\xb6\xa5\xc8\xa8\x93\x64\xc8\x38\xba\xf3\x52\xba\x2c\xfb\xdd\x7b\x4c\x93\x26\x6e\x42\xa1\xac\x09\x5e\x1c\x08\x12\xfc\x9f\x19\x8f\xc3\x0f\x19\xe6\x65\x34\x1e\x3b\xcd\x7a\xe9\xf8\xdf\xe0\xdf\x78\xfc\xb2\xb9\xc2\x3d\xbd\xb6\x8e\xef\x7c\x9a\x44\x77\x37\x51\x38\x49\x93\x28\xf8\xe2\xfc\xb7\x0b\xcd\x73\xc3\x20\x8d\x3f\x7f\xdc\xdf\xd3\x36\xcf\xb6\xf7\x1f\xe6\x61\xb2\x0f\x9e\x6c\x6d\x68\xa6\xd8\x93\xe5\x8a\x95\x10\xc3\xe3\x5c\xab\x99\xda\x97\x94\x5c\x37\x82\x3e\x67\x92\x56\xed\xf8\x48\x96\x9c\xed\xd3\x46\xf1\x82\xcb\x65\x56\xd5\x25\x13\x10\xdf\x26\x61\xd8\x79\xae\x2e\x14\x6f\x0c\xaf\xe5\xae\x81\xb7\xed\xf2\x8a\x65\x56\x72\x03\xd1\x4d\xf0\x78\x3c\xf3\xa2\x56\x95\x15\x14\x62\xe2\x7a\xc7\x6d\xb5\x65\x30\x81\x86\xe6\x77\xeb\xd3\x0e\x66\x0a\x5a\x92\x66\x95\x55\xd3\x0a\x86\x5e\xfd\x19\xd8\x09\x69\xd3\x86\x53\xf7\xda\xd9\xa6\xaf\xdd\x95\xe9\xce\xb9\x5b\x1a\xdf\x23\x87\xb3\xad\x68\x0e\x3d\x50\x53\x2b\x17\x9a\x5a\x67\xcb\xdc\xf1\xa7\x87\x15\x54\x19\xbe\xa0\x85\xd9\xc7\x1e\x39\xcc\x0b\xee\xe6\x96\x8b\x32\xa3\x4b\x26\x61\x1d\x26\xde\x61\x28\xac\x36\x4c\xb9\x6b\x9b\xb3\x93\x05\x65\xee\x36\x94\x97\x6e\x53\x6b\xb3\x54\x4c\x3b\xfe\xf5\x89\x94\x09\xaa\x0d\x2f\x34\xa3\xaa\x58\x9d\x2e\xe1\x72\x21\xec\x4f\xc8\x8e\xd6\xa2\xa4\x86\x65\xda\xc0\x7b\x6c\x8c\x4c\x89\xf7\xff\x84\x78\xf0\x4b\x09\xf1\x37\x3f\x97\x10\xf2\xd5\xe9\x0e\x60\xb2\xdc\x96\x5f\x91\x93\xe5\xa3\x83\xa7\x1c\xd9\x9e\xa7\x41\x92\x3e\xc4\x17\xd6\x3d\x6f\x5f\xd2\x36\xe8\x1b\x7d\x9f\xd9\x77\x9c\xdc\x5f\xd8\x76\xac\xea\x05\xd3\x1a\xa8\x52\x81\xc0\x11\xf8\x99\x81\x87\x77\xe9\xe4\x43\x98\x06\x17\xf3\x1d\x4a\x58\x66\xd0\xa4\xdf\xb5\x3d\x79\xd3\x32\xe2\x46\xdc\x47\xb8\xe3\xcb\xc2\x8e\x15\xff\x01\x2d\x8f\x23\x09\x6f\x29\x04\x6d\xb9\x22\x71\x24\x7e\xde\xef\x77\xd7\xd1\x99\x89\xdf\x2a\xf6\xae\xaf\x76\x9c\x44\xb3\x20\x79\x44\xd5\xa8\xfa\xef\xaa\x67\xd3\xd9\xef\x63\x93\xa1\x1c\x98\x40\x43\x48\x1b\x69\xf7\x44\x7b\x7b\x6a\x32\x9c\xf3\x12\xe4\x8d\xbc\xfb\xe3\x1d\x27\xf7\x03\x3b\x2e\x41\xdf\xe8\xbb\x1f\xdf\x41\x3c\xb0\x9d\x09\x34\x84\xb4\x91\x76\x4f\xb4\x07\xb7\x33\x41\xde\xc8\xbb\x3f\xde\xc3\xdb\x99\xa0\x6f\xf4\xfd\x8f\xbe\xe1\xfa\x7d\xf4\x3a\xfa\x15\x00\x00\xff\xff\x09\xaf\x41\x3a\x78\x22\x00\x00")

func dataFilesPkgLatestJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFilesPkgLatestJson,
		"data/files/pkg.latest.json",
	)
}

func dataFilesPkgLatestJson() (*asset, error) {
	bytes, err := dataFilesPkgLatestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/files/pkg.latest.json", size: 8824, mode: os.FileMode(436), modTime: time.Unix(1464908933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/files/ci.latest.json": dataFilesCiLatestJson,
	"data/files/cloud_provider.json": dataFilesCloud_providerJson,
	"data/files/cluster.latest.json": dataFilesClusterLatestJson,
	"data/files/db.latest.json": dataFilesDbLatestJson,
	"data/files/pkg.latest.json": dataFilesPkgLatestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"files": &bintree{nil, map[string]*bintree{
			"ci.latest.json": &bintree{dataFilesCiLatestJson, map[string]*bintree{}},
			"cloud_provider.json": &bintree{dataFilesCloud_providerJson, map[string]*bintree{}},
			"cluster.latest.json": &bintree{dataFilesClusterLatestJson, map[string]*bintree{}},
			"db.latest.json": &bintree{dataFilesDbLatestJson, map[string]*bintree{}},
			"pkg.latest.json": &bintree{dataFilesPkgLatestJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

