// Code generated by protoc-gen-go.
// source: conduit.proto
// DO NOT EDIT!

package authentication

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ConduitRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *ConduitRequest) Reset()                    { *m = ConduitRequest{} }
func (m *ConduitRequest) String() string            { return proto.CompactTextString(m) }
func (*ConduitRequest) ProtoMessage()               {}
func (*ConduitRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ConduitWhoAmIResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	User   *ConduitUser   `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *ConduitWhoAmIResponse) Reset()                    { *m = ConduitWhoAmIResponse{} }
func (m *ConduitWhoAmIResponse) String() string            { return proto.CompactTextString(m) }
func (*ConduitWhoAmIResponse) ProtoMessage()               {}
func (*ConduitWhoAmIResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ConduitWhoAmIResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ConduitWhoAmIResponse) GetUser() *ConduitUser {
	if m != nil {
		return m.User
	}
	return nil
}

type ConduitUsersResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	User   []*ConduitUser `protobuf:"bytes,2,rep,name=user" json:"user,omitempty"`
}

func (m *ConduitUsersResponse) Reset()                    { *m = ConduitUsersResponse{} }
func (m *ConduitUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*ConduitUsersResponse) ProtoMessage()               {}
func (*ConduitUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ConduitUsersResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ConduitUsersResponse) GetUser() []*ConduitUser {
	if m != nil {
		return m.User
	}
	return nil
}

type ConduitUser struct {
	Phid         string   `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	UserName     string   `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	RealName     string   `protobuf:"bytes,3,opt,name=real_name,json=realName" json:"real_name,omitempty"`
	Iamge        string   `protobuf:"bytes,4,opt,name=iamge" json:"iamge,omitempty"`
	Uri          string   `protobuf:"bytes,5,opt,name=uri" json:"uri,omitempty"`
	Roles        []string `protobuf:"bytes,6,rep,name=roles" json:"roles,omitempty"`
	PrimaryEmail string   `protobuf:"bytes,7,opt,name=primary_email,json=primaryEmail" json:"primary_email,omitempty"`
}

func (m *ConduitUser) Reset()                    { *m = ConduitUser{} }
func (m *ConduitUser) String() string            { return proto.CompactTextString(m) }
func (*ConduitUser) ProtoMessage()               {}
func (*ConduitUser) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func init() {
	proto.RegisterType((*ConduitRequest)(nil), "authentication.ConduitRequest")
	proto.RegisterType((*ConduitWhoAmIResponse)(nil), "authentication.ConduitWhoAmIResponse")
	proto.RegisterType((*ConduitUsersResponse)(nil), "authentication.ConduitUsersResponse")
	proto.RegisterType((*ConduitUser)(nil), "authentication.ConduitUser")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Conduit service

type ConduitClient interface {
	// This rpc is used to check a valid user from other applications.
	WhoAmI(ctx context.Context, in *ConduitRequest, opts ...grpc.CallOption) (*ConduitWhoAmIResponse, error)
	// appctl used this to validates the user token with phabricator.
	Users(ctx context.Context, in *ConduitRequest, opts ...grpc.CallOption) (*ConduitUsersResponse, error)
}

type conduitClient struct {
	cc *grpc.ClientConn
}

func NewConduitClient(cc *grpc.ClientConn) ConduitClient {
	return &conduitClient{cc}
}

func (c *conduitClient) WhoAmI(ctx context.Context, in *ConduitRequest, opts ...grpc.CallOption) (*ConduitWhoAmIResponse, error) {
	out := new(ConduitWhoAmIResponse)
	err := grpc.Invoke(ctx, "/authentication.Conduit/WhoAmI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) Users(ctx context.Context, in *ConduitRequest, opts ...grpc.CallOption) (*ConduitUsersResponse, error) {
	out := new(ConduitUsersResponse)
	err := grpc.Invoke(ctx, "/authentication.Conduit/Users", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Conduit service

type ConduitServer interface {
	// This rpc is used to check a valid user from other applications.
	WhoAmI(context.Context, *ConduitRequest) (*ConduitWhoAmIResponse, error)
	// appctl used this to validates the user token with phabricator.
	Users(context.Context, *ConduitRequest) (*ConduitUsersResponse, error)
}

func RegisterConduitServer(s *grpc.Server, srv ConduitServer) {
	s.RegisterService(&_Conduit_serviceDesc, srv)
}

func _Conduit_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConduitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.Conduit/WhoAmI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).WhoAmI(ctx, req.(*ConduitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_Users_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConduitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).Users(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.Conduit/Users",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).Users(ctx, req.(*ConduitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Conduit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "authentication.Conduit",
	HandlerType: (*ConduitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhoAmI",
			Handler:    _Conduit_WhoAmI_Handler,
		},
		{
			MethodName: "Users",
			Handler:    _Conduit_Users_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x52, 0x4b, 0x0e, 0xd3, 0x30,
	0x10, 0x55, 0xfa, 0x49, 0xe9, 0x94, 0x56, 0xc8, 0x2a, 0x28, 0xb4, 0xa5, 0x42, 0x69, 0x41, 0x88,
	0x45, 0x0c, 0x65, 0xc7, 0x0e, 0x01, 0x0b, 0x36, 0x2c, 0x82, 0x10, 0xcb, 0xca, 0xb4, 0x56, 0x63,
	0x91, 0xc4, 0xc1, 0x76, 0x40, 0xdd, 0x72, 0x05, 0xee, 0xc3, 0x25, 0xb8, 0x02, 0x47, 0xe0, 0x00,
	0xd8, 0x63, 0x0b, 0x5a, 0x89, 0x02, 0x12, 0x9b, 0xc8, 0xf3, 0xde, 0xcb, 0x3c, 0xfb, 0xcd, 0xc0,
	0x78, 0x27, 0xeb, 0x7d, 0x2b, 0x4c, 0xd6, 0x28, 0x69, 0x24, 0x99, 0xb0, 0xd6, 0x14, 0xbc, 0x36,
	0x62, 0xc7, 0x8c, 0x90, 0xf5, 0x6c, 0x71, 0x90, 0xf2, 0x50, 0x72, 0xca, 0x1a, 0x41, 0x59, 0x5d,
	0x4b, 0x83, 0xb0, 0xf6, 0xea, 0xd9, 0x0d, 0x07, 0xef, 0xcd, 0xb1, 0xe1, 0x9a, 0xe2, 0xd7, 0xe3,
	0xe9, 0x33, 0x98, 0x3c, 0xf5, 0x6d, 0x73, 0xfe, 0xbe, 0xe5, 0xda, 0x90, 0x05, 0x0c, 0x6b, 0x56,
	0x71, 0xdd, 0xb0, 0x1d, 0x4f, 0xa2, 0xdb, 0xd1, 0xbd, 0x61, 0xfe, 0x0b, 0x20, 0x53, 0xe8, 0x1b,
	0xf9, 0x8e, 0xd7, 0x49, 0x07, 0x19, 0x5f, 0xa4, 0x0d, 0x5c, 0x0f, 0x5d, 0xde, 0x14, 0xf2, 0x49,
	0xf5, 0x22, 0xb7, 0x6a, 0xeb, 0xcd, 0xc9, 0x5d, 0x88, 0xb5, 0xbd, 0x48, 0xab, 0xb1, 0xd3, 0x68,
	0x33, 0xc9, 0xfc, 0x1d, 0xb2, 0x57, 0x88, 0xe6, 0x81, 0x25, 0x14, 0x7a, 0xad, 0xe6, 0x0a, 0xbb,
	0x8e, 0x36, 0xf3, 0xec, 0xfc, 0x6d, 0x59, 0x68, 0xfe, 0xda, 0x4a, 0x72, 0x14, 0xa6, 0x12, 0xa6,
	0x27, 0xa0, 0xfe, 0x0f, 0xc3, 0xee, 0xbf, 0x19, 0x7e, 0x89, 0x60, 0x74, 0x82, 0x12, 0x02, 0xbd,
	0xa6, 0x10, 0xfb, 0x90, 0x10, 0x9e, 0xc9, 0x1c, 0x86, 0x4e, 0xbb, 0x75, 0x71, 0x85, 0x80, 0xae,
	0x38, 0xe0, 0xa5, 0xad, 0x1d, 0xa9, 0x38, 0x2b, 0x3d, 0xd9, 0xf5, 0xa4, 0x03, 0x90, 0xb4, 0xb1,
	0x0a, 0x56, 0x1d, 0x78, 0xd2, 0xf3, 0xb1, 0x62, 0x41, 0xae, 0x41, 0xb7, 0x55, 0x22, 0xe9, 0x23,
	0xe6, 0x8e, 0x4e, 0xa7, 0x64, 0xc9, 0x75, 0x12, 0xdb, 0x7b, 0x5b, 0x1d, 0x16, 0x64, 0x05, 0xe3,
	0x46, 0x89, 0x8a, 0xa9, 0xe3, 0x96, 0x57, 0x4c, 0x94, 0xc9, 0x00, 0xff, 0xb8, 0x1a, 0xc0, 0xe7,
	0x0e, 0xdb, 0x7c, 0x8f, 0x60, 0x10, 0x1e, 0x40, 0x5a, 0x88, 0xfd, 0xa0, 0xc8, 0xf2, 0xc2, 0xcb,
	0xc3, 0x36, 0xcc, 0xee, 0x5c, 0xe0, 0xcf, 0xe7, 0x9c, 0xae, 0x3f, 0x7d, 0xfd, 0xf6, 0xb9, 0xb3,
	0x4c, 0x6f, 0x52, 0x27, 0xa7, 0x1f, 0x1e, 0x64, 0x0f, 0x69, 0x58, 0x57, 0xfa, 0xb1, 0x90, 0xac,
	0x12, 0x8f, 0xa3, 0xfb, 0x44, 0x41, 0x1f, 0xa7, 0xf5, 0x57, 0xd7, 0xf5, 0x1f, 0xe6, 0xf1, 0x73,
	0xd6, 0xe9, 0x0a, 0x4d, 0x6f, 0xa5, 0xc9, 0x6f, 0x4c, 0x5d, 0xec, 0xda, 0x7a, 0xbe, 0x8d, 0x71,
	0xcf, 0x1f, 0xfd, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x7b, 0xe4, 0x75, 0x3e, 0x03, 0x00, 0x00,
}
