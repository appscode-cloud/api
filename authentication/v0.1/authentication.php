<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: authentication.proto
//   Date: 2016-04-19 16:27:16

namespace authentication {

  class ValidateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $username = null;
    
    /**  @var string */
    public $secret = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'authentication.ValidateRequest');

      // OPTIONAL STRING namespace = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING username = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING secret = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "secret";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(1);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \authentication\ValidateRequest
     */
    public function clearNamespace(){
      return $this->_clear(1);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(1);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \authentication\ValidateRequest
     */
    public function setNamespace( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(2);
    }
    
    /**
     * Clear <username> value
     *
     * @return \authentication\ValidateRequest
     */
    public function clearUsername(){
      return $this->_clear(2);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(2);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \authentication\ValidateRequest
     */
    public function setUsername( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <secret> has a value
     *
     * @return boolean
     */
    public function hasSecret(){
      return $this->_has(3);
    }
    
    /**
     * Clear <secret> value
     *
     * @return \authentication\ValidateRequest
     */
    public function clearSecret(){
      return $this->_clear(3);
    }
    
    /**
     * Get <secret> value
     *
     * @return string
     */
    public function getSecret(){
      return $this->_get(3);
    }
    
    /**
     * Set <secret> value
     *
     * @param string $value
     * @return \authentication\ValidateRequest
     */
    public function setSecret( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace authentication {

  class ValidateResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'authentication.ValidateResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \authentication\ValidateResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \authentication\ValidateResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
  }
}

namespace authentication {

  class AuthenticationClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param authentication\ValidateRequest $input
     */
    public function User(\authentication\ValidateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/authentication.Authentication/User', $argument, '\authentication\ValidateResponse::deserialize', $metadata, $options);
    }
    /**
     * @param authentication\ValidateRequest $input
     */
    public function Token(\authentication\ValidateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/authentication.Authentication/Token', $argument, '\authentication\ValidateResponse::deserialize', $metadata, $options);
    }
  }
}
