syntax = "proto3";

package loadbalancer;

import "google/api/annotations.proto";
import "api/dtypes/types.proto";

// alert service protobufs for clusters alerts.
service LoadBalancers {
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/loadbalancer/v0.1"
    };
  }

  rpc Describe(DescribeRequest) returns (DescribeResponse) {
    option (google.api.http) = {
      get: "/loadbalancer/v0.1/{name}"
    };
  }

  rpc Create(CreateRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      put: "/loadbalancer/v0.1"
      body: "*"
    };
  }

  rpc Update(UpdateRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      post: "/loadbalancer/v0.1"
      body: "*"
    };
  }

  rpc Delete(DeleteRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      delete: "/loadbalancer/v0.1/{name}"
    };
  }
}

message ListRequest {
  string cluster = 1;
}

message ListResponse {
  dtypes.Status status = 1;
  repeated LoadBalancer load_balancers = 2;
}

message DescribeRequest {
  string name = 1;
  string namespace = 2;
  string cluster = 3;
}

message DescribeResponse {
  dtypes.Status status = 1;
  LoadBalancer load_balancer = 2;
}

message CreateRequest {
  string name = 1;
  string namespace = 2;
  string cluster = 3;

  LoadBalancer load_balancer = 4;
}

message UpdateRequest {
  string name = 1;
  string cluster = 2;

  LoadBalancer load_balancer = 3;
}

message DeleteRequest {
  string name = 1;
  string cluster = 2;
}

message LoadBalancer {
  string name = 1;
  string namespace = 2;
  string creation_timestamp = 3;
  map<string, string> options = 4;

  Spec spec = 5;
  Status status = 6;
}

message Spec {
  LoadBalancerBackend backend = 1;
  repeated LoadBalancerRule rules = 2;
}

message Status {
  repeated LoadBalancerStatus status = 1;
}

message LoadBalancerStatus {
  string IP = 1;
  string host = 2;
}

message LoadBalancerBackend {
  string service_name = 1;
  string service_port = 2;
}

message LoadBalancerRule {
  string host = 1;
  repeated HTTPLoadBalancerRule HTTP = 2;
  repeated TCPLoadBalancerRule TCP = 3;
}

message HTTPLoadBalancerRule {
  string path = 1;
  LoadBalancerBackend backend = 2;
  repeated string header_rule = 3;
  repeated string rewrite_rule = 4;

  string SSL_secret_name = 5;

}

message TCPLoadBalancerRule {
  string port = 1;
  LoadBalancerBackend backend = 2;
}