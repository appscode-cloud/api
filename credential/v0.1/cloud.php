<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: cloud.proto
//   Date: 2016-04-19 16:27:23

namespace credential\CloudCredentialCreateRequest {

  class DataEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'credential.CloudCredentialCreateRequest.DataEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \credential\CloudCredentialCreateRequest\DataEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \credential\CloudCredentialCreateRequest\DataEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \credential\CloudCredentialCreateRequest\DataEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \credential\CloudCredentialCreateRequest\DataEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace credential {

  class CloudCredentialCreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $provider = null;
    
    /**  @var \credential\CloudCredentialCreateRequest\DataEntry[]  */
    public $data = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'credential.CloudCredentialCreateRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING provider = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "provider";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE data = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\credential\CloudCredentialCreateRequest\DataEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \credential\CloudCredentialCreateRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \credential\CloudCredentialCreateRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <provider> has a value
     *
     * @return boolean
     */
    public function hasProvider(){
      return $this->_has(2);
    }
    
    /**
     * Clear <provider> value
     *
     * @return \credential\CloudCredentialCreateRequest
     */
    public function clearProvider(){
      return $this->_clear(2);
    }
    
    /**
     * Get <provider> value
     *
     * @return string
     */
    public function getProvider(){
      return $this->_get(2);
    }
    
    /**
     * Set <provider> value
     *
     * @param string $value
     * @return \credential\CloudCredentialCreateRequest
     */
    public function setProvider( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <data> value
     *
     * @return \credential\CloudCredentialCreateRequest
     */
    public function clearData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <data> value
     *
     * @param int $idx
     * @return \credential\CloudCredentialCreateRequest\DataEntry
     */
    public function getData($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <data> value
     *
     * @param \credential\CloudCredentialCreateRequest\DataEntry $value
     * @return \credential\CloudCredentialCreateRequest
     */
    public function setData(\credential\CloudCredentialCreateRequest\DataEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <data>
     *
     * @return \credential\CloudCredentialCreateRequest\DataEntry[]
     */
    public function getDataList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <data>
     *
     * @param \credential\CloudCredentialCreateRequest\DataEntry $value
     * @return \credential\CloudCredentialCreateRequest
     */
    public function addData(\credential\CloudCredentialCreateRequest\DataEntry $value){
     return $this->_add(3, $value);
    }
  }
}

namespace credential\CloudCredentialUpdateRequest {

  class DataEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'credential.CloudCredentialUpdateRequest.DataEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \credential\CloudCredentialUpdateRequest\DataEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \credential\CloudCredentialUpdateRequest\DataEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \credential\CloudCredentialUpdateRequest\DataEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \credential\CloudCredentialUpdateRequest\DataEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace credential {

  class CloudCredentialUpdateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $provider = null;
    
    /**  @var \credential\CloudCredentialUpdateRequest\DataEntry[]  */
    public $data = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'credential.CloudCredentialUpdateRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING provider = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "provider";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE data = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\credential\CloudCredentialUpdateRequest\DataEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \credential\CloudCredentialUpdateRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \credential\CloudCredentialUpdateRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <provider> has a value
     *
     * @return boolean
     */
    public function hasProvider(){
      return $this->_has(2);
    }
    
    /**
     * Clear <provider> value
     *
     * @return \credential\CloudCredentialUpdateRequest
     */
    public function clearProvider(){
      return $this->_clear(2);
    }
    
    /**
     * Get <provider> value
     *
     * @return string
     */
    public function getProvider(){
      return $this->_get(2);
    }
    
    /**
     * Set <provider> value
     *
     * @param string $value
     * @return \credential\CloudCredentialUpdateRequest
     */
    public function setProvider( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <data> value
     *
     * @return \credential\CloudCredentialUpdateRequest
     */
    public function clearData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <data> value
     *
     * @param int $idx
     * @return \credential\CloudCredentialUpdateRequest\DataEntry
     */
    public function getData($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <data> value
     *
     * @param \credential\CloudCredentialUpdateRequest\DataEntry $value
     * @return \credential\CloudCredentialUpdateRequest
     */
    public function setData(\credential\CloudCredentialUpdateRequest\DataEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <data>
     *
     * @return \credential\CloudCredentialUpdateRequest\DataEntry[]
     */
    public function getDataList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <data>
     *
     * @param \credential\CloudCredentialUpdateRequest\DataEntry $value
     * @return \credential\CloudCredentialUpdateRequest
     */
    public function addData(\credential\CloudCredentialUpdateRequest\DataEntry $value){
     return $this->_add(3, $value);
    }
  }
}

namespace credential {

  class CloudCredentialDeleteRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'credential.CloudCredentialDeleteRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \credential\CloudCredentialDeleteRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \credential\CloudCredentialDeleteRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace credential {

  class CloudCredentialListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \credential\CloudCredential[]  */
    public $credentials = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'credential.CloudCredentialListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE credentials = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "credentials";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\credential\CloudCredential';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \credential\CloudCredentialListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \credential\CloudCredentialListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <credentials> has a value
     *
     * @return boolean
     */
    public function hasCredentials(){
      return $this->_has(2);
    }
    
    /**
     * Clear <credentials> value
     *
     * @return \credential\CloudCredentialListResponse
     */
    public function clearCredentials(){
      return $this->_clear(2);
    }
    
    /**
     * Get <credentials> value
     *
     * @param int $idx
     * @return \credential\CloudCredential
     */
    public function getCredentials($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <credentials> value
     *
     * @param \credential\CloudCredential $value
     * @return \credential\CloudCredentialListResponse
     */
    public function setCredentials(\credential\CloudCredential $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <credentials>
     *
     * @return \credential\CloudCredential[]
     */
    public function getCredentialsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <credentials>
     *
     * @param \credential\CloudCredential $value
     * @return \credential\CloudCredentialListResponse
     */
    public function addCredentials(\credential\CloudCredential $value){
     return $this->_add(2, $value);
    }
  }
}

namespace credential {

  class CloudCredential extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $provider = null;
    
    /**  @var string */
    public $information = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'credential.CloudCredential');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING provider = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "provider";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING information = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "information";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \credential\CloudCredential
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \credential\CloudCredential
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <provider> has a value
     *
     * @return boolean
     */
    public function hasProvider(){
      return $this->_has(2);
    }
    
    /**
     * Clear <provider> value
     *
     * @return \credential\CloudCredential
     */
    public function clearProvider(){
      return $this->_clear(2);
    }
    
    /**
     * Get <provider> value
     *
     * @return string
     */
    public function getProvider(){
      return $this->_get(2);
    }
    
    /**
     * Set <provider> value
     *
     * @param string $value
     * @return \credential\CloudCredential
     */
    public function setProvider( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <information> has a value
     *
     * @return boolean
     */
    public function hasInformation(){
      return $this->_has(3);
    }
    
    /**
     * Clear <information> value
     *
     * @return \credential\CloudCredential
     */
    public function clearInformation(){
      return $this->_clear(3);
    }
    
    /**
     * Get <information> value
     *
     * @return string
     */
    public function getInformation(){
      return $this->_get(3);
    }
    
    /**
     * Set <information> value
     *
     * @param string $value
     * @return \credential\CloudCredential
     */
    public function setInformation( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace credential {

  class CloudClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param dtypes\VoidRequest $input
     */
    public function List(\dtypes\VoidRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/credential.Cloud/List', $argument, '\credential\CloudCredentialListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param credential\CloudCredentialCreateRequest $input
     */
    public function Create(\credential\CloudCredentialCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/credential.Cloud/Create', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param credential\CloudCredentialUpdateRequest $input
     */
    public function Update(\credential\CloudCredentialUpdateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/credential.Cloud/Update', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param credential\CloudCredentialDeleteRequest $input
     */
    public function Delete(\credential\CloudCredentialDeleteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/credential.Cloud/Delete', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
  }
}
