<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: events.proto
//   Date: 2016-04-19 16:27:31

namespace kubernetes\EventRequest\ObjectMeta {

  class LabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.EventRequest.ObjectMeta.LabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \kubernetes\EventRequest\ObjectMeta\LabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest\ObjectMeta\LabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \kubernetes\EventRequest\ObjectMeta\LabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest\ObjectMeta\LabelsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes\EventRequest {

  class ObjectMeta extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $kind = null;
    
    /**  @var string[]  */
    public $service = array();
    
    /**  @var string */
    public $replication_controller = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $pod_ip = null;
    
    /**  @var string */
    public $instance_id = null;
    
    /**  @var \kubernetes\EventRequest\ObjectMeta\LabelsEntry[]  */
    public $labels = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.EventRequest.ObjectMeta');

      // OPTIONAL STRING kind = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING service = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "service";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING replication_controller = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "replication_controller";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING pod_ip = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "pod_ip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING instance_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "instance_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\EventRequest\ObjectMeta\LabelsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(1);
    }
    
    /**
     * Clear <kind> value
     *
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function clearKind(){
      return $this->_clear(1);
    }
    
    /**
     * Get <kind> value
     *
     * @return string
     */
    public function getKind(){
      return $this->_get(1);
    }
    
    /**
     * Set <kind> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function setKind( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <service> has a value
     *
     * @return boolean
     */
    public function hasService(){
      return $this->_has(2);
    }
    
    /**
     * Clear <service> value
     *
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function clearService(){
      return $this->_clear(2);
    }
    
    /**
     * Get <service> value
     *
     * @param int $idx
     * @return string
     */
    public function getService($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <service> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function setService( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <service>
     *
     * @return string[]
     */
    public function getServiceList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <service>
     *
     * @param string $value
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function addService( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <replication_controller> has a value
     *
     * @return boolean
     */
    public function hasReplicationController(){
      return $this->_has(3);
    }
    
    /**
     * Clear <replication_controller> value
     *
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function clearReplicationController(){
      return $this->_clear(3);
    }
    
    /**
     * Get <replication_controller> value
     *
     * @return string
     */
    public function getReplicationController(){
      return $this->_get(3);
    }
    
    /**
     * Set <replication_controller> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function setReplicationController( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(4);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function clearNamespace(){
      return $this->_clear(4);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(4);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function setNamespace( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <pod_ip> has a value
     *
     * @return boolean
     */
    public function hasPodIp(){
      return $this->_has(5);
    }
    
    /**
     * Clear <pod_ip> value
     *
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function clearPodIp(){
      return $this->_clear(5);
    }
    
    /**
     * Get <pod_ip> value
     *
     * @return string
     */
    public function getPodIp(){
      return $this->_get(5);
    }
    
    /**
     * Set <pod_ip> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function setPodIp( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <instance_id> has a value
     *
     * @return boolean
     */
    public function hasInstanceId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <instance_id> value
     *
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function clearInstanceId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <instance_id> value
     *
     * @return string
     */
    public function getInstanceId(){
      return $this->_get(6);
    }
    
    /**
     * Set <instance_id> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function setInstanceId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(7);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function clearLabels(){
      return $this->_clear(7);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \kubernetes\EventRequest\ObjectMeta\LabelsEntry
     */
    public function getLabels($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \kubernetes\EventRequest\ObjectMeta\LabelsEntry $value
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function setLabels(\kubernetes\EventRequest\ObjectMeta\LabelsEntry $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \kubernetes\EventRequest\ObjectMeta\LabelsEntry[]
     */
    public function getLabelsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \kubernetes\EventRequest\ObjectMeta\LabelsEntry $value
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function addLabels(\kubernetes\EventRequest\ObjectMeta\LabelsEntry $value){
     return $this->_add(7, $value);
    }
  }
}

namespace kubernetes {

  class EventRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster_name = null;
    
    /**  @var string */
    public $kube_namespace = null;
    
    /**  @var string */
    public $kube_object_type = null;
    
    /**  @var string */
    public $kube_object_name = null;
    
    /**  @var string */
    public $event_type = null;
    
    /**  @var \kubernetes\EventRequest\ObjectMeta */
    public $metadata = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.EventRequest');

      // OPTIONAL STRING cluster_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kube_namespace = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "kube_namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kube_object_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "kube_object_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kube_object_name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "kube_object_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING event_type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "event_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE metadata = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "metadata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\kubernetes\EventRequest\ObjectMeta';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster_name> has a value
     *
     * @return boolean
     */
    public function hasClusterName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster_name> value
     *
     * @return \kubernetes\EventRequest
     */
    public function clearClusterName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster_name> value
     *
     * @return string
     */
    public function getClusterName(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster_name> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest
     */
    public function setClusterName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <kube_namespace> has a value
     *
     * @return boolean
     */
    public function hasKubeNamespace(){
      return $this->_has(2);
    }
    
    /**
     * Clear <kube_namespace> value
     *
     * @return \kubernetes\EventRequest
     */
    public function clearKubeNamespace(){
      return $this->_clear(2);
    }
    
    /**
     * Get <kube_namespace> value
     *
     * @return string
     */
    public function getKubeNamespace(){
      return $this->_get(2);
    }
    
    /**
     * Set <kube_namespace> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest
     */
    public function setKubeNamespace( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <kube_object_type> has a value
     *
     * @return boolean
     */
    public function hasKubeObjectType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <kube_object_type> value
     *
     * @return \kubernetes\EventRequest
     */
    public function clearKubeObjectType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <kube_object_type> value
     *
     * @return string
     */
    public function getKubeObjectType(){
      return $this->_get(3);
    }
    
    /**
     * Set <kube_object_type> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest
     */
    public function setKubeObjectType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <kube_object_name> has a value
     *
     * @return boolean
     */
    public function hasKubeObjectName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <kube_object_name> value
     *
     * @return \kubernetes\EventRequest
     */
    public function clearKubeObjectName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <kube_object_name> value
     *
     * @return string
     */
    public function getKubeObjectName(){
      return $this->_get(4);
    }
    
    /**
     * Set <kube_object_name> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest
     */
    public function setKubeObjectName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <event_type> has a value
     *
     * @return boolean
     */
    public function hasEventType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <event_type> value
     *
     * @return \kubernetes\EventRequest
     */
    public function clearEventType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <event_type> value
     *
     * @return string
     */
    public function getEventType(){
      return $this->_get(5);
    }
    
    /**
     * Set <event_type> value
     *
     * @param string $value
     * @return \kubernetes\EventRequest
     */
    public function setEventType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <metadata> has a value
     *
     * @return boolean
     */
    public function hasMetadata(){
      return $this->_has(7);
    }
    
    /**
     * Clear <metadata> value
     *
     * @return \kubernetes\EventRequest
     */
    public function clearMetadata(){
      return $this->_clear(7);
    }
    
    /**
     * Get <metadata> value
     *
     * @return \kubernetes\EventRequest\ObjectMeta
     */
    public function getMetadata(){
      return $this->_get(7);
    }
    
    /**
     * Set <metadata> value
     *
     * @param \kubernetes\EventRequest\ObjectMeta $value
     * @return \kubernetes\EventRequest
     */
    public function setMetadata(\kubernetes\EventRequest\ObjectMeta $value){
      return $this->_set(7, $value);
    }
  }
}

namespace kubernetes\EventResponse {

  class Handler extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $action = null;
    
    /**  @var string */
    public $receiver = null;
    
    /**  @var string */
    public $base = null;
    
    /**  @var string */
    public $suffix = null;
    
    /**  @var string */
    public $verb = null;
    
    /**  @var string */
    public $data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.EventResponse.Handler');

      // OPTIONAL STRING action = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "action";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING receiver = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "receiver";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING base = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "base";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING suffix = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "suffix";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING verb = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "verb";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES data = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <action> has a value
     *
     * @return boolean
     */
    public function hasAction(){
      return $this->_has(1);
    }
    
    /**
     * Clear <action> value
     *
     * @return \kubernetes\EventResponse\Handler
     */
    public function clearAction(){
      return $this->_clear(1);
    }
    
    /**
     * Get <action> value
     *
     * @return string
     */
    public function getAction(){
      return $this->_get(1);
    }
    
    /**
     * Set <action> value
     *
     * @param string $value
     * @return \kubernetes\EventResponse\Handler
     */
    public function setAction( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <receiver> has a value
     *
     * @return boolean
     */
    public function hasReceiver(){
      return $this->_has(2);
    }
    
    /**
     * Clear <receiver> value
     *
     * @return \kubernetes\EventResponse\Handler
     */
    public function clearReceiver(){
      return $this->_clear(2);
    }
    
    /**
     * Get <receiver> value
     *
     * @return string
     */
    public function getReceiver(){
      return $this->_get(2);
    }
    
    /**
     * Set <receiver> value
     *
     * @param string $value
     * @return \kubernetes\EventResponse\Handler
     */
    public function setReceiver( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <base> has a value
     *
     * @return boolean
     */
    public function hasBase(){
      return $this->_has(3);
    }
    
    /**
     * Clear <base> value
     *
     * @return \kubernetes\EventResponse\Handler
     */
    public function clearBase(){
      return $this->_clear(3);
    }
    
    /**
     * Get <base> value
     *
     * @return string
     */
    public function getBase(){
      return $this->_get(3);
    }
    
    /**
     * Set <base> value
     *
     * @param string $value
     * @return \kubernetes\EventResponse\Handler
     */
    public function setBase( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <suffix> has a value
     *
     * @return boolean
     */
    public function hasSuffix(){
      return $this->_has(4);
    }
    
    /**
     * Clear <suffix> value
     *
     * @return \kubernetes\EventResponse\Handler
     */
    public function clearSuffix(){
      return $this->_clear(4);
    }
    
    /**
     * Get <suffix> value
     *
     * @return string
     */
    public function getSuffix(){
      return $this->_get(4);
    }
    
    /**
     * Set <suffix> value
     *
     * @param string $value
     * @return \kubernetes\EventResponse\Handler
     */
    public function setSuffix( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <verb> has a value
     *
     * @return boolean
     */
    public function hasVerb(){
      return $this->_has(5);
    }
    
    /**
     * Clear <verb> value
     *
     * @return \kubernetes\EventResponse\Handler
     */
    public function clearVerb(){
      return $this->_clear(5);
    }
    
    /**
     * Get <verb> value
     *
     * @return string
     */
    public function getVerb(){
      return $this->_get(5);
    }
    
    /**
     * Set <verb> value
     *
     * @param string $value
     * @return \kubernetes\EventResponse\Handler
     */
    public function setVerb( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(6);
    }
    
    /**
     * Clear <data> value
     *
     * @return \kubernetes\EventResponse\Handler
     */
    public function clearData(){
      return $this->_clear(6);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(6);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \kubernetes\EventResponse\Handler
     */
    public function setData( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace kubernetes {

  class EventResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\EventResponse\Handler[]  */
    public $tasks = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.EventResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE tasks = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "tasks";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\EventResponse\Handler';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\EventResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\EventResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <tasks> has a value
     *
     * @return boolean
     */
    public function hasTasks(){
      return $this->_has(2);
    }
    
    /**
     * Clear <tasks> value
     *
     * @return \kubernetes\EventResponse
     */
    public function clearTasks(){
      return $this->_clear(2);
    }
    
    /**
     * Get <tasks> value
     *
     * @param int $idx
     * @return \kubernetes\EventResponse\Handler
     */
    public function getTasks($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <tasks> value
     *
     * @param \kubernetes\EventResponse\Handler $value
     * @return \kubernetes\EventResponse
     */
    public function setTasks(\kubernetes\EventResponse\Handler $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <tasks>
     *
     * @return \kubernetes\EventResponse\Handler[]
     */
    public function getTasksList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <tasks>
     *
     * @param \kubernetes\EventResponse\Handler $value
     * @return \kubernetes\EventResponse
     */
    public function addTasks(\kubernetes\EventResponse\Handler $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes {

  class EventsClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param kubernetes\EventRequest $input
     */
    public function Constructive(\kubernetes\EventRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Events/Constructive', $argument, '\kubernetes\EventResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\EventRequest $input
     */
    public function Destructive(\kubernetes\EventRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Events/Destructive', $argument, '\kubernetes\EventResponse::deserialize', $metadata, $options);
    }
  }
}
