<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: client.proto
//   Date: 2016-04-20 05:49:28

namespace kubernetes {

  class ClientRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClientRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \kubernetes\ClientRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \kubernetes\ClientRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace kubernetes {

  class NodeListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\Node[]  */
    public $nodes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.NodeListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE nodes = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "nodes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Node';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\NodeListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\NodeListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <nodes> has a value
     *
     * @return boolean
     */
    public function hasNodes(){
      return $this->_has(2);
    }
    
    /**
     * Clear <nodes> value
     *
     * @return \kubernetes\NodeListResponse
     */
    public function clearNodes(){
      return $this->_clear(2);
    }
    
    /**
     * Get <nodes> value
     *
     * @param int $idx
     * @return \kubernetes\Node
     */
    public function getNodes($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <nodes> value
     *
     * @param \kubernetes\Node $value
     * @return \kubernetes\NodeListResponse
     */
    public function setNodes(\kubernetes\Node $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <nodes>
     *
     * @return \kubernetes\Node[]
     */
    public function getNodesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <nodes>
     *
     * @param \kubernetes\Node $value
     * @return \kubernetes\NodeListResponse
     */
    public function addNodes(\kubernetes\Node $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes\Node {

  class NodeCapacity extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $cpu = null;
    
    /**  @var int */
    public $memory = null;
    
    /**  @var int */
    public $pods = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Node.NodeCapacity');

      // OPTIONAL INT64 cpu = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cpu";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 memory = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "memory";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 pods = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pods";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cpu> has a value
     *
     * @return boolean
     */
    public function hasCpu(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cpu> value
     *
     * @return \kubernetes\Node\NodeCapacity
     */
    public function clearCpu(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cpu> value
     *
     * @return int
     */
    public function getCpu(){
      return $this->_get(1);
    }
    
    /**
     * Set <cpu> value
     *
     * @param int $value
     * @return \kubernetes\Node\NodeCapacity
     */
    public function setCpu( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <memory> has a value
     *
     * @return boolean
     */
    public function hasMemory(){
      return $this->_has(2);
    }
    
    /**
     * Clear <memory> value
     *
     * @return \kubernetes\Node\NodeCapacity
     */
    public function clearMemory(){
      return $this->_clear(2);
    }
    
    /**
     * Get <memory> value
     *
     * @return int
     */
    public function getMemory(){
      return $this->_get(2);
    }
    
    /**
     * Set <memory> value
     *
     * @param int $value
     * @return \kubernetes\Node\NodeCapacity
     */
    public function setMemory( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <pods> has a value
     *
     * @return boolean
     */
    public function hasPods(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pods> value
     *
     * @return \kubernetes\Node\NodeCapacity
     */
    public function clearPods(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pods> value
     *
     * @return int
     */
    public function getPods(){
      return $this->_get(3);
    }
    
    /**
     * Set <pods> value
     *
     * @param int $value
     * @return \kubernetes\Node\NodeCapacity
     */
    public function setPods( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace kubernetes {

  class Node extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $provider_id = null;
    
    /**  @var string */
    public $created_at = null;
    
    /**  @var \kubernetes\Node\NodeCapacity */
    public $capacity = null;
    
    /**  @var string */
    public $os_image = null;
    
    /**  @var string */
    public $kernel_version = null;
    
    /**  @var string */
    public $container_runtime = null;
    
    /**  @var string */
    public $kubelet_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Node');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING provider_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "provider_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE capacity = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "capacity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\kubernetes\Node\NodeCapacity';
      $descriptor->addField($f);

      // OPTIONAL STRING os_image = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "os_image";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kernel_version = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "kernel_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING container_runtime = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "container_runtime";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kubelet_version = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "kubelet_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\Node
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\Node
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <provider_id> has a value
     *
     * @return boolean
     */
    public function hasProviderId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <provider_id> value
     *
     * @return \kubernetes\Node
     */
    public function clearProviderId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <provider_id> value
     *
     * @return string
     */
    public function getProviderId(){
      return $this->_get(2);
    }
    
    /**
     * Set <provider_id> value
     *
     * @param string $value
     * @return \kubernetes\Node
     */
    public function setProviderId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(3);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \kubernetes\Node
     */
    public function clearCreatedAt(){
      return $this->_clear(3);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(3);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \kubernetes\Node
     */
    public function setCreatedAt( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <capacity> has a value
     *
     * @return boolean
     */
    public function hasCapacity(){
      return $this->_has(4);
    }
    
    /**
     * Clear <capacity> value
     *
     * @return \kubernetes\Node
     */
    public function clearCapacity(){
      return $this->_clear(4);
    }
    
    /**
     * Get <capacity> value
     *
     * @return \kubernetes\Node\NodeCapacity
     */
    public function getCapacity(){
      return $this->_get(4);
    }
    
    /**
     * Set <capacity> value
     *
     * @param \kubernetes\Node\NodeCapacity $value
     * @return \kubernetes\Node
     */
    public function setCapacity(\kubernetes\Node\NodeCapacity $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <os_image> has a value
     *
     * @return boolean
     */
    public function hasOsImage(){
      return $this->_has(5);
    }
    
    /**
     * Clear <os_image> value
     *
     * @return \kubernetes\Node
     */
    public function clearOsImage(){
      return $this->_clear(5);
    }
    
    /**
     * Get <os_image> value
     *
     * @return string
     */
    public function getOsImage(){
      return $this->_get(5);
    }
    
    /**
     * Set <os_image> value
     *
     * @param string $value
     * @return \kubernetes\Node
     */
    public function setOsImage( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <kernel_version> has a value
     *
     * @return boolean
     */
    public function hasKernelVersion(){
      return $this->_has(6);
    }
    
    /**
     * Clear <kernel_version> value
     *
     * @return \kubernetes\Node
     */
    public function clearKernelVersion(){
      return $this->_clear(6);
    }
    
    /**
     * Get <kernel_version> value
     *
     * @return string
     */
    public function getKernelVersion(){
      return $this->_get(6);
    }
    
    /**
     * Set <kernel_version> value
     *
     * @param string $value
     * @return \kubernetes\Node
     */
    public function setKernelVersion( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <container_runtime> has a value
     *
     * @return boolean
     */
    public function hasContainerRuntime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <container_runtime> value
     *
     * @return \kubernetes\Node
     */
    public function clearContainerRuntime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <container_runtime> value
     *
     * @return string
     */
    public function getContainerRuntime(){
      return $this->_get(7);
    }
    
    /**
     * Set <container_runtime> value
     *
     * @param string $value
     * @return \kubernetes\Node
     */
    public function setContainerRuntime( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <kubelet_version> has a value
     *
     * @return boolean
     */
    public function hasKubeletVersion(){
      return $this->_has(8);
    }
    
    /**
     * Clear <kubelet_version> value
     *
     * @return \kubernetes\Node
     */
    public function clearKubeletVersion(){
      return $this->_clear(8);
    }
    
    /**
     * Get <kubelet_version> value
     *
     * @return string
     */
    public function getKubeletVersion(){
      return $this->_get(8);
    }
    
    /**
     * Set <kubelet_version> value
     *
     * @param string $value
     * @return \kubernetes\Node
     */
    public function setKubeletVersion( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace kubernetes {

  class NamespaceListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\Namespace[]  */
    public $namespaces = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.NamespaceListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE namespaces = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "namespaces";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Namespace';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\NamespaceListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\NamespaceListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <namespaces> has a value
     *
     * @return boolean
     */
    public function hasNamespaces(){
      return $this->_has(2);
    }
    
    /**
     * Clear <namespaces> value
     *
     * @return \kubernetes\NamespaceListResponse
     */
    public function clearNamespaces(){
      return $this->_clear(2);
    }
    
    /**
     * Get <namespaces> value
     *
     * @param int $idx
     * @return \kubernetes\Namespace
     */
    public function getNamespaces($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <namespaces> value
     *
     * @param \kubernetes\Namespace $value
     * @return \kubernetes\NamespaceListResponse
     */
    public function setNamespaces(\kubernetes\Namespace $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <namespaces>
     *
     * @return \kubernetes\Namespace[]
     */
    public function getNamespacesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <namespaces>
     *
     * @param \kubernetes\Namespace $value
     * @return \kubernetes\NamespaceListResponse
     */
    public function addNamespaces(\kubernetes\Namespace $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes {

  class Namespace extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $created_at = null;
    
    /**  @var string */
    public $phase = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Namespace');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING phase = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "phase";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\Namespace
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\Namespace
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(2);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \kubernetes\Namespace
     */
    public function clearCreatedAt(){
      return $this->_clear(2);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(2);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \kubernetes\Namespace
     */
    public function setCreatedAt( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <phase> has a value
     *
     * @return boolean
     */
    public function hasPhase(){
      return $this->_has(3);
    }
    
    /**
     * Clear <phase> value
     *
     * @return \kubernetes\Namespace
     */
    public function clearPhase(){
      return $this->_clear(3);
    }
    
    /**
     * Get <phase> value
     *
     * @return string
     */
    public function getPhase(){
      return $this->_get(3);
    }
    
    /**
     * Set <phase> value
     *
     * @param string $value
     * @return \kubernetes\Namespace
     */
    public function setPhase( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace kubernetes {

  class SecretListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\Secret[]  */
    public $secrets = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.SecretListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE secrets = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "secrets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Secret';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\SecretListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\SecretListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <secrets> has a value
     *
     * @return boolean
     */
    public function hasSecrets(){
      return $this->_has(2);
    }
    
    /**
     * Clear <secrets> value
     *
     * @return \kubernetes\SecretListResponse
     */
    public function clearSecrets(){
      return $this->_clear(2);
    }
    
    /**
     * Get <secrets> value
     *
     * @param int $idx
     * @return \kubernetes\Secret
     */
    public function getSecrets($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <secrets> value
     *
     * @param \kubernetes\Secret $value
     * @return \kubernetes\SecretListResponse
     */
    public function setSecrets(\kubernetes\Secret $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <secrets>
     *
     * @return \kubernetes\Secret[]
     */
    public function getSecretsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <secrets>
     *
     * @param \kubernetes\Secret $value
     * @return \kubernetes\SecretListResponse
     */
    public function addSecrets(\kubernetes\Secret $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes {

  class Secret extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $resource_version = null;
    
    /**  @var string */
    public $secret_type = null;
    
    /**  @var string */
    public $created_at = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Secret');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING resource_version = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "resource_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING secret_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "secret_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\Secret
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\Secret
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(2);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\Secret
     */
    public function clearNamespace(){
      return $this->_clear(2);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(2);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\Secret
     */
    public function setNamespace( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <resource_version> has a value
     *
     * @return boolean
     */
    public function hasResourceVersion(){
      return $this->_has(3);
    }
    
    /**
     * Clear <resource_version> value
     *
     * @return \kubernetes\Secret
     */
    public function clearResourceVersion(){
      return $this->_clear(3);
    }
    
    /**
     * Get <resource_version> value
     *
     * @return string
     */
    public function getResourceVersion(){
      return $this->_get(3);
    }
    
    /**
     * Set <resource_version> value
     *
     * @param string $value
     * @return \kubernetes\Secret
     */
    public function setResourceVersion( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <secret_type> has a value
     *
     * @return boolean
     */
    public function hasSecretType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <secret_type> value
     *
     * @return \kubernetes\Secret
     */
    public function clearSecretType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <secret_type> value
     *
     * @return string
     */
    public function getSecretType(){
      return $this->_get(4);
    }
    
    /**
     * Set <secret_type> value
     *
     * @param string $value
     * @return \kubernetes\Secret
     */
    public function setSecretType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(5);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \kubernetes\Secret
     */
    public function clearCreatedAt(){
      return $this->_clear(5);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(5);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \kubernetes\Secret
     */
    public function setCreatedAt( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace kubernetes {

  class JobListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\Job[]  */
    public $jobs = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.JobListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE jobs = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "jobs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Job';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\JobListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\JobListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <jobs> has a value
     *
     * @return boolean
     */
    public function hasJobs(){
      return $this->_has(2);
    }
    
    /**
     * Clear <jobs> value
     *
     * @return \kubernetes\JobListResponse
     */
    public function clearJobs(){
      return $this->_clear(2);
    }
    
    /**
     * Get <jobs> value
     *
     * @param int $idx
     * @return \kubernetes\Job
     */
    public function getJobs($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <jobs> value
     *
     * @param \kubernetes\Job $value
     * @return \kubernetes\JobListResponse
     */
    public function setJobs(\kubernetes\Job $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <jobs>
     *
     * @return \kubernetes\Job[]
     */
    public function getJobsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <jobs>
     *
     * @param \kubernetes\Job $value
     * @return \kubernetes\JobListResponse
     */
    public function addJobs(\kubernetes\Job $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes {

  class Job extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $app = null;
    
    /**  @var string */
    public $created_at = null;
    
    /**  @var int */
    public $parallelism = null;
    
    /**  @var int */
    public $completions = null;
    
    /**  @var \kubernetes\Container[]  */
    public $containers = array();
    
    /**  @var string */
    public $start_time = null;
    
    /**  @var string */
    public $completion_time = null;
    
    /**  @var int */
    public $active = null;
    
    /**  @var int */
    public $succeeded = null;
    
    /**  @var int */
    public $failed = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Job');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING app = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "app";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 parallelism = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "parallelism";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 completions = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "completions";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE containers = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "containers";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Container';
      $descriptor->addField($f);

      // OPTIONAL STRING start_time = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "start_time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING completion_time = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "completion_time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 active = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "active";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 succeeded = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "succeeded";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 failed = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "failed";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\Job
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\Job
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(2);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\Job
     */
    public function clearNamespace(){
      return $this->_clear(2);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(2);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\Job
     */
    public function setNamespace( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <app> has a value
     *
     * @return boolean
     */
    public function hasApp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <app> value
     *
     * @return \kubernetes\Job
     */
    public function clearApp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <app> value
     *
     * @return string
     */
    public function getApp(){
      return $this->_get(3);
    }
    
    /**
     * Set <app> value
     *
     * @param string $value
     * @return \kubernetes\Job
     */
    public function setApp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(4);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \kubernetes\Job
     */
    public function clearCreatedAt(){
      return $this->_clear(4);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(4);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \kubernetes\Job
     */
    public function setCreatedAt( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <parallelism> has a value
     *
     * @return boolean
     */
    public function hasParallelism(){
      return $this->_has(5);
    }
    
    /**
     * Clear <parallelism> value
     *
     * @return \kubernetes\Job
     */
    public function clearParallelism(){
      return $this->_clear(5);
    }
    
    /**
     * Get <parallelism> value
     *
     * @return int
     */
    public function getParallelism(){
      return $this->_get(5);
    }
    
    /**
     * Set <parallelism> value
     *
     * @param int $value
     * @return \kubernetes\Job
     */
    public function setParallelism( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <completions> has a value
     *
     * @return boolean
     */
    public function hasCompletions(){
      return $this->_has(6);
    }
    
    /**
     * Clear <completions> value
     *
     * @return \kubernetes\Job
     */
    public function clearCompletions(){
      return $this->_clear(6);
    }
    
    /**
     * Get <completions> value
     *
     * @return int
     */
    public function getCompletions(){
      return $this->_get(6);
    }
    
    /**
     * Set <completions> value
     *
     * @param int $value
     * @return \kubernetes\Job
     */
    public function setCompletions( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <containers> has a value
     *
     * @return boolean
     */
    public function hasContainers(){
      return $this->_has(7);
    }
    
    /**
     * Clear <containers> value
     *
     * @return \kubernetes\Job
     */
    public function clearContainers(){
      return $this->_clear(7);
    }
    
    /**
     * Get <containers> value
     *
     * @param int $idx
     * @return \kubernetes\Container
     */
    public function getContainers($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <containers> value
     *
     * @param \kubernetes\Container $value
     * @return \kubernetes\Job
     */
    public function setContainers(\kubernetes\Container $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <containers>
     *
     * @return \kubernetes\Container[]
     */
    public function getContainersList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <containers>
     *
     * @param \kubernetes\Container $value
     * @return \kubernetes\Job
     */
    public function addContainers(\kubernetes\Container $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <start_time> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(8);
    }
    
    /**
     * Clear <start_time> value
     *
     * @return \kubernetes\Job
     */
    public function clearStartTime(){
      return $this->_clear(8);
    }
    
    /**
     * Get <start_time> value
     *
     * @return string
     */
    public function getStartTime(){
      return $this->_get(8);
    }
    
    /**
     * Set <start_time> value
     *
     * @param string $value
     * @return \kubernetes\Job
     */
    public function setStartTime( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <completion_time> has a value
     *
     * @return boolean
     */
    public function hasCompletionTime(){
      return $this->_has(9);
    }
    
    /**
     * Clear <completion_time> value
     *
     * @return \kubernetes\Job
     */
    public function clearCompletionTime(){
      return $this->_clear(9);
    }
    
    /**
     * Get <completion_time> value
     *
     * @return string
     */
    public function getCompletionTime(){
      return $this->_get(9);
    }
    
    /**
     * Set <completion_time> value
     *
     * @param string $value
     * @return \kubernetes\Job
     */
    public function setCompletionTime( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <active> has a value
     *
     * @return boolean
     */
    public function hasActive(){
      return $this->_has(10);
    }
    
    /**
     * Clear <active> value
     *
     * @return \kubernetes\Job
     */
    public function clearActive(){
      return $this->_clear(10);
    }
    
    /**
     * Get <active> value
     *
     * @return int
     */
    public function getActive(){
      return $this->_get(10);
    }
    
    /**
     * Set <active> value
     *
     * @param int $value
     * @return \kubernetes\Job
     */
    public function setActive( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <succeeded> has a value
     *
     * @return boolean
     */
    public function hasSucceeded(){
      return $this->_has(11);
    }
    
    /**
     * Clear <succeeded> value
     *
     * @return \kubernetes\Job
     */
    public function clearSucceeded(){
      return $this->_clear(11);
    }
    
    /**
     * Get <succeeded> value
     *
     * @return int
     */
    public function getSucceeded(){
      return $this->_get(11);
    }
    
    /**
     * Set <succeeded> value
     *
     * @param int $value
     * @return \kubernetes\Job
     */
    public function setSucceeded( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <failed> has a value
     *
     * @return boolean
     */
    public function hasFailed(){
      return $this->_has(12);
    }
    
    /**
     * Clear <failed> value
     *
     * @return \kubernetes\Job
     */
    public function clearFailed(){
      return $this->_clear(12);
    }
    
    /**
     * Get <failed> value
     *
     * @return int
     */
    public function getFailed(){
      return $this->_get(12);
    }
    
    /**
     * Set <failed> value
     *
     * @param int $value
     * @return \kubernetes\Job
     */
    public function setFailed( $value){
      return $this->_set(12, $value);
    }
  }
}

namespace kubernetes {

  class PodListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\Pod[]  */
    public $pods = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.PodListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE pods = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "pods";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Pod';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\PodListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\PodListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pods> has a value
     *
     * @return boolean
     */
    public function hasPods(){
      return $this->_has(2);
    }
    
    /**
     * Clear <pods> value
     *
     * @return \kubernetes\PodListResponse
     */
    public function clearPods(){
      return $this->_clear(2);
    }
    
    /**
     * Get <pods> value
     *
     * @param int $idx
     * @return \kubernetes\Pod
     */
    public function getPods($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <pods> value
     *
     * @param \kubernetes\Pod $value
     * @return \kubernetes\PodListResponse
     */
    public function setPods(\kubernetes\Pod $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <pods>
     *
     * @return \kubernetes\Pod[]
     */
    public function getPodsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <pods>
     *
     * @param \kubernetes\Pod $value
     * @return \kubernetes\PodListResponse
     */
    public function addPods(\kubernetes\Pod $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes\Pod {

  class LinksEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Pod.LinksEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \kubernetes\Pod\LinksEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \kubernetes\Pod\LinksEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \kubernetes\Pod\LinksEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \kubernetes\Pod\LinksEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class Pod extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $app = null;
    
    /**  @var string */
    public $created_at = null;
    
    /**  @var \kubernetes\Container[]  */
    public $containers = array();
    
    /**  @var string */
    public $service_account = null;
    
    /**  @var string */
    public $node_name = null;
    
    /**  @var string */
    public $phase = null;
    
    /**  @var string */
    public $start_time = null;
    
    /**  @var string */
    public $message = null;
    
    /**  @var \kubernetes\Pod\LinksEntry[]  */
    public $links = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Pod');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING app = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "app";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE containers = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "containers";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Container';
      $descriptor->addField($f);

      // OPTIONAL STRING service_account = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "service_account";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING node_name = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "node_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING phase = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "phase";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING start_time = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "start_time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING message = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE links = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "links";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Pod\LinksEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\Pod
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\Pod
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(2);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\Pod
     */
    public function clearNamespace(){
      return $this->_clear(2);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(2);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\Pod
     */
    public function setNamespace( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <app> has a value
     *
     * @return boolean
     */
    public function hasApp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <app> value
     *
     * @return \kubernetes\Pod
     */
    public function clearApp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <app> value
     *
     * @return string
     */
    public function getApp(){
      return $this->_get(3);
    }
    
    /**
     * Set <app> value
     *
     * @param string $value
     * @return \kubernetes\Pod
     */
    public function setApp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(4);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \kubernetes\Pod
     */
    public function clearCreatedAt(){
      return $this->_clear(4);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(4);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \kubernetes\Pod
     */
    public function setCreatedAt( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <containers> has a value
     *
     * @return boolean
     */
    public function hasContainers(){
      return $this->_has(5);
    }
    
    /**
     * Clear <containers> value
     *
     * @return \kubernetes\Pod
     */
    public function clearContainers(){
      return $this->_clear(5);
    }
    
    /**
     * Get <containers> value
     *
     * @param int $idx
     * @return \kubernetes\Container
     */
    public function getContainers($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <containers> value
     *
     * @param \kubernetes\Container $value
     * @return \kubernetes\Pod
     */
    public function setContainers(\kubernetes\Container $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <containers>
     *
     * @return \kubernetes\Container[]
     */
    public function getContainersList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <containers>
     *
     * @param \kubernetes\Container $value
     * @return \kubernetes\Pod
     */
    public function addContainers(\kubernetes\Container $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <service_account> has a value
     *
     * @return boolean
     */
    public function hasServiceAccount(){
      return $this->_has(6);
    }
    
    /**
     * Clear <service_account> value
     *
     * @return \kubernetes\Pod
     */
    public function clearServiceAccount(){
      return $this->_clear(6);
    }
    
    /**
     * Get <service_account> value
     *
     * @return string
     */
    public function getServiceAccount(){
      return $this->_get(6);
    }
    
    /**
     * Set <service_account> value
     *
     * @param string $value
     * @return \kubernetes\Pod
     */
    public function setServiceAccount( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <node_name> has a value
     *
     * @return boolean
     */
    public function hasNodeName(){
      return $this->_has(7);
    }
    
    /**
     * Clear <node_name> value
     *
     * @return \kubernetes\Pod
     */
    public function clearNodeName(){
      return $this->_clear(7);
    }
    
    /**
     * Get <node_name> value
     *
     * @return string
     */
    public function getNodeName(){
      return $this->_get(7);
    }
    
    /**
     * Set <node_name> value
     *
     * @param string $value
     * @return \kubernetes\Pod
     */
    public function setNodeName( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <phase> has a value
     *
     * @return boolean
     */
    public function hasPhase(){
      return $this->_has(8);
    }
    
    /**
     * Clear <phase> value
     *
     * @return \kubernetes\Pod
     */
    public function clearPhase(){
      return $this->_clear(8);
    }
    
    /**
     * Get <phase> value
     *
     * @return string
     */
    public function getPhase(){
      return $this->_get(8);
    }
    
    /**
     * Set <phase> value
     *
     * @param string $value
     * @return \kubernetes\Pod
     */
    public function setPhase( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <start_time> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(9);
    }
    
    /**
     * Clear <start_time> value
     *
     * @return \kubernetes\Pod
     */
    public function clearStartTime(){
      return $this->_clear(9);
    }
    
    /**
     * Get <start_time> value
     *
     * @return string
     */
    public function getStartTime(){
      return $this->_get(9);
    }
    
    /**
     * Set <start_time> value
     *
     * @param string $value
     * @return \kubernetes\Pod
     */
    public function setStartTime( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <message> has a value
     *
     * @return boolean
     */
    public function hasMessage(){
      return $this->_has(10);
    }
    
    /**
     * Clear <message> value
     *
     * @return \kubernetes\Pod
     */
    public function clearMessage(){
      return $this->_clear(10);
    }
    
    /**
     * Get <message> value
     *
     * @return string
     */
    public function getMessage(){
      return $this->_get(10);
    }
    
    /**
     * Set <message> value
     *
     * @param string $value
     * @return \kubernetes\Pod
     */
    public function setMessage( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <links> has a value
     *
     * @return boolean
     */
    public function hasLinks(){
      return $this->_has(11);
    }
    
    /**
     * Clear <links> value
     *
     * @return \kubernetes\Pod
     */
    public function clearLinks(){
      return $this->_clear(11);
    }
    
    /**
     * Get <links> value
     *
     * @param int $idx
     * @return \kubernetes\Pod\LinksEntry
     */
    public function getLinks($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <links> value
     *
     * @param \kubernetes\Pod\LinksEntry $value
     * @return \kubernetes\Pod
     */
    public function setLinks(\kubernetes\Pod\LinksEntry $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <links>
     *
     * @return \kubernetes\Pod\LinksEntry[]
     */
    public function getLinksList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <links>
     *
     * @param \kubernetes\Pod\LinksEntry $value
     * @return \kubernetes\Pod
     */
    public function addLinks(\kubernetes\Pod\LinksEntry $value){
     return $this->_add(11, $value);
    }
  }
}

namespace kubernetes {

  class Container extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $image = null;
    
    /**  @var string[]  */
    public $commands = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Container');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING image = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "image";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING commands = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "commands";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\Container
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\Container
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <image> has a value
     *
     * @return boolean
     */
    public function hasImage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <image> value
     *
     * @return \kubernetes\Container
     */
    public function clearImage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <image> value
     *
     * @return string
     */
    public function getImage(){
      return $this->_get(2);
    }
    
    /**
     * Set <image> value
     *
     * @param string $value
     * @return \kubernetes\Container
     */
    public function setImage( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <commands> has a value
     *
     * @return boolean
     */
    public function hasCommands(){
      return $this->_has(3);
    }
    
    /**
     * Clear <commands> value
     *
     * @return \kubernetes\Container
     */
    public function clearCommands(){
      return $this->_clear(3);
    }
    
    /**
     * Get <commands> value
     *
     * @param int $idx
     * @return string
     */
    public function getCommands($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <commands> value
     *
     * @param string $value
     * @return \kubernetes\Container
     */
    public function setCommands( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <commands>
     *
     * @return string[]
     */
    public function getCommandsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <commands>
     *
     * @param string $value
     * @return \kubernetes\Container
     */
    public function addCommands( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace kubernetes {

  class ServiceListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\Service[]  */
    public $services = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ServiceListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE services = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "services";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Service';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\ServiceListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\ServiceListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <services> has a value
     *
     * @return boolean
     */
    public function hasServices(){
      return $this->_has(2);
    }
    
    /**
     * Clear <services> value
     *
     * @return \kubernetes\ServiceListResponse
     */
    public function clearServices(){
      return $this->_clear(2);
    }
    
    /**
     * Get <services> value
     *
     * @param int $idx
     * @return \kubernetes\Service
     */
    public function getServices($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <services> value
     *
     * @param \kubernetes\Service $value
     * @return \kubernetes\ServiceListResponse
     */
    public function setServices(\kubernetes\Service $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <services>
     *
     * @return \kubernetes\Service[]
     */
    public function getServicesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <services>
     *
     * @param \kubernetes\Service $value
     * @return \kubernetes\ServiceListResponse
     */
    public function addServices(\kubernetes\Service $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes\Service {

  class Port extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $protocol = null;
    
    /**  @var int */
    public $port = null;
    
    /**  @var string */
    public $target_port = null;
    
    /**  @var int */
    public $node_port = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Service.Port');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING protocol = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "protocol";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 port = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "port";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING target_port = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "target_port";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 node_port = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "node_port";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\Service\Port
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\Service\Port
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <protocol> has a value
     *
     * @return boolean
     */
    public function hasProtocol(){
      return $this->_has(2);
    }
    
    /**
     * Clear <protocol> value
     *
     * @return \kubernetes\Service\Port
     */
    public function clearProtocol(){
      return $this->_clear(2);
    }
    
    /**
     * Get <protocol> value
     *
     * @return string
     */
    public function getProtocol(){
      return $this->_get(2);
    }
    
    /**
     * Set <protocol> value
     *
     * @param string $value
     * @return \kubernetes\Service\Port
     */
    public function setProtocol( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <port> has a value
     *
     * @return boolean
     */
    public function hasPort(){
      return $this->_has(3);
    }
    
    /**
     * Clear <port> value
     *
     * @return \kubernetes\Service\Port
     */
    public function clearPort(){
      return $this->_clear(3);
    }
    
    /**
     * Get <port> value
     *
     * @return int
     */
    public function getPort(){
      return $this->_get(3);
    }
    
    /**
     * Set <port> value
     *
     * @param int $value
     * @return \kubernetes\Service\Port
     */
    public function setPort( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <target_port> has a value
     *
     * @return boolean
     */
    public function hasTargetPort(){
      return $this->_has(4);
    }
    
    /**
     * Clear <target_port> value
     *
     * @return \kubernetes\Service\Port
     */
    public function clearTargetPort(){
      return $this->_clear(4);
    }
    
    /**
     * Get <target_port> value
     *
     * @return string
     */
    public function getTargetPort(){
      return $this->_get(4);
    }
    
    /**
     * Set <target_port> value
     *
     * @param string $value
     * @return \kubernetes\Service\Port
     */
    public function setTargetPort( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <node_port> has a value
     *
     * @return boolean
     */
    public function hasNodePort(){
      return $this->_has(5);
    }
    
    /**
     * Clear <node_port> value
     *
     * @return \kubernetes\Service\Port
     */
    public function clearNodePort(){
      return $this->_clear(5);
    }
    
    /**
     * Get <node_port> value
     *
     * @return int
     */
    public function getNodePort(){
      return $this->_get(5);
    }
    
    /**
     * Set <node_port> value
     *
     * @param int $value
     * @return \kubernetes\Service\Port
     */
    public function setNodePort( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace kubernetes\Service {

  class LoadBalancerIngress extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $host_name = null;
    
    /**  @var string */
    public $ip = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Service.LoadBalancerIngress');

      // OPTIONAL STRING host_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "host_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ip = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <host_name> has a value
     *
     * @return boolean
     */
    public function hasHostName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <host_name> value
     *
     * @return \kubernetes\Service\LoadBalancerIngress
     */
    public function clearHostName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <host_name> value
     *
     * @return string
     */
    public function getHostName(){
      return $this->_get(1);
    }
    
    /**
     * Set <host_name> value
     *
     * @param string $value
     * @return \kubernetes\Service\LoadBalancerIngress
     */
    public function setHostName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ip> has a value
     *
     * @return boolean
     */
    public function hasIp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ip> value
     *
     * @return \kubernetes\Service\LoadBalancerIngress
     */
    public function clearIp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ip> value
     *
     * @return string
     */
    public function getIp(){
      return $this->_get(2);
    }
    
    /**
     * Set <ip> value
     *
     * @param string $value
     * @return \kubernetes\Service\LoadBalancerIngress
     */
    public function setIp( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class Service extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $app = null;
    
    /**  @var string */
    public $created_at = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $cluster_ip = null;
    
    /**  @var \kubernetes\Service\Port[]  */
    public $ports = array();
    
    /**  @var string[]  */
    public $external_ips = array();
    
    /**  @var \kubernetes\Service\LoadBalancerIngress[]  */
    public $loadbalancer_ingresses = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Service');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING app = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "app";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_ip = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "cluster_ip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE ports = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "ports";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Service\Port';
      $descriptor->addField($f);

      // REPEATED STRING external_ips = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "external_ips";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE loadbalancer_ingresses = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "loadbalancer_ingresses";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Service\LoadBalancerIngress';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\Service
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\Service
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(2);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\Service
     */
    public function clearNamespace(){
      return $this->_clear(2);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(2);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\Service
     */
    public function setNamespace( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <app> has a value
     *
     * @return boolean
     */
    public function hasApp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <app> value
     *
     * @return \kubernetes\Service
     */
    public function clearApp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <app> value
     *
     * @return string
     */
    public function getApp(){
      return $this->_get(3);
    }
    
    /**
     * Set <app> value
     *
     * @param string $value
     * @return \kubernetes\Service
     */
    public function setApp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(4);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \kubernetes\Service
     */
    public function clearCreatedAt(){
      return $this->_clear(4);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(4);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \kubernetes\Service
     */
    public function setCreatedAt( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \kubernetes\Service
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \kubernetes\Service
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <cluster_ip> has a value
     *
     * @return boolean
     */
    public function hasClusterIp(){
      return $this->_has(6);
    }
    
    /**
     * Clear <cluster_ip> value
     *
     * @return \kubernetes\Service
     */
    public function clearClusterIp(){
      return $this->_clear(6);
    }
    
    /**
     * Get <cluster_ip> value
     *
     * @return string
     */
    public function getClusterIp(){
      return $this->_get(6);
    }
    
    /**
     * Set <cluster_ip> value
     *
     * @param string $value
     * @return \kubernetes\Service
     */
    public function setClusterIp( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <ports> has a value
     *
     * @return boolean
     */
    public function hasPorts(){
      return $this->_has(7);
    }
    
    /**
     * Clear <ports> value
     *
     * @return \kubernetes\Service
     */
    public function clearPorts(){
      return $this->_clear(7);
    }
    
    /**
     * Get <ports> value
     *
     * @param int $idx
     * @return \kubernetes\Service\Port
     */
    public function getPorts($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <ports> value
     *
     * @param \kubernetes\Service\Port $value
     * @return \kubernetes\Service
     */
    public function setPorts(\kubernetes\Service\Port $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <ports>
     *
     * @return \kubernetes\Service\Port[]
     */
    public function getPortsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <ports>
     *
     * @param \kubernetes\Service\Port $value
     * @return \kubernetes\Service
     */
    public function addPorts(\kubernetes\Service\Port $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <external_ips> has a value
     *
     * @return boolean
     */
    public function hasExternalIps(){
      return $this->_has(8);
    }
    
    /**
     * Clear <external_ips> value
     *
     * @return \kubernetes\Service
     */
    public function clearExternalIps(){
      return $this->_clear(8);
    }
    
    /**
     * Get <external_ips> value
     *
     * @param int $idx
     * @return string
     */
    public function getExternalIps($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <external_ips> value
     *
     * @param string $value
     * @return \kubernetes\Service
     */
    public function setExternalIps( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <external_ips>
     *
     * @return string[]
     */
    public function getExternalIpsList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <external_ips>
     *
     * @param string $value
     * @return \kubernetes\Service
     */
    public function addExternalIps( $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <loadbalancer_ingresses> has a value
     *
     * @return boolean
     */
    public function hasLoadbalancerIngresses(){
      return $this->_has(9);
    }
    
    /**
     * Clear <loadbalancer_ingresses> value
     *
     * @return \kubernetes\Service
     */
    public function clearLoadbalancerIngresses(){
      return $this->_clear(9);
    }
    
    /**
     * Get <loadbalancer_ingresses> value
     *
     * @param int $idx
     * @return \kubernetes\Service\LoadBalancerIngress
     */
    public function getLoadbalancerIngresses($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <loadbalancer_ingresses> value
     *
     * @param \kubernetes\Service\LoadBalancerIngress $value
     * @return \kubernetes\Service
     */
    public function setLoadbalancerIngresses(\kubernetes\Service\LoadBalancerIngress $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <loadbalancer_ingresses>
     *
     * @return \kubernetes\Service\LoadBalancerIngress[]
     */
    public function getLoadbalancerIngressesList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <loadbalancer_ingresses>
     *
     * @param \kubernetes\Service\LoadBalancerIngress $value
     * @return \kubernetes\Service
     */
    public function addLoadbalancerIngresses(\kubernetes\Service\LoadBalancerIngress $value){
     return $this->_add(9, $value);
    }
  }
}

namespace kubernetes {

  class AppDescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $namespace = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.AppDescribeRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\AppDescribeRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\AppDescribeRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \kubernetes\AppDescribeRequest
     */
    public function clearCluster(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(2);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \kubernetes\AppDescribeRequest
     */
    public function setCluster( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(3);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\AppDescribeRequest
     */
    public function clearNamespace(){
      return $this->_clear(3);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(3);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\AppDescribeRequest
     */
    public function setNamespace( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace kubernetes\AppDescribeResponse {

  class LinksEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.AppDescribeResponse.LinksEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \kubernetes\AppDescribeResponse\LinksEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \kubernetes\AppDescribeResponse\LinksEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \kubernetes\AppDescribeResponse\LinksEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \kubernetes\AppDescribeResponse\LinksEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class AppDescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\Service */
    public $app = null;
    
    /**  @var \kubernetes\AppDescribeResponse\LinksEntry[]  */
    public $links = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.AppDescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE app = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "app";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\kubernetes\Service';
      $descriptor->addField($f);

      // REPEATED MESSAGE links = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "links";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\AppDescribeResponse\LinksEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\AppDescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\AppDescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <app> has a value
     *
     * @return boolean
     */
    public function hasApp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <app> value
     *
     * @return \kubernetes\AppDescribeResponse
     */
    public function clearApp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <app> value
     *
     * @return \kubernetes\Service
     */
    public function getApp(){
      return $this->_get(2);
    }
    
    /**
     * Set <app> value
     *
     * @param \kubernetes\Service $value
     * @return \kubernetes\AppDescribeResponse
     */
    public function setApp(\kubernetes\Service $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <links> has a value
     *
     * @return boolean
     */
    public function hasLinks(){
      return $this->_has(7);
    }
    
    /**
     * Clear <links> value
     *
     * @return \kubernetes\AppDescribeResponse
     */
    public function clearLinks(){
      return $this->_clear(7);
    }
    
    /**
     * Get <links> value
     *
     * @param int $idx
     * @return \kubernetes\AppDescribeResponse\LinksEntry
     */
    public function getLinks($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <links> value
     *
     * @param \kubernetes\AppDescribeResponse\LinksEntry $value
     * @return \kubernetes\AppDescribeResponse
     */
    public function setLinks(\kubernetes\AppDescribeResponse\LinksEntry $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <links>
     *
     * @return \kubernetes\AppDescribeResponse\LinksEntry[]
     */
    public function getLinksList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <links>
     *
     * @param \kubernetes\AppDescribeResponse\LinksEntry $value
     * @return \kubernetes\AppDescribeResponse
     */
    public function addLinks(\kubernetes\AppDescribeResponse\LinksEntry $value){
     return $this->_add(7, $value);
    }
  }
}

namespace kubernetes {

  class AppListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\App[]  */
    public $apps = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.AppListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE apps = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "apps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\App';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\AppListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\AppListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <apps> has a value
     *
     * @return boolean
     */
    public function hasApps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <apps> value
     *
     * @return \kubernetes\AppListResponse
     */
    public function clearApps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <apps> value
     *
     * @param int $idx
     * @return \kubernetes\App
     */
    public function getApps($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <apps> value
     *
     * @param \kubernetes\App $value
     * @return \kubernetes\AppListResponse
     */
    public function setApps(\kubernetes\App $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <apps>
     *
     * @return \kubernetes\App[]
     */
    public function getAppsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <apps>
     *
     * @param \kubernetes\App $value
     * @return \kubernetes\AppListResponse
     */
    public function addApps(\kubernetes\App $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes {

  class App extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $created_at = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $cluster_ip = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.App');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_ip = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "cluster_ip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\App
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\App
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(2);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\App
     */
    public function clearNamespace(){
      return $this->_clear(2);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(2);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\App
     */
    public function setNamespace( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(4);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \kubernetes\App
     */
    public function clearCreatedAt(){
      return $this->_clear(4);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(4);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \kubernetes\App
     */
    public function setCreatedAt( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \kubernetes\App
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \kubernetes\App
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <cluster_ip> has a value
     *
     * @return boolean
     */
    public function hasClusterIp(){
      return $this->_has(6);
    }
    
    /**
     * Clear <cluster_ip> value
     *
     * @return \kubernetes\App
     */
    public function clearClusterIp(){
      return $this->_clear(6);
    }
    
    /**
     * Get <cluster_ip> value
     *
     * @return string
     */
    public function getClusterIp(){
      return $this->_get(6);
    }
    
    /**
     * Set <cluster_ip> value
     *
     * @param string $value
     * @return \kubernetes\App
     */
    public function setClusterIp( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace kubernetes {

  class ReplicationControllerListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\ReplicationController[]  */
    public $replication_controllers = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ReplicationControllerListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE replication_controllers = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "replication_controllers";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\ReplicationController';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\ReplicationControllerListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\ReplicationControllerListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <replication_controllers> has a value
     *
     * @return boolean
     */
    public function hasReplicationControllers(){
      return $this->_has(2);
    }
    
    /**
     * Clear <replication_controllers> value
     *
     * @return \kubernetes\ReplicationControllerListResponse
     */
    public function clearReplicationControllers(){
      return $this->_clear(2);
    }
    
    /**
     * Get <replication_controllers> value
     *
     * @param int $idx
     * @return \kubernetes\ReplicationController
     */
    public function getReplicationControllers($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <replication_controllers> value
     *
     * @param \kubernetes\ReplicationController $value
     * @return \kubernetes\ReplicationControllerListResponse
     */
    public function setReplicationControllers(\kubernetes\ReplicationController $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <replication_controllers>
     *
     * @return \kubernetes\ReplicationController[]
     */
    public function getReplicationControllersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <replication_controllers>
     *
     * @param \kubernetes\ReplicationController $value
     * @return \kubernetes\ReplicationControllerListResponse
     */
    public function addReplicationControllers(\kubernetes\ReplicationController $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes {

  class ReplicationController extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $app = null;
    
    /**  @var string */
    public $created_at = null;
    
    /**  @var int */
    public $generation = null;
    
    /**  @var int */
    public $current_replicas = null;
    
    /**  @var int */
    public $replicas = null;
    
    /**  @var int */
    public $observed_generation = null;
    
    /**  @var \kubernetes\Container[]  */
    public $containers = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ReplicationController');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING app = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "app";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 generation = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "generation";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 current_replicas = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "current_replicas";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 replicas = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "replicas";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 observed_generation = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "observed_generation";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE containers = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "containers";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Container';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ReplicationController
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ReplicationController
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(2);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\ReplicationController
     */
    public function clearNamespace(){
      return $this->_clear(2);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(2);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\ReplicationController
     */
    public function setNamespace( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <app> has a value
     *
     * @return boolean
     */
    public function hasApp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <app> value
     *
     * @return \kubernetes\ReplicationController
     */
    public function clearApp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <app> value
     *
     * @return string
     */
    public function getApp(){
      return $this->_get(3);
    }
    
    /**
     * Set <app> value
     *
     * @param string $value
     * @return \kubernetes\ReplicationController
     */
    public function setApp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(4);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \kubernetes\ReplicationController
     */
    public function clearCreatedAt(){
      return $this->_clear(4);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(4);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \kubernetes\ReplicationController
     */
    public function setCreatedAt( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <generation> has a value
     *
     * @return boolean
     */
    public function hasGeneration(){
      return $this->_has(5);
    }
    
    /**
     * Clear <generation> value
     *
     * @return \kubernetes\ReplicationController
     */
    public function clearGeneration(){
      return $this->_clear(5);
    }
    
    /**
     * Get <generation> value
     *
     * @return int
     */
    public function getGeneration(){
      return $this->_get(5);
    }
    
    /**
     * Set <generation> value
     *
     * @param int $value
     * @return \kubernetes\ReplicationController
     */
    public function setGeneration( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <current_replicas> has a value
     *
     * @return boolean
     */
    public function hasCurrentReplicas(){
      return $this->_has(6);
    }
    
    /**
     * Clear <current_replicas> value
     *
     * @return \kubernetes\ReplicationController
     */
    public function clearCurrentReplicas(){
      return $this->_clear(6);
    }
    
    /**
     * Get <current_replicas> value
     *
     * @return int
     */
    public function getCurrentReplicas(){
      return $this->_get(6);
    }
    
    /**
     * Set <current_replicas> value
     *
     * @param int $value
     * @return \kubernetes\ReplicationController
     */
    public function setCurrentReplicas( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <replicas> has a value
     *
     * @return boolean
     */
    public function hasReplicas(){
      return $this->_has(7);
    }
    
    /**
     * Clear <replicas> value
     *
     * @return \kubernetes\ReplicationController
     */
    public function clearReplicas(){
      return $this->_clear(7);
    }
    
    /**
     * Get <replicas> value
     *
     * @return int
     */
    public function getReplicas(){
      return $this->_get(7);
    }
    
    /**
     * Set <replicas> value
     *
     * @param int $value
     * @return \kubernetes\ReplicationController
     */
    public function setReplicas( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <observed_generation> has a value
     *
     * @return boolean
     */
    public function hasObservedGeneration(){
      return $this->_has(8);
    }
    
    /**
     * Clear <observed_generation> value
     *
     * @return \kubernetes\ReplicationController
     */
    public function clearObservedGeneration(){
      return $this->_clear(8);
    }
    
    /**
     * Get <observed_generation> value
     *
     * @return int
     */
    public function getObservedGeneration(){
      return $this->_get(8);
    }
    
    /**
     * Set <observed_generation> value
     *
     * @param int $value
     * @return \kubernetes\ReplicationController
     */
    public function setObservedGeneration( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <containers> has a value
     *
     * @return boolean
     */
    public function hasContainers(){
      return $this->_has(9);
    }
    
    /**
     * Clear <containers> value
     *
     * @return \kubernetes\ReplicationController
     */
    public function clearContainers(){
      return $this->_clear(9);
    }
    
    /**
     * Get <containers> value
     *
     * @param int $idx
     * @return \kubernetes\Container
     */
    public function getContainers($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <containers> value
     *
     * @param \kubernetes\Container $value
     * @return \kubernetes\ReplicationController
     */
    public function setContainers(\kubernetes\Container $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <containers>
     *
     * @return \kubernetes\Container[]
     */
    public function getContainersList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <containers>
     *
     * @param \kubernetes\Container $value
     * @return \kubernetes\ReplicationController
     */
    public function addContainers(\kubernetes\Container $value){
     return $this->_add(9, $value);
    }
  }
}

namespace kubernetes {

  class ConfigMapListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\ConfigMap[]  */
    public $config_map = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ConfigMapListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE config_map = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "config_map";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\ConfigMap';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\ConfigMapListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\ConfigMapListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <config_map> has a value
     *
     * @return boolean
     */
    public function hasConfigMap(){
      return $this->_has(2);
    }
    
    /**
     * Clear <config_map> value
     *
     * @return \kubernetes\ConfigMapListResponse
     */
    public function clearConfigMap(){
      return $this->_clear(2);
    }
    
    /**
     * Get <config_map> value
     *
     * @param int $idx
     * @return \kubernetes\ConfigMap
     */
    public function getConfigMap($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <config_map> value
     *
     * @param \kubernetes\ConfigMap $value
     * @return \kubernetes\ConfigMapListResponse
     */
    public function setConfigMap(\kubernetes\ConfigMap $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <config_map>
     *
     * @return \kubernetes\ConfigMap[]
     */
    public function getConfigMapList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <config_map>
     *
     * @param \kubernetes\ConfigMap $value
     * @return \kubernetes\ConfigMapListResponse
     */
    public function addConfigMap(\kubernetes\ConfigMap $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes {

  class ConfigMap extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var int */
    public $size = null;
    
    /**  @var string */
    public $created_at = null;
    
    /**  @var string */
    public $resource_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ConfigMap');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING resource_version = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "resource_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ConfigMap
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMap
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(2);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\ConfigMap
     */
    public function clearNamespace(){
      return $this->_clear(2);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(2);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMap
     */
    public function setNamespace( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <size> value
     *
     * @return \kubernetes\ConfigMap
     */
    public function clearSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \kubernetes\ConfigMap
     */
    public function setSize( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(4);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \kubernetes\ConfigMap
     */
    public function clearCreatedAt(){
      return $this->_clear(4);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(4);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMap
     */
    public function setCreatedAt( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <resource_version> has a value
     *
     * @return boolean
     */
    public function hasResourceVersion(){
      return $this->_has(5);
    }
    
    /**
     * Clear <resource_version> value
     *
     * @return \kubernetes\ConfigMap
     */
    public function clearResourceVersion(){
      return $this->_clear(5);
    }
    
    /**
     * Get <resource_version> value
     *
     * @return string
     */
    public function getResourceVersion(){
      return $this->_get(5);
    }
    
    /**
     * Set <resource_version> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMap
     */
    public function setResourceVersion( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace kubernetes {

  class ConfigMapDescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $namespace = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ConfigMapDescribeRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \kubernetes\ConfigMapDescribeRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMapDescribeRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ConfigMapDescribeRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMapDescribeRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(3);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\ConfigMapDescribeRequest
     */
    public function clearNamespace(){
      return $this->_clear(3);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(3);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMapDescribeRequest
     */
    public function setNamespace( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace kubernetes\ConfigMapDescribeResponse {

  class DataEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ConfigMapDescribeResponse.DataEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \kubernetes\ConfigMapDescribeResponse\DataEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMapDescribeResponse\DataEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \kubernetes\ConfigMapDescribeResponse\DataEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMapDescribeResponse\DataEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class ConfigMapDescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $created_time = null;
    
    /**  @var \kubernetes\ConfigMapDescribeResponse\DataEntry[]  */
    public $data = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ConfigMapDescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_time = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "created_time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE data = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\ConfigMapDescribeResponse\DataEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(3);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function clearNamespace(){
      return $this->_clear(3);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(3);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function setNamespace( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function clearCluster(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(4);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function setCluster( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <created_time> has a value
     *
     * @return boolean
     */
    public function hasCreatedTime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <created_time> value
     *
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function clearCreatedTime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <created_time> value
     *
     * @return string
     */
    public function getCreatedTime(){
      return $this->_get(5);
    }
    
    /**
     * Set <created_time> value
     *
     * @param string $value
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function setCreatedTime( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(6);
    }
    
    /**
     * Clear <data> value
     *
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function clearData(){
      return $this->_clear(6);
    }
    
    /**
     * Get <data> value
     *
     * @param int $idx
     * @return \kubernetes\ConfigMapDescribeResponse\DataEntry
     */
    public function getData($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <data> value
     *
     * @param \kubernetes\ConfigMapDescribeResponse\DataEntry $value
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function setData(\kubernetes\ConfigMapDescribeResponse\DataEntry $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <data>
     *
     * @return \kubernetes\ConfigMapDescribeResponse\DataEntry[]
     */
    public function getDataList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <data>
     *
     * @param \kubernetes\ConfigMapDescribeResponse\DataEntry $value
     * @return \kubernetes\ConfigMapDescribeResponse
     */
    public function addData(\kubernetes\ConfigMapDescribeResponse\DataEntry $value){
     return $this->_add(6, $value);
    }
  }
}

namespace kubernetes {

  class SecretDescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $namespace = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.SecretDescribeRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \kubernetes\SecretDescribeRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \kubernetes\SecretDescribeRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\SecretDescribeRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\SecretDescribeRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(3);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\SecretDescribeRequest
     */
    public function clearNamespace(){
      return $this->_clear(3);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(3);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\SecretDescribeRequest
     */
    public function setNamespace( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace kubernetes\SecretDescribeResponse {

  class DataEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.SecretDescribeResponse.DataEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \kubernetes\SecretDescribeResponse\DataEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \kubernetes\SecretDescribeResponse\DataEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \kubernetes\SecretDescribeResponse\DataEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \kubernetes\SecretDescribeResponse\DataEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class SecretDescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $created_at = null;
    
    /**  @var string */
    public $resource_version = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var \kubernetes\SecretDescribeResponse\DataEntry[]  */
    public $data = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.SecretDescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING cluster = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING resource_version = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "resource_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE data = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\SecretDescribeResponse\DataEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\SecretDescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\SecretDescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \kubernetes\SecretDescribeResponse
     */
    public function clearCluster(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(2);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \kubernetes\SecretDescribeResponse
     */
    public function setCluster( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\SecretDescribeResponse
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\SecretDescribeResponse
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(4);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \kubernetes\SecretDescribeResponse
     */
    public function clearNamespace(){
      return $this->_clear(4);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(4);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \kubernetes\SecretDescribeResponse
     */
    public function setNamespace( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(5);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \kubernetes\SecretDescribeResponse
     */
    public function clearCreatedAt(){
      return $this->_clear(5);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(5);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \kubernetes\SecretDescribeResponse
     */
    public function setCreatedAt( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <resource_version> has a value
     *
     * @return boolean
     */
    public function hasResourceVersion(){
      return $this->_has(6);
    }
    
    /**
     * Clear <resource_version> value
     *
     * @return \kubernetes\SecretDescribeResponse
     */
    public function clearResourceVersion(){
      return $this->_clear(6);
    }
    
    /**
     * Get <resource_version> value
     *
     * @return string
     */
    public function getResourceVersion(){
      return $this->_get(6);
    }
    
    /**
     * Set <resource_version> value
     *
     * @param string $value
     * @return \kubernetes\SecretDescribeResponse
     */
    public function setResourceVersion( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(7);
    }
    
    /**
     * Clear <type> value
     *
     * @return \kubernetes\SecretDescribeResponse
     */
    public function clearType(){
      return $this->_clear(7);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(7);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \kubernetes\SecretDescribeResponse
     */
    public function setType( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(8);
    }
    
    /**
     * Clear <data> value
     *
     * @return \kubernetes\SecretDescribeResponse
     */
    public function clearData(){
      return $this->_clear(8);
    }
    
    /**
     * Get <data> value
     *
     * @param int $idx
     * @return \kubernetes\SecretDescribeResponse\DataEntry
     */
    public function getData($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <data> value
     *
     * @param \kubernetes\SecretDescribeResponse\DataEntry $value
     * @return \kubernetes\SecretDescribeResponse
     */
    public function setData(\kubernetes\SecretDescribeResponse\DataEntry $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <data>
     *
     * @return \kubernetes\SecretDescribeResponse\DataEntry[]
     */
    public function getDataList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <data>
     *
     * @param \kubernetes\SecretDescribeResponse\DataEntry $value
     * @return \kubernetes\SecretDescribeResponse
     */
    public function addData(\kubernetes\SecretDescribeResponse\DataEntry $value){
     return $this->_add(8, $value);
    }
  }
}

namespace kubernetes {

  class ClientsClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param kubernetes\ClientRequest $input
     */
    public function Nodes(\kubernetes\ClientRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/Nodes', $argument, '\kubernetes\NodeListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClientRequest $input
     */
    public function Secrets(\kubernetes\ClientRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/Secrets', $argument, '\kubernetes\SecretListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClientRequest $input
     */
    public function Jobs(\kubernetes\ClientRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/Jobs', $argument, '\kubernetes\JobListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClientRequest $input
     */
    public function Namespaces(\kubernetes\ClientRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/Namespaces', $argument, '\kubernetes\NamespaceListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClientRequest $input
     */
    public function Pods(\kubernetes\ClientRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/Pods', $argument, '\kubernetes\PodListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClientRequest $input
     */
    public function Services(\kubernetes\ClientRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/Services', $argument, '\kubernetes\ServiceListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClientRequest $input
     */
    public function ReplicationControllers(\kubernetes\ClientRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/ReplicationControllers', $argument, '\kubernetes\ReplicationControllerListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClientRequest $input
     */
    public function Apps(\kubernetes\ClientRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/Apps', $argument, '\kubernetes\AppListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\AppDescribeRequest $input
     */
    public function App(\kubernetes\AppDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/App', $argument, '\kubernetes\AppDescribeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\AppDescribeRequest $input
     */
    public function AppPods(\kubernetes\AppDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/AppPods', $argument, '\kubernetes\PodListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClientRequest $input
     */
    public function ConfigMaps(\kubernetes\ClientRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/ConfigMaps', $argument, '\kubernetes\ConfigMapListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ConfigMapDescribeRequest $input
     */
    public function ConfigMap(\kubernetes\ConfigMapDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/ConfigMap', $argument, '\kubernetes\ConfigMapDescribeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\SecretDescribeRequest $input
     */
    public function Secret(\kubernetes\SecretDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clients/Secret', $argument, '\kubernetes\SecretDescribeResponse::deserialize', $metadata, $options);
    }
  }
}
