<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: clusters.proto
//   Date: 2016-04-20 05:49:28

namespace kubernetes\Cluster {

  class LinksEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Cluster.LinksEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \kubernetes\Cluster\LinksEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \kubernetes\Cluster\LinksEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \kubernetes\Cluster\LinksEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \kubernetes\Cluster\LinksEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class Cluster extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $phid = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $provider = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $region = null;
    
    /**  @var string */
    public $os = null;
    
    /**  @var \kubernetes\Cluster\LinksEntry[]  */
    public $links = array();
    
    /**  @var int */
    public $nodes = null;
    
    /**  @var string */
    public $created_at = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.Cluster');

      // OPTIONAL STRING phid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING provider = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "provider";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING region = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "region";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING os = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "os";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE links = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "links";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Cluster\LinksEntry';
      $descriptor->addField($f);

      // OPTIONAL INT32 nodes = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "nodes";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <phid> has a value
     *
     * @return boolean
     */
    public function hasPhid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <phid> value
     *
     * @return \kubernetes\Cluster
     */
    public function clearPhid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <phid> value
     *
     * @return string
     */
    public function getPhid(){
      return $this->_get(1);
    }
    
    /**
     * Set <phid> value
     *
     * @param string $value
     * @return \kubernetes\Cluster
     */
    public function setPhid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\Cluster
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\Cluster
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <provider> has a value
     *
     * @return boolean
     */
    public function hasProvider(){
      return $this->_has(3);
    }
    
    /**
     * Clear <provider> value
     *
     * @return \kubernetes\Cluster
     */
    public function clearProvider(){
      return $this->_clear(3);
    }
    
    /**
     * Get <provider> value
     *
     * @return string
     */
    public function getProvider(){
      return $this->_get(3);
    }
    
    /**
     * Set <provider> value
     *
     * @param string $value
     * @return \kubernetes\Cluster
     */
    public function setProvider( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(4);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \kubernetes\Cluster
     */
    public function clearZone(){
      return $this->_clear(4);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(4);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \kubernetes\Cluster
     */
    public function setZone( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <region> has a value
     *
     * @return boolean
     */
    public function hasRegion(){
      return $this->_has(5);
    }
    
    /**
     * Clear <region> value
     *
     * @return \kubernetes\Cluster
     */
    public function clearRegion(){
      return $this->_clear(5);
    }
    
    /**
     * Get <region> value
     *
     * @return string
     */
    public function getRegion(){
      return $this->_get(5);
    }
    
    /**
     * Set <region> value
     *
     * @param string $value
     * @return \kubernetes\Cluster
     */
    public function setRegion( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <os> has a value
     *
     * @return boolean
     */
    public function hasOs(){
      return $this->_has(6);
    }
    
    /**
     * Clear <os> value
     *
     * @return \kubernetes\Cluster
     */
    public function clearOs(){
      return $this->_clear(6);
    }
    
    /**
     * Get <os> value
     *
     * @return string
     */
    public function getOs(){
      return $this->_get(6);
    }
    
    /**
     * Set <os> value
     *
     * @param string $value
     * @return \kubernetes\Cluster
     */
    public function setOs( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <links> has a value
     *
     * @return boolean
     */
    public function hasLinks(){
      return $this->_has(7);
    }
    
    /**
     * Clear <links> value
     *
     * @return \kubernetes\Cluster
     */
    public function clearLinks(){
      return $this->_clear(7);
    }
    
    /**
     * Get <links> value
     *
     * @param int $idx
     * @return \kubernetes\Cluster\LinksEntry
     */
    public function getLinks($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <links> value
     *
     * @param \kubernetes\Cluster\LinksEntry $value
     * @return \kubernetes\Cluster
     */
    public function setLinks(\kubernetes\Cluster\LinksEntry $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <links>
     *
     * @return \kubernetes\Cluster\LinksEntry[]
     */
    public function getLinksList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <links>
     *
     * @param \kubernetes\Cluster\LinksEntry $value
     * @return \kubernetes\Cluster
     */
    public function addLinks(\kubernetes\Cluster\LinksEntry $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <nodes> has a value
     *
     * @return boolean
     */
    public function hasNodes(){
      return $this->_has(8);
    }
    
    /**
     * Clear <nodes> value
     *
     * @return \kubernetes\Cluster
     */
    public function clearNodes(){
      return $this->_clear(8);
    }
    
    /**
     * Get <nodes> value
     *
     * @return int
     */
    public function getNodes(){
      return $this->_get(8);
    }
    
    /**
     * Set <nodes> value
     *
     * @param int $value
     * @return \kubernetes\Cluster
     */
    public function setNodes( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(9);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \kubernetes\Cluster
     */
    public function clearCreatedAt(){
      return $this->_clear(9);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(9);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \kubernetes\Cluster
     */
    public function setCreatedAt( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace kubernetes {

  class ClusterDescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterDescribeRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ClusterDescribeRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ClusterDescribeRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace kubernetes\ClusterDescribeResponse {

  class Specs extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $containers = null;
    
    /**  @var int */
    public $pods = null;
    
    /**  @var int */
    public $services = null;
    
    /**  @var int */
    public $rcs = null;
    
    /**  @var int */
    public $cpu_core = null;
    
    /**  @var int */
    public $total_memory = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterDescribeResponse.Specs');

      // OPTIONAL INT32 containers = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "containers";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 pods = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "pods";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 services = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "services";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 rcs = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "rcs";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 cpu_core = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cpu_core";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 total_memory = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "total_memory";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <containers> has a value
     *
     * @return boolean
     */
    public function hasContainers(){
      return $this->_has(1);
    }
    
    /**
     * Clear <containers> value
     *
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function clearContainers(){
      return $this->_clear(1);
    }
    
    /**
     * Get <containers> value
     *
     * @return int
     */
    public function getContainers(){
      return $this->_get(1);
    }
    
    /**
     * Set <containers> value
     *
     * @param int $value
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function setContainers( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pods> has a value
     *
     * @return boolean
     */
    public function hasPods(){
      return $this->_has(2);
    }
    
    /**
     * Clear <pods> value
     *
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function clearPods(){
      return $this->_clear(2);
    }
    
    /**
     * Get <pods> value
     *
     * @return int
     */
    public function getPods(){
      return $this->_get(2);
    }
    
    /**
     * Set <pods> value
     *
     * @param int $value
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function setPods( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <services> has a value
     *
     * @return boolean
     */
    public function hasServices(){
      return $this->_has(3);
    }
    
    /**
     * Clear <services> value
     *
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function clearServices(){
      return $this->_clear(3);
    }
    
    /**
     * Get <services> value
     *
     * @return int
     */
    public function getServices(){
      return $this->_get(3);
    }
    
    /**
     * Set <services> value
     *
     * @param int $value
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function setServices( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <rcs> has a value
     *
     * @return boolean
     */
    public function hasRcs(){
      return $this->_has(4);
    }
    
    /**
     * Clear <rcs> value
     *
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function clearRcs(){
      return $this->_clear(4);
    }
    
    /**
     * Get <rcs> value
     *
     * @return int
     */
    public function getRcs(){
      return $this->_get(4);
    }
    
    /**
     * Set <rcs> value
     *
     * @param int $value
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function setRcs( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <cpu_core> has a value
     *
     * @return boolean
     */
    public function hasCpuCore(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cpu_core> value
     *
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function clearCpuCore(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cpu_core> value
     *
     * @return int
     */
    public function getCpuCore(){
      return $this->_get(5);
    }
    
    /**
     * Set <cpu_core> value
     *
     * @param int $value
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function setCpuCore( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <total_memory> has a value
     *
     * @return boolean
     */
    public function hasTotalMemory(){
      return $this->_has(6);
    }
    
    /**
     * Clear <total_memory> value
     *
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function clearTotalMemory(){
      return $this->_clear(6);
    }
    
    /**
     * Get <total_memory> value
     *
     * @return int
     */
    public function getTotalMemory(){
      return $this->_get(6);
    }
    
    /**
     * Set <total_memory> value
     *
     * @param int $value
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function setTotalMemory( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace kubernetes {

  class ClusterDescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\Cluster */
    public $cluster = null;
    
    /**  @var \kubernetes\ClusterDescribeResponse\Specs */
    public $specs = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterDescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cluster = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\kubernetes\Cluster';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE specs = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "specs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\kubernetes\ClusterDescribeResponse\Specs';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\ClusterDescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\ClusterDescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \kubernetes\ClusterDescribeResponse
     */
    public function clearCluster(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cluster> value
     *
     * @return \kubernetes\Cluster
     */
    public function getCluster(){
      return $this->_get(2);
    }
    
    /**
     * Set <cluster> value
     *
     * @param \kubernetes\Cluster $value
     * @return \kubernetes\ClusterDescribeResponse
     */
    public function setCluster(\kubernetes\Cluster $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <specs> has a value
     *
     * @return boolean
     */
    public function hasSpecs(){
      return $this->_has(3);
    }
    
    /**
     * Clear <specs> value
     *
     * @return \kubernetes\ClusterDescribeResponse
     */
    public function clearSpecs(){
      return $this->_clear(3);
    }
    
    /**
     * Get <specs> value
     *
     * @return \kubernetes\ClusterDescribeResponse\Specs
     */
    public function getSpecs(){
      return $this->_get(3);
    }
    
    /**
     * Set <specs> value
     *
     * @param \kubernetes\ClusterDescribeResponse\Specs $value
     * @return \kubernetes\ClusterDescribeResponse
     */
    public function setSpecs(\kubernetes\ClusterDescribeResponse\Specs $value){
      return $this->_set(3, $value);
    }
  }
}

namespace kubernetes {

  class ClusterListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\Cluster[]  */
    public $clusters = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE clusters = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "clusters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\Cluster';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\ClusterListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\ClusterListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <clusters> has a value
     *
     * @return boolean
     */
    public function hasClusters(){
      return $this->_has(2);
    }
    
    /**
     * Clear <clusters> value
     *
     * @return \kubernetes\ClusterListResponse
     */
    public function clearClusters(){
      return $this->_clear(2);
    }
    
    /**
     * Get <clusters> value
     *
     * @param int $idx
     * @return \kubernetes\Cluster
     */
    public function getClusters($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <clusters> value
     *
     * @param \kubernetes\Cluster $value
     * @return \kubernetes\ClusterListResponse
     */
    public function setClusters(\kubernetes\Cluster $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <clusters>
     *
     * @return \kubernetes\Cluster[]
     */
    public function getClustersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <clusters>
     *
     * @param \kubernetes\Cluster $value
     * @return \kubernetes\ClusterListResponse
     */
    public function addClusters(\kubernetes\Cluster $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes\ClusterCreateRequest {

  class CloudCredentialDataEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterCreateRequest.CloudCredentialDataEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \kubernetes\ClusterCreateRequest\CloudCredentialDataEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \kubernetes\ClusterCreateRequest\CloudCredentialDataEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \kubernetes\ClusterCreateRequest\CloudCredentialDataEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \kubernetes\ClusterCreateRequest\CloudCredentialDataEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes\ClusterCreateRequest {

  class NodeSetEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterCreateRequest.NodeSetEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \kubernetes\ClusterCreateRequest\NodeSetEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \kubernetes\ClusterCreateRequest\NodeSetEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \kubernetes\ClusterCreateRequest\NodeSetEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return int
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param int $value
     * @return \kubernetes\ClusterCreateRequest\NodeSetEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class ClusterCreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $provider = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cloud_credential = null;
    
    /**  @var \kubernetes\ClusterCreateRequest\CloudCredentialDataEntry[]  */
    public $cloud_credential_data = array();
    
    /**  @var \kubernetes\ClusterCreateRequest\NodeSetEntry[]  */
    public $node_set = array();
    
    /**  @var string */
    public $saltbase_version = null;
    
    /**  @var string */
    public $kube_starter_version = null;
    
    /**  @var string */
    public $kube_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterCreateRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING provider = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "provider";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cloud_credential = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cloud_credential";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE cloud_credential_data = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cloud_credential_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\ClusterCreateRequest\CloudCredentialDataEntry';
      $descriptor->addField($f);

      // REPEATED MESSAGE node_set = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "node_set";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\ClusterCreateRequest\NodeSetEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING saltbase_version = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "saltbase_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kube_starter_version = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "kube_starter_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kube_version = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "kube_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ClusterCreateRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ClusterCreateRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <provider> has a value
     *
     * @return boolean
     */
    public function hasProvider(){
      return $this->_has(2);
    }
    
    /**
     * Clear <provider> value
     *
     * @return \kubernetes\ClusterCreateRequest
     */
    public function clearProvider(){
      return $this->_clear(2);
    }
    
    /**
     * Get <provider> value
     *
     * @return string
     */
    public function getProvider(){
      return $this->_get(2);
    }
    
    /**
     * Set <provider> value
     *
     * @param string $value
     * @return \kubernetes\ClusterCreateRequest
     */
    public function setProvider( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(3);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \kubernetes\ClusterCreateRequest
     */
    public function clearZone(){
      return $this->_clear(3);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(3);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \kubernetes\ClusterCreateRequest
     */
    public function setZone( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <cloud_credential> has a value
     *
     * @return boolean
     */
    public function hasCloudCredential(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cloud_credential> value
     *
     * @return \kubernetes\ClusterCreateRequest
     */
    public function clearCloudCredential(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cloud_credential> value
     *
     * @return string
     */
    public function getCloudCredential(){
      return $this->_get(4);
    }
    
    /**
     * Set <cloud_credential> value
     *
     * @param string $value
     * @return \kubernetes\ClusterCreateRequest
     */
    public function setCloudCredential( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <cloud_credential_data> has a value
     *
     * @return boolean
     */
    public function hasCloudCredentialData(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cloud_credential_data> value
     *
     * @return \kubernetes\ClusterCreateRequest
     */
    public function clearCloudCredentialData(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cloud_credential_data> value
     *
     * @param int $idx
     * @return \kubernetes\ClusterCreateRequest\CloudCredentialDataEntry
     */
    public function getCloudCredentialData($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <cloud_credential_data> value
     *
     * @param \kubernetes\ClusterCreateRequest\CloudCredentialDataEntry $value
     * @return \kubernetes\ClusterCreateRequest
     */
    public function setCloudCredentialData(\kubernetes\ClusterCreateRequest\CloudCredentialDataEntry $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <cloud_credential_data>
     *
     * @return \kubernetes\ClusterCreateRequest\CloudCredentialDataEntry[]
     */
    public function getCloudCredentialDataList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <cloud_credential_data>
     *
     * @param \kubernetes\ClusterCreateRequest\CloudCredentialDataEntry $value
     * @return \kubernetes\ClusterCreateRequest
     */
    public function addCloudCredentialData(\kubernetes\ClusterCreateRequest\CloudCredentialDataEntry $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <node_set> has a value
     *
     * @return boolean
     */
    public function hasNodeSet(){
      return $this->_has(6);
    }
    
    /**
     * Clear <node_set> value
     *
     * @return \kubernetes\ClusterCreateRequest
     */
    public function clearNodeSet(){
      return $this->_clear(6);
    }
    
    /**
     * Get <node_set> value
     *
     * @param int $idx
     * @return \kubernetes\ClusterCreateRequest\NodeSetEntry
     */
    public function getNodeSet($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <node_set> value
     *
     * @param \kubernetes\ClusterCreateRequest\NodeSetEntry $value
     * @return \kubernetes\ClusterCreateRequest
     */
    public function setNodeSet(\kubernetes\ClusterCreateRequest\NodeSetEntry $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <node_set>
     *
     * @return \kubernetes\ClusterCreateRequest\NodeSetEntry[]
     */
    public function getNodeSetList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <node_set>
     *
     * @param \kubernetes\ClusterCreateRequest\NodeSetEntry $value
     * @return \kubernetes\ClusterCreateRequest
     */
    public function addNodeSet(\kubernetes\ClusterCreateRequest\NodeSetEntry $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <saltbase_version> has a value
     *
     * @return boolean
     */
    public function hasSaltbaseVersion(){
      return $this->_has(7);
    }
    
    /**
     * Clear <saltbase_version> value
     *
     * @return \kubernetes\ClusterCreateRequest
     */
    public function clearSaltbaseVersion(){
      return $this->_clear(7);
    }
    
    /**
     * Get <saltbase_version> value
     *
     * @return string
     */
    public function getSaltbaseVersion(){
      return $this->_get(7);
    }
    
    /**
     * Set <saltbase_version> value
     *
     * @param string $value
     * @return \kubernetes\ClusterCreateRequest
     */
    public function setSaltbaseVersion( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <kube_starter_version> has a value
     *
     * @return boolean
     */
    public function hasKubeStarterVersion(){
      return $this->_has(8);
    }
    
    /**
     * Clear <kube_starter_version> value
     *
     * @return \kubernetes\ClusterCreateRequest
     */
    public function clearKubeStarterVersion(){
      return $this->_clear(8);
    }
    
    /**
     * Get <kube_starter_version> value
     *
     * @return string
     */
    public function getKubeStarterVersion(){
      return $this->_get(8);
    }
    
    /**
     * Set <kube_starter_version> value
     *
     * @param string $value
     * @return \kubernetes\ClusterCreateRequest
     */
    public function setKubeStarterVersion( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <kube_version> has a value
     *
     * @return boolean
     */
    public function hasKubeVersion(){
      return $this->_has(9);
    }
    
    /**
     * Clear <kube_version> value
     *
     * @return \kubernetes\ClusterCreateRequest
     */
    public function clearKubeVersion(){
      return $this->_clear(9);
    }
    
    /**
     * Get <kube_version> value
     *
     * @return string
     */
    public function getKubeVersion(){
      return $this->_get(9);
    }
    
    /**
     * Set <kube_version> value
     *
     * @param string $value
     * @return \kubernetes\ClusterCreateRequest
     */
    public function setKubeVersion( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace kubernetes\ClusterScaleRequest {

  class NodeChangesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterScaleRequest.NodeChangesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \kubernetes\ClusterScaleRequest\NodeChangesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \kubernetes\ClusterScaleRequest\NodeChangesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \kubernetes\ClusterScaleRequest\NodeChangesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return int
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param int $value
     * @return \kubernetes\ClusterScaleRequest\NodeChangesEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class ClusterScaleRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \kubernetes\ClusterScaleRequest\NodeChangesEntry[]  */
    public $node_changes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterScaleRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE node_changes = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "node_changes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\ClusterScaleRequest\NodeChangesEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ClusterScaleRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ClusterScaleRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <node_changes> has a value
     *
     * @return boolean
     */
    public function hasNodeChanges(){
      return $this->_has(2);
    }
    
    /**
     * Clear <node_changes> value
     *
     * @return \kubernetes\ClusterScaleRequest
     */
    public function clearNodeChanges(){
      return $this->_clear(2);
    }
    
    /**
     * Get <node_changes> value
     *
     * @param int $idx
     * @return \kubernetes\ClusterScaleRequest\NodeChangesEntry
     */
    public function getNodeChanges($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <node_changes> value
     *
     * @param \kubernetes\ClusterScaleRequest\NodeChangesEntry $value
     * @return \kubernetes\ClusterScaleRequest
     */
    public function setNodeChanges(\kubernetes\ClusterScaleRequest\NodeChangesEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <node_changes>
     *
     * @return \kubernetes\ClusterScaleRequest\NodeChangesEntry[]
     */
    public function getNodeChangesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <node_changes>
     *
     * @param \kubernetes\ClusterScaleRequest\NodeChangesEntry $value
     * @return \kubernetes\ClusterScaleRequest
     */
    public function addNodeChanges(\kubernetes\ClusterScaleRequest\NodeChangesEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes {

  class ClusterDeleteRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var boolean */
    public $release_reserved_ip = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterDeleteRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL release_reserved_ip = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "release_reserved_ip";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ClusterDeleteRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ClusterDeleteRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <release_reserved_ip> has a value
     *
     * @return boolean
     */
    public function hasReleaseReservedIp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <release_reserved_ip> value
     *
     * @return \kubernetes\ClusterDeleteRequest
     */
    public function clearReleaseReservedIp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <release_reserved_ip> value
     *
     * @return boolean
     */
    public function getReleaseReservedIp(){
      return $this->_get(2);
    }
    
    /**
     * Set <release_reserved_ip> value
     *
     * @param boolean $value
     * @return \kubernetes\ClusterDeleteRequest
     */
    public function setReleaseReservedIp( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class ClusterStartupScriptRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $role = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterStartupScriptRequest');

      // OPTIONAL STRING role = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "role";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <role> has a value
     *
     * @return boolean
     */
    public function hasRole(){
      return $this->_has(1);
    }
    
    /**
     * Clear <role> value
     *
     * @return \kubernetes\ClusterStartupScriptRequest
     */
    public function clearRole(){
      return $this->_clear(1);
    }
    
    /**
     * Get <role> value
     *
     * @return string
     */
    public function getRole(){
      return $this->_get(1);
    }
    
    /**
     * Set <role> value
     *
     * @param string $value
     * @return \kubernetes\ClusterStartupScriptRequest
     */
    public function setRole( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace kubernetes {

  class ClusterStartupScriptResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $configuration = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterStartupScriptResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING configuration = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "configuration";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\ClusterStartupScriptResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\ClusterStartupScriptResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <configuration> has a value
     *
     * @return boolean
     */
    public function hasConfiguration(){
      return $this->_has(2);
    }
    
    /**
     * Clear <configuration> value
     *
     * @return \kubernetes\ClusterStartupScriptResponse
     */
    public function clearConfiguration(){
      return $this->_clear(2);
    }
    
    /**
     * Get <configuration> value
     *
     * @return string
     */
    public function getConfiguration(){
      return $this->_get(2);
    }
    
    /**
     * Set <configuration> value
     *
     * @param string $value
     * @return \kubernetes\ClusterStartupScriptResponse
     */
    public function setConfiguration( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class ClusterClientConfigRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterClientConfigRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ClusterClientConfigRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ClusterClientConfigRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace kubernetes {

  class ClusterClientConfigResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $configuration = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterClientConfigResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING configuration = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "configuration";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\ClusterClientConfigResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\ClusterClientConfigResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <configuration> has a value
     *
     * @return boolean
     */
    public function hasConfiguration(){
      return $this->_has(2);
    }
    
    /**
     * Clear <configuration> value
     *
     * @return \kubernetes\ClusterClientConfigResponse
     */
    public function clearConfiguration(){
      return $this->_clear(2);
    }
    
    /**
     * Get <configuration> value
     *
     * @return string
     */
    public function getConfiguration(){
      return $this->_get(2);
    }
    
    /**
     * Set <configuration> value
     *
     * @param string $value
     * @return \kubernetes\ClusterClientConfigResponse
     */
    public function setConfiguration( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class ClusterClientContainerRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $disk_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterClientContainerRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING disk_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "disk_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ClusterClientContainerRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ClusterClientContainerRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <disk_name> has a value
     *
     * @return boolean
     */
    public function hasDiskName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <disk_name> value
     *
     * @return \kubernetes\ClusterClientContainerRequest
     */
    public function clearDiskName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <disk_name> value
     *
     * @return string
     */
    public function getDiskName(){
      return $this->_get(2);
    }
    
    /**
     * Set <disk_name> value
     *
     * @param string $value
     * @return \kubernetes\ClusterClientContainerRequest
     */
    public function setDiskName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace kubernetes {

  class ClusterInstanceListRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterInstanceListRequest');

      // OPTIONAL STRING cluster_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster_name> has a value
     *
     * @return boolean
     */
    public function hasClusterName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster_name> value
     *
     * @return \kubernetes\ClusterInstanceListRequest
     */
    public function clearClusterName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster_name> value
     *
     * @return string
     */
    public function getClusterName(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster_name> value
     *
     * @param string $value
     * @return \kubernetes\ClusterInstanceListRequest
     */
    public function setClusterName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace kubernetes {

  class ClusterInstance extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $phid = null;
    
    /**  @var string */
    public $external_id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $external_ip = null;
    
    /**  @var string */
    public $internal_ip = null;
    
    /**  @var string */
    public $role = null;
    
    /**  @var string */
    public $sku = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterInstance');

      // OPTIONAL STRING phid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING external_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "external_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING external_ip = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "external_ip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING internal_ip = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "internal_ip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING role = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "role";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sku = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "sku";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <phid> has a value
     *
     * @return boolean
     */
    public function hasPhid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <phid> value
     *
     * @return \kubernetes\ClusterInstance
     */
    public function clearPhid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <phid> value
     *
     * @return string
     */
    public function getPhid(){
      return $this->_get(1);
    }
    
    /**
     * Set <phid> value
     *
     * @param string $value
     * @return \kubernetes\ClusterInstance
     */
    public function setPhid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <external_id> has a value
     *
     * @return boolean
     */
    public function hasExternalId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <external_id> value
     *
     * @return \kubernetes\ClusterInstance
     */
    public function clearExternalId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <external_id> value
     *
     * @return string
     */
    public function getExternalId(){
      return $this->_get(2);
    }
    
    /**
     * Set <external_id> value
     *
     * @param string $value
     * @return \kubernetes\ClusterInstance
     */
    public function setExternalId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ClusterInstance
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ClusterInstance
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <external_ip> has a value
     *
     * @return boolean
     */
    public function hasExternalIp(){
      return $this->_has(4);
    }
    
    /**
     * Clear <external_ip> value
     *
     * @return \kubernetes\ClusterInstance
     */
    public function clearExternalIp(){
      return $this->_clear(4);
    }
    
    /**
     * Get <external_ip> value
     *
     * @return string
     */
    public function getExternalIp(){
      return $this->_get(4);
    }
    
    /**
     * Set <external_ip> value
     *
     * @param string $value
     * @return \kubernetes\ClusterInstance
     */
    public function setExternalIp( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <internal_ip> has a value
     *
     * @return boolean
     */
    public function hasInternalIp(){
      return $this->_has(5);
    }
    
    /**
     * Clear <internal_ip> value
     *
     * @return \kubernetes\ClusterInstance
     */
    public function clearInternalIp(){
      return $this->_clear(5);
    }
    
    /**
     * Get <internal_ip> value
     *
     * @return string
     */
    public function getInternalIp(){
      return $this->_get(5);
    }
    
    /**
     * Set <internal_ip> value
     *
     * @param string $value
     * @return \kubernetes\ClusterInstance
     */
    public function setInternalIp( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <role> has a value
     *
     * @return boolean
     */
    public function hasRole(){
      return $this->_has(6);
    }
    
    /**
     * Clear <role> value
     *
     * @return \kubernetes\ClusterInstance
     */
    public function clearRole(){
      return $this->_clear(6);
    }
    
    /**
     * Get <role> value
     *
     * @return string
     */
    public function getRole(){
      return $this->_get(6);
    }
    
    /**
     * Set <role> value
     *
     * @param string $value
     * @return \kubernetes\ClusterInstance
     */
    public function setRole( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <sku> has a value
     *
     * @return boolean
     */
    public function hasSku(){
      return $this->_has(7);
    }
    
    /**
     * Clear <sku> value
     *
     * @return \kubernetes\ClusterInstance
     */
    public function clearSku(){
      return $this->_clear(7);
    }
    
    /**
     * Get <sku> value
     *
     * @return string
     */
    public function getSku(){
      return $this->_get(7);
    }
    
    /**
     * Set <sku> value
     *
     * @param string $value
     * @return \kubernetes\ClusterInstance
     */
    public function setSku( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace kubernetes {

  class ClusterInstanceListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \kubernetes\ClusterInstance[]  */
    public $instances = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterInstanceListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE instances = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "instances";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\kubernetes\ClusterInstance';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \kubernetes\ClusterInstanceListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \kubernetes\ClusterInstanceListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <instances> has a value
     *
     * @return boolean
     */
    public function hasInstances(){
      return $this->_has(2);
    }
    
    /**
     * Clear <instances> value
     *
     * @return \kubernetes\ClusterInstanceListResponse
     */
    public function clearInstances(){
      return $this->_clear(2);
    }
    
    /**
     * Get <instances> value
     *
     * @param int $idx
     * @return \kubernetes\ClusterInstance
     */
    public function getInstances($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <instances> value
     *
     * @param \kubernetes\ClusterInstance $value
     * @return \kubernetes\ClusterInstanceListResponse
     */
    public function setInstances(\kubernetes\ClusterInstance $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <instances>
     *
     * @return \kubernetes\ClusterInstance[]
     */
    public function getInstancesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <instances>
     *
     * @param \kubernetes\ClusterInstance $value
     * @return \kubernetes\ClusterInstanceListResponse
     */
    public function addInstances(\kubernetes\ClusterInstance $value){
     return $this->_add(2, $value);
    }
  }
}

namespace kubernetes {

  class ClusterUpdateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $saltbase_version = null;
    
    /**  @var string */
    public $kube_starter_version = null;
    
    /**  @var string */
    public $kube_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'kubernetes.ClusterUpdateRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING saltbase_version = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "saltbase_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kube_starter_version = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "kube_starter_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kube_version = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "kube_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \kubernetes\ClusterUpdateRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \kubernetes\ClusterUpdateRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <saltbase_version> has a value
     *
     * @return boolean
     */
    public function hasSaltbaseVersion(){
      return $this->_has(2);
    }
    
    /**
     * Clear <saltbase_version> value
     *
     * @return \kubernetes\ClusterUpdateRequest
     */
    public function clearSaltbaseVersion(){
      return $this->_clear(2);
    }
    
    /**
     * Get <saltbase_version> value
     *
     * @return string
     */
    public function getSaltbaseVersion(){
      return $this->_get(2);
    }
    
    /**
     * Set <saltbase_version> value
     *
     * @param string $value
     * @return \kubernetes\ClusterUpdateRequest
     */
    public function setSaltbaseVersion( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <kube_starter_version> has a value
     *
     * @return boolean
     */
    public function hasKubeStarterVersion(){
      return $this->_has(3);
    }
    
    /**
     * Clear <kube_starter_version> value
     *
     * @return \kubernetes\ClusterUpdateRequest
     */
    public function clearKubeStarterVersion(){
      return $this->_clear(3);
    }
    
    /**
     * Get <kube_starter_version> value
     *
     * @return string
     */
    public function getKubeStarterVersion(){
      return $this->_get(3);
    }
    
    /**
     * Set <kube_starter_version> value
     *
     * @param string $value
     * @return \kubernetes\ClusterUpdateRequest
     */
    public function setKubeStarterVersion( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <kube_version> has a value
     *
     * @return boolean
     */
    public function hasKubeVersion(){
      return $this->_has(4);
    }
    
    /**
     * Clear <kube_version> value
     *
     * @return \kubernetes\ClusterUpdateRequest
     */
    public function clearKubeVersion(){
      return $this->_clear(4);
    }
    
    /**
     * Get <kube_version> value
     *
     * @return string
     */
    public function getKubeVersion(){
      return $this->_get(4);
    }
    
    /**
     * Set <kube_version> value
     *
     * @param string $value
     * @return \kubernetes\ClusterUpdateRequest
     */
    public function setKubeVersion( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace kubernetes {

  class ClustersClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param kubernetes\ClusterDescribeRequest $input
     */
    public function Describe(\kubernetes\ClusterDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clusters/Describe', $argument, '\kubernetes\ClusterDescribeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClusterCreateRequest $input
     */
    public function Create(\kubernetes\ClusterCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clusters/Create', $argument, '\dtypes\LongRunningResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClusterScaleRequest $input
     */
    public function Scale(\kubernetes\ClusterScaleRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clusters/Scale', $argument, '\dtypes\LongRunningResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClusterDeleteRequest $input
     */
    public function Delete(\kubernetes\ClusterDeleteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clusters/Delete', $argument, '\dtypes\LongRunningResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClusterUpdateRequest $input
     */
    public function Update(\kubernetes\ClusterUpdateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clusters/Update', $argument, '\dtypes\LongRunningResponse::deserialize', $metadata, $options);
    }
    /**
     * @param dtypes\VoidRequest $input
     */
    public function List(\dtypes\VoidRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clusters/List', $argument, '\kubernetes\ClusterListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClusterStartupScriptRequest $input
     */
    public function StartupScript(\kubernetes\ClusterStartupScriptRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clusters/StartupScript', $argument, '\kubernetes\ClusterStartupScriptResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClusterClientConfigRequest $input
     */
    public function ClientConfig(\kubernetes\ClusterClientConfigRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clusters/ClientConfig', $argument, '\kubernetes\ClusterClientConfigResponse::deserialize', $metadata, $options);
    }
    /**
     * @param kubernetes\ClusterInstanceListRequest $input
     */
    public function Instances(\kubernetes\ClusterInstanceListRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/kubernetes.Clusters/Instances', $argument, '\kubernetes\ClusterInstanceListResponse::deserialize', $metadata, $options);
    }
  }
}
