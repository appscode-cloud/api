// Code generated by protoc-gen-go.
// source: clusters.proto
// DO NOT EDIT!

package kubernetes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Cluster struct {
	Phid        string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Provider    string `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	Zone        string `protobuf:"bytes,4,opt,name=zone" json:"zone,omitempty"`
	Region      string `protobuf:"bytes,5,opt,name=region" json:"region,omitempty"`
	Os          string `protobuf:"bytes,6,opt,name=os" json:"os,omitempty"`
	GraphanaUrl string `protobuf:"bytes,7,opt,name=graphana_url,json=graphanaUrl" json:"graphana_url,omitempty"`
	KibanaUrl   string `protobuf:"bytes,8,opt,name=kibana_url,json=kibanaUrl" json:"kibana_url,omitempty"`
	IcingaUrl   string `protobuf:"bytes,9,opt,name=icinga_url,json=icingaUrl" json:"icinga_url,omitempty"`
	Nodes       int32  `protobuf:"varint,10,opt,name=nodes" json:"nodes,omitempty"`
	CreatedAt   string `protobuf:"bytes,11,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ClusterDescribeRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ClusterDescribeRequest) Reset()                    { *m = ClusterDescribeRequest{} }
func (m *ClusterDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeRequest) ProtoMessage()               {}
func (*ClusterDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type ClusterDescribeResponse struct {
	Status  *dtypes.Status                 `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Cluster *Cluster                       `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	Specs   *ClusterDescribeResponse_Specs `protobuf:"bytes,3,opt,name=specs" json:"specs,omitempty"`
}

func (m *ClusterDescribeResponse) Reset()                    { *m = ClusterDescribeResponse{} }
func (m *ClusterDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeResponse) ProtoMessage()               {}
func (*ClusterDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ClusterDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterDescribeResponse) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *ClusterDescribeResponse) GetSpecs() *ClusterDescribeResponse_Specs {
	if m != nil {
		return m.Specs
	}
	return nil
}

type ClusterDescribeResponse_Specs struct {
	Containers  int32 `protobuf:"varint,1,opt,name=containers" json:"containers,omitempty"`
	Pods        int32 `protobuf:"varint,2,opt,name=pods" json:"pods,omitempty"`
	Services    int32 `protobuf:"varint,3,opt,name=services" json:"services,omitempty"`
	Rcs         int32 `protobuf:"varint,4,opt,name=rcs" json:"rcs,omitempty"`
	CpuCore     int64 `protobuf:"varint,5,opt,name=cpu_core,json=cpuCore" json:"cpu_core,omitempty"`
	TotalMemory int64 `protobuf:"varint,6,opt,name=total_memory,json=totalMemory" json:"total_memory,omitempty"`
}

func (m *ClusterDescribeResponse_Specs) Reset()         { *m = ClusterDescribeResponse_Specs{} }
func (m *ClusterDescribeResponse_Specs) String() string { return proto.CompactTextString(m) }
func (*ClusterDescribeResponse_Specs) ProtoMessage()    {}
func (*ClusterDescribeResponse_Specs) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{2, 0}
}

type ClusterListResponse struct {
	Status   *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Clusters []*Cluster     `protobuf:"bytes,2,rep,name=clusters" json:"clusters,omitempty"`
}

func (m *ClusterListResponse) Reset()                    { *m = ClusterListResponse{} }
func (m *ClusterListResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterListResponse) ProtoMessage()               {}
func (*ClusterListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ClusterListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterListResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type ClusterCreateRequest struct {
	Name                string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Provider            string            `protobuf:"bytes,2,opt,name=provider" json:"provider,omitempty"`
	Zone                string            `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	CloudCredentialPhid string            `protobuf:"bytes,4,opt,name=cloud_credential_phid,json=cloudCredentialPhid" json:"cloud_credential_phid,omitempty"`
	CloudCredential     map[string]string `protobuf:"bytes,5,rep,name=cloud_credential,json=cloudCredential" json:"cloud_credential,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NodeSet             map[string]int64  `protobuf:"bytes,6,rep,name=node_set,json=nodeSet" json:"node_set,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	SaltbaseVersion     string            `protobuf:"bytes,7,opt,name=saltbase_version,json=saltbaseVersion" json:"saltbase_version,omitempty"`
	KubeStarterVersion  string            `protobuf:"bytes,8,opt,name=kube_starter_version,json=kubeStarterVersion" json:"kube_starter_version,omitempty"`
	KubeVersion         string            `protobuf:"bytes,9,opt,name=kube_version,json=kubeVersion" json:"kube_version,omitempty"`
	KubeSaltbaseVersion string            `protobuf:"bytes,10,opt,name=kube_saltbase_version,json=kubeSaltbaseVersion" json:"kube_saltbase_version,omitempty"`
}

func (m *ClusterCreateRequest) Reset()                    { *m = ClusterCreateRequest{} }
func (m *ClusterCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterCreateRequest) ProtoMessage()               {}
func (*ClusterCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ClusterCreateRequest) GetCloudCredential() map[string]string {
	if m != nil {
		return m.CloudCredential
	}
	return nil
}

func (m *ClusterCreateRequest) GetNodeSet() map[string]int64 {
	if m != nil {
		return m.NodeSet
	}
	return nil
}

type ClusterScaleRequest struct {
	Name        string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NodeChanges map[string]int64 `protobuf:"bytes,2,rep,name=node_changes,json=nodeChanges" json:"node_changes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ClusterScaleRequest) Reset()                    { *m = ClusterScaleRequest{} }
func (m *ClusterScaleRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterScaleRequest) ProtoMessage()               {}
func (*ClusterScaleRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ClusterScaleRequest) GetNodeChanges() map[string]int64 {
	if m != nil {
		return m.NodeChanges
	}
	return nil
}

type ClusterDeleteRequest struct {
	Name              string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ReleaseReservedIp bool   `protobuf:"varint,2,opt,name=release_reserved_ip,json=releaseReservedIp" json:"release_reserved_ip,omitempty"`
}

func (m *ClusterDeleteRequest) Reset()                    { *m = ClusterDeleteRequest{} }
func (m *ClusterDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterDeleteRequest) ProtoMessage()               {}
func (*ClusterDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type ClusterStartupScriptRequest struct {
	Role string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (m *ClusterStartupScriptRequest) Reset()                    { *m = ClusterStartupScriptRequest{} }
func (m *ClusterStartupScriptRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterStartupScriptRequest) ProtoMessage()               {}
func (*ClusterStartupScriptRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type ClusterStartupScriptResponse struct {
	Status        *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Configuration string         `protobuf:"bytes,2,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *ClusterStartupScriptResponse) Reset()                    { *m = ClusterStartupScriptResponse{} }
func (m *ClusterStartupScriptResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterStartupScriptResponse) ProtoMessage()               {}
func (*ClusterStartupScriptResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ClusterStartupScriptResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ClusterConfigRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ClusterConfigRequest) Reset()                    { *m = ClusterConfigRequest{} }
func (m *ClusterConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterConfigRequest) ProtoMessage()               {}
func (*ClusterConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type ClusterConfigResponse struct {
	Status        *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Configuration string         `protobuf:"bytes,2,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *ClusterConfigResponse) Reset()                    { *m = ClusterConfigResponse{} }
func (m *ClusterConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterConfigResponse) ProtoMessage()               {}
func (*ClusterConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ClusterConfigResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*Cluster)(nil), "kubernetes.Cluster")
	proto.RegisterType((*ClusterDescribeRequest)(nil), "kubernetes.ClusterDescribeRequest")
	proto.RegisterType((*ClusterDescribeResponse)(nil), "kubernetes.ClusterDescribeResponse")
	proto.RegisterType((*ClusterDescribeResponse_Specs)(nil), "kubernetes.ClusterDescribeResponse.Specs")
	proto.RegisterType((*ClusterListResponse)(nil), "kubernetes.ClusterListResponse")
	proto.RegisterType((*ClusterCreateRequest)(nil), "kubernetes.ClusterCreateRequest")
	proto.RegisterType((*ClusterScaleRequest)(nil), "kubernetes.ClusterScaleRequest")
	proto.RegisterType((*ClusterDeleteRequest)(nil), "kubernetes.ClusterDeleteRequest")
	proto.RegisterType((*ClusterStartupScriptRequest)(nil), "kubernetes.ClusterStartupScriptRequest")
	proto.RegisterType((*ClusterStartupScriptResponse)(nil), "kubernetes.ClusterStartupScriptResponse")
	proto.RegisterType((*ClusterConfigRequest)(nil), "kubernetes.ClusterConfigRequest")
	proto.RegisterType((*ClusterConfigResponse)(nil), "kubernetes.ClusterConfigResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Clusters service

type ClustersClient interface {
	Describe(ctx context.Context, in *ClusterDescribeRequest, opts ...grpc.CallOption) (*ClusterDescribeResponse, error)
	Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error)
	Scale(ctx context.Context, in *ClusterScaleRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error)
	Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error)
	List(ctx context.Context, in *dtypes.VoidRequest, opts ...grpc.CallOption) (*ClusterListResponse, error)
	StartupScript(ctx context.Context, in *ClusterStartupScriptRequest, opts ...grpc.CallOption) (*ClusterStartupScriptResponse, error)
	Config(ctx context.Context, in *ClusterConfigRequest, opts ...grpc.CallOption) (*ClusterConfigResponse, error)
}

type clustersClient struct {
	cc *grpc.ClientConn
}

func NewClustersClient(cc *grpc.ClientConn) ClustersClient {
	return &clustersClient{cc}
}

func (c *clustersClient) Describe(ctx context.Context, in *ClusterDescribeRequest, opts ...grpc.CallOption) (*ClusterDescribeResponse, error) {
	out := new(ClusterDescribeResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error) {
	out := new(dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Scale(ctx context.Context, in *ClusterScaleRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error) {
	out := new(dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Scale", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error) {
	out := new(dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) List(ctx context.Context, in *dtypes.VoidRequest, opts ...grpc.CallOption) (*ClusterListResponse, error) {
	out := new(ClusterListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) StartupScript(ctx context.Context, in *ClusterStartupScriptRequest, opts ...grpc.CallOption) (*ClusterStartupScriptResponse, error) {
	out := new(ClusterStartupScriptResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/StartupScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Config(ctx context.Context, in *ClusterConfigRequest, opts ...grpc.CallOption) (*ClusterConfigResponse, error) {
	out := new(ClusterConfigResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clusters/Config", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Clusters service

type ClustersServer interface {
	Describe(context.Context, *ClusterDescribeRequest) (*ClusterDescribeResponse, error)
	Create(context.Context, *ClusterCreateRequest) (*dtypes.LongRunningResponse, error)
	Scale(context.Context, *ClusterScaleRequest) (*dtypes.LongRunningResponse, error)
	Delete(context.Context, *ClusterDeleteRequest) (*dtypes.LongRunningResponse, error)
	List(context.Context, *dtypes.VoidRequest) (*ClusterListResponse, error)
	StartupScript(context.Context, *ClusterStartupScriptRequest) (*ClusterStartupScriptResponse, error)
	Config(context.Context, *ClusterConfigRequest) (*ClusterConfigResponse, error)
}

func RegisterClustersServer(s *grpc.Server, srv ClustersServer) {
	s.RegisterService(&_Clusters_serviceDesc, srv)
}

func _Clusters_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ClusterDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ClustersServer).Describe(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Clusters_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ClusterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ClustersServer).Create(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Clusters_Scale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ClusterScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ClustersServer).Scale(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Clusters_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ClusterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ClustersServer).Delete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Clusters_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(dtypes.VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ClustersServer).List(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Clusters_StartupScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ClusterStartupScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ClustersServer).StartupScript(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Clusters_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ClusterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ClustersServer).Config(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Clusters_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubernetes.Clusters",
	HandlerType: (*ClustersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _Clusters_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Clusters_Create_Handler,
		},
		{
			MethodName: "Scale",
			Handler:    _Clusters_Scale_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Clusters_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Clusters_List_Handler,
		},
		{
			MethodName: "StartupScript",
			Handler:    _Clusters_StartupScript_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _Clusters_Config_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 1062 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0x1b, 0x45,
	0x1c, 0x97, 0x3f, 0xe3, 0xfc, 0x9d, 0xa6, 0x61, 0x9c, 0x06, 0xb3, 0x69, 0x21, 0xdd, 0x56, 0xa5,
	0x09, 0xc4, 0x4e, 0x5c, 0x21, 0x41, 0x0e, 0x20, 0x70, 0x91, 0x40, 0x2a, 0x08, 0xad, 0x45, 0x0f,
	0x5c, 0xcc, 0x7a, 0x3d, 0xb8, 0xab, 0x6c, 0x66, 0x97, 0x99, 0x59, 0x4b, 0xa1, 0xaa, 0x40, 0xbc,
	0x02, 0x67, 0xc4, 0x91, 0xb7, 0xe0, 0x25, 0x38, 0x72, 0x45, 0x1c, 0x79, 0x06, 0x66, 0xfe, 0x33,
	0xbb, 0xfe, 0xa8, 0xbb, 0x4e, 0x0e, 0x5c, 0x56, 0x33, 0xbf, 0xff, 0xf7, 0xe7, 0x2c, 0x6c, 0x07,
	0x51, 0x2a, 0x24, 0xe5, 0xa2, 0x93, 0xf0, 0x58, 0xc6, 0x04, 0xce, 0xd3, 0x11, 0xe5, 0x8c, 0x4a,
	0x2a, 0x9c, 0xdb, 0x93, 0x38, 0x9e, 0x44, 0xb4, 0xeb, 0x27, 0x61, 0xd7, 0x67, 0x2c, 0x96, 0xbe,
	0x0c, 0x63, 0x66, 0x39, 0x9d, 0x3d, 0x0d, 0x8f, 0xe5, 0x65, 0x42, 0x45, 0x17, 0xbf, 0x06, 0x77,
	0x7f, 0x2b, 0xc3, 0x46, 0xdf, 0x28, 0x25, 0x04, 0xaa, 0xc9, 0xb3, 0x70, 0xdc, 0x2e, 0x1d, 0x94,
	0x1e, 0x6e, 0x7a, 0x78, 0xd6, 0x18, 0xf3, 0x2f, 0x68, 0xbb, 0x6c, 0x30, 0x7d, 0x26, 0x0e, 0x34,
	0x94, 0xf0, 0x34, 0x1c, 0x53, 0xde, 0xae, 0x20, 0x9e, 0xdf, 0x35, 0xff, 0x0f, 0x31, 0xa3, 0xed,
	0xaa, 0xe1, 0xd7, 0x67, 0xb2, 0x07, 0x75, 0x4e, 0x27, 0xca, 0x99, 0x76, 0x0d, 0x51, 0x7b, 0x23,
	0xdb, 0x50, 0x8e, 0x45, 0xbb, 0x8e, 0x98, 0x3a, 0x91, 0xbb, 0xb0, 0x35, 0xe1, 0x7e, 0xf2, 0xcc,
	0x67, 0xfe, 0x30, 0xe5, 0x51, 0x7b, 0x03, 0x29, 0xcd, 0x0c, 0xfb, 0x9a, 0x47, 0xe4, 0x0e, 0xc0,
	0x79, 0x38, 0xca, 0x18, 0x1a, 0xc8, 0xb0, 0x69, 0x10, 0x4b, 0x0e, 0x83, 0x90, 0x4d, 0x0c, 0x79,
	0xd3, 0x90, 0x0d, 0xa2, 0xc9, 0xbb, 0x50, 0x63, 0xf1, 0x98, 0x8a, 0x36, 0x28, 0x4a, 0xcd, 0x33,
	0x17, 0x2d, 0x14, 0x70, 0xea, 0x4b, 0x3a, 0x1e, 0xfa, 0xb2, 0xdd, 0x34, 0x42, 0x16, 0xf9, 0x58,
	0xba, 0xef, 0xc2, 0x9e, 0x4d, 0xd0, 0x63, 0x2a, 0x02, 0x1e, 0x8e, 0xa8, 0x47, 0xbf, 0x4f, 0xa9,
	0x90, 0x79, 0x6e, 0x4a, 0xb3, 0xdc, 0xb8, 0x7f, 0x95, 0xe1, 0xf5, 0x97, 0xd8, 0x45, 0xa2, 0x0a,
	0x41, 0xc9, 0x03, 0xa8, 0x0b, 0x55, 0x95, 0x54, 0xa0, 0x44, 0xb3, 0xb7, 0xdd, 0x31, 0x05, 0xe9,
	0x0c, 0x10, 0xf5, 0x2c, 0x95, 0x1c, 0xc3, 0x86, 0xad, 0x33, 0xa6, 0xbd, 0xd9, 0x6b, 0x75, 0x66,
	0x75, 0xee, 0x58, 0xed, 0x5e, 0xc6, 0x43, 0x3e, 0x82, 0x9a, 0x48, 0x68, 0x20, 0xb0, 0x16, 0xcd,
	0xde, 0xe1, 0x0a, 0xe6, 0x65, 0x57, 0x3a, 0x03, 0x2d, 0xe0, 0x19, 0x39, 0xe7, 0xf7, 0x12, 0xd4,
	0x10, 0x20, 0x6f, 0xaa, 0x54, 0xc4, 0x4c, 0xfa, 0x21, 0x53, 0x3d, 0x86, 0x5e, 0xd6, 0xbc, 0x39,
	0x04, 0x3b, 0x24, 0x1e, 0x0b, 0x74, 0xab, 0xe6, 0xe1, 0x59, 0x77, 0x83, 0xa0, 0x7c, 0x1a, 0x06,
	0xd4, 0x78, 0x50, 0xf3, 0xf2, 0x3b, 0xd9, 0x81, 0x0a, 0x57, 0x8e, 0x55, 0x11, 0xd6, 0x47, 0xf2,
	0x06, 0x34, 0x82, 0x24, 0x1d, 0x06, 0x31, 0xa7, 0xd8, 0x0d, 0x15, 0x15, 0x47, 0x92, 0xf6, 0xd5,
	0x55, 0x97, 0x5f, 0xaa, 0xae, 0x8d, 0x86, 0x17, 0xf4, 0x22, 0xe6, 0x97, 0xd8, 0x18, 0x15, 0xaf,
	0x89, 0xd8, 0x17, 0x08, 0xb9, 0x0c, 0x5a, 0x36, 0xa2, 0x27, 0xa1, 0x90, 0xd7, 0x4e, 0x6c, 0x57,
	0x19, 0xb7, 0x03, 0xa4, 0x42, 0xa8, 0xbc, 0x2a, 0xb3, 0x39, 0x93, 0xfb, 0x6f, 0x15, 0x76, 0x2d,
	0xda, 0xc7, 0x86, 0x28, 0x28, 0xfd, 0xc2, 0x58, 0x94, 0x5f, 0x31, 0x16, 0x95, 0xb9, 0xb1, 0xe8,
	0xc1, 0xad, 0x20, 0x8a, 0xd3, 0xf1, 0x50, 0xf5, 0xda, 0x98, 0x32, 0x19, 0xaa, 0xd0, 0x71, 0xfe,
	0xcc, 0xec, 0xb4, 0x90, 0xd8, 0xcf, 0x69, 0x5f, 0xe9, 0x71, 0xfc, 0x16, 0x76, 0x96, 0x65, 0x54,
	0x1a, 0x75, 0x24, 0xef, 0xad, 0x88, 0x64, 0xc1, 0x67, 0x05, 0x2e, 0xe8, 0xfb, 0x94, 0x49, 0x7e,
	0xe9, 0xdd, 0x5c, 0xb2, 0x42, 0x3e, 0x83, 0x86, 0x1e, 0x8b, 0xa1, 0xa0, 0x52, 0x55, 0x40, 0x6b,
	0x3e, 0x5e, 0xab, 0xf9, 0x4b, 0x25, 0x30, 0xa0, 0xd2, 0x68, 0xdc, 0x60, 0xe6, 0x46, 0x0e, 0x61,
	0x47, 0xf8, 0x91, 0x1c, 0xf9, 0x82, 0x0e, 0xa7, 0x2a, 0x9b, 0x7a, 0x01, 0x98, 0x91, 0xbe, 0x99,
	0xe1, 0x4f, 0x0d, 0x4c, 0x4e, 0x60, 0x57, 0xdb, 0x18, 0xaa, 0x3a, 0x71, 0xa5, 0x3d, 0x67, 0x37,
	0x03, 0x4e, 0x34, 0x6d, 0x60, 0x48, 0x99, 0x84, 0x6a, 0x16, 0x94, 0xc8, 0x38, 0xcd, 0xac, 0x37,
	0x35, 0x96, 0xb1, 0xa8, 0xfc, 0x1a, 0xa5, 0xcb, 0x4e, 0x80, 0xc9, 0x2f, 0x6a, 0x5d, 0x74, 0xc4,
	0xf9, 0x44, 0xd7, 0xfb, 0xe5, 0x34, 0xe9, 0x46, 0x3e, 0xa7, 0x97, 0xb6, 0xdc, 0xfa, 0xa8, 0x77,
	0xc9, 0xd4, 0x8f, 0xd2, 0x6c, 0x33, 0x9a, 0xcb, 0x59, 0xf9, 0xfd, 0x92, 0x73, 0x06, 0x5b, 0xf3,
	0x09, 0x59, 0x27, 0x5b, 0x99, 0x93, 0x75, 0xff, 0x28, 0xe5, 0x1d, 0x3e, 0x08, 0xfc, 0xa8, 0xb0,
	0xdf, 0x06, 0xb0, 0x85, 0x95, 0x0a, 0xd4, 0x72, 0x9c, 0xd0, 0xac, 0xa3, 0x4f, 0x56, 0x54, 0x6b,
	0x5e, 0x15, 0x16, 0xab, 0x6f, 0x44, 0x4c, 0xc1, 0x9a, 0x6c, 0x86, 0x38, 0x1f, 0xc2, 0xce, 0x32,
	0xc3, 0xb5, 0x02, 0xf8, 0x26, 0x1f, 0x98, 0xc7, 0x34, 0xa2, 0xc5, 0x03, 0xd3, 0x81, 0x16, 0x57,
	0x4c, 0xba, 0x34, 0x9c, 0xea, 0x9d, 0xa1, 0x36, 0x70, 0x98, 0xa0, 0xce, 0x86, 0xf7, 0x9a, 0x25,
	0x79, 0x96, 0xf2, 0x79, 0xe2, 0x9e, 0xc2, 0x7e, 0x16, 0x90, 0x6e, 0x86, 0x34, 0x19, 0xa8, 0xa5,
	0x96, 0xc8, 0x39, 0x13, 0x3c, 0x8e, 0x72, 0x13, 0xfa, 0xec, 0x46, 0x70, 0x7b, 0xb5, 0xc8, 0x35,
	0x37, 0xc7, 0x7d, 0xb8, 0xa1, 0xd6, 0xe0, 0x77, 0xe1, 0x24, 0xe5, 0xf8, 0xac, 0xda, 0xaa, 0x2f,
	0x82, 0xee, 0xd1, 0x6c, 0x5b, 0x20, 0x5e, 0xf4, 0x50, 0x50, 0xb8, 0xb5, 0xc4, 0xfb, 0x7f, 0xb8,
	0xd4, 0xfb, 0xa7, 0x0e, 0x0d, 0x6b, 0x47, 0x90, 0x1f, 0xa1, 0x91, 0xbd, 0x04, 0xc4, 0x2d, 0x7c,
	0x26, 0xd0, 0x6f, 0xe7, 0xde, 0x15, 0x9e, 0x12, 0xf7, 0xe8, 0xe7, 0x3f, 0xff, 0xfe, 0xa5, 0x7c,
	0x9f, 0xb8, 0xf8, 0xe7, 0x31, 0x13, 0xe8, 0x4e, 0x4f, 0xba, 0xd9, 0x22, 0xed, 0x3e, 0xd7, 0x31,
	0xbf, 0x20, 0x31, 0xd4, 0xcd, 0xe6, 0x20, 0x07, 0xeb, 0x96, 0x8a, 0xb3, 0x9f, 0xc5, 0xfd, 0x24,
	0x66, 0x13, 0x2f, 0x65, 0x4c, 0xbd, 0xe2, 0xb9, 0xd1, 0x07, 0x68, 0xf4, 0xc0, 0xd9, 0x2f, 0x30,
	0x7a, 0x56, 0x3a, 0x22, 0x17, 0xea, 0x65, 0xd3, 0xcd, 0x4f, 0xde, 0x5a, 0x33, 0x16, 0x57, 0x32,
	0xe7, 0xae, 0x33, 0x27, 0xa0, 0x6e, 0xda, 0x7e, 0x65, 0x7c, 0x0b, 0x13, 0x51, 0x6c, 0xd0, 0x26,
	0xf5, 0xe8, 0x2a, 0x49, 0xf5, 0xa1, 0xaa, 0x5f, 0x43, 0xd2, 0xca, 0x14, 0x3e, 0x8d, 0xc3, 0x71,
	0x66, 0x65, 0x55, 0xdc, 0xf3, 0x6f, 0xa7, 0x7b, 0x0f, 0x2d, 0xdd, 0x21, 0x45, 0xa1, 0x91, 0x5f,
	0x4b, 0x70, 0x63, 0x61, 0x80, 0xc8, 0xdb, 0xab, 0xf2, 0xb9, 0x62, 0x2a, 0x9d, 0x87, 0xeb, 0x19,
	0xad, 0x27, 0x1f, 0xa0, 0x27, 0x8f, 0xc8, 0x69, 0x51, 0xcc, 0xc2, 0x88, 0x1e, 0x0b, 0x94, 0xed,
	0x3e, 0xd7, 0x53, 0xfe, 0x82, 0xfc, 0x54, 0x52, 0x8d, 0x85, 0x7d, 0xbf, 0xba, 0xb1, 0xe6, 0xa7,
	0xd1, 0xb9, 0x5b, 0xc0, 0x61, 0x5d, 0x39, 0x45, 0x57, 0xde, 0x21, 0x87, 0x45, 0xae, 0x98, 0x41,
	0xb3, 0x55, 0x18, 0xd5, 0xf1, 0x7f, 0xfa, 0xd1, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xaa,
	0x19, 0xbe, 0xa3, 0x0b, 0x00, 0x00,
}
