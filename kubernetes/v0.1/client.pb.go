// Code generated by protoc-gen-go.
// source: client.proto
// DO NOT EDIT!

/*
Package kubernetes is a generated protocol buffer package.

It is generated from these files:
	client.proto
	clusters.proto
	events.proto

It has these top-level messages:
	ClientRequest
	NodeListResponse
	Node
	NamespaceListResponse
	Namespace
	SecretListResponse
	Secret
	JobListResponse
	Job
	PodListResponse
	Pod
	Container
	ServiceListResponse
	Service
	AppDescribeRequest
	AppDescribeResponse
	AppListResponse
	App
	ReplicationControllerListResponse
	ReplicationController
	ConfigMapListResponse
	ConfigMap
	ConfigMapDescribeRequest
	ConfigMapDescribeResponse
	SecretDescribeRequest
	SecretDescribeResponse
	Cluster
	ClusterDescribeRequest
	ClusterDescribeResponse
	ClusterListResponse
	ClusterCreateRequest
	ClusterScaleRequest
	ClusterDeleteRequest
	ClusterStartupScriptRequest
	ClusterStartupScriptResponse
	ClusterClientConfigRequest
	ClusterClientConfigResponse
	ClusterClientContainerRequest
	ClusterInstanceListRequest
	ClusterInstance
	ClusterInstanceListResponse
	ClusterUpdateRequest
	EventRequest
	EventResponse
*/
package kubernetes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ClientRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *ClientRequest) Reset()                    { *m = ClientRequest{} }
func (m *ClientRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()               {}
func (*ClientRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NodeListResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Nodes  []*Node        `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *NodeListResponse) Reset()                    { *m = NodeListResponse{} }
func (m *NodeListResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeListResponse) ProtoMessage()               {}
func (*NodeListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NodeListResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Node struct {
	Name             string             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ProviderId       string             `protobuf:"bytes,2,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	CreatedAt        string             `protobuf:"bytes,3,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Capacity         *Node_NodeCapacity `protobuf:"bytes,4,opt,name=capacity" json:"capacity,omitempty"`
	OsImage          string             `protobuf:"bytes,5,opt,name=os_image,json=osImage" json:"os_image,omitempty"`
	KernelVersion    string             `protobuf:"bytes,6,opt,name=kernel_version,json=kernelVersion" json:"kernel_version,omitempty"`
	ContainerRuntime string             `protobuf:"bytes,7,opt,name=container_runtime,json=containerRuntime" json:"container_runtime,omitempty"`
	KubeletVersion   string             `protobuf:"bytes,8,opt,name=kubelet_version,json=kubeletVersion" json:"kubelet_version,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Node) GetCapacity() *Node_NodeCapacity {
	if m != nil {
		return m.Capacity
	}
	return nil
}

type Node_NodeCapacity struct {
	Cpu    int64 `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Memory int64 `protobuf:"varint,2,opt,name=memory" json:"memory,omitempty"`
	Pods   int64 `protobuf:"varint,3,opt,name=pods" json:"pods,omitempty"`
}

func (m *Node_NodeCapacity) Reset()                    { *m = Node_NodeCapacity{} }
func (m *Node_NodeCapacity) String() string            { return proto.CompactTextString(m) }
func (*Node_NodeCapacity) ProtoMessage()               {}
func (*Node_NodeCapacity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type NamespaceListResponse struct {
	Status     *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Namespaces []*Namespace   `protobuf:"bytes,2,rep,name=namespaces" json:"namespaces,omitempty"`
}

func (m *NamespaceListResponse) Reset()                    { *m = NamespaceListResponse{} }
func (m *NamespaceListResponse) String() string            { return proto.CompactTextString(m) }
func (*NamespaceListResponse) ProtoMessage()               {}
func (*NamespaceListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NamespaceListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NamespaceListResponse) GetNamespaces() []*Namespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

type Namespace struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CreatedAt string `protobuf:"bytes,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Phase     string `protobuf:"bytes,3,opt,name=phase" json:"phase,omitempty"`
}

func (m *Namespace) Reset()                    { *m = Namespace{} }
func (m *Namespace) String() string            { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()               {}
func (*Namespace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SecretListResponse struct {
	Status  *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Secrets []*Secret      `protobuf:"bytes,2,rep,name=secrets" json:"secrets,omitempty"`
}

func (m *SecretListResponse) Reset()                    { *m = SecretListResponse{} }
func (m *SecretListResponse) String() string            { return proto.CompactTextString(m) }
func (*SecretListResponse) ProtoMessage()               {}
func (*SecretListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SecretListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SecretListResponse) GetSecrets() []*Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type Secret struct {
	Name            string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace       string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	ResourceVersion string `protobuf:"bytes,3,opt,name=resource_version,json=resourceVersion" json:"resource_version,omitempty"`
	SecretType      string `protobuf:"bytes,4,opt,name=secret_type,json=secretType" json:"secret_type,omitempty"`
	CreatedAt       string `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type JobListResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Jobs   []*Job         `protobuf:"bytes,2,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *JobListResponse) Reset()                    { *m = JobListResponse{} }
func (m *JobListResponse) String() string            { return proto.CompactTextString(m) }
func (*JobListResponse) ProtoMessage()               {}
func (*JobListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *JobListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *JobListResponse) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type Job struct {
	Name           string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace      string       `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	App            string       `protobuf:"bytes,3,opt,name=app" json:"app,omitempty"`
	CreatedAt      string       `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Parallelism    int32        `protobuf:"varint,5,opt,name=parallelism" json:"parallelism,omitempty"`
	Completions    int32        `protobuf:"varint,6,opt,name=completions" json:"completions,omitempty"`
	Containers     []*Container `protobuf:"bytes,7,rep,name=containers" json:"containers,omitempty"`
	StartTime      string       `protobuf:"bytes,8,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	CompletionTime string       `protobuf:"bytes,9,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	Active         int32        `protobuf:"varint,10,opt,name=active" json:"active,omitempty"`
	Succeeded      int32        `protobuf:"varint,11,opt,name=succeeded" json:"succeeded,omitempty"`
	Failed         int32        `protobuf:"varint,12,opt,name=failed" json:"failed,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Job) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

type PodListResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Pods   []*Pod         `protobuf:"bytes,2,rep,name=pods" json:"pods,omitempty"`
}

func (m *PodListResponse) Reset()                    { *m = PodListResponse{} }
func (m *PodListResponse) String() string            { return proto.CompactTextString(m) }
func (*PodListResponse) ProtoMessage()               {}
func (*PodListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PodListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PodListResponse) GetPods() []*Pod {
	if m != nil {
		return m.Pods
	}
	return nil
}

type Pod struct {
	Name           string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace      string            `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	App            string            `protobuf:"bytes,3,opt,name=app" json:"app,omitempty"`
	CreatedAt      string            `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Containers     []*Container      `protobuf:"bytes,5,rep,name=containers" json:"containers,omitempty"`
	ServiceAccount string            `protobuf:"bytes,6,opt,name=service_account,json=serviceAccount" json:"service_account,omitempty"`
	NodeName       string            `protobuf:"bytes,7,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	Phase          string            `protobuf:"bytes,8,opt,name=phase" json:"phase,omitempty"`
	StartTime      string            `protobuf:"bytes,9,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Message        string            `protobuf:"bytes,10,opt,name=message" json:"message,omitempty"`
	Links          map[string]string `protobuf:"bytes,11,rep,name=links" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Pod) Reset()                    { *m = Pod{} }
func (m *Pod) String() string            { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()               {}
func (*Pod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Pod) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *Pod) GetLinks() map[string]string {
	if m != nil {
		return m.Links
	}
	return nil
}

type Container struct {
	Name     string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Image    string   `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	Commands []string `protobuf:"bytes,3,rep,name=commands" json:"commands,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type ServiceListResponse struct {
	Status   *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Services []*Service     `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
}

func (m *ServiceListResponse) Reset()                    { *m = ServiceListResponse{} }
func (m *ServiceListResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceListResponse) ProtoMessage()               {}
func (*ServiceListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ServiceListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ServiceListResponse) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type Service struct {
	Name                  string                         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace             string                         `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	App                   string                         `protobuf:"bytes,3,opt,name=app" json:"app,omitempty"`
	CreatedAt             string                         `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Type                  string                         `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	ClusterIp             string                         `protobuf:"bytes,6,opt,name=cluster_ip,json=clusterIp" json:"cluster_ip,omitempty"`
	Ports                 []*Service_Port                `protobuf:"bytes,7,rep,name=ports" json:"ports,omitempty"`
	ExternalIps           []string                       `protobuf:"bytes,8,rep,name=external_ips,json=externalIps" json:"external_ips,omitempty"`
	LoadbalancerIngresses []*Service_LoadBalancerIngress `protobuf:"bytes,9,rep,name=loadbalancer_ingresses,json=loadbalancerIngresses" json:"loadbalancer_ingresses,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Service) GetPorts() []*Service_Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Service) GetLoadbalancerIngresses() []*Service_LoadBalancerIngress {
	if m != nil {
		return m.LoadbalancerIngresses
	}
	return nil
}

type Service_Port struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Protocol   string `protobuf:"bytes,2,opt,name=protocol" json:"protocol,omitempty"`
	Port       int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	TargetPort string `protobuf:"bytes,4,opt,name=target_port,json=targetPort" json:"target_port,omitempty"`
	NodePort   int32  `protobuf:"varint,5,opt,name=node_port,json=nodePort" json:"node_port,omitempty"`
}

func (m *Service_Port) Reset()                    { *m = Service_Port{} }
func (m *Service_Port) String() string            { return proto.CompactTextString(m) }
func (*Service_Port) ProtoMessage()               {}
func (*Service_Port) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 0} }

type Service_LoadBalancerIngress struct {
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
}

func (m *Service_LoadBalancerIngress) Reset()                    { *m = Service_LoadBalancerIngress{} }
func (m *Service_LoadBalancerIngress) String() string            { return proto.CompactTextString(m) }
func (*Service_LoadBalancerIngress) ProtoMessage()               {}
func (*Service_LoadBalancerIngress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 1} }

type AppDescribeRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Cluster   string `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *AppDescribeRequest) Reset()                    { *m = AppDescribeRequest{} }
func (m *AppDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*AppDescribeRequest) ProtoMessage()               {}
func (*AppDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type AppDescribeResponse struct {
	Status *dtypes.Status    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	App    *Service          `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Links  map[string]string `protobuf:"bytes,7,rep,name=links" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AppDescribeResponse) Reset()                    { *m = AppDescribeResponse{} }
func (m *AppDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*AppDescribeResponse) ProtoMessage()               {}
func (*AppDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AppDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AppDescribeResponse) GetApp() *Service {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *AppDescribeResponse) GetLinks() map[string]string {
	if m != nil {
		return m.Links
	}
	return nil
}

type AppListResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Apps   []*App         `protobuf:"bytes,2,rep,name=apps" json:"apps,omitempty"`
}

func (m *AppListResponse) Reset()                    { *m = AppListResponse{} }
func (m *AppListResponse) String() string            { return proto.CompactTextString(m) }
func (*AppListResponse) ProtoMessage()               {}
func (*AppListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AppListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AppListResponse) GetApps() []*App {
	if m != nil {
		return m.Apps
	}
	return nil
}

type App struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	CreatedAt string `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Type      string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	ClusterIp string `protobuf:"bytes,6,opt,name=cluster_ip,json=clusterIp" json:"cluster_ip,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type ReplicationControllerListResponse struct {
	Status                 *dtypes.Status           `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	ReplicationControllers []*ReplicationController `protobuf:"bytes,2,rep,name=replication_controllers,json=replicationControllers" json:"replication_controllers,omitempty"`
}

func (m *ReplicationControllerListResponse) Reset()         { *m = ReplicationControllerListResponse{} }
func (m *ReplicationControllerListResponse) String() string { return proto.CompactTextString(m) }
func (*ReplicationControllerListResponse) ProtoMessage()    {}
func (*ReplicationControllerListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func (m *ReplicationControllerListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ReplicationControllerListResponse) GetReplicationControllers() []*ReplicationController {
	if m != nil {
		return m.ReplicationControllers
	}
	return nil
}

type ReplicationController struct {
	Name               string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace          string       `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	App                string       `protobuf:"bytes,3,opt,name=app" json:"app,omitempty"`
	CreatedAt          string       `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Generation         int64        `protobuf:"varint,5,opt,name=generation" json:"generation,omitempty"`
	CurrentReplicas    int32        `protobuf:"varint,6,opt,name=current_replicas,json=currentReplicas" json:"current_replicas,omitempty"`
	Replicas           int32        `protobuf:"varint,7,opt,name=replicas" json:"replicas,omitempty"`
	ObservedGeneration int64        `protobuf:"varint,8,opt,name=observed_generation,json=observedGeneration" json:"observed_generation,omitempty"`
	Containers         []*Container `protobuf:"bytes,9,rep,name=containers" json:"containers,omitempty"`
}

func (m *ReplicationController) Reset()                    { *m = ReplicationController{} }
func (m *ReplicationController) String() string            { return proto.CompactTextString(m) }
func (*ReplicationController) ProtoMessage()               {}
func (*ReplicationController) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ReplicationController) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

type ConfigMapListResponse struct {
	Status    *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	ConfigMap []*ConfigMap   `protobuf:"bytes,2,rep,name=config_map,json=configMap" json:"config_map,omitempty"`
}

func (m *ConfigMapListResponse) Reset()                    { *m = ConfigMapListResponse{} }
func (m *ConfigMapListResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigMapListResponse) ProtoMessage()               {}
func (*ConfigMapListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ConfigMapListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ConfigMapListResponse) GetConfigMap() []*ConfigMap {
	if m != nil {
		return m.ConfigMap
	}
	return nil
}

type ConfigMap struct {
	Name            string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace       string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Size            int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	CreatedAt       string `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	ResourceVersion string `protobuf:"bytes,5,opt,name=resource_version,json=resourceVersion" json:"resource_version,omitempty"`
}

func (m *ConfigMap) Reset()                    { *m = ConfigMap{} }
func (m *ConfigMap) String() string            { return proto.CompactTextString(m) }
func (*ConfigMap) ProtoMessage()               {}
func (*ConfigMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type ConfigMapDescribeRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *ConfigMapDescribeRequest) Reset()                    { *m = ConfigMapDescribeRequest{} }
func (m *ConfigMapDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigMapDescribeRequest) ProtoMessage()               {}
func (*ConfigMapDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type ConfigMapDescribeResponse struct {
	Status      *dtypes.Status    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Namespace   string            `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Cluster     string            `protobuf:"bytes,4,opt,name=cluster" json:"cluster,omitempty"`
	CreatedTime string            `protobuf:"bytes,5,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	Data        map[string]string `protobuf:"bytes,6,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ConfigMapDescribeResponse) Reset()                    { *m = ConfigMapDescribeResponse{} }
func (m *ConfigMapDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigMapDescribeResponse) ProtoMessage()               {}
func (*ConfigMapDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ConfigMapDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ConfigMapDescribeResponse) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type SecretDescribeRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *SecretDescribeRequest) Reset()                    { *m = SecretDescribeRequest{} }
func (m *SecretDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SecretDescribeRequest) ProtoMessage()               {}
func (*SecretDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type SecretDescribeResponse struct {
	Status          *dtypes.Status    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Cluster         string            `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	Name            string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Namespace       string            `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	CreatedAt       string            `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	ResourceVersion string            `protobuf:"bytes,6,opt,name=resource_version,json=resourceVersion" json:"resource_version,omitempty"`
	Type            string            `protobuf:"bytes,7,opt,name=type" json:"type,omitempty"`
	Data            map[string]string `protobuf:"bytes,8,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SecretDescribeResponse) Reset()                    { *m = SecretDescribeResponse{} }
func (m *SecretDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SecretDescribeResponse) ProtoMessage()               {}
func (*SecretDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *SecretDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SecretDescribeResponse) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientRequest)(nil), "kubernetes.ClientRequest")
	proto.RegisterType((*NodeListResponse)(nil), "kubernetes.NodeListResponse")
	proto.RegisterType((*Node)(nil), "kubernetes.Node")
	proto.RegisterType((*Node_NodeCapacity)(nil), "kubernetes.Node.NodeCapacity")
	proto.RegisterType((*NamespaceListResponse)(nil), "kubernetes.NamespaceListResponse")
	proto.RegisterType((*Namespace)(nil), "kubernetes.Namespace")
	proto.RegisterType((*SecretListResponse)(nil), "kubernetes.SecretListResponse")
	proto.RegisterType((*Secret)(nil), "kubernetes.Secret")
	proto.RegisterType((*JobListResponse)(nil), "kubernetes.JobListResponse")
	proto.RegisterType((*Job)(nil), "kubernetes.Job")
	proto.RegisterType((*PodListResponse)(nil), "kubernetes.PodListResponse")
	proto.RegisterType((*Pod)(nil), "kubernetes.Pod")
	proto.RegisterType((*Container)(nil), "kubernetes.Container")
	proto.RegisterType((*ServiceListResponse)(nil), "kubernetes.ServiceListResponse")
	proto.RegisterType((*Service)(nil), "kubernetes.Service")
	proto.RegisterType((*Service_Port)(nil), "kubernetes.Service.Port")
	proto.RegisterType((*Service_LoadBalancerIngress)(nil), "kubernetes.Service.LoadBalancerIngress")
	proto.RegisterType((*AppDescribeRequest)(nil), "kubernetes.AppDescribeRequest")
	proto.RegisterType((*AppDescribeResponse)(nil), "kubernetes.AppDescribeResponse")
	proto.RegisterType((*AppListResponse)(nil), "kubernetes.AppListResponse")
	proto.RegisterType((*App)(nil), "kubernetes.App")
	proto.RegisterType((*ReplicationControllerListResponse)(nil), "kubernetes.ReplicationControllerListResponse")
	proto.RegisterType((*ReplicationController)(nil), "kubernetes.ReplicationController")
	proto.RegisterType((*ConfigMapListResponse)(nil), "kubernetes.ConfigMapListResponse")
	proto.RegisterType((*ConfigMap)(nil), "kubernetes.ConfigMap")
	proto.RegisterType((*ConfigMapDescribeRequest)(nil), "kubernetes.ConfigMapDescribeRequest")
	proto.RegisterType((*ConfigMapDescribeResponse)(nil), "kubernetes.ConfigMapDescribeResponse")
	proto.RegisterType((*SecretDescribeRequest)(nil), "kubernetes.SecretDescribeRequest")
	proto.RegisterType((*SecretDescribeResponse)(nil), "kubernetes.SecretDescribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Clients service

type ClientsClient interface {
	Nodes(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*NodeListResponse, error)
	Secrets(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*SecretListResponse, error)
	Jobs(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*JobListResponse, error)
	Namespaces(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*NamespaceListResponse, error)
	Pods(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*PodListResponse, error)
	Services(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServiceListResponse, error)
	ReplicationControllers(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ReplicationControllerListResponse, error)
	Apps(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*AppListResponse, error)
	App(ctx context.Context, in *AppDescribeRequest, opts ...grpc.CallOption) (*AppDescribeResponse, error)
	AppPods(ctx context.Context, in *AppDescribeRequest, opts ...grpc.CallOption) (*PodListResponse, error)
	ConfigMaps(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ConfigMapListResponse, error)
	ConfigMap(ctx context.Context, in *ConfigMapDescribeRequest, opts ...grpc.CallOption) (*ConfigMapDescribeResponse, error)
	Secret(ctx context.Context, in *SecretDescribeRequest, opts ...grpc.CallOption) (*SecretDescribeResponse, error)
}

type clientsClient struct {
	cc *grpc.ClientConn
}

func NewClientsClient(cc *grpc.ClientConn) ClientsClient {
	return &clientsClient{cc}
}

func (c *clientsClient) Nodes(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*NodeListResponse, error) {
	out := new(NodeListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/Nodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Secrets(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*SecretListResponse, error) {
	out := new(SecretListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/Secrets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Jobs(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/Jobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Namespaces(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*NamespaceListResponse, error) {
	out := new(NamespaceListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/Namespaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Pods(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*PodListResponse, error) {
	out := new(PodListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/Pods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Services(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServiceListResponse, error) {
	out := new(ServiceListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/Services", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) ReplicationControllers(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ReplicationControllerListResponse, error) {
	out := new(ReplicationControllerListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/ReplicationControllers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Apps(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*AppListResponse, error) {
	out := new(AppListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/Apps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) App(ctx context.Context, in *AppDescribeRequest, opts ...grpc.CallOption) (*AppDescribeResponse, error) {
	out := new(AppDescribeResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/App", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) AppPods(ctx context.Context, in *AppDescribeRequest, opts ...grpc.CallOption) (*PodListResponse, error) {
	out := new(PodListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/AppPods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) ConfigMaps(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ConfigMapListResponse, error) {
	out := new(ConfigMapListResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/ConfigMaps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) ConfigMap(ctx context.Context, in *ConfigMapDescribeRequest, opts ...grpc.CallOption) (*ConfigMapDescribeResponse, error) {
	out := new(ConfigMapDescribeResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/ConfigMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Secret(ctx context.Context, in *SecretDescribeRequest, opts ...grpc.CallOption) (*SecretDescribeResponse, error) {
	out := new(SecretDescribeResponse)
	err := grpc.Invoke(ctx, "/kubernetes.Clients/Secret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Clients service

type ClientsServer interface {
	Nodes(context.Context, *ClientRequest) (*NodeListResponse, error)
	Secrets(context.Context, *ClientRequest) (*SecretListResponse, error)
	Jobs(context.Context, *ClientRequest) (*JobListResponse, error)
	Namespaces(context.Context, *ClientRequest) (*NamespaceListResponse, error)
	Pods(context.Context, *ClientRequest) (*PodListResponse, error)
	Services(context.Context, *ClientRequest) (*ServiceListResponse, error)
	ReplicationControllers(context.Context, *ClientRequest) (*ReplicationControllerListResponse, error)
	Apps(context.Context, *ClientRequest) (*AppListResponse, error)
	App(context.Context, *AppDescribeRequest) (*AppDescribeResponse, error)
	AppPods(context.Context, *AppDescribeRequest) (*PodListResponse, error)
	ConfigMaps(context.Context, *ClientRequest) (*ConfigMapListResponse, error)
	ConfigMap(context.Context, *ConfigMapDescribeRequest) (*ConfigMapDescribeResponse, error)
	Secret(context.Context, *SecretDescribeRequest) (*SecretDescribeResponse, error)
}

func RegisterClientsServer(s *grpc.Server, srv ClientsServer) {
	s.RegisterService(&_Clients_serviceDesc, srv)
}

func _Clients_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/Nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Nodes(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Secrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Secrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/Secrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Secrets(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Jobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Jobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/Jobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Jobs(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Namespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Namespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/Namespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Namespaces(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Pods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Pods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/Pods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Pods(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Services_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Services(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/Services",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Services(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_ReplicationControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).ReplicationControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/ReplicationControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).ReplicationControllers(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Apps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Apps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/Apps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Apps(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_App_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).App(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/App",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).App(ctx, req.(*AppDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_AppPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).AppPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/AppPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).AppPods(ctx, req.(*AppDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_ConfigMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).ConfigMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/ConfigMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).ConfigMaps(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_ConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).ConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/ConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).ConfigMap(ctx, req.(*ConfigMapDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Secret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Secret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.Clients/Secret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Secret(ctx, req.(*SecretDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clients_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubernetes.Clients",
	HandlerType: (*ClientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nodes",
			Handler:    _Clients_Nodes_Handler,
		},
		{
			MethodName: "Secrets",
			Handler:    _Clients_Secrets_Handler,
		},
		{
			MethodName: "Jobs",
			Handler:    _Clients_Jobs_Handler,
		},
		{
			MethodName: "Namespaces",
			Handler:    _Clients_Namespaces_Handler,
		},
		{
			MethodName: "Pods",
			Handler:    _Clients_Pods_Handler,
		},
		{
			MethodName: "Services",
			Handler:    _Clients_Services_Handler,
		},
		{
			MethodName: "ReplicationControllers",
			Handler:    _Clients_ReplicationControllers_Handler,
		},
		{
			MethodName: "Apps",
			Handler:    _Clients_Apps_Handler,
		},
		{
			MethodName: "App",
			Handler:    _Clients_App_Handler,
		},
		{
			MethodName: "AppPods",
			Handler:    _Clients_AppPods_Handler,
		},
		{
			MethodName: "ConfigMaps",
			Handler:    _Clients_ConfigMaps_Handler,
		},
		{
			MethodName: "ConfigMap",
			Handler:    _Clients_ConfigMap_Handler,
		},
		{
			MethodName: "Secret",
			Handler:    _Clients_Secret_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 1828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x18, 0x4d, 0x73, 0xdc, 0x48,
	0xb5, 0xe6, 0xcb, 0x33, 0xf3, 0xec, 0xd8, 0xa6, 0x8d, 0xcd, 0x64, 0x36, 0x9b, 0x8d, 0x05, 0x5e,
	0xaf, 0x77, 0xbd, 0x33, 0xbb, 0x21, 0x14, 0x09, 0x50, 0x21, 0x8e, 0x03, 0x29, 0xa7, 0x4c, 0x0a,
	0x94, 0x14, 0x07, 0x0e, 0x19, 0x64, 0x4d, 0xc7, 0x51, 0xac, 0x91, 0x14, 0xb5, 0xc6, 0xe0, 0xa4,
	0x52, 0x45, 0x71, 0x82, 0x0b, 0x55, 0x14, 0xc5, 0x89, 0x0b, 0x39, 0x50, 0x5c, 0x39, 0xf0, 0x27,
	0x38, 0xf3, 0x07, 0x38, 0xc0, 0x8f, 0xa0, 0xb8, 0xf0, 0xfa, 0x75, 0x4b, 0x23, 0xc9, 0xf2, 0x7c,
	0x55, 0x92, 0x8b, 0x4a, 0xfd, 0xfa, 0xf5, 0xfb, 0xfe, 0xea, 0x86, 0x25, 0xdb, 0x75, 0xb8, 0x17,
	0x75, 0x82, 0xd0, 0x8f, 0x7c, 0x06, 0x27, 0xc3, 0x23, 0x1e, 0x7a, 0x3c, 0xe2, 0xa2, 0x7d, 0xe5,
	0xd8, 0xf7, 0x8f, 0x5d, 0xde, 0xb5, 0x02, 0xa7, 0x6b, 0x79, 0x9e, 0x1f, 0x59, 0x91, 0xe3, 0x7b,
	0x42, 0x61, 0xb6, 0x37, 0x24, 0xb8, 0x1f, 0x9d, 0x05, 0x5c, 0x74, 0xe9, 0xab, 0xe0, 0xc6, 0x0e,
	0x5c, 0xda, 0x27, 0x8a, 0x26, 0x7f, 0x31, 0xe4, 0x22, 0x62, 0x2d, 0xa8, 0xdb, 0xee, 0x50, 0x44,
	0x3c, 0x6c, 0x95, 0xae, 0x95, 0x3e, 0x69, 0x9a, 0xf1, 0xd2, 0x38, 0x82, 0xd5, 0x87, 0x7e, 0x9f,
	0x1f, 0x3a, 0x02, 0x91, 0x45, 0x80, 0xb4, 0x39, 0xfb, 0x18, 0x16, 0x04, 0x32, 0x1a, 0x0a, 0x42,
	0x5e, 0xbc, 0xbe, 0xdc, 0x51, 0x3c, 0x3a, 0x8f, 0x08, 0x6a, 0xea, 0x5d, 0xc4, 0xab, 0x79, 0x78,
	0x56, 0xb4, 0xca, 0xd7, 0x2a, 0x88, 0xb6, 0xda, 0x19, 0x09, 0xde, 0x91, 0x44, 0x4d, 0xb5, 0x6d,
	0xfc, 0xaf, 0x0c, 0x55, 0xb9, 0x66, 0x0c, 0xaa, 0x9e, 0x35, 0xe0, 0x5a, 0x06, 0xfa, 0x67, 0x1f,
	0xc1, 0x22, 0x0a, 0x7d, 0xea, 0xf4, 0x79, 0xd8, 0x73, 0xfa, 0x48, 0x4a, 0x6e, 0x41, 0x0c, 0x3a,
	0xe8, 0xb3, 0x0f, 0x01, 0xec, 0x90, 0x5b, 0x11, 0xef, 0xf7, 0xac, 0xa8, 0x55, 0xa1, 0xfd, 0xa6,
	0x86, 0xec, 0x45, 0xec, 0x16, 0x34, 0x6c, 0x2b, 0xb0, 0x6c, 0x27, 0x3a, 0x6b, 0x55, 0x49, 0xdc,
	0x0f, 0xf3, 0x72, 0xd0, 0x67, 0x5f, 0x23, 0x99, 0x09, 0x3a, 0xbb, 0x0c, 0x0d, 0x5f, 0xf4, 0x9c,
	0x81, 0x75, 0xcc, 0x5b, 0x35, 0x65, 0x16, 0x5f, 0x1c, 0xc8, 0x25, 0xdb, 0x82, 0xe5, 0x13, 0x49,
	0xc2, 0xed, 0x9d, 0xf2, 0x50, 0xa0, 0xc9, 0x5b, 0x0b, 0x84, 0x70, 0x49, 0x41, 0x7f, 0xaa, 0x80,
	0xec, 0x33, 0xf8, 0x8a, 0xed, 0x7b, 0x91, 0xe5, 0x78, 0x28, 0x7d, 0x38, 0xf4, 0x22, 0x07, 0xb5,
	0xab, 0x13, 0xe6, 0x6a, 0xb2, 0x61, 0x2a, 0x38, 0xdb, 0x86, 0x15, 0x29, 0x98, 0xcb, 0xa3, 0x84,
	0x68, 0x83, 0x50, 0x97, 0x35, 0x58, 0x53, 0x6d, 0x1f, 0xc2, 0x52, 0x5a, 0x62, 0xb6, 0x0a, 0x15,
	0x3b, 0x18, 0x92, 0xd5, 0x2a, 0xa6, 0xfc, 0x65, 0x1b, 0xb0, 0x30, 0xe0, 0x03, 0x3f, 0x3c, 0x23,
	0x7b, 0x55, 0x4c, 0xbd, 0x92, 0x06, 0x0e, 0xfc, 0xbe, 0x20, 0x2b, 0x55, 0x4c, 0xfa, 0x37, 0x4e,
	0x61, 0xfd, 0x21, 0x1a, 0x5a, 0x20, 0xb1, 0xf9, 0xdc, 0xfc, 0x2d, 0x00, 0x2f, 0x26, 0x10, 0xfb,
	0x7a, 0x3d, 0x63, 0xe3, 0x78, 0xd7, 0x4c, 0x21, 0x1a, 0x8f, 0xa1, 0x99, 0x6c, 0x14, 0x7a, 0x3e,
	0xeb, 0xd8, 0x72, 0xde, 0xb1, 0x5f, 0x85, 0x5a, 0xf0, 0xcc, 0x12, 0x5c, 0xbb, 0x5c, 0x2d, 0x8c,
	0xe7, 0xc0, 0x1e, 0x71, 0x44, 0x8a, 0xe6, 0x52, 0x65, 0x17, 0xea, 0x82, 0x4e, 0xc7, 0x7a, 0xb0,
	0xb4, 0x1e, 0x8a, 0xb0, 0x19, 0xa3, 0x18, 0x7f, 0x29, 0xc1, 0x82, 0x82, 0x15, 0xca, 0x7f, 0x05,
	0x9a, 0x89, 0xba, 0xb1, 0xf8, 0x09, 0x80, 0xed, 0xc0, 0x6a, 0xc8, 0x85, 0x3f, 0x0c, 0x6d, 0x9e,
	0xb8, 0x5b, 0x69, 0xb2, 0x12, 0xc3, 0xe3, 0x28, 0xc2, 0x14, 0x50, 0x2c, 0x7b, 0x52, 0x68, 0x8a,
	0x62, 0x4c, 0x01, 0x05, 0x7a, 0x8c, 0x90, 0x9c, 0xa5, 0x6a, 0x39, 0x4b, 0x19, 0x4f, 0x60, 0xe5,
	0x81, 0x7f, 0x34, 0x97, 0x41, 0xbe, 0x0e, 0xd5, 0xe7, 0xfe, 0x51, 0x6c, 0x8d, 0x95, 0xb4, 0x35,
	0x90, 0xa4, 0x49, 0x9b, 0xc6, 0x7f, 0xcb, 0x50, 0xc1, 0xd5, 0x1c, 0x46, 0xc0, 0xc8, 0xb5, 0x82,
	0x40, 0xeb, 0x2d, 0x7f, 0x73, 0xaa, 0x54, 0xf3, 0x4e, 0xbf, 0x86, 0xd5, 0xc0, 0x0a, 0x2d, 0xd7,
	0xe5, 0xae, 0x23, 0x06, 0xa4, 0x6a, 0xcd, 0x4c, 0x83, 0x24, 0x86, 0xed, 0x0f, 0x02, 0x4c, 0x17,
	0x59, 0x08, 0x29, 0x2d, 0x11, 0x23, 0x05, 0x92, 0xf1, 0x9a, 0xe4, 0x9e, 0xc0, 0x6c, 0x3c, 0x17,
	0xaf, 0xfb, 0x49, 0x66, 0xa6, 0x10, 0xa5, 0x64, 0x68, 0x94, 0x10, 0x9d, 0x20, 0x93, 0x58, 0x65,
	0x66, 0x93, 0x20, 0x8f, 0x75, 0xf6, 0x8e, 0x98, 0x28, 0x9c, 0xa6, 0xca, 0xde, 0x11, 0x98, 0x10,
	0x31, 0x37, 0x2d, 0x3b, 0x72, 0x4e, 0x79, 0x0b, 0x48, 0x36, 0xbd, 0x92, 0x96, 0x12, 0x43, 0xdb,
	0xe6, 0xbc, 0xcf, 0xfb, 0xad, 0x45, 0xda, 0x1a, 0x01, 0xe4, 0xa9, 0xa7, 0x96, 0xe3, 0xe2, 0xd6,
	0x92, 0x3a, 0xa5, 0x56, 0xd2, 0xb7, 0x3f, 0xf6, 0xfb, 0xf3, 0xfa, 0x96, 0x8a, 0x41, 0x81, 0x6f,
	0x91, 0xa4, 0xae, 0x0e, 0x7f, 0xae, 0x40, 0x05, 0x57, 0xef, 0xc3, 0xb7, 0x59, 0xbf, 0xd4, 0xa6,
	0xf5, 0x0b, 0x1a, 0x5e, 0xf0, 0xf0, 0xd4, 0xc1, 0x3c, 0xb2, 0x6c, 0xdb, 0xc7, 0x62, 0xaa, 0x6b,
	0xf1, 0xb2, 0x06, 0xef, 0x29, 0x28, 0xfb, 0x00, 0xc5, 0xc5, 0xb2, 0xd9, 0x23, 0x3d, 0x54, 0x11,
	0x6e, 0x48, 0x80, 0xac, 0x42, 0xa3, 0x6a, 0xd2, 0x48, 0x55, 0x93, 0x9c, 0xcf, 0x9b, 0x79, 0x9f,
	0x63, 0xdb, 0x44, 0x6d, 0x85, 0xec, 0x0f, 0xa0, 0xfa, 0x83, 0x5e, 0xb2, 0x2f, 0xa0, 0xe6, 0x3a,
	0xde, 0x89, 0x40, 0x47, 0x4a, 0x35, 0xda, 0x39, 0xe3, 0x76, 0x0e, 0xe5, 0xe6, 0x0f, 0xbc, 0x28,
	0x3c, 0x33, 0x15, 0x62, 0xfb, 0x26, 0xc0, 0x08, 0x28, 0x8d, 0x77, 0xc2, 0xcf, 0xb4, 0xb5, 0xe5,
	0xaf, 0x14, 0xf0, 0xd4, 0x72, 0x87, 0xb1, 0xa1, 0xd5, 0xe2, 0x3b, 0xe5, 0x9b, 0x25, 0xe3, 0x27,
	0xd0, 0x4c, 0x2c, 0x53, 0xe8, 0x27, 0x3c, 0xaa, 0x9a, 0x98, 0x3e, 0x4a, 0x0b, 0xd6, 0xc6, 0xc6,
	0xe8, 0x0f, 0x06, 0x96, 0x47, 0xfd, 0xa0, 0x22, 0xad, 0x11, 0xaf, 0x0d, 0x0f, 0xd6, 0x1e, 0x29,
	0xe3, 0xcd, 0x15, 0x59, 0x5d, 0x68, 0x68, 0xdb, 0xc7, 0xd1, 0xb5, 0x96, 0xad, 0xa3, 0xb4, 0x67,
	0x26, 0x48, 0xc6, 0x9b, 0x2a, 0xd4, 0x35, 0xf4, 0x7d, 0x44, 0x1a, 0xb2, 0xa0, 0x4a, 0xaa, 0x2a,
	0x25, 0xfd, 0xd3, 0x11, 0x35, 0xf3, 0xf4, 0x9c, 0x40, 0x47, 0x50, 0x53, 0x43, 0x0e, 0x02, 0xd6,
	0xc1, 0xf8, 0xf0, 0xc3, 0x28, 0xae, 0x17, 0xad, 0x02, 0x7d, 0xd0, 0xb1, 0x61, 0x64, 0x2a, 0x34,
	0xb6, 0x09, 0x4b, 0xfc, 0x97, 0x78, 0xd4, 0xb3, 0x5c, 0xa4, 0x27, 0x30, 0xac, 0xa4, 0x85, 0x17,
	0x63, 0xd8, 0x41, 0x20, 0xd8, 0x13, 0xd8, 0x70, 0x7d, 0xab, 0x7f, 0x64, 0xb9, 0x96, 0x67, 0x4b,
	0xb6, 0xde, 0x31, 0x56, 0x7e, 0x81, 0x36, 0x6b, 0x12, 0x8f, 0xed, 0x22, 0x1e, 0x87, 0x78, 0xe2,
	0xae, 0x3e, 0x71, 0xa0, 0x0e, 0x98, 0xeb, 0x69, 0x32, 0x07, 0x31, 0x95, 0xf6, 0x6f, 0x4a, 0x50,
	0x95, 0x22, 0x15, 0x5a, 0x14, 0xbd, 0x4f, 0xb3, 0xa0, 0xed, 0xbb, 0xda, 0xa0, 0xc9, 0x5a, 0x4d,
	0x09, 0xa1, 0x9a, 0xa5, 0x6a, 0x26, 0xfd, 0xcb, 0x1e, 0x84, 0x61, 0x7f, 0x8c, 0x3d, 0x88, 0xb6,
	0x74, 0x0f, 0x52, 0x20, 0x62, 0x12, 0x67, 0x17, 0x6d, 0xab, 0xba, 0x4c, 0xd9, 0x25, 0x37, 0xdb,
	0x77, 0x61, 0xad, 0x40, 0x70, 0x79, 0xe6, 0x99, 0x2f, 0xa2, 0x5e, 0x4a, 0xba, 0x86, 0x04, 0x50,
	0x46, 0x2e, 0x43, 0x19, 0x1d, 0xa1, 0x64, 0xc3, 0x3f, 0xe3, 0xe7, 0xc0, 0xf6, 0x82, 0xe0, 0x1e,
	0x17, 0x76, 0xe8, 0x1c, 0xf1, 0x78, 0x72, 0x2d, 0xd2, 0x2d, 0x35, 0xcd, 0x96, 0x33, 0xd3, 0x6c,
	0x36, 0x8e, 0x2a, 0xb9, 0x38, 0x32, 0xfe, 0x55, 0x82, 0xb5, 0x0c, 0x8b, 0x19, 0xc3, 0x7e, 0x4b,
	0xc5, 0x61, 0x99, 0x90, 0x0a, 0x23, 0x9e, 0x82, 0xf3, 0x4e, 0x5c, 0x1b, 0x54, 0x28, 0x7d, 0x9a,
	0x46, 0x2c, 0x60, 0xff, 0x56, 0x6b, 0x05, 0xb6, 0x0b, 0x64, 0x31, 0x6f, 0xbb, 0x40, 0xe9, 0x0b,
	0xdb, 0x05, 0x92, 0x34, 0x69, 0xd3, 0xf8, 0x6d, 0x09, 0x2a, 0xb8, 0x9a, 0x23, 0x89, 0xdf, 0x7a,
	0xca, 0x1a, 0x7f, 0x2d, 0xc1, 0xa6, 0xc9, 0x03, 0xd7, 0xb1, 0xe9, 0x52, 0x24, 0x6b, 0x64, 0xe8,
	0xe3, 0x98, 0x10, 0xce, 0xa5, 0xfe, 0xcf, 0xe0, 0x6b, 0xe1, 0x88, 0x58, 0xcf, 0x4e, 0xa8, 0xc5,
	0x16, 0xd9, 0x4c, 0x5b, 0xa4, 0x90, 0xaf, 0xb9, 0x11, 0x16, 0x81, 0x85, 0xf1, 0x8f, 0x32, 0xac,
	0x17, 0x9e, 0x78, 0x1f, 0xc5, 0xf0, 0x2a, 0xc0, 0x31, 0xc7, 0xd6, 0x41, 0xac, 0xc9, 0xbe, 0x15,
	0x33, 0x05, 0x91, 0x83, 0xaa, 0x3d, 0x0c, 0x43, 0xbc, 0x2d, 0xf6, 0xb4, 0xf8, 0xf1, 0x54, 0xb5,
	0xa2, 0xe1, 0x5a, 0x74, 0x21, 0x8b, 0x4a, 0x82, 0x52, 0x57, 0x25, 0x20, 0x5e, 0x63, 0x4f, 0x58,
	0xc3, 0x59, 0x11, 0xf3, 0x00, 0xc5, 0x48, 0xf1, 0x6b, 0x10, 0x3f, 0x16, 0x6f, 0xdd, 0x1f, 0xf1,
	0xcd, 0x8e, 0x03, 0xcd, 0x29, 0xc7, 0x01, 0x63, 0x08, 0xeb, 0xb8, 0xf1, 0xd4, 0x39, 0xfe, 0x91,
	0x35, 0x5f, 0x9c, 0xdf, 0x20, 0xbe, 0x48, 0xa0, 0x37, 0xb0, 0x82, 0xa2, 0xeb, 0x4c, 0x42, 0x1e,
	0xad, 0x18, 0xff, 0x1a, 0x7f, 0x2a, 0x51, 0x17, 0x56, 0xab, 0x39, 0xdc, 0x86, 0x27, 0x84, 0xf3,
	0x92, 0xc7, 0x37, 0x33, 0xf9, 0x3f, 0xc9, 0x71, 0x45, 0x37, 0x88, 0x5a, 0xe1, 0x0d, 0xc2, 0x78,
	0x0a, 0xad, 0x44, 0xb8, 0x7c, 0x05, 0xbd, 0xf0, 0xee, 0x9f, 0x68, 0x51, 0xbe, 0x48, 0x8b, 0x73,
	0x15, 0xf4, 0x6f, 0x65, 0xb8, 0x5c, 0xc0, 0x68, 0x46, 0x0f, 0xcc, 0xcc, 0x37, 0xad, 0x43, 0x35,
	0xab, 0x03, 0xf6, 0xe1, 0xd8, 0x86, 0x34, 0xc3, 0x29, 0x03, 0x2d, 0x6a, 0x18, 0x4d, 0x71, 0xfb,
	0x50, 0xed, 0x5b, 0x91, 0x85, 0x41, 0x2d, 0x5d, 0xdd, 0x2d, 0x74, 0xf5, 0xb9, 0xa2, 0x7c, 0x0f,
	0x4f, 0xa8, 0x9a, 0x4c, 0x87, 0xdb, 0xdf, 0x86, 0x66, 0x02, 0x9a, 0xa9, 0x22, 0xdb, 0xb0, 0xae,
	0xee, 0x90, 0xef, 0xd2, 0x2f, 0xff, 0x29, 0xc3, 0x46, 0x9e, 0xcb, 0x8c, 0x4e, 0xb9, 0xb8, 0xa9,
	0xc6, 0xe2, 0x54, 0x2e, 0x12, 0xa7, 0x3a, 0xbe, 0xd6, 0xd7, 0xa6, 0x09, 0xec, 0x85, 0xe2, 0xab,
	0x71, 0xdc, 0x16, 0xea, 0xa9, 0xb6, 0x70, 0x47, 0xfb, 0xb3, 0x41, 0xfe, 0xdc, 0x3d, 0x7f, 0x83,
	0x7f, 0x67, 0xce, 0xbc, 0xfe, 0xf7, 0x4b, 0x50, 0x57, 0x2f, 0x6b, 0x82, 0xbd, 0x80, 0x9a, 0x7c,
	0xa5, 0x11, 0xec, 0x72, 0x26, 0xa2, 0xd2, 0xef, 0x6e, 0xed, 0x2b, 0xf9, 0xa7, 0xa8, 0x74, 0xc5,
	0x32, 0xba, 0xbf, 0xfe, 0xe7, 0xbf, 0xff, 0x50, 0xde, 0x61, 0xdb, 0xdd, 0x11, 0x56, 0xf7, 0xf4,
	0x8b, 0xce, 0x97, 0x5d, 0xf5, 0x1e, 0xd8, 0x7d, 0xa5, 0x5d, 0xf0, 0xba, 0x4b, 0x0f, 0x69, 0xec,
	0x17, 0x72, 0x8a, 0xa6, 0xb7, 0x89, 0x71, 0x4c, 0xaf, 0x9e, 0xb7, 0x48, 0x86, 0xed, 0x97, 0xc4,
	0xf6, 0x33, 0xb6, 0x33, 0x99, 0xad, 0x7e, 0x09, 0x61, 0x1e, 0x54, 0x1f, 0x60, 0x09, 0x1f, 0xc7,
	0xf5, 0x83, 0xdc, 0xdb, 0x41, 0x86, 0x65, 0x87, 0x58, 0x7e, 0xc2, 0x3e, 0x9e, 0xcc, 0x52, 0xbe,
	0x38, 0xb0, 0x5f, 0x95, 0x00, 0x92, 0xc7, 0xa3, 0xb1, 0x6c, 0x37, 0x0b, 0x1f, 0xa2, 0x32, 0xcc,
	0x6f, 0x10, 0xf3, 0x0e, 0xdb, 0x9d, 0xc2, 0xcc, 0x23, 0x9e, 0x9e, 0x1c, 0xae, 0xfb, 0xd3, 0xab,
	0x9c, 0xbb, 0xa5, 0xcf, 0xa2, 0xb2, 0xbc, 0x88, 0xb3, 0x97, 0xd0, 0xd0, 0x53, 0xe4, 0x58, 0x9e,
	0x1f, 0x15, 0x8c, 0x9d, 0x19, 0xbe, 0xd7, 0x89, 0xef, 0x2e, 0xfb, 0x74, 0x1a, 0xef, 0x6a, 0x7e,
	0xbf, 0x2f, 0xc1, 0x46, 0xe1, 0x7c, 0x32, 0x56, 0x94, 0xcf, 0x27, 0x0e, 0x44, 0x19, 0xc1, 0x3e,
	0x27, 0xc1, 0xb6, 0xd9, 0xd6, 0x64, 0xc1, 0x42, 0x9b, 0xec, 0x8f, 0x83, 0xe6, 0xf4, 0xf6, 0xcf,
	0x8d, 0xbd, 0xb3, 0xd8, 0x5f, 0x4e, 0xb6, 0x2c, 0x9e, 0x6c, 0xaf, 0x5e, 0x38, 0xae, 0x17, 0x38,
	0xa0, 0x60, 0x9c, 0x37, 0xf6, 0x88, 0xf1, 0x77, 0xd9, 0xad, 0xe9, 0x18, 0x77, 0x5f, 0x25, 0x41,
	0xf7, 0x5a, 0xfd, 0xbf, 0x66, 0xbf, 0x2b, 0x41, 0x1d, 0x49, 0x53, 0xfc, 0x4d, 0x92, 0x67, 0x6c,
	0x10, 0xfe, 0x90, 0x64, 0xb9, 0xc3, 0x6e, 0xcf, 0x2d, 0x8b, 0x0a, 0x4e, 0x99, 0x8f, 0x49, 0xaf,
	0x9c, 0x3e, 0x1f, 0x0b, 0x07, 0xb5, 0x59, 0xf2, 0x51, 0xcd, 0x5f, 0x03, 0xc9, 0xf3, 0x4d, 0x66,
	0x00, 0xfb, 0xc6, 0x84, 0x2e, 0xae, 0x84, 0xd9, 0x9a, 0xaa, 0xd7, 0x1b, 0xf7, 0x49, 0xa0, 0x3d,
	0xf6, 0xfd, 0x59, 0x04, 0x2a, 0xf2, 0xdb, 0x1f, 0x47, 0x0f, 0xc6, 0x9b, 0xe3, 0xda, 0x92, 0x92,
	0xce, 0x98, 0xdc, 0xb9, 0x8c, 0x7b, 0x24, 0xda, 0x6d, 0xf6, 0xbd, 0xa9, 0x6b, 0x75, 0x81, 0x5c,
	0x47, 0x0b, 0x74, 0xf5, 0xff, 0xe6, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x88, 0xdc, 0x55,
	0x68, 0x1a, 0x00, 0x00,
}
