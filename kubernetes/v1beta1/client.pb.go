// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client.proto

/*
Package v1beta1 is a generated protocol buffer package.

It is generated from these files:
	client.proto
	incident.proto

It has these top-level messages:
	ListResourceRequest
	ReverseIndexResourceRequest
	ListResourceResponse
	DescribeResourceRequest
	DescribeResourceResponse
	UpdateResourceRequest
	ConfigMapEditRequest
	SecretEditRequest
	CopyResourceRequest
	CreateResourceRequest
	DeleteResourceRequest
	KubeResourceList
	KubeResource
	Meta
	KubeObject
	IcingaState
	PodSpec
	Volume
	VolumeMount
	Raw
	ConfigMap
	Job
	JobSpec
	Namespace
	Node
	Pod
	PersistentVolume
	PersistentVolumeClaim
	PersistentVolumeClaimSpec
	ObjectReference
	Service
	Secret
	ReplicationController
	ReplicaSet
	DaemonSet
	Deployment
	StatefulSet
	StorageClass
	Event
	EventSource
	Metrics
	PersistentVolumeRegisterRequest
	PersistentVolumeUnRegisterRequest
	PersistentVolumeClaimRegisterRequest
	PersistentVolumeClaimUnRegisterRequest
	ClusterAlert
	NodeAlert
	PodAlert
	AlertReceiver
	Role
	RoleBinding
	ClusterRole
	ClusterRoleBinding
	Rule
	Subject
	Restic
	StashBackend
	CronJob
	Postgres
	PostgresSpec
	Elasticsearch
	ElasticsearchSpec
	DormantDatabase
	Mysql
	MysqlSpec
	Redis
	RedisSpec
	Mongodb
	MongodbSpec
	Memcached
	MemcachedSpec
	Recovery
	Origin
	Snapshot
	InitSpec
	ScriptSourceSpec
	SnapshotSourceSpec
	BackupScheduleSpec
	SnapshotStorageSpec
	Certificate
	DiskListRequest
	DiskListResponse
	DiskDescribeRequest
	DiskDescribeResponse
	DiskCreateRequest
	DiskDeleteRequest
	Disk
	ResourceCondition
	Prometheus
	AlertSpec
	PrometheusAlertmanagerEndpoint
	ServiceMonitor
	ResourceRequirements
	Ingress
	KubemonAgentSpec
	KubemonPrometheusSpec
	Toleration
	Affinity
	NodeAffinity
	PreferredSchedulingTerm
	NodeSelector
	NodeSelectorTerm
	NodeSelectorRequirement
	PodAffinity
	PodAffinityTerm
	LabelSelector
	LabelSelectorRequirement
	WeightedPodAffinityTerm
	PodAntiAffinity
	VolumeSource
	AWSElasticBlockStoreVolumeSource
	HostPathVolumeSource
	SecretVolumeSource
	KeyToPath
	EmptyDirVolumeSource
	PersistentVolumeClaimVolumeSource
	DownwardAPIVolumeSource
	DownwardAPIVolumeFile
	ConfigMapVolumeSource
	PhotonPersistentDiskVolumeSource
	LocalObjectReference
	NFSVolumeSource
	FCVolumeSource
	FlexVolumeSource
	FlockerVolumeSource
	GCEPersistentDiskVolumeSource
	GitRepoVolumeSource
	GlusterfsVolumeSource
	RBDVolumeSource
	ISCSIVolumeSource
	AzureFileVolumeSource
	VsphereVirtualDiskVolumeSource
	QuobyteVolumeSource
	AzureDiskVolumeSource
	CinderVolumeSource
	CephFSVolumeSource
	EnvVar
	EnvVarSource
	ObjectFieldSelector
	ResourceFieldSelector
	ConfigMapKeySelector
	SecretKeySelector
	Incident
	IncidentListRequest
	IncidentListResponse
	IncidentDescribeRequest
	IncidentDescribeResponse
	IncidentNotifyRequest
	IncidentEventCreateRequest
*/
package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/appscodeapis/appscode/api"
import appscode_dtypes "appscode.com/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListResourceRequest struct {
	Cluster        string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type           string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Namespace      string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	ApiVersion     string `protobuf:"bytes,4,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
	IncludeMetrics bool   `protobuf:"varint,5,opt,name=include_metrics,json=includeMetrics" json:"include_metrics,omitempty"`
	// map type is not supported by grpc-gateway as query params.
	// https://github.com/grpc-ecosystem/grpc-gateway/blob/master/runtime/query.go#L57
	// https://github.com/grpc-ecosystem/grpc-gateway/issues/316
	// map<string, string> label_selector = 6;
	// example label_selector=environment=production,tier=frontend
	Selector string `protobuf:"bytes,6,opt,name=selector" json:"selector,omitempty"`
}

func (m *ListResourceRequest) Reset()                    { *m = ListResourceRequest{} }
func (m *ListResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*ListResourceRequest) ProtoMessage()               {}
func (*ListResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ListResourceRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ListResourceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ListResourceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListResourceRequest) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *ListResourceRequest) GetIncludeMetrics() bool {
	if m != nil {
		return m.IncludeMetrics
	}
	return false
}

func (m *ListResourceRequest) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

type ReverseIndexResourceRequest struct {
	Cluster    string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Namespace  string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	ApiVersion string `protobuf:"bytes,5,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
	TargetType string `protobuf:"bytes,7,opt,name=targetType" json:"targetType,omitempty"`
}

func (m *ReverseIndexResourceRequest) Reset()                    { *m = ReverseIndexResourceRequest{} }
func (m *ReverseIndexResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*ReverseIndexResourceRequest) ProtoMessage()               {}
func (*ReverseIndexResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReverseIndexResourceRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ReverseIndexResourceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ReverseIndexResourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReverseIndexResourceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ReverseIndexResourceRequest) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *ReverseIndexResourceRequest) GetTargetType() string {
	if m != nil {
		return m.TargetType
	}
	return ""
}

type ListResourceResponse struct {
	Resources *KubeResourceList `protobuf:"bytes,1,opt,name=resources" json:"resources,omitempty"`
}

func (m *ListResourceResponse) Reset()                    { *m = ListResourceResponse{} }
func (m *ListResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResourceResponse) ProtoMessage()               {}
func (*ListResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListResourceResponse) GetResources() *KubeResourceList {
	if m != nil {
		return m.Resources
	}
	return nil
}

type DescribeResourceRequest struct {
	Cluster        string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type           string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Namespace      string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Raw            string `protobuf:"bytes,5,opt,name=raw" json:"raw,omitempty"`
	IncludeMetrics bool   `protobuf:"varint,6,opt,name=include_metrics,json=includeMetrics" json:"include_metrics,omitempty"`
	ApiVersion     string `protobuf:"bytes,7,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
}

func (m *DescribeResourceRequest) Reset()                    { *m = DescribeResourceRequest{} }
func (m *DescribeResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*DescribeResourceRequest) ProtoMessage()               {}
func (*DescribeResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DescribeResourceRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DescribeResourceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DescribeResourceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DescribeResourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DescribeResourceRequest) GetRaw() string {
	if m != nil {
		return m.Raw
	}
	return ""
}

func (m *DescribeResourceRequest) GetIncludeMetrics() bool {
	if m != nil {
		return m.IncludeMetrics
	}
	return false
}

func (m *DescribeResourceRequest) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

type DescribeResourceResponse struct {
	Resource *KubeResource `protobuf:"bytes,1,opt,name=resource" json:"resource,omitempty"`
}

func (m *DescribeResourceResponse) Reset()                    { *m = DescribeResourceResponse{} }
func (m *DescribeResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*DescribeResourceResponse) ProtoMessage()               {}
func (*DescribeResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DescribeResourceResponse) GetResource() *KubeResource {
	if m != nil {
		return m.Resource
	}
	return nil
}

type UpdateResourceRequest struct {
	Cluster    string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Namespace  string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Raw        *Raw   `protobuf:"bytes,5,opt,name=raw" json:"raw,omitempty"`
	ApiVersion string `protobuf:"bytes,6,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
}

func (m *UpdateResourceRequest) Reset()                    { *m = UpdateResourceRequest{} }
func (m *UpdateResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateResourceRequest) ProtoMessage()               {}
func (*UpdateResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateResourceRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *UpdateResourceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UpdateResourceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateResourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateResourceRequest) GetRaw() *Raw {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *UpdateResourceRequest) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

type ConfigMapEditRequest struct {
	Cluster   string            `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Namespace string            `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Add       map[string]string `protobuf:"bytes,4,rep,name=add" json:"add,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Update    map[string]string `protobuf:"bytes,5,rep,name=update" json:"update,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Deleted   []string          `protobuf:"bytes,6,rep,name=deleted" json:"deleted,omitempty"`
}

func (m *ConfigMapEditRequest) Reset()                    { *m = ConfigMapEditRequest{} }
func (m *ConfigMapEditRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigMapEditRequest) ProtoMessage()               {}
func (*ConfigMapEditRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ConfigMapEditRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ConfigMapEditRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ConfigMapEditRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigMapEditRequest) GetAdd() map[string]string {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *ConfigMapEditRequest) GetUpdate() map[string]string {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *ConfigMapEditRequest) GetDeleted() []string {
	if m != nil {
		return m.Deleted
	}
	return nil
}

type SecretEditRequest struct {
	Cluster   string            `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Namespace string            `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Add       map[string]string `protobuf:"bytes,4,rep,name=add" json:"add,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Update    map[string]string `protobuf:"bytes,5,rep,name=update" json:"update,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Deleted   []string          `protobuf:"bytes,6,rep,name=deleted" json:"deleted,omitempty"`
}

func (m *SecretEditRequest) Reset()                    { *m = SecretEditRequest{} }
func (m *SecretEditRequest) String() string            { return proto.CompactTextString(m) }
func (*SecretEditRequest) ProtoMessage()               {}
func (*SecretEditRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SecretEditRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *SecretEditRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SecretEditRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecretEditRequest) GetAdd() map[string]string {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *SecretEditRequest) GetUpdate() map[string]string {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *SecretEditRequest) GetDeleted() []string {
	if m != nil {
		return m.Deleted
	}
	return nil
}

type CopyResourceRequest struct {
	Source      *KubeObject `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Destination *KubeObject `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	ApiVersion  string      `protobuf:"bytes,3,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
}

func (m *CopyResourceRequest) Reset()                    { *m = CopyResourceRequest{} }
func (m *CopyResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*CopyResourceRequest) ProtoMessage()               {}
func (*CopyResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CopyResourceRequest) GetSource() *KubeObject {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CopyResourceRequest) GetDestination() *KubeObject {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *CopyResourceRequest) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

type CreateResourceRequest struct {
	Cluster    string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Raw        *Raw   `protobuf:"bytes,5,opt,name=raw" json:"raw,omitempty"`
	ApiVersion string `protobuf:"bytes,6,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
}

func (m *CreateResourceRequest) Reset()                    { *m = CreateResourceRequest{} }
func (m *CreateResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateResourceRequest) ProtoMessage()               {}
func (*CreateResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateResourceRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *CreateResourceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateResourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateResourceRequest) GetRaw() *Raw {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *CreateResourceRequest) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

type DeleteResourceRequest struct {
	Cluster    string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Namespace  string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	ApiVersion string `protobuf:"bytes,5,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
}

func (m *DeleteResourceRequest) Reset()                    { *m = DeleteResourceRequest{} }
func (m *DeleteResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteResourceRequest) ProtoMessage()               {}
func (*DeleteResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteResourceRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DeleteResourceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DeleteResourceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteResourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteResourceRequest) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

type KubeResourceList struct {
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
	Kind       string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// Types that are valid to be assigned to Resource:
	//	*KubeResourceList_ConfigMaps_
	//	*KubeResourceList_DaemonSets_
	//	*KubeResourceList_Deployments_
	//	*KubeResourceList_Jobs_
	//	*KubeResourceList_Namespaces_
	//	*KubeResourceList_Nodes_
	//	*KubeResourceList_StatefulSets_
	//	*KubeResourceList_Pods_
	//	*KubeResourceList_ReplicaSets_
	//	*KubeResourceList_Services_
	//	*KubeResourceList_Secrets_
	//	*KubeResourceList_ReplicationControllers_
	//	*KubeResourceList_StorageClasses_
	//	*KubeResourceList_PersistentVolumes_
	//	*KubeResourceList_PersistentVolumeClaims_
	//	*KubeResourceList_Roles_
	//	*KubeResourceList_ClusterRoles_
	//	*KubeResourceList_RoleBindings_
	//	*KubeResourceList_ClusterRoleBindings_
	//	*KubeResourceList_Certificates_
	//	*KubeResourceList_CronJobs_
	//	*KubeResourceList_Restics_
	//	*KubeResourceList_Postgreses_
	//	*KubeResourceList_Elasticsearchs
	//	*KubeResourceList_DormantDatabases_
	//	*KubeResourceList_Snapshots_
	//	*KubeResourceList_Events_
	//	*KubeResourceList_Ingresses_
	//	*KubeResourceList_Prometheuses_
	//	*KubeResourceList_ServiceMonitors_
	//	*KubeResourceList_ClusterAlerts_
	//	*KubeResourceList_NodeAlerts_
	//	*KubeResourceList_PodAlerts_
	//	*KubeResourceList_Mysqls_
	//	*KubeResourceList_Redises_
	//	*KubeResourceList_Mongodbs_
	//	*KubeResourceList_Memcacheds_
	//	*KubeResourceList_Recoveries_
	Resource isKubeResourceList_Resource `protobuf_oneof:"resource"`
}

func (m *KubeResourceList) Reset()                    { *m = KubeResourceList{} }
func (m *KubeResourceList) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList) ProtoMessage()               {}
func (*KubeResourceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isKubeResourceList_Resource interface {
	isKubeResourceList_Resource()
}

type KubeResourceList_ConfigMaps_ struct {
	ConfigMaps *KubeResourceList_ConfigMaps `protobuf:"bytes,3,opt,name=config_maps,json=configMaps,oneof"`
}
type KubeResourceList_DaemonSets_ struct {
	DaemonSets *KubeResourceList_DaemonSets `protobuf:"bytes,4,opt,name=daemon_sets,json=daemonSets,oneof"`
}
type KubeResourceList_Deployments_ struct {
	Deployments *KubeResourceList_Deployments `protobuf:"bytes,5,opt,name=deployments,oneof"`
}
type KubeResourceList_Jobs_ struct {
	Jobs *KubeResourceList_Jobs `protobuf:"bytes,6,opt,name=jobs,oneof"`
}
type KubeResourceList_Namespaces_ struct {
	Namespaces *KubeResourceList_Namespaces `protobuf:"bytes,7,opt,name=namespaces,oneof"`
}
type KubeResourceList_Nodes_ struct {
	Nodes *KubeResourceList_Nodes `protobuf:"bytes,8,opt,name=nodes,oneof"`
}
type KubeResourceList_StatefulSets_ struct {
	StatefulSets *KubeResourceList_StatefulSets `protobuf:"bytes,9,opt,name=stateful_sets,json=statefulSets,oneof"`
}
type KubeResourceList_Pods_ struct {
	Pods *KubeResourceList_Pods `protobuf:"bytes,10,opt,name=pods,oneof"`
}
type KubeResourceList_ReplicaSets_ struct {
	ReplicaSets *KubeResourceList_ReplicaSets `protobuf:"bytes,11,opt,name=replica_sets,json=replicaSets,oneof"`
}
type KubeResourceList_Services_ struct {
	Services *KubeResourceList_Services `protobuf:"bytes,12,opt,name=services,oneof"`
}
type KubeResourceList_Secrets_ struct {
	Secrets *KubeResourceList_Secrets `protobuf:"bytes,13,opt,name=secrets,oneof"`
}
type KubeResourceList_ReplicationControllers_ struct {
	ReplicationControllers *KubeResourceList_ReplicationControllers `protobuf:"bytes,14,opt,name=replication_controllers,json=replicationControllers,oneof"`
}
type KubeResourceList_StorageClasses_ struct {
	StorageClasses *KubeResourceList_StorageClasses `protobuf:"bytes,15,opt,name=storage_classes,json=storageClasses,oneof"`
}
type KubeResourceList_PersistentVolumes_ struct {
	PersistentVolumes *KubeResourceList_PersistentVolumes `protobuf:"bytes,16,opt,name=persistent_volumes,json=persistentVolumes,oneof"`
}
type KubeResourceList_PersistentVolumeClaims_ struct {
	PersistentVolumeClaims *KubeResourceList_PersistentVolumeClaims `protobuf:"bytes,17,opt,name=persistent_volume_claims,json=persistentVolumeClaims,oneof"`
}
type KubeResourceList_Roles_ struct {
	Roles *KubeResourceList_Roles `protobuf:"bytes,18,opt,name=roles,oneof"`
}
type KubeResourceList_ClusterRoles_ struct {
	ClusterRoles *KubeResourceList_ClusterRoles `protobuf:"bytes,19,opt,name=cluster_roles,json=clusterRoles,oneof"`
}
type KubeResourceList_RoleBindings_ struct {
	RoleBindings *KubeResourceList_RoleBindings `protobuf:"bytes,20,opt,name=role_bindings,json=roleBindings,oneof"`
}
type KubeResourceList_ClusterRoleBindings_ struct {
	ClusterRoleBindings *KubeResourceList_ClusterRoleBindings `protobuf:"bytes,21,opt,name=cluster_role_bindings,json=clusterRoleBindings,oneof"`
}
type KubeResourceList_Certificates_ struct {
	Certificates *KubeResourceList_Certificates `protobuf:"bytes,22,opt,name=certificates,oneof"`
}
type KubeResourceList_CronJobs_ struct {
	CronJobs *KubeResourceList_CronJobs `protobuf:"bytes,23,opt,name=cron_jobs,json=cronJobs,oneof"`
}
type KubeResourceList_Restics_ struct {
	Restics *KubeResourceList_Restics `protobuf:"bytes,24,opt,name=restics,oneof"`
}
type KubeResourceList_Postgreses_ struct {
	Postgreses *KubeResourceList_Postgreses `protobuf:"bytes,25,opt,name=postgreses,oneof"`
}
type KubeResourceList_Elasticsearchs struct {
	Elasticsearchs *KubeResourceList_Elasticsearches `protobuf:"bytes,26,opt,name=elasticsearchs,oneof"`
}
type KubeResourceList_DormantDatabases_ struct {
	DormantDatabases *KubeResourceList_DormantDatabases `protobuf:"bytes,27,opt,name=dormant_databases,json=dormantDatabases,oneof"`
}
type KubeResourceList_Snapshots_ struct {
	Snapshots *KubeResourceList_Snapshots `protobuf:"bytes,28,opt,name=snapshots,oneof"`
}
type KubeResourceList_Events_ struct {
	Events *KubeResourceList_Events `protobuf:"bytes,29,opt,name=events,oneof"`
}
type KubeResourceList_Ingresses_ struct {
	Ingresses *KubeResourceList_Ingresses `protobuf:"bytes,30,opt,name=ingresses,oneof"`
}
type KubeResourceList_Prometheuses_ struct {
	Prometheuses *KubeResourceList_Prometheuses `protobuf:"bytes,31,opt,name=prometheuses,oneof"`
}
type KubeResourceList_ServiceMonitors_ struct {
	ServiceMonitors *KubeResourceList_ServiceMonitors `protobuf:"bytes,32,opt,name=service_monitors,json=serviceMonitors,oneof"`
}
type KubeResourceList_ClusterAlerts_ struct {
	ClusterAlerts *KubeResourceList_ClusterAlerts `protobuf:"bytes,33,opt,name=cluster_alerts,json=clusterAlerts,oneof"`
}
type KubeResourceList_NodeAlerts_ struct {
	NodeAlerts *KubeResourceList_NodeAlerts `protobuf:"bytes,34,opt,name=node_alerts,json=nodeAlerts,oneof"`
}
type KubeResourceList_PodAlerts_ struct {
	PodAlerts *KubeResourceList_PodAlerts `protobuf:"bytes,35,opt,name=pod_alerts,json=podAlerts,oneof"`
}
type KubeResourceList_Mysqls_ struct {
	Mysqls *KubeResourceList_Mysqls `protobuf:"bytes,36,opt,name=mysqls,oneof"`
}
type KubeResourceList_Redises_ struct {
	Redises *KubeResourceList_Redises `protobuf:"bytes,37,opt,name=redises,oneof"`
}
type KubeResourceList_Mongodbs_ struct {
	Mongodbs *KubeResourceList_Mongodbs `protobuf:"bytes,38,opt,name=mongodbs,oneof"`
}
type KubeResourceList_Memcacheds_ struct {
	Memcacheds *KubeResourceList_Memcacheds `protobuf:"bytes,39,opt,name=memcacheds,oneof"`
}
type KubeResourceList_Recoveries_ struct {
	Recoveries *KubeResourceList_Recoveries `protobuf:"bytes,40,opt,name=recoveries,oneof"`
}

func (*KubeResourceList_ConfigMaps_) isKubeResourceList_Resource()             {}
func (*KubeResourceList_DaemonSets_) isKubeResourceList_Resource()             {}
func (*KubeResourceList_Deployments_) isKubeResourceList_Resource()            {}
func (*KubeResourceList_Jobs_) isKubeResourceList_Resource()                   {}
func (*KubeResourceList_Namespaces_) isKubeResourceList_Resource()             {}
func (*KubeResourceList_Nodes_) isKubeResourceList_Resource()                  {}
func (*KubeResourceList_StatefulSets_) isKubeResourceList_Resource()           {}
func (*KubeResourceList_Pods_) isKubeResourceList_Resource()                   {}
func (*KubeResourceList_ReplicaSets_) isKubeResourceList_Resource()            {}
func (*KubeResourceList_Services_) isKubeResourceList_Resource()               {}
func (*KubeResourceList_Secrets_) isKubeResourceList_Resource()                {}
func (*KubeResourceList_ReplicationControllers_) isKubeResourceList_Resource() {}
func (*KubeResourceList_StorageClasses_) isKubeResourceList_Resource()         {}
func (*KubeResourceList_PersistentVolumes_) isKubeResourceList_Resource()      {}
func (*KubeResourceList_PersistentVolumeClaims_) isKubeResourceList_Resource() {}
func (*KubeResourceList_Roles_) isKubeResourceList_Resource()                  {}
func (*KubeResourceList_ClusterRoles_) isKubeResourceList_Resource()           {}
func (*KubeResourceList_RoleBindings_) isKubeResourceList_Resource()           {}
func (*KubeResourceList_ClusterRoleBindings_) isKubeResourceList_Resource()    {}
func (*KubeResourceList_Certificates_) isKubeResourceList_Resource()           {}
func (*KubeResourceList_CronJobs_) isKubeResourceList_Resource()               {}
func (*KubeResourceList_Restics_) isKubeResourceList_Resource()                {}
func (*KubeResourceList_Postgreses_) isKubeResourceList_Resource()             {}
func (*KubeResourceList_Elasticsearchs) isKubeResourceList_Resource()          {}
func (*KubeResourceList_DormantDatabases_) isKubeResourceList_Resource()       {}
func (*KubeResourceList_Snapshots_) isKubeResourceList_Resource()              {}
func (*KubeResourceList_Events_) isKubeResourceList_Resource()                 {}
func (*KubeResourceList_Ingresses_) isKubeResourceList_Resource()              {}
func (*KubeResourceList_Prometheuses_) isKubeResourceList_Resource()           {}
func (*KubeResourceList_ServiceMonitors_) isKubeResourceList_Resource()        {}
func (*KubeResourceList_ClusterAlerts_) isKubeResourceList_Resource()          {}
func (*KubeResourceList_NodeAlerts_) isKubeResourceList_Resource()             {}
func (*KubeResourceList_PodAlerts_) isKubeResourceList_Resource()              {}
func (*KubeResourceList_Mysqls_) isKubeResourceList_Resource()                 {}
func (*KubeResourceList_Redises_) isKubeResourceList_Resource()                {}
func (*KubeResourceList_Mongodbs_) isKubeResourceList_Resource()               {}
func (*KubeResourceList_Memcacheds_) isKubeResourceList_Resource()             {}
func (*KubeResourceList_Recoveries_) isKubeResourceList_Resource()             {}

func (m *KubeResourceList) GetResource() isKubeResourceList_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *KubeResourceList) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *KubeResourceList) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *KubeResourceList) GetConfigMaps() *KubeResourceList_ConfigMaps {
	if x, ok := m.GetResource().(*KubeResourceList_ConfigMaps_); ok {
		return x.ConfigMaps
	}
	return nil
}

func (m *KubeResourceList) GetDaemonSets() *KubeResourceList_DaemonSets {
	if x, ok := m.GetResource().(*KubeResourceList_DaemonSets_); ok {
		return x.DaemonSets
	}
	return nil
}

func (m *KubeResourceList) GetDeployments() *KubeResourceList_Deployments {
	if x, ok := m.GetResource().(*KubeResourceList_Deployments_); ok {
		return x.Deployments
	}
	return nil
}

func (m *KubeResourceList) GetJobs() *KubeResourceList_Jobs {
	if x, ok := m.GetResource().(*KubeResourceList_Jobs_); ok {
		return x.Jobs
	}
	return nil
}

func (m *KubeResourceList) GetNamespaces() *KubeResourceList_Namespaces {
	if x, ok := m.GetResource().(*KubeResourceList_Namespaces_); ok {
		return x.Namespaces
	}
	return nil
}

func (m *KubeResourceList) GetNodes() *KubeResourceList_Nodes {
	if x, ok := m.GetResource().(*KubeResourceList_Nodes_); ok {
		return x.Nodes
	}
	return nil
}

func (m *KubeResourceList) GetStatefulSets() *KubeResourceList_StatefulSets {
	if x, ok := m.GetResource().(*KubeResourceList_StatefulSets_); ok {
		return x.StatefulSets
	}
	return nil
}

func (m *KubeResourceList) GetPods() *KubeResourceList_Pods {
	if x, ok := m.GetResource().(*KubeResourceList_Pods_); ok {
		return x.Pods
	}
	return nil
}

func (m *KubeResourceList) GetReplicaSets() *KubeResourceList_ReplicaSets {
	if x, ok := m.GetResource().(*KubeResourceList_ReplicaSets_); ok {
		return x.ReplicaSets
	}
	return nil
}

func (m *KubeResourceList) GetServices() *KubeResourceList_Services {
	if x, ok := m.GetResource().(*KubeResourceList_Services_); ok {
		return x.Services
	}
	return nil
}

func (m *KubeResourceList) GetSecrets() *KubeResourceList_Secrets {
	if x, ok := m.GetResource().(*KubeResourceList_Secrets_); ok {
		return x.Secrets
	}
	return nil
}

func (m *KubeResourceList) GetReplicationControllers() *KubeResourceList_ReplicationControllers {
	if x, ok := m.GetResource().(*KubeResourceList_ReplicationControllers_); ok {
		return x.ReplicationControllers
	}
	return nil
}

func (m *KubeResourceList) GetStorageClasses() *KubeResourceList_StorageClasses {
	if x, ok := m.GetResource().(*KubeResourceList_StorageClasses_); ok {
		return x.StorageClasses
	}
	return nil
}

func (m *KubeResourceList) GetPersistentVolumes() *KubeResourceList_PersistentVolumes {
	if x, ok := m.GetResource().(*KubeResourceList_PersistentVolumes_); ok {
		return x.PersistentVolumes
	}
	return nil
}

func (m *KubeResourceList) GetPersistentVolumeClaims() *KubeResourceList_PersistentVolumeClaims {
	if x, ok := m.GetResource().(*KubeResourceList_PersistentVolumeClaims_); ok {
		return x.PersistentVolumeClaims
	}
	return nil
}

func (m *KubeResourceList) GetRoles() *KubeResourceList_Roles {
	if x, ok := m.GetResource().(*KubeResourceList_Roles_); ok {
		return x.Roles
	}
	return nil
}

func (m *KubeResourceList) GetClusterRoles() *KubeResourceList_ClusterRoles {
	if x, ok := m.GetResource().(*KubeResourceList_ClusterRoles_); ok {
		return x.ClusterRoles
	}
	return nil
}

func (m *KubeResourceList) GetRoleBindings() *KubeResourceList_RoleBindings {
	if x, ok := m.GetResource().(*KubeResourceList_RoleBindings_); ok {
		return x.RoleBindings
	}
	return nil
}

func (m *KubeResourceList) GetClusterRoleBindings() *KubeResourceList_ClusterRoleBindings {
	if x, ok := m.GetResource().(*KubeResourceList_ClusterRoleBindings_); ok {
		return x.ClusterRoleBindings
	}
	return nil
}

func (m *KubeResourceList) GetCertificates() *KubeResourceList_Certificates {
	if x, ok := m.GetResource().(*KubeResourceList_Certificates_); ok {
		return x.Certificates
	}
	return nil
}

func (m *KubeResourceList) GetCronJobs() *KubeResourceList_CronJobs {
	if x, ok := m.GetResource().(*KubeResourceList_CronJobs_); ok {
		return x.CronJobs
	}
	return nil
}

func (m *KubeResourceList) GetRestics() *KubeResourceList_Restics {
	if x, ok := m.GetResource().(*KubeResourceList_Restics_); ok {
		return x.Restics
	}
	return nil
}

func (m *KubeResourceList) GetPostgreses() *KubeResourceList_Postgreses {
	if x, ok := m.GetResource().(*KubeResourceList_Postgreses_); ok {
		return x.Postgreses
	}
	return nil
}

func (m *KubeResourceList) GetElasticsearchs() *KubeResourceList_Elasticsearches {
	if x, ok := m.GetResource().(*KubeResourceList_Elasticsearchs); ok {
		return x.Elasticsearchs
	}
	return nil
}

func (m *KubeResourceList) GetDormantDatabases() *KubeResourceList_DormantDatabases {
	if x, ok := m.GetResource().(*KubeResourceList_DormantDatabases_); ok {
		return x.DormantDatabases
	}
	return nil
}

func (m *KubeResourceList) GetSnapshots() *KubeResourceList_Snapshots {
	if x, ok := m.GetResource().(*KubeResourceList_Snapshots_); ok {
		return x.Snapshots
	}
	return nil
}

func (m *KubeResourceList) GetEvents() *KubeResourceList_Events {
	if x, ok := m.GetResource().(*KubeResourceList_Events_); ok {
		return x.Events
	}
	return nil
}

func (m *KubeResourceList) GetIngresses() *KubeResourceList_Ingresses {
	if x, ok := m.GetResource().(*KubeResourceList_Ingresses_); ok {
		return x.Ingresses
	}
	return nil
}

func (m *KubeResourceList) GetPrometheuses() *KubeResourceList_Prometheuses {
	if x, ok := m.GetResource().(*KubeResourceList_Prometheuses_); ok {
		return x.Prometheuses
	}
	return nil
}

func (m *KubeResourceList) GetServiceMonitors() *KubeResourceList_ServiceMonitors {
	if x, ok := m.GetResource().(*KubeResourceList_ServiceMonitors_); ok {
		return x.ServiceMonitors
	}
	return nil
}

func (m *KubeResourceList) GetClusterAlerts() *KubeResourceList_ClusterAlerts {
	if x, ok := m.GetResource().(*KubeResourceList_ClusterAlerts_); ok {
		return x.ClusterAlerts
	}
	return nil
}

func (m *KubeResourceList) GetNodeAlerts() *KubeResourceList_NodeAlerts {
	if x, ok := m.GetResource().(*KubeResourceList_NodeAlerts_); ok {
		return x.NodeAlerts
	}
	return nil
}

func (m *KubeResourceList) GetPodAlerts() *KubeResourceList_PodAlerts {
	if x, ok := m.GetResource().(*KubeResourceList_PodAlerts_); ok {
		return x.PodAlerts
	}
	return nil
}

func (m *KubeResourceList) GetMysqls() *KubeResourceList_Mysqls {
	if x, ok := m.GetResource().(*KubeResourceList_Mysqls_); ok {
		return x.Mysqls
	}
	return nil
}

func (m *KubeResourceList) GetRedises() *KubeResourceList_Redises {
	if x, ok := m.GetResource().(*KubeResourceList_Redises_); ok {
		return x.Redises
	}
	return nil
}

func (m *KubeResourceList) GetMongodbs() *KubeResourceList_Mongodbs {
	if x, ok := m.GetResource().(*KubeResourceList_Mongodbs_); ok {
		return x.Mongodbs
	}
	return nil
}

func (m *KubeResourceList) GetMemcacheds() *KubeResourceList_Memcacheds {
	if x, ok := m.GetResource().(*KubeResourceList_Memcacheds_); ok {
		return x.Memcacheds
	}
	return nil
}

func (m *KubeResourceList) GetRecoveries() *KubeResourceList_Recoveries {
	if x, ok := m.GetResource().(*KubeResourceList_Recoveries_); ok {
		return x.Recoveries
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KubeResourceList) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KubeResourceList_OneofMarshaler, _KubeResourceList_OneofUnmarshaler, _KubeResourceList_OneofSizer, []interface{}{
		(*KubeResourceList_ConfigMaps_)(nil),
		(*KubeResourceList_DaemonSets_)(nil),
		(*KubeResourceList_Deployments_)(nil),
		(*KubeResourceList_Jobs_)(nil),
		(*KubeResourceList_Namespaces_)(nil),
		(*KubeResourceList_Nodes_)(nil),
		(*KubeResourceList_StatefulSets_)(nil),
		(*KubeResourceList_Pods_)(nil),
		(*KubeResourceList_ReplicaSets_)(nil),
		(*KubeResourceList_Services_)(nil),
		(*KubeResourceList_Secrets_)(nil),
		(*KubeResourceList_ReplicationControllers_)(nil),
		(*KubeResourceList_StorageClasses_)(nil),
		(*KubeResourceList_PersistentVolumes_)(nil),
		(*KubeResourceList_PersistentVolumeClaims_)(nil),
		(*KubeResourceList_Roles_)(nil),
		(*KubeResourceList_ClusterRoles_)(nil),
		(*KubeResourceList_RoleBindings_)(nil),
		(*KubeResourceList_ClusterRoleBindings_)(nil),
		(*KubeResourceList_Certificates_)(nil),
		(*KubeResourceList_CronJobs_)(nil),
		(*KubeResourceList_Restics_)(nil),
		(*KubeResourceList_Postgreses_)(nil),
		(*KubeResourceList_Elasticsearchs)(nil),
		(*KubeResourceList_DormantDatabases_)(nil),
		(*KubeResourceList_Snapshots_)(nil),
		(*KubeResourceList_Events_)(nil),
		(*KubeResourceList_Ingresses_)(nil),
		(*KubeResourceList_Prometheuses_)(nil),
		(*KubeResourceList_ServiceMonitors_)(nil),
		(*KubeResourceList_ClusterAlerts_)(nil),
		(*KubeResourceList_NodeAlerts_)(nil),
		(*KubeResourceList_PodAlerts_)(nil),
		(*KubeResourceList_Mysqls_)(nil),
		(*KubeResourceList_Redises_)(nil),
		(*KubeResourceList_Mongodbs_)(nil),
		(*KubeResourceList_Memcacheds_)(nil),
		(*KubeResourceList_Recoveries_)(nil),
	}
}

func _KubeResourceList_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KubeResourceList)
	// resource
	switch x := m.Resource.(type) {
	case *KubeResourceList_ConfigMaps_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConfigMaps); err != nil {
			return err
		}
	case *KubeResourceList_DaemonSets_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DaemonSets); err != nil {
			return err
		}
	case *KubeResourceList_Deployments_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deployments); err != nil {
			return err
		}
	case *KubeResourceList_Jobs_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Jobs); err != nil {
			return err
		}
	case *KubeResourceList_Namespaces_:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Namespaces); err != nil {
			return err
		}
	case *KubeResourceList_Nodes_:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nodes); err != nil {
			return err
		}
	case *KubeResourceList_StatefulSets_:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatefulSets); err != nil {
			return err
		}
	case *KubeResourceList_Pods_:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pods); err != nil {
			return err
		}
	case *KubeResourceList_ReplicaSets_:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplicaSets); err != nil {
			return err
		}
	case *KubeResourceList_Services_:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Services); err != nil {
			return err
		}
	case *KubeResourceList_Secrets_:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Secrets); err != nil {
			return err
		}
	case *KubeResourceList_ReplicationControllers_:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplicationControllers); err != nil {
			return err
		}
	case *KubeResourceList_StorageClasses_:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StorageClasses); err != nil {
			return err
		}
	case *KubeResourceList_PersistentVolumes_:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PersistentVolumes); err != nil {
			return err
		}
	case *KubeResourceList_PersistentVolumeClaims_:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PersistentVolumeClaims); err != nil {
			return err
		}
	case *KubeResourceList_Roles_:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Roles); err != nil {
			return err
		}
	case *KubeResourceList_ClusterRoles_:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClusterRoles); err != nil {
			return err
		}
	case *KubeResourceList_RoleBindings_:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RoleBindings); err != nil {
			return err
		}
	case *KubeResourceList_ClusterRoleBindings_:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClusterRoleBindings); err != nil {
			return err
		}
	case *KubeResourceList_Certificates_:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Certificates); err != nil {
			return err
		}
	case *KubeResourceList_CronJobs_:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CronJobs); err != nil {
			return err
		}
	case *KubeResourceList_Restics_:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Restics); err != nil {
			return err
		}
	case *KubeResourceList_Postgreses_:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Postgreses); err != nil {
			return err
		}
	case *KubeResourceList_Elasticsearchs:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Elasticsearchs); err != nil {
			return err
		}
	case *KubeResourceList_DormantDatabases_:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DormantDatabases); err != nil {
			return err
		}
	case *KubeResourceList_Snapshots_:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Snapshots); err != nil {
			return err
		}
	case *KubeResourceList_Events_:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Events); err != nil {
			return err
		}
	case *KubeResourceList_Ingresses_:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ingresses); err != nil {
			return err
		}
	case *KubeResourceList_Prometheuses_:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prometheuses); err != nil {
			return err
		}
	case *KubeResourceList_ServiceMonitors_:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServiceMonitors); err != nil {
			return err
		}
	case *KubeResourceList_ClusterAlerts_:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClusterAlerts); err != nil {
			return err
		}
	case *KubeResourceList_NodeAlerts_:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NodeAlerts); err != nil {
			return err
		}
	case *KubeResourceList_PodAlerts_:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PodAlerts); err != nil {
			return err
		}
	case *KubeResourceList_Mysqls_:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mysqls); err != nil {
			return err
		}
	case *KubeResourceList_Redises_:
		b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Redises); err != nil {
			return err
		}
	case *KubeResourceList_Mongodbs_:
		b.EncodeVarint(38<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mongodbs); err != nil {
			return err
		}
	case *KubeResourceList_Memcacheds_:
		b.EncodeVarint(39<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Memcacheds); err != nil {
			return err
		}
	case *KubeResourceList_Recoveries_:
		b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Recoveries); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("KubeResourceList.Resource has unexpected type %T", x)
	}
	return nil
}

func _KubeResourceList_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KubeResourceList)
	switch tag {
	case 3: // resource.config_maps
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_ConfigMaps)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_ConfigMaps_{msg}
		return true, err
	case 4: // resource.daemon_sets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_DaemonSets)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_DaemonSets_{msg}
		return true, err
	case 5: // resource.deployments
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Deployments)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Deployments_{msg}
		return true, err
	case 6: // resource.jobs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Jobs)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Jobs_{msg}
		return true, err
	case 7: // resource.namespaces
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Namespaces)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Namespaces_{msg}
		return true, err
	case 8: // resource.nodes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Nodes)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Nodes_{msg}
		return true, err
	case 9: // resource.stateful_sets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_StatefulSets)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_StatefulSets_{msg}
		return true, err
	case 10: // resource.pods
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Pods)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Pods_{msg}
		return true, err
	case 11: // resource.replica_sets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_ReplicaSets)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_ReplicaSets_{msg}
		return true, err
	case 12: // resource.services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Services)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Services_{msg}
		return true, err
	case 13: // resource.secrets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Secrets)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Secrets_{msg}
		return true, err
	case 14: // resource.replication_controllers
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_ReplicationControllers)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_ReplicationControllers_{msg}
		return true, err
	case 15: // resource.storage_classes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_StorageClasses)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_StorageClasses_{msg}
		return true, err
	case 16: // resource.persistent_volumes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_PersistentVolumes)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_PersistentVolumes_{msg}
		return true, err
	case 17: // resource.persistent_volume_claims
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_PersistentVolumeClaims)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_PersistentVolumeClaims_{msg}
		return true, err
	case 18: // resource.roles
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Roles)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Roles_{msg}
		return true, err
	case 19: // resource.cluster_roles
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_ClusterRoles)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_ClusterRoles_{msg}
		return true, err
	case 20: // resource.role_bindings
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_RoleBindings)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_RoleBindings_{msg}
		return true, err
	case 21: // resource.cluster_role_bindings
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_ClusterRoleBindings)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_ClusterRoleBindings_{msg}
		return true, err
	case 22: // resource.certificates
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Certificates)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Certificates_{msg}
		return true, err
	case 23: // resource.cron_jobs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_CronJobs)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_CronJobs_{msg}
		return true, err
	case 24: // resource.restics
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Restics)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Restics_{msg}
		return true, err
	case 25: // resource.postgreses
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Postgreses)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Postgreses_{msg}
		return true, err
	case 26: // resource.elasticsearchs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Elasticsearches)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Elasticsearchs{msg}
		return true, err
	case 27: // resource.dormant_databases
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_DormantDatabases)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_DormantDatabases_{msg}
		return true, err
	case 28: // resource.snapshots
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Snapshots)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Snapshots_{msg}
		return true, err
	case 29: // resource.events
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Events)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Events_{msg}
		return true, err
	case 30: // resource.ingresses
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Ingresses)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Ingresses_{msg}
		return true, err
	case 31: // resource.prometheuses
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Prometheuses)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Prometheuses_{msg}
		return true, err
	case 32: // resource.service_monitors
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_ServiceMonitors)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_ServiceMonitors_{msg}
		return true, err
	case 33: // resource.cluster_alerts
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_ClusterAlerts)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_ClusterAlerts_{msg}
		return true, err
	case 34: // resource.node_alerts
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_NodeAlerts)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_NodeAlerts_{msg}
		return true, err
	case 35: // resource.pod_alerts
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_PodAlerts)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_PodAlerts_{msg}
		return true, err
	case 36: // resource.mysqls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Mysqls)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Mysqls_{msg}
		return true, err
	case 37: // resource.redises
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Redises)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Redises_{msg}
		return true, err
	case 38: // resource.mongodbs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Mongodbs)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Mongodbs_{msg}
		return true, err
	case 39: // resource.memcacheds
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Memcacheds)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Memcacheds_{msg}
		return true, err
	case 40: // resource.recoveries
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Recoveries)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Recoveries_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _KubeResourceList_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KubeResourceList)
	// resource
	switch x := m.Resource.(type) {
	case *KubeResourceList_ConfigMaps_:
		s := proto.Size(x.ConfigMaps)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_DaemonSets_:
		s := proto.Size(x.DaemonSets)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Deployments_:
		s := proto.Size(x.Deployments)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Jobs_:
		s := proto.Size(x.Jobs)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Namespaces_:
		s := proto.Size(x.Namespaces)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Nodes_:
		s := proto.Size(x.Nodes)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_StatefulSets_:
		s := proto.Size(x.StatefulSets)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Pods_:
		s := proto.Size(x.Pods)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_ReplicaSets_:
		s := proto.Size(x.ReplicaSets)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Services_:
		s := proto.Size(x.Services)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Secrets_:
		s := proto.Size(x.Secrets)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_ReplicationControllers_:
		s := proto.Size(x.ReplicationControllers)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_StorageClasses_:
		s := proto.Size(x.StorageClasses)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_PersistentVolumes_:
		s := proto.Size(x.PersistentVolumes)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_PersistentVolumeClaims_:
		s := proto.Size(x.PersistentVolumeClaims)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Roles_:
		s := proto.Size(x.Roles)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_ClusterRoles_:
		s := proto.Size(x.ClusterRoles)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_RoleBindings_:
		s := proto.Size(x.RoleBindings)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_ClusterRoleBindings_:
		s := proto.Size(x.ClusterRoleBindings)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Certificates_:
		s := proto.Size(x.Certificates)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_CronJobs_:
		s := proto.Size(x.CronJobs)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Restics_:
		s := proto.Size(x.Restics)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Postgreses_:
		s := proto.Size(x.Postgreses)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Elasticsearchs:
		s := proto.Size(x.Elasticsearchs)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_DormantDatabases_:
		s := proto.Size(x.DormantDatabases)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Snapshots_:
		s := proto.Size(x.Snapshots)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Events_:
		s := proto.Size(x.Events)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Ingresses_:
		s := proto.Size(x.Ingresses)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Prometheuses_:
		s := proto.Size(x.Prometheuses)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_ServiceMonitors_:
		s := proto.Size(x.ServiceMonitors)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_ClusterAlerts_:
		s := proto.Size(x.ClusterAlerts)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_NodeAlerts_:
		s := proto.Size(x.NodeAlerts)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_PodAlerts_:
		s := proto.Size(x.PodAlerts)
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Mysqls_:
		s := proto.Size(x.Mysqls)
		n += proto.SizeVarint(36<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Redises_:
		s := proto.Size(x.Redises)
		n += proto.SizeVarint(37<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Mongodbs_:
		s := proto.Size(x.Mongodbs)
		n += proto.SizeVarint(38<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Memcacheds_:
		s := proto.Size(x.Memcacheds)
		n += proto.SizeVarint(39<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Recoveries_:
		s := proto.Size(x.Recoveries)
		n += proto.SizeVarint(40<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type KubeResourceList_Events struct {
	Items []*Event `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Events) Reset()                    { *m = KubeResourceList_Events{} }
func (m *KubeResourceList_Events) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Events) ProtoMessage()               {}
func (*KubeResourceList_Events) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *KubeResourceList_Events) GetItems() []*Event {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_ConfigMaps struct {
	Items []*ConfigMap `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_ConfigMaps) Reset()                    { *m = KubeResourceList_ConfigMaps{} }
func (m *KubeResourceList_ConfigMaps) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_ConfigMaps) ProtoMessage()               {}
func (*KubeResourceList_ConfigMaps) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 1} }

func (m *KubeResourceList_ConfigMaps) GetItems() []*ConfigMap {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_DaemonSets struct {
	Items []*DaemonSet `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_DaemonSets) Reset()                    { *m = KubeResourceList_DaemonSets{} }
func (m *KubeResourceList_DaemonSets) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_DaemonSets) ProtoMessage()               {}
func (*KubeResourceList_DaemonSets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 2} }

func (m *KubeResourceList_DaemonSets) GetItems() []*DaemonSet {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Deployments struct {
	Items []*Deployment `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Deployments) Reset()         { *m = KubeResourceList_Deployments{} }
func (m *KubeResourceList_Deployments) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_Deployments) ProtoMessage()    {}
func (*KubeResourceList_Deployments) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 3}
}

func (m *KubeResourceList_Deployments) GetItems() []*Deployment {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Jobs struct {
	Items []*Job `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Jobs) Reset()                    { *m = KubeResourceList_Jobs{} }
func (m *KubeResourceList_Jobs) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Jobs) ProtoMessage()               {}
func (*KubeResourceList_Jobs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 4} }

func (m *KubeResourceList_Jobs) GetItems() []*Job {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Namespaces struct {
	Items []*Namespace `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Namespaces) Reset()                    { *m = KubeResourceList_Namespaces{} }
func (m *KubeResourceList_Namespaces) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Namespaces) ProtoMessage()               {}
func (*KubeResourceList_Namespaces) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 5} }

func (m *KubeResourceList_Namespaces) GetItems() []*Namespace {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Nodes struct {
	Items []*Node `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Nodes) Reset()                    { *m = KubeResourceList_Nodes{} }
func (m *KubeResourceList_Nodes) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Nodes) ProtoMessage()               {}
func (*KubeResourceList_Nodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 6} }

func (m *KubeResourceList_Nodes) GetItems() []*Node {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_StatefulSets struct {
	Items []*StatefulSet `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_StatefulSets) Reset()         { *m = KubeResourceList_StatefulSets{} }
func (m *KubeResourceList_StatefulSets) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_StatefulSets) ProtoMessage()    {}
func (*KubeResourceList_StatefulSets) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 7}
}

func (m *KubeResourceList_StatefulSets) GetItems() []*StatefulSet {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Pods struct {
	Items []*Pod `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Pods) Reset()                    { *m = KubeResourceList_Pods{} }
func (m *KubeResourceList_Pods) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Pods) ProtoMessage()               {}
func (*KubeResourceList_Pods) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 8} }

func (m *KubeResourceList_Pods) GetItems() []*Pod {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_ReplicaSets struct {
	Items []*ReplicaSet `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_ReplicaSets) Reset()         { *m = KubeResourceList_ReplicaSets{} }
func (m *KubeResourceList_ReplicaSets) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_ReplicaSets) ProtoMessage()    {}
func (*KubeResourceList_ReplicaSets) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 9}
}

func (m *KubeResourceList_ReplicaSets) GetItems() []*ReplicaSet {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Services struct {
	Items []*Service `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Services) Reset()                    { *m = KubeResourceList_Services{} }
func (m *KubeResourceList_Services) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Services) ProtoMessage()               {}
func (*KubeResourceList_Services) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 10} }

func (m *KubeResourceList_Services) GetItems() []*Service {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Secrets struct {
	Items []*Secret `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Secrets) Reset()                    { *m = KubeResourceList_Secrets{} }
func (m *KubeResourceList_Secrets) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Secrets) ProtoMessage()               {}
func (*KubeResourceList_Secrets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 11} }

func (m *KubeResourceList_Secrets) GetItems() []*Secret {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_ReplicationControllers struct {
	Items []*ReplicationController `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_ReplicationControllers) Reset() {
	*m = KubeResourceList_ReplicationControllers{}
}
func (m *KubeResourceList_ReplicationControllers) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_ReplicationControllers) ProtoMessage()    {}
func (*KubeResourceList_ReplicationControllers) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 12}
}

func (m *KubeResourceList_ReplicationControllers) GetItems() []*ReplicationController {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_StorageClasses struct {
	Items []*StorageClass `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_StorageClasses) Reset()         { *m = KubeResourceList_StorageClasses{} }
func (m *KubeResourceList_StorageClasses) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_StorageClasses) ProtoMessage()    {}
func (*KubeResourceList_StorageClasses) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 13}
}

func (m *KubeResourceList_StorageClasses) GetItems() []*StorageClass {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_PersistentVolumes struct {
	Items []*PersistentVolume `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_PersistentVolumes) Reset()         { *m = KubeResourceList_PersistentVolumes{} }
func (m *KubeResourceList_PersistentVolumes) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_PersistentVolumes) ProtoMessage()    {}
func (*KubeResourceList_PersistentVolumes) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 14}
}

func (m *KubeResourceList_PersistentVolumes) GetItems() []*PersistentVolume {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_PersistentVolumeClaims struct {
	Items []*PersistentVolumeClaim `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_PersistentVolumeClaims) Reset() {
	*m = KubeResourceList_PersistentVolumeClaims{}
}
func (m *KubeResourceList_PersistentVolumeClaims) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_PersistentVolumeClaims) ProtoMessage()    {}
func (*KubeResourceList_PersistentVolumeClaims) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 15}
}

func (m *KubeResourceList_PersistentVolumeClaims) GetItems() []*PersistentVolumeClaim {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_ClusterAlerts struct {
	Items []*ClusterAlert `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_ClusterAlerts) Reset()         { *m = KubeResourceList_ClusterAlerts{} }
func (m *KubeResourceList_ClusterAlerts) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_ClusterAlerts) ProtoMessage()    {}
func (*KubeResourceList_ClusterAlerts) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 16}
}

func (m *KubeResourceList_ClusterAlerts) GetItems() []*ClusterAlert {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_NodeAlerts struct {
	Items []*NodeAlert `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_NodeAlerts) Reset()         { *m = KubeResourceList_NodeAlerts{} }
func (m *KubeResourceList_NodeAlerts) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_NodeAlerts) ProtoMessage()    {}
func (*KubeResourceList_NodeAlerts) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 17}
}

func (m *KubeResourceList_NodeAlerts) GetItems() []*NodeAlert {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_PodAlerts struct {
	Items []*PodAlert `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_PodAlerts) Reset()                    { *m = KubeResourceList_PodAlerts{} }
func (m *KubeResourceList_PodAlerts) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_PodAlerts) ProtoMessage()               {}
func (*KubeResourceList_PodAlerts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 18} }

func (m *KubeResourceList_PodAlerts) GetItems() []*PodAlert {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Roles struct {
	Items []*Role `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Roles) Reset()                    { *m = KubeResourceList_Roles{} }
func (m *KubeResourceList_Roles) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Roles) ProtoMessage()               {}
func (*KubeResourceList_Roles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 19} }

func (m *KubeResourceList_Roles) GetItems() []*Role {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_ClusterRoles struct {
	Items []*ClusterRole `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_ClusterRoles) Reset()         { *m = KubeResourceList_ClusterRoles{} }
func (m *KubeResourceList_ClusterRoles) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_ClusterRoles) ProtoMessage()    {}
func (*KubeResourceList_ClusterRoles) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 20}
}

func (m *KubeResourceList_ClusterRoles) GetItems() []*ClusterRole {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_RoleBindings struct {
	Items []*RoleBinding `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_RoleBindings) Reset()         { *m = KubeResourceList_RoleBindings{} }
func (m *KubeResourceList_RoleBindings) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_RoleBindings) ProtoMessage()    {}
func (*KubeResourceList_RoleBindings) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 21}
}

func (m *KubeResourceList_RoleBindings) GetItems() []*RoleBinding {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_ClusterRoleBindings struct {
	Items []*ClusterRoleBinding `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_ClusterRoleBindings) Reset()         { *m = KubeResourceList_ClusterRoleBindings{} }
func (m *KubeResourceList_ClusterRoleBindings) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_ClusterRoleBindings) ProtoMessage()    {}
func (*KubeResourceList_ClusterRoleBindings) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 22}
}

func (m *KubeResourceList_ClusterRoleBindings) GetItems() []*ClusterRoleBinding {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Certificates struct {
	Items []*Certificate `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Certificates) Reset()         { *m = KubeResourceList_Certificates{} }
func (m *KubeResourceList_Certificates) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_Certificates) ProtoMessage()    {}
func (*KubeResourceList_Certificates) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 23}
}

func (m *KubeResourceList_Certificates) GetItems() []*Certificate {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_CronJobs struct {
	Items []*CronJob `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_CronJobs) Reset()                    { *m = KubeResourceList_CronJobs{} }
func (m *KubeResourceList_CronJobs) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_CronJobs) ProtoMessage()               {}
func (*KubeResourceList_CronJobs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 24} }

func (m *KubeResourceList_CronJobs) GetItems() []*CronJob {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Postgreses struct {
	Items []*Postgres `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Postgreses) Reset()         { *m = KubeResourceList_Postgreses{} }
func (m *KubeResourceList_Postgreses) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_Postgreses) ProtoMessage()    {}
func (*KubeResourceList_Postgreses) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 25}
}

func (m *KubeResourceList_Postgreses) GetItems() []*Postgres {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Elasticsearches struct {
	Items []*Elasticsearch `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Elasticsearches) Reset()         { *m = KubeResourceList_Elasticsearches{} }
func (m *KubeResourceList_Elasticsearches) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_Elasticsearches) ProtoMessage()    {}
func (*KubeResourceList_Elasticsearches) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 26}
}

func (m *KubeResourceList_Elasticsearches) GetItems() []*Elasticsearch {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_DormantDatabases struct {
	Items []*DormantDatabase `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_DormantDatabases) Reset()         { *m = KubeResourceList_DormantDatabases{} }
func (m *KubeResourceList_DormantDatabases) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_DormantDatabases) ProtoMessage()    {}
func (*KubeResourceList_DormantDatabases) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 27}
}

func (m *KubeResourceList_DormantDatabases) GetItems() []*DormantDatabase {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Mysqls struct {
	Items []*Mysql `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Mysqls) Reset()                    { *m = KubeResourceList_Mysqls{} }
func (m *KubeResourceList_Mysqls) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Mysqls) ProtoMessage()               {}
func (*KubeResourceList_Mysqls) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 28} }

func (m *KubeResourceList_Mysqls) GetItems() []*Mysql {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Redises struct {
	Items []*Redis `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Redises) Reset()                    { *m = KubeResourceList_Redises{} }
func (m *KubeResourceList_Redises) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Redises) ProtoMessage()               {}
func (*KubeResourceList_Redises) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 29} }

func (m *KubeResourceList_Redises) GetItems() []*Redis {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Mongodbs struct {
	Items []*Mongodb `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Mongodbs) Reset()                    { *m = KubeResourceList_Mongodbs{} }
func (m *KubeResourceList_Mongodbs) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Mongodbs) ProtoMessage()               {}
func (*KubeResourceList_Mongodbs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 30} }

func (m *KubeResourceList_Mongodbs) GetItems() []*Mongodb {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Memcacheds struct {
	Items []*Memcached `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Memcacheds) Reset()         { *m = KubeResourceList_Memcacheds{} }
func (m *KubeResourceList_Memcacheds) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_Memcacheds) ProtoMessage()    {}
func (*KubeResourceList_Memcacheds) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 31}
}

func (m *KubeResourceList_Memcacheds) GetItems() []*Memcached {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Recoveries struct {
	Items []*Recovery `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Recoveries) Reset()         { *m = KubeResourceList_Recoveries{} }
func (m *KubeResourceList_Recoveries) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_Recoveries) ProtoMessage()    {}
func (*KubeResourceList_Recoveries) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 32}
}

func (m *KubeResourceList_Recoveries) GetItems() []*Recovery {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Snapshots struct {
	Items []*Snapshot `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Snapshots) Reset()                    { *m = KubeResourceList_Snapshots{} }
func (m *KubeResourceList_Snapshots) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Snapshots) ProtoMessage()               {}
func (*KubeResourceList_Snapshots) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 33} }

func (m *KubeResourceList_Snapshots) GetItems() []*Snapshot {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Restics struct {
	Items []*Restic `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Restics) Reset()                    { *m = KubeResourceList_Restics{} }
func (m *KubeResourceList_Restics) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Restics) ProtoMessage()               {}
func (*KubeResourceList_Restics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 34} }

func (m *KubeResourceList_Restics) GetItems() []*Restic {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Ingresses struct {
	Items []*Ingress `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Ingresses) Reset()                    { *m = KubeResourceList_Ingresses{} }
func (m *KubeResourceList_Ingresses) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Ingresses) ProtoMessage()               {}
func (*KubeResourceList_Ingresses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 35} }

func (m *KubeResourceList_Ingresses) GetItems() []*Ingress {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Prometheuses struct {
	Items []*Prometheus `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Prometheuses) Reset()         { *m = KubeResourceList_Prometheuses{} }
func (m *KubeResourceList_Prometheuses) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_Prometheuses) ProtoMessage()    {}
func (*KubeResourceList_Prometheuses) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 36}
}

func (m *KubeResourceList_Prometheuses) GetItems() []*Prometheus {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_ServiceMonitors struct {
	Items []*ServiceMonitor `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_ServiceMonitors) Reset()         { *m = KubeResourceList_ServiceMonitors{} }
func (m *KubeResourceList_ServiceMonitors) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_ServiceMonitors) ProtoMessage()    {}
func (*KubeResourceList_ServiceMonitors) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 37}
}

func (m *KubeResourceList_ServiceMonitors) GetItems() []*ServiceMonitor {
	if m != nil {
		return m.Items
	}
	return nil
}

// TODO: (@sadlil): when kubernetes moves to protobuf completely import fileds from there.
type KubeResource struct {
	ApiVersion string   `protobuf:"bytes,1,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
	Kind       string   `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	Raw        *Raw     `protobuf:"bytes,3,opt,name=raw" json:"raw,omitempty"`
	Events     []*Event `protobuf:"bytes,4,rep,name=events" json:"events,omitempty"`
	// Types that are valid to be assigned to Resource:
	//	*KubeResource_ConfigMap
	//	*KubeResource_DaemonSet
	//	*KubeResource_Deployment
	//	*KubeResource_Job
	//	*KubeResource_Namespace
	//	*KubeResource_Node
	//	*KubeResource_StatefulSet
	//	*KubeResource_Pod
	//	*KubeResource_ReplicaSet
	//	*KubeResource_Service
	//	*KubeResource_Secret
	//	*KubeResource_ReplicationController
	//	*KubeResource_StorageClass
	//	*KubeResource_PersistentVolume
	//	*KubeResource_PersistentVolumeClaim
	//	*KubeResource_Role
	//	*KubeResource_ClusterRole
	//	*KubeResource_RoleBinding
	//	*KubeResource_ClusterRoleBinding
	//	*KubeResource_Certificate
	//	*KubeResource_CronJob
	//	*KubeResource_Restic
	//	*KubeResource_Postgres
	//	*KubeResource_Elasticsearch
	//	*KubeResource_DormantDatabase
	//	*KubeResource_Snapshot
	//	*KubeResource_Ingress
	//	*KubeResource_Prometheus
	//	*KubeResource_ServiceMonitors
	//	*KubeResource_ClusterAlert
	//	*KubeResource_NodeAlert
	//	*KubeResource_PodAlert
	//	*KubeResource_Mysql
	//	*KubeResource_Redis
	//	*KubeResource_Mongodb
	//	*KubeResource_Memcached
	//	*KubeResource_Recovery
	Resource isKubeResource_Resource `protobuf_oneof:"resource"`
}

func (m *KubeResource) Reset()                    { *m = KubeResource{} }
func (m *KubeResource) String() string            { return proto.CompactTextString(m) }
func (*KubeResource) ProtoMessage()               {}
func (*KubeResource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type isKubeResource_Resource interface {
	isKubeResource_Resource()
}

type KubeResource_ConfigMap struct {
	ConfigMap *ConfigMap `protobuf:"bytes,5,opt,name=config_map,json=configMap,oneof"`
}
type KubeResource_DaemonSet struct {
	DaemonSet *DaemonSet `protobuf:"bytes,6,opt,name=daemon_set,json=daemonSet,oneof"`
}
type KubeResource_Deployment struct {
	Deployment *Deployment `protobuf:"bytes,7,opt,name=deployment,oneof"`
}
type KubeResource_Job struct {
	Job *Job `protobuf:"bytes,8,opt,name=job,oneof"`
}
type KubeResource_Namespace struct {
	Namespace *Namespace `protobuf:"bytes,9,opt,name=namespace,oneof"`
}
type KubeResource_Node struct {
	Node *Node `protobuf:"bytes,10,opt,name=node,oneof"`
}
type KubeResource_StatefulSet struct {
	StatefulSet *StatefulSet `protobuf:"bytes,11,opt,name=stateful_set,json=statefulSet,oneof"`
}
type KubeResource_Pod struct {
	Pod *Pod `protobuf:"bytes,12,opt,name=pod,oneof"`
}
type KubeResource_ReplicaSet struct {
	ReplicaSet *ReplicaSet `protobuf:"bytes,13,opt,name=replica_set,json=replicaSet,oneof"`
}
type KubeResource_Service struct {
	Service *Service `protobuf:"bytes,14,opt,name=service,oneof"`
}
type KubeResource_Secret struct {
	Secret *Secret `protobuf:"bytes,15,opt,name=secret,oneof"`
}
type KubeResource_ReplicationController struct {
	ReplicationController *ReplicationController `protobuf:"bytes,16,opt,name=replication_controller,json=replicationController,oneof"`
}
type KubeResource_StorageClass struct {
	StorageClass *StorageClass `protobuf:"bytes,17,opt,name=storage_class,json=storageClass,oneof"`
}
type KubeResource_PersistentVolume struct {
	PersistentVolume *PersistentVolume `protobuf:"bytes,18,opt,name=persistent_volume,json=persistentVolume,oneof"`
}
type KubeResource_PersistentVolumeClaim struct {
	PersistentVolumeClaim *PersistentVolumeClaim `protobuf:"bytes,19,opt,name=persistent_volume_claim,json=persistentVolumeClaim,oneof"`
}
type KubeResource_Role struct {
	Role *Role `protobuf:"bytes,20,opt,name=role,oneof"`
}
type KubeResource_ClusterRole struct {
	ClusterRole *ClusterRole `protobuf:"bytes,21,opt,name=cluster_role,json=clusterRole,oneof"`
}
type KubeResource_RoleBinding struct {
	RoleBinding *RoleBinding `protobuf:"bytes,22,opt,name=role_binding,json=roleBinding,oneof"`
}
type KubeResource_ClusterRoleBinding struct {
	ClusterRoleBinding *ClusterRoleBinding `protobuf:"bytes,23,opt,name=cluster_role_binding,json=clusterRoleBinding,oneof"`
}
type KubeResource_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,24,opt,name=certificate,oneof"`
}
type KubeResource_CronJob struct {
	CronJob *CronJob `protobuf:"bytes,25,opt,name=cron_job,json=cronJob,oneof"`
}
type KubeResource_Restic struct {
	Restic *Restic `protobuf:"bytes,26,opt,name=restic,oneof"`
}
type KubeResource_Postgres struct {
	Postgres *Postgres `protobuf:"bytes,27,opt,name=postgres,oneof"`
}
type KubeResource_Elasticsearch struct {
	Elasticsearch *Elasticsearch `protobuf:"bytes,28,opt,name=elasticsearch,oneof"`
}
type KubeResource_DormantDatabase struct {
	DormantDatabase *DormantDatabase `protobuf:"bytes,29,opt,name=dormant_database,json=dormantDatabase,oneof"`
}
type KubeResource_Snapshot struct {
	Snapshot *Snapshot `protobuf:"bytes,30,opt,name=snapshot,oneof"`
}
type KubeResource_Ingress struct {
	Ingress *Ingress `protobuf:"bytes,31,opt,name=ingress,oneof"`
}
type KubeResource_Prometheus struct {
	Prometheus *Prometheus `protobuf:"bytes,32,opt,name=prometheus,oneof"`
}
type KubeResource_ServiceMonitors struct {
	ServiceMonitors *ServiceMonitor `protobuf:"bytes,33,opt,name=service_monitors,json=serviceMonitors,oneof"`
}
type KubeResource_ClusterAlert struct {
	ClusterAlert *ClusterAlert `protobuf:"bytes,34,opt,name=cluster_alert,json=clusterAlert,oneof"`
}
type KubeResource_NodeAlert struct {
	NodeAlert *NodeAlert `protobuf:"bytes,35,opt,name=node_alert,json=nodeAlert,oneof"`
}
type KubeResource_PodAlert struct {
	PodAlert *PodAlert `protobuf:"bytes,36,opt,name=pod_alert,json=podAlert,oneof"`
}
type KubeResource_Mysql struct {
	Mysql *Mysql `protobuf:"bytes,37,opt,name=mysql,oneof"`
}
type KubeResource_Redis struct {
	Redis *Redis `protobuf:"bytes,38,opt,name=redis,oneof"`
}
type KubeResource_Mongodb struct {
	Mongodb *Mongodb `protobuf:"bytes,39,opt,name=mongodb,oneof"`
}
type KubeResource_Memcached struct {
	Memcached *Memcached `protobuf:"bytes,40,opt,name=memcached,oneof"`
}
type KubeResource_Recovery struct {
	Recovery *Recovery `protobuf:"bytes,41,opt,name=recovery,oneof"`
}

func (*KubeResource_ConfigMap) isKubeResource_Resource()             {}
func (*KubeResource_DaemonSet) isKubeResource_Resource()             {}
func (*KubeResource_Deployment) isKubeResource_Resource()            {}
func (*KubeResource_Job) isKubeResource_Resource()                   {}
func (*KubeResource_Namespace) isKubeResource_Resource()             {}
func (*KubeResource_Node) isKubeResource_Resource()                  {}
func (*KubeResource_StatefulSet) isKubeResource_Resource()           {}
func (*KubeResource_Pod) isKubeResource_Resource()                   {}
func (*KubeResource_ReplicaSet) isKubeResource_Resource()            {}
func (*KubeResource_Service) isKubeResource_Resource()               {}
func (*KubeResource_Secret) isKubeResource_Resource()                {}
func (*KubeResource_ReplicationController) isKubeResource_Resource() {}
func (*KubeResource_StorageClass) isKubeResource_Resource()          {}
func (*KubeResource_PersistentVolume) isKubeResource_Resource()      {}
func (*KubeResource_PersistentVolumeClaim) isKubeResource_Resource() {}
func (*KubeResource_Role) isKubeResource_Resource()                  {}
func (*KubeResource_ClusterRole) isKubeResource_Resource()           {}
func (*KubeResource_RoleBinding) isKubeResource_Resource()           {}
func (*KubeResource_ClusterRoleBinding) isKubeResource_Resource()    {}
func (*KubeResource_Certificate) isKubeResource_Resource()           {}
func (*KubeResource_CronJob) isKubeResource_Resource()               {}
func (*KubeResource_Restic) isKubeResource_Resource()                {}
func (*KubeResource_Postgres) isKubeResource_Resource()              {}
func (*KubeResource_Elasticsearch) isKubeResource_Resource()         {}
func (*KubeResource_DormantDatabase) isKubeResource_Resource()       {}
func (*KubeResource_Snapshot) isKubeResource_Resource()              {}
func (*KubeResource_Ingress) isKubeResource_Resource()               {}
func (*KubeResource_Prometheus) isKubeResource_Resource()            {}
func (*KubeResource_ServiceMonitors) isKubeResource_Resource()       {}
func (*KubeResource_ClusterAlert) isKubeResource_Resource()          {}
func (*KubeResource_NodeAlert) isKubeResource_Resource()             {}
func (*KubeResource_PodAlert) isKubeResource_Resource()              {}
func (*KubeResource_Mysql) isKubeResource_Resource()                 {}
func (*KubeResource_Redis) isKubeResource_Resource()                 {}
func (*KubeResource_Mongodb) isKubeResource_Resource()               {}
func (*KubeResource_Memcached) isKubeResource_Resource()             {}
func (*KubeResource_Recovery) isKubeResource_Resource()              {}

func (m *KubeResource) GetResource() isKubeResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *KubeResource) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *KubeResource) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *KubeResource) GetRaw() *Raw {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *KubeResource) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *KubeResource) GetConfigMap() *ConfigMap {
	if x, ok := m.GetResource().(*KubeResource_ConfigMap); ok {
		return x.ConfigMap
	}
	return nil
}

func (m *KubeResource) GetDaemonSet() *DaemonSet {
	if x, ok := m.GetResource().(*KubeResource_DaemonSet); ok {
		return x.DaemonSet
	}
	return nil
}

func (m *KubeResource) GetDeployment() *Deployment {
	if x, ok := m.GetResource().(*KubeResource_Deployment); ok {
		return x.Deployment
	}
	return nil
}

func (m *KubeResource) GetJob() *Job {
	if x, ok := m.GetResource().(*KubeResource_Job); ok {
		return x.Job
	}
	return nil
}

func (m *KubeResource) GetNamespace() *Namespace {
	if x, ok := m.GetResource().(*KubeResource_Namespace); ok {
		return x.Namespace
	}
	return nil
}

func (m *KubeResource) GetNode() *Node {
	if x, ok := m.GetResource().(*KubeResource_Node); ok {
		return x.Node
	}
	return nil
}

func (m *KubeResource) GetStatefulSet() *StatefulSet {
	if x, ok := m.GetResource().(*KubeResource_StatefulSet); ok {
		return x.StatefulSet
	}
	return nil
}

func (m *KubeResource) GetPod() *Pod {
	if x, ok := m.GetResource().(*KubeResource_Pod); ok {
		return x.Pod
	}
	return nil
}

func (m *KubeResource) GetReplicaSet() *ReplicaSet {
	if x, ok := m.GetResource().(*KubeResource_ReplicaSet); ok {
		return x.ReplicaSet
	}
	return nil
}

func (m *KubeResource) GetService() *Service {
	if x, ok := m.GetResource().(*KubeResource_Service); ok {
		return x.Service
	}
	return nil
}

func (m *KubeResource) GetSecret() *Secret {
	if x, ok := m.GetResource().(*KubeResource_Secret); ok {
		return x.Secret
	}
	return nil
}

func (m *KubeResource) GetReplicationController() *ReplicationController {
	if x, ok := m.GetResource().(*KubeResource_ReplicationController); ok {
		return x.ReplicationController
	}
	return nil
}

func (m *KubeResource) GetStorageClass() *StorageClass {
	if x, ok := m.GetResource().(*KubeResource_StorageClass); ok {
		return x.StorageClass
	}
	return nil
}

func (m *KubeResource) GetPersistentVolume() *PersistentVolume {
	if x, ok := m.GetResource().(*KubeResource_PersistentVolume); ok {
		return x.PersistentVolume
	}
	return nil
}

func (m *KubeResource) GetPersistentVolumeClaim() *PersistentVolumeClaim {
	if x, ok := m.GetResource().(*KubeResource_PersistentVolumeClaim); ok {
		return x.PersistentVolumeClaim
	}
	return nil
}

func (m *KubeResource) GetRole() *Role {
	if x, ok := m.GetResource().(*KubeResource_Role); ok {
		return x.Role
	}
	return nil
}

func (m *KubeResource) GetClusterRole() *ClusterRole {
	if x, ok := m.GetResource().(*KubeResource_ClusterRole); ok {
		return x.ClusterRole
	}
	return nil
}

func (m *KubeResource) GetRoleBinding() *RoleBinding {
	if x, ok := m.GetResource().(*KubeResource_RoleBinding); ok {
		return x.RoleBinding
	}
	return nil
}

func (m *KubeResource) GetClusterRoleBinding() *ClusterRoleBinding {
	if x, ok := m.GetResource().(*KubeResource_ClusterRoleBinding); ok {
		return x.ClusterRoleBinding
	}
	return nil
}

func (m *KubeResource) GetCertificate() *Certificate {
	if x, ok := m.GetResource().(*KubeResource_Certificate); ok {
		return x.Certificate
	}
	return nil
}

func (m *KubeResource) GetCronJob() *CronJob {
	if x, ok := m.GetResource().(*KubeResource_CronJob); ok {
		return x.CronJob
	}
	return nil
}

func (m *KubeResource) GetRestic() *Restic {
	if x, ok := m.GetResource().(*KubeResource_Restic); ok {
		return x.Restic
	}
	return nil
}

func (m *KubeResource) GetPostgres() *Postgres {
	if x, ok := m.GetResource().(*KubeResource_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (m *KubeResource) GetElasticsearch() *Elasticsearch {
	if x, ok := m.GetResource().(*KubeResource_Elasticsearch); ok {
		return x.Elasticsearch
	}
	return nil
}

func (m *KubeResource) GetDormantDatabase() *DormantDatabase {
	if x, ok := m.GetResource().(*KubeResource_DormantDatabase); ok {
		return x.DormantDatabase
	}
	return nil
}

func (m *KubeResource) GetSnapshot() *Snapshot {
	if x, ok := m.GetResource().(*KubeResource_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (m *KubeResource) GetIngress() *Ingress {
	if x, ok := m.GetResource().(*KubeResource_Ingress); ok {
		return x.Ingress
	}
	return nil
}

func (m *KubeResource) GetPrometheus() *Prometheus {
	if x, ok := m.GetResource().(*KubeResource_Prometheus); ok {
		return x.Prometheus
	}
	return nil
}

func (m *KubeResource) GetServiceMonitors() *ServiceMonitor {
	if x, ok := m.GetResource().(*KubeResource_ServiceMonitors); ok {
		return x.ServiceMonitors
	}
	return nil
}

func (m *KubeResource) GetClusterAlert() *ClusterAlert {
	if x, ok := m.GetResource().(*KubeResource_ClusterAlert); ok {
		return x.ClusterAlert
	}
	return nil
}

func (m *KubeResource) GetNodeAlert() *NodeAlert {
	if x, ok := m.GetResource().(*KubeResource_NodeAlert); ok {
		return x.NodeAlert
	}
	return nil
}

func (m *KubeResource) GetPodAlert() *PodAlert {
	if x, ok := m.GetResource().(*KubeResource_PodAlert); ok {
		return x.PodAlert
	}
	return nil
}

func (m *KubeResource) GetMysql() *Mysql {
	if x, ok := m.GetResource().(*KubeResource_Mysql); ok {
		return x.Mysql
	}
	return nil
}

func (m *KubeResource) GetRedis() *Redis {
	if x, ok := m.GetResource().(*KubeResource_Redis); ok {
		return x.Redis
	}
	return nil
}

func (m *KubeResource) GetMongodb() *Mongodb {
	if x, ok := m.GetResource().(*KubeResource_Mongodb); ok {
		return x.Mongodb
	}
	return nil
}

func (m *KubeResource) GetMemcached() *Memcached {
	if x, ok := m.GetResource().(*KubeResource_Memcached); ok {
		return x.Memcached
	}
	return nil
}

func (m *KubeResource) GetRecovery() *Recovery {
	if x, ok := m.GetResource().(*KubeResource_Recovery); ok {
		return x.Recovery
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KubeResource) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KubeResource_OneofMarshaler, _KubeResource_OneofUnmarshaler, _KubeResource_OneofSizer, []interface{}{
		(*KubeResource_ConfigMap)(nil),
		(*KubeResource_DaemonSet)(nil),
		(*KubeResource_Deployment)(nil),
		(*KubeResource_Job)(nil),
		(*KubeResource_Namespace)(nil),
		(*KubeResource_Node)(nil),
		(*KubeResource_StatefulSet)(nil),
		(*KubeResource_Pod)(nil),
		(*KubeResource_ReplicaSet)(nil),
		(*KubeResource_Service)(nil),
		(*KubeResource_Secret)(nil),
		(*KubeResource_ReplicationController)(nil),
		(*KubeResource_StorageClass)(nil),
		(*KubeResource_PersistentVolume)(nil),
		(*KubeResource_PersistentVolumeClaim)(nil),
		(*KubeResource_Role)(nil),
		(*KubeResource_ClusterRole)(nil),
		(*KubeResource_RoleBinding)(nil),
		(*KubeResource_ClusterRoleBinding)(nil),
		(*KubeResource_Certificate)(nil),
		(*KubeResource_CronJob)(nil),
		(*KubeResource_Restic)(nil),
		(*KubeResource_Postgres)(nil),
		(*KubeResource_Elasticsearch)(nil),
		(*KubeResource_DormantDatabase)(nil),
		(*KubeResource_Snapshot)(nil),
		(*KubeResource_Ingress)(nil),
		(*KubeResource_Prometheus)(nil),
		(*KubeResource_ServiceMonitors)(nil),
		(*KubeResource_ClusterAlert)(nil),
		(*KubeResource_NodeAlert)(nil),
		(*KubeResource_PodAlert)(nil),
		(*KubeResource_Mysql)(nil),
		(*KubeResource_Redis)(nil),
		(*KubeResource_Mongodb)(nil),
		(*KubeResource_Memcached)(nil),
		(*KubeResource_Recovery)(nil),
	}
}

func _KubeResource_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KubeResource)
	// resource
	switch x := m.Resource.(type) {
	case *KubeResource_ConfigMap:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConfigMap); err != nil {
			return err
		}
	case *KubeResource_DaemonSet:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DaemonSet); err != nil {
			return err
		}
	case *KubeResource_Deployment:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deployment); err != nil {
			return err
		}
	case *KubeResource_Job:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Job); err != nil {
			return err
		}
	case *KubeResource_Namespace:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Namespace); err != nil {
			return err
		}
	case *KubeResource_Node:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Node); err != nil {
			return err
		}
	case *KubeResource_StatefulSet:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatefulSet); err != nil {
			return err
		}
	case *KubeResource_Pod:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pod); err != nil {
			return err
		}
	case *KubeResource_ReplicaSet:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplicaSet); err != nil {
			return err
		}
	case *KubeResource_Service:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Service); err != nil {
			return err
		}
	case *KubeResource_Secret:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Secret); err != nil {
			return err
		}
	case *KubeResource_ReplicationController:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplicationController); err != nil {
			return err
		}
	case *KubeResource_StorageClass:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StorageClass); err != nil {
			return err
		}
	case *KubeResource_PersistentVolume:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PersistentVolume); err != nil {
			return err
		}
	case *KubeResource_PersistentVolumeClaim:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PersistentVolumeClaim); err != nil {
			return err
		}
	case *KubeResource_Role:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Role); err != nil {
			return err
		}
	case *KubeResource_ClusterRole:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClusterRole); err != nil {
			return err
		}
	case *KubeResource_RoleBinding:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RoleBinding); err != nil {
			return err
		}
	case *KubeResource_ClusterRoleBinding:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClusterRoleBinding); err != nil {
			return err
		}
	case *KubeResource_Certificate:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Certificate); err != nil {
			return err
		}
	case *KubeResource_CronJob:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CronJob); err != nil {
			return err
		}
	case *KubeResource_Restic:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Restic); err != nil {
			return err
		}
	case *KubeResource_Postgres:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Postgres); err != nil {
			return err
		}
	case *KubeResource_Elasticsearch:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Elasticsearch); err != nil {
			return err
		}
	case *KubeResource_DormantDatabase:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DormantDatabase); err != nil {
			return err
		}
	case *KubeResource_Snapshot:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Snapshot); err != nil {
			return err
		}
	case *KubeResource_Ingress:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ingress); err != nil {
			return err
		}
	case *KubeResource_Prometheus:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prometheus); err != nil {
			return err
		}
	case *KubeResource_ServiceMonitors:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServiceMonitors); err != nil {
			return err
		}
	case *KubeResource_ClusterAlert:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClusterAlert); err != nil {
			return err
		}
	case *KubeResource_NodeAlert:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NodeAlert); err != nil {
			return err
		}
	case *KubeResource_PodAlert:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PodAlert); err != nil {
			return err
		}
	case *KubeResource_Mysql:
		b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mysql); err != nil {
			return err
		}
	case *KubeResource_Redis:
		b.EncodeVarint(38<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Redis); err != nil {
			return err
		}
	case *KubeResource_Mongodb:
		b.EncodeVarint(39<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mongodb); err != nil {
			return err
		}
	case *KubeResource_Memcached:
		b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Memcached); err != nil {
			return err
		}
	case *KubeResource_Recovery:
		b.EncodeVarint(41<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Recovery); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("KubeResource.Resource has unexpected type %T", x)
	}
	return nil
}

func _KubeResource_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KubeResource)
	switch tag {
	case 5: // resource.config_map
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConfigMap)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_ConfigMap{msg}
		return true, err
	case 6: // resource.daemon_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DaemonSet)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_DaemonSet{msg}
		return true, err
	case 7: // resource.deployment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Deployment)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Deployment{msg}
		return true, err
	case 8: // resource.job
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Job)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Job{msg}
		return true, err
	case 9: // resource.namespace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Namespace)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Namespace{msg}
		return true, err
	case 10: // resource.node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Node)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Node{msg}
		return true, err
	case 11: // resource.stateful_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StatefulSet)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_StatefulSet{msg}
		return true, err
	case 12: // resource.pod
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pod)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Pod{msg}
		return true, err
	case 13: // resource.replica_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReplicaSet)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_ReplicaSet{msg}
		return true, err
	case 14: // resource.service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Service)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Service{msg}
		return true, err
	case 15: // resource.secret
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Secret)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Secret{msg}
		return true, err
	case 16: // resource.replication_controller
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReplicationController)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_ReplicationController{msg}
		return true, err
	case 17: // resource.storage_class
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StorageClass)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_StorageClass{msg}
		return true, err
	case 18: // resource.persistent_volume
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PersistentVolume)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_PersistentVolume{msg}
		return true, err
	case 19: // resource.persistent_volume_claim
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PersistentVolumeClaim)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_PersistentVolumeClaim{msg}
		return true, err
	case 20: // resource.role
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Role)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Role{msg}
		return true, err
	case 21: // resource.cluster_role
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterRole)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_ClusterRole{msg}
		return true, err
	case 22: // resource.role_binding
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RoleBinding)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_RoleBinding{msg}
		return true, err
	case 23: // resource.cluster_role_binding
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterRoleBinding)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_ClusterRoleBinding{msg}
		return true, err
	case 24: // resource.certificate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Certificate)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Certificate{msg}
		return true, err
	case 25: // resource.cron_job
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CronJob)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_CronJob{msg}
		return true, err
	case 26: // resource.restic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Restic)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Restic{msg}
		return true, err
	case 27: // resource.postgres
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Postgres)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Postgres{msg}
		return true, err
	case 28: // resource.elasticsearch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Elasticsearch)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Elasticsearch{msg}
		return true, err
	case 29: // resource.dormant_database
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DormantDatabase)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_DormantDatabase{msg}
		return true, err
	case 30: // resource.snapshot
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Snapshot)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Snapshot{msg}
		return true, err
	case 31: // resource.ingress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ingress)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Ingress{msg}
		return true, err
	case 32: // resource.prometheus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prometheus)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Prometheus{msg}
		return true, err
	case 33: // resource.service_monitors
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceMonitor)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_ServiceMonitors{msg}
		return true, err
	case 34: // resource.cluster_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterAlert)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_ClusterAlert{msg}
		return true, err
	case 35: // resource.node_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NodeAlert)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_NodeAlert{msg}
		return true, err
	case 36: // resource.pod_alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PodAlert)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_PodAlert{msg}
		return true, err
	case 37: // resource.mysql
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Mysql)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Mysql{msg}
		return true, err
	case 38: // resource.redis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Redis)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Redis{msg}
		return true, err
	case 39: // resource.mongodb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Mongodb)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Mongodb{msg}
		return true, err
	case 40: // resource.memcached
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Memcached)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Memcached{msg}
		return true, err
	case 41: // resource.recovery
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Recovery)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Recovery{msg}
		return true, err
	default:
		return false, nil
	}
}

func _KubeResource_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KubeResource)
	// resource
	switch x := m.Resource.(type) {
	case *KubeResource_ConfigMap:
		s := proto.Size(x.ConfigMap)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_DaemonSet:
		s := proto.Size(x.DaemonSet)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Deployment:
		s := proto.Size(x.Deployment)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Job:
		s := proto.Size(x.Job)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Namespace:
		s := proto.Size(x.Namespace)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Node:
		s := proto.Size(x.Node)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_StatefulSet:
		s := proto.Size(x.StatefulSet)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Pod:
		s := proto.Size(x.Pod)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_ReplicaSet:
		s := proto.Size(x.ReplicaSet)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Service:
		s := proto.Size(x.Service)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Secret:
		s := proto.Size(x.Secret)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_ReplicationController:
		s := proto.Size(x.ReplicationController)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_StorageClass:
		s := proto.Size(x.StorageClass)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_PersistentVolume:
		s := proto.Size(x.PersistentVolume)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_PersistentVolumeClaim:
		s := proto.Size(x.PersistentVolumeClaim)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Role:
		s := proto.Size(x.Role)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_ClusterRole:
		s := proto.Size(x.ClusterRole)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_RoleBinding:
		s := proto.Size(x.RoleBinding)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_ClusterRoleBinding:
		s := proto.Size(x.ClusterRoleBinding)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Certificate:
		s := proto.Size(x.Certificate)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_CronJob:
		s := proto.Size(x.CronJob)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Restic:
		s := proto.Size(x.Restic)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Postgres:
		s := proto.Size(x.Postgres)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Elasticsearch:
		s := proto.Size(x.Elasticsearch)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_DormantDatabase:
		s := proto.Size(x.DormantDatabase)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Snapshot:
		s := proto.Size(x.Snapshot)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Ingress:
		s := proto.Size(x.Ingress)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Prometheus:
		s := proto.Size(x.Prometheus)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_ServiceMonitors:
		s := proto.Size(x.ServiceMonitors)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_ClusterAlert:
		s := proto.Size(x.ClusterAlert)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_NodeAlert:
		s := proto.Size(x.NodeAlert)
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_PodAlert:
		s := proto.Size(x.PodAlert)
		n += proto.SizeVarint(36<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Mysql:
		s := proto.Size(x.Mysql)
		n += proto.SizeVarint(37<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Redis:
		s := proto.Size(x.Redis)
		n += proto.SizeVarint(38<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Mongodb:
		s := proto.Size(x.Mongodb)
		n += proto.SizeVarint(39<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Memcached:
		s := proto.Size(x.Memcached)
		n += proto.SizeVarint(40<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Recovery:
		s := proto.Size(x.Recovery)
		n += proto.SizeVarint(41<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Meta struct {
	Name              string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace         string            `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	SelfLink          string            `protobuf:"bytes,3,opt,name=self_link,json=selfLink" json:"self_link,omitempty"`
	ResourceVersion   string            `protobuf:"bytes,4,opt,name=resource_version,json=resourceVersion" json:"resource_version,omitempty"`
	CreationTimestamp int64             `protobuf:"varint,5,opt,name=creation_timestamp,json=creationTimestamp" json:"creation_timestamp,omitempty"`
	Generation        int64             `protobuf:"varint,6,opt,name=generation" json:"generation,omitempty"`
	Labels            map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations       map[string]string `protobuf:"bytes,8,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uid               string            `protobuf:"bytes,9,opt,name=uid" json:"uid,omitempty"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Meta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Meta) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Meta) GetSelfLink() string {
	if m != nil {
		return m.SelfLink
	}
	return ""
}

func (m *Meta) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *Meta) GetCreationTimestamp() int64 {
	if m != nil {
		return m.CreationTimestamp
	}
	return 0
}

func (m *Meta) GetGeneration() int64 {
	if m != nil {
		return m.Generation
	}
	return 0
}

func (m *Meta) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Meta) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Meta) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type KubeObject struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *KubeObject) Reset()                    { *m = KubeObject{} }
func (m *KubeObject) String() string            { return proto.CompactTextString(m) }
func (*KubeObject) ProtoMessage()               {}
func (*KubeObject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *KubeObject) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *KubeObject) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *KubeObject) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *KubeObject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type IcingaState struct {
	OK       int32 `protobuf:"varint,1,opt,name=OK,json=oK" json:"OK,omitempty"`
	Warning  int32 `protobuf:"varint,2,opt,name=Warning,json=warning" json:"Warning,omitempty"`
	Critical int32 `protobuf:"varint,3,opt,name=Critical,json=critical" json:"Critical,omitempty"`
	Unknown  int32 `protobuf:"varint,4,opt,name=Unknown,json=unknown" json:"Unknown,omitempty"`
}

func (m *IcingaState) Reset()                    { *m = IcingaState{} }
func (m *IcingaState) String() string            { return proto.CompactTextString(m) }
func (*IcingaState) ProtoMessage()               {}
func (*IcingaState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IcingaState) GetOK() int32 {
	if m != nil {
		return m.OK
	}
	return 0
}

func (m *IcingaState) GetWarning() int32 {
	if m != nil {
		return m.Warning
	}
	return 0
}

func (m *IcingaState) GetCritical() int32 {
	if m != nil {
		return m.Critical
	}
	return 0
}

func (m *IcingaState) GetUnknown() int32 {
	if m != nil {
		return m.Unknown
	}
	return 0
}

type PodSpec struct {
	Volumes            []*Volume            `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
	Containers         []*PodSpec_Container `protobuf:"bytes,2,rep,name=containers" json:"containers,omitempty"`
	NodeSelector       map[string]string    `protobuf:"bytes,3,rep,name=node_selector,json=nodeSelector" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ServiceAccountName string               `protobuf:"bytes,4,opt,name=service_account_name,json=serviceAccountName" json:"service_account_name,omitempty"`
	NodeName           string               `protobuf:"bytes,5,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	ImagePullSecrets   []string             `protobuf:"bytes,6,rep,name=image_pull_secrets,json=imagePullSecrets" json:"image_pull_secrets,omitempty"`
}

func (m *PodSpec) Reset()                    { *m = PodSpec{} }
func (m *PodSpec) String() string            { return proto.CompactTextString(m) }
func (*PodSpec) ProtoMessage()               {}
func (*PodSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PodSpec) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *PodSpec) GetContainers() []*PodSpec_Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *PodSpec) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *PodSpec) GetServiceAccountName() string {
	if m != nil {
		return m.ServiceAccountName
	}
	return ""
}

func (m *PodSpec) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *PodSpec) GetImagePullSecrets() []string {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

type PodSpec_Container struct {
	Name         string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Image        string         `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	Commands     []string       `protobuf:"bytes,3,rep,name=commands" json:"commands,omitempty"`
	VolumeMounts []*VolumeMount `protobuf:"bytes,4,rep,name=volume_mounts,json=volumeMounts" json:"volume_mounts,omitempty"`
	Args         []string       `protobuf:"bytes,5,rep,name=args" json:"args,omitempty"`
	WorkingDir   string         `protobuf:"bytes,6,opt,name=working_dir,json=workingDir" json:"working_dir,omitempty"`
	Env          []*EnvVar      `protobuf:"bytes,7,rep,name=env" json:"env,omitempty"`
}

func (m *PodSpec_Container) Reset()                    { *m = PodSpec_Container{} }
func (m *PodSpec_Container) String() string            { return proto.CompactTextString(m) }
func (*PodSpec_Container) ProtoMessage()               {}
func (*PodSpec_Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 1} }

func (m *PodSpec_Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodSpec_Container) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *PodSpec_Container) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *PodSpec_Container) GetVolumeMounts() []*VolumeMount {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

func (m *PodSpec_Container) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *PodSpec_Container) GetWorkingDir() string {
	if m != nil {
		return m.WorkingDir
	}
	return ""
}

func (m *PodSpec_Container) GetEnv() []*EnvVar {
	if m != nil {
		return m.Env
	}
	return nil
}

type Volume struct {
	Name         string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	VolumeSource *VolumeSource `protobuf:"bytes,2,opt,name=volumeSource" json:"volumeSource,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetVolumeSource() *VolumeSource {
	if m != nil {
		return m.VolumeSource
	}
	return nil
}

type VolumeMount struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ReadOnly  bool   `protobuf:"varint,2,opt,name=read_only,json=readOnly" json:"read_only,omitempty"`
	MountPath string `protobuf:"bytes,3,opt,name=mount_path,json=mountPath" json:"mount_path,omitempty"`
}

func (m *VolumeMount) Reset()                    { *m = VolumeMount{} }
func (m *VolumeMount) String() string            { return proto.CompactTextString(m) }
func (*VolumeMount) ProtoMessage()               {}
func (*VolumeMount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *VolumeMount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VolumeMount) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *VolumeMount) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

type Raw struct {
	Format string `protobuf:"bytes,1,opt,name=format" json:"format,omitempty"`
	Data   string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *Raw) Reset()                    { *m = Raw{} }
func (m *Raw) String() string            { return proto.CompactTextString(m) }
func (*Raw) ProtoMessage()               {}
func (*Raw) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Raw) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *Raw) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ConfigMap struct {
	Meta *Meta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Data map[string]string `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ConfigMap) Reset()                    { *m = ConfigMap{} }
func (m *ConfigMap) String() string            { return proto.CompactTextString(m) }
func (*ConfigMap) ProtoMessage()               {}
func (*ConfigMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ConfigMap) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ConfigMap) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type Job struct {
	Meta   *Meta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string      `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *JobSpec    `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *Job_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Job) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Job) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *Job) GetSpec() *JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Job) GetStatus() *Job_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Job_Status struct {
	StartTime      int64                `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	CompletionTime int64                `protobuf:"varint,2,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	Active         int32                `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
	Succeeded      int32                `protobuf:"varint,4,opt,name=succeeded" json:"succeeded,omitempty"`
	Failed         int32                `protobuf:"varint,5,opt,name=failed" json:"failed,omitempty"`
	Conditions     []*ResourceCondition `protobuf:"bytes,6,rep,name=conditions" json:"conditions,omitempty"`
}

func (m *Job_Status) Reset()                    { *m = Job_Status{} }
func (m *Job_Status) String() string            { return proto.CompactTextString(m) }
func (*Job_Status) ProtoMessage()               {}
func (*Job_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

func (m *Job_Status) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Job_Status) GetCompletionTime() int64 {
	if m != nil {
		return m.CompletionTime
	}
	return 0
}

func (m *Job_Status) GetActive() int32 {
	if m != nil {
		return m.Active
	}
	return 0
}

func (m *Job_Status) GetSucceeded() int32 {
	if m != nil {
		return m.Succeeded
	}
	return 0
}

func (m *Job_Status) GetFailed() int32 {
	if m != nil {
		return m.Failed
	}
	return 0
}

func (m *Job_Status) GetConditions() []*ResourceCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type JobSpec struct {
	Parallelism           int32    `protobuf:"varint,1,opt,name=parallelism" json:"parallelism,omitempty"`
	Completions           int32    `protobuf:"varint,2,opt,name=completions" json:"completions,omitempty"`
	Template              *PodSpec `protobuf:"bytes,3,opt,name=template" json:"template,omitempty"`
	ActiveDeadlineSeconds int64    `protobuf:"varint,4,opt,name=active_deadline_seconds,json=activeDeadlineSeconds" json:"active_deadline_seconds,omitempty"`
}

func (m *JobSpec) Reset()                    { *m = JobSpec{} }
func (m *JobSpec) String() string            { return proto.CompactTextString(m) }
func (*JobSpec) ProtoMessage()               {}
func (*JobSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *JobSpec) GetParallelism() int32 {
	if m != nil {
		return m.Parallelism
	}
	return 0
}

func (m *JobSpec) GetCompletions() int32 {
	if m != nil {
		return m.Completions
	}
	return 0
}

func (m *JobSpec) GetTemplate() *PodSpec {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *JobSpec) GetActiveDeadlineSeconds() int64 {
	if m != nil {
		return m.ActiveDeadlineSeconds
	}
	return 0
}

type Namespace struct {
	Meta   *Meta                    `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Status *Namespace_Status        `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Spec   *Namespace_NamespaceSpec `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
}

func (m *Namespace) Reset()                    { *m = Namespace{} }
func (m *Namespace) String() string            { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()               {}
func (*Namespace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Namespace) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Namespace) GetStatus() *Namespace_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Namespace) GetSpec() *Namespace_NamespaceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type Namespace_NamespaceSpec struct {
	Finalizers []string `protobuf:"bytes,1,rep,name=finalizers" json:"finalizers,omitempty"`
}

func (m *Namespace_NamespaceSpec) Reset()                    { *m = Namespace_NamespaceSpec{} }
func (m *Namespace_NamespaceSpec) String() string            { return proto.CompactTextString(m) }
func (*Namespace_NamespaceSpec) ProtoMessage()               {}
func (*Namespace_NamespaceSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 0} }

func (m *Namespace_NamespaceSpec) GetFinalizers() []string {
	if m != nil {
		return m.Finalizers
	}
	return nil
}

type Namespace_Status struct {
	Phase string `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
}

func (m *Namespace_Status) Reset()                    { *m = Namespace_Status{} }
func (m *Namespace_Status) String() string            { return proto.CompactTextString(m) }
func (*Namespace_Status) ProtoMessage()               {}
func (*Namespace_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 1} }

func (m *Namespace_Status) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

type Node struct {
	Meta     *Meta            `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec     *Node_Spec       `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	IsMaster bool             `protobuf:"varint,3,opt,name=is_master,json=isMaster" json:"is_master,omitempty"`
	Status   *Node_NodeStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Metrics  *Metrics         `protobuf:"bytes,5,opt,name=metrics" json:"metrics,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Node) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Node) GetSpec() *Node_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Node) GetIsMaster() bool {
	if m != nil {
		return m.IsMaster
	}
	return false
}

func (m *Node) GetStatus() *Node_NodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Node) GetMetrics() *Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Node_Spec struct {
	ExternalId    string `protobuf:"bytes,1,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	ProviderId    string `protobuf:"bytes,2,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	Unschedulable bool   `protobuf:"varint,3,opt,name=unschedulable" json:"unschedulable,omitempty"`
	PodCIDR       string `protobuf:"bytes,4,opt,name=podCIDR" json:"podCIDR,omitempty"`
}

func (m *Node_Spec) Reset()                    { *m = Node_Spec{} }
func (m *Node_Spec) String() string            { return proto.CompactTextString(m) }
func (*Node_Spec) ProtoMessage()               {}
func (*Node_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 0} }

func (m *Node_Spec) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *Node_Spec) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *Node_Spec) GetUnschedulable() bool {
	if m != nil {
		return m.Unschedulable
	}
	return false
}

func (m *Node_Spec) GetPodCIDR() string {
	if m != nil {
		return m.PodCIDR
	}
	return ""
}

type Node_NodeStatus struct {
	Capacity        *Node_NodeStatus_Capacity         `protobuf:"bytes,1,opt,name=capacity" json:"capacity,omitempty"`
	Phase           string                            `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	NodeInfo        *Node_NodeStatus_NodeSystemInfo   `protobuf:"bytes,3,opt,name=node_info,json=nodeInfo" json:"node_info,omitempty"`
	Allocatable     *Node_NodeStatus_Capacity         `protobuf:"bytes,4,opt,name=allocatable" json:"allocatable,omitempty"`
	Conditions      []*ResourceCondition              `protobuf:"bytes,5,rep,name=conditions" json:"conditions,omitempty"`
	Address         []*Node_NodeStatus_NodeAddress    `protobuf:"bytes,6,rep,name=address" json:"address,omitempty"`
	Images          []*Node_NodeStatus_ContainerImage `protobuf:"bytes,7,rep,name=images" json:"images,omitempty"`
	VolumesInUse    []string                          `protobuf:"bytes,8,rep,name=volumes_in_use,json=volumesInUse" json:"volumes_in_use,omitempty"`
	VolumesAttached []*Node_NodeStatus_AttachedVolume `protobuf:"bytes,9,rep,name=volumes_attached,json=volumesAttached" json:"volumes_attached,omitempty"`
}

func (m *Node_NodeStatus) Reset()                    { *m = Node_NodeStatus{} }
func (m *Node_NodeStatus) String() string            { return proto.CompactTextString(m) }
func (*Node_NodeStatus) ProtoMessage()               {}
func (*Node_NodeStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 1} }

func (m *Node_NodeStatus) GetCapacity() *Node_NodeStatus_Capacity {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *Node_NodeStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Node_NodeStatus) GetNodeInfo() *Node_NodeStatus_NodeSystemInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *Node_NodeStatus) GetAllocatable() *Node_NodeStatus_Capacity {
	if m != nil {
		return m.Allocatable
	}
	return nil
}

func (m *Node_NodeStatus) GetConditions() []*ResourceCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Node_NodeStatus) GetAddress() []*Node_NodeStatus_NodeAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Node_NodeStatus) GetImages() []*Node_NodeStatus_ContainerImage {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Node_NodeStatus) GetVolumesInUse() []string {
	if m != nil {
		return m.VolumesInUse
	}
	return nil
}

func (m *Node_NodeStatus) GetVolumesAttached() []*Node_NodeStatus_AttachedVolume {
	if m != nil {
		return m.VolumesAttached
	}
	return nil
}

type Node_NodeStatus_Capacity struct {
	Cpu     int64  `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Memory  int64  `protobuf:"varint,2,opt,name=memory" json:"memory,omitempty"`
	Pods    int64  `protobuf:"varint,3,opt,name=pods" json:"pods,omitempty"`
	Storage string `protobuf:"bytes,4,opt,name=storage" json:"storage,omitempty"`
}

func (m *Node_NodeStatus_Capacity) Reset()                    { *m = Node_NodeStatus_Capacity{} }
func (m *Node_NodeStatus_Capacity) String() string            { return proto.CompactTextString(m) }
func (*Node_NodeStatus_Capacity) ProtoMessage()               {}
func (*Node_NodeStatus_Capacity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 1, 0} }

func (m *Node_NodeStatus_Capacity) GetCpu() int64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *Node_NodeStatus_Capacity) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *Node_NodeStatus_Capacity) GetPods() int64 {
	if m != nil {
		return m.Pods
	}
	return 0
}

func (m *Node_NodeStatus_Capacity) GetStorage() string {
	if m != nil {
		return m.Storage
	}
	return ""
}

type Node_NodeStatus_NodeSystemInfo struct {
	MachineID               string `protobuf:"bytes,6,opt,name=machineID" json:"machineID,omitempty"`
	SystemUUID              string `protobuf:"bytes,7,opt,name=systemUUID" json:"systemUUID,omitempty"`
	BootID                  string `protobuf:"bytes,8,opt,name=bootID" json:"bootID,omitempty"`
	KernelVersion           string `protobuf:"bytes,1,opt,name=kernel_version,json=kernelVersion" json:"kernel_version,omitempty"`
	OsImage                 string `protobuf:"bytes,2,opt,name=os_image,json=osImage" json:"os_image,omitempty"`
	ContainerRuntimeVersion string `protobuf:"bytes,3,opt,name=container_runtime_version,json=containerRuntimeVersion" json:"container_runtime_version,omitempty"`
	KubeletVersion          string `protobuf:"bytes,4,opt,name=kubelet_version,json=kubeletVersion" json:"kubelet_version,omitempty"`
	KubeProxyVersion        string `protobuf:"bytes,5,opt,name=kube_proxy_version,json=kubeProxyVersion" json:"kube_proxy_version,omitempty"`
	OperatingSystem         string `protobuf:"bytes,9,opt,name=operating_system,json=operatingSystem" json:"operating_system,omitempty"`
	Architecture            string `protobuf:"bytes,10,opt,name=architecture" json:"architecture,omitempty"`
}

func (m *Node_NodeStatus_NodeSystemInfo) Reset()         { *m = Node_NodeStatus_NodeSystemInfo{} }
func (m *Node_NodeStatus_NodeSystemInfo) String() string { return proto.CompactTextString(m) }
func (*Node_NodeStatus_NodeSystemInfo) ProtoMessage()    {}
func (*Node_NodeStatus_NodeSystemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24, 1, 1}
}

func (m *Node_NodeStatus_NodeSystemInfo) GetMachineID() string {
	if m != nil {
		return m.MachineID
	}
	return ""
}

func (m *Node_NodeStatus_NodeSystemInfo) GetSystemUUID() string {
	if m != nil {
		return m.SystemUUID
	}
	return ""
}

func (m *Node_NodeStatus_NodeSystemInfo) GetBootID() string {
	if m != nil {
		return m.BootID
	}
	return ""
}

func (m *Node_NodeStatus_NodeSystemInfo) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *Node_NodeStatus_NodeSystemInfo) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *Node_NodeStatus_NodeSystemInfo) GetContainerRuntimeVersion() string {
	if m != nil {
		return m.ContainerRuntimeVersion
	}
	return ""
}

func (m *Node_NodeStatus_NodeSystemInfo) GetKubeletVersion() string {
	if m != nil {
		return m.KubeletVersion
	}
	return ""
}

func (m *Node_NodeStatus_NodeSystemInfo) GetKubeProxyVersion() string {
	if m != nil {
		return m.KubeProxyVersion
	}
	return ""
}

func (m *Node_NodeStatus_NodeSystemInfo) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *Node_NodeStatus_NodeSystemInfo) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

type Node_NodeStatus_NodeAddress struct {
	Type    string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *Node_NodeStatus_NodeAddress) Reset()         { *m = Node_NodeStatus_NodeAddress{} }
func (m *Node_NodeStatus_NodeAddress) String() string { return proto.CompactTextString(m) }
func (*Node_NodeStatus_NodeAddress) ProtoMessage()    {}
func (*Node_NodeStatus_NodeAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24, 1, 2}
}

func (m *Node_NodeStatus_NodeAddress) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Node_NodeStatus_NodeAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Node_NodeStatus_ContainerImage struct {
	Names     []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	SizeBytes int64    `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *Node_NodeStatus_ContainerImage) Reset()         { *m = Node_NodeStatus_ContainerImage{} }
func (m *Node_NodeStatus_ContainerImage) String() string { return proto.CompactTextString(m) }
func (*Node_NodeStatus_ContainerImage) ProtoMessage()    {}
func (*Node_NodeStatus_ContainerImage) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24, 1, 3}
}

func (m *Node_NodeStatus_ContainerImage) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *Node_NodeStatus_ContainerImage) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

type Node_NodeStatus_AttachedVolume struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DevicePath string `protobuf:"bytes,2,opt,name=device_path,json=devicePath" json:"device_path,omitempty"`
}

func (m *Node_NodeStatus_AttachedVolume) Reset()         { *m = Node_NodeStatus_AttachedVolume{} }
func (m *Node_NodeStatus_AttachedVolume) String() string { return proto.CompactTextString(m) }
func (*Node_NodeStatus_AttachedVolume) ProtoMessage()    {}
func (*Node_NodeStatus_AttachedVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24, 1, 4}
}

func (m *Node_NodeStatus_AttachedVolume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node_NodeStatus_AttachedVolume) GetDevicePath() string {
	if m != nil {
		return m.DevicePath
	}
	return ""
}

type Pod struct {
	Meta    *Meta          `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App     string         `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec    *PodSpec       `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status  *Pod_PodStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Metrics *Metrics       `protobuf:"bytes,5,opt,name=metrics" json:"metrics,omitempty"`
}

func (m *Pod) Reset()                    { *m = Pod{} }
func (m *Pod) String() string            { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()               {}
func (*Pod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Pod) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Pod) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *Pod) GetSpec() *PodSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Pod) GetStatus() *Pod_PodStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Pod) GetMetrics() *Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Pod_PodStatus struct {
	Phase       string               `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	Message     string               `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Reason      string               `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	HostIP      string               `protobuf:"bytes,4,opt,name=hostIP" json:"hostIP,omitempty"`
	PodIP       string               `protobuf:"bytes,5,opt,name=podIP" json:"podIP,omitempty"`
	Conditions  []*ResourceCondition `protobuf:"bytes,6,rep,name=conditions" json:"conditions,omitempty"`
	StartTime   int64                `protobuf:"varint,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	ServiceInfo []*Service           `protobuf:"bytes,8,rep,name=service_info,json=serviceInfo" json:"service_info,omitempty"`
}

func (m *Pod_PodStatus) Reset()                    { *m = Pod_PodStatus{} }
func (m *Pod_PodStatus) String() string            { return proto.CompactTextString(m) }
func (*Pod_PodStatus) ProtoMessage()               {}
func (*Pod_PodStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25, 0} }

func (m *Pod_PodStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Pod_PodStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Pod_PodStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Pod_PodStatus) GetHostIP() string {
	if m != nil {
		return m.HostIP
	}
	return ""
}

func (m *Pod_PodStatus) GetPodIP() string {
	if m != nil {
		return m.PodIP
	}
	return ""
}

func (m *Pod_PodStatus) GetConditions() []*ResourceCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Pod_PodStatus) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Pod_PodStatus) GetServiceInfo() []*Service {
	if m != nil {
		return m.ServiceInfo
	}
	return nil
}

type PersistentVolume struct {
	Meta   *Meta                                    `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *PersistentVolume_PersistentVolumeSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *PersistentVolume_PersistentVolumeStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *PersistentVolume) Reset()                    { *m = PersistentVolume{} }
func (m *PersistentVolume) String() string            { return proto.CompactTextString(m) }
func (*PersistentVolume) ProtoMessage()               {}
func (*PersistentVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *PersistentVolume) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PersistentVolume) GetSpec() *PersistentVolume_PersistentVolumeSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PersistentVolume) GetStatus() *PersistentVolume_PersistentVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type PersistentVolume_PersistentVolumeSpec struct {
	Capacity                      map[string]string `protobuf:"bytes,1,rep,name=capacity" json:"capacity,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AccessModes                   []string          `protobuf:"bytes,2,rep,name=access_modes,json=accessModes" json:"access_modes,omitempty"`
	PersistentVolumeReclaimPolicy string            `protobuf:"bytes,3,opt,name=persistent_volume_reclaim_policy,json=persistentVolumeReclaimPolicy" json:"persistent_volume_reclaim_policy,omitempty"`
	ClaimRef                      *ObjectReference  `protobuf:"bytes,4,opt,name=claim_ref,json=claimRef" json:"claim_ref,omitempty"`
	PersistentVolumeSource        *VolumeSource     `protobuf:"bytes,5,opt,name=persistent_volume_source,json=persistentVolumeSource" json:"persistent_volume_source,omitempty"`
}

func (m *PersistentVolume_PersistentVolumeSpec) Reset()         { *m = PersistentVolume_PersistentVolumeSpec{} }
func (m *PersistentVolume_PersistentVolumeSpec) String() string { return proto.CompactTextString(m) }
func (*PersistentVolume_PersistentVolumeSpec) ProtoMessage()    {}
func (*PersistentVolume_PersistentVolumeSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 0}
}

func (m *PersistentVolume_PersistentVolumeSpec) GetCapacity() map[string]string {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *PersistentVolume_PersistentVolumeSpec) GetAccessModes() []string {
	if m != nil {
		return m.AccessModes
	}
	return nil
}

func (m *PersistentVolume_PersistentVolumeSpec) GetPersistentVolumeReclaimPolicy() string {
	if m != nil {
		return m.PersistentVolumeReclaimPolicy
	}
	return ""
}

func (m *PersistentVolume_PersistentVolumeSpec) GetClaimRef() *ObjectReference {
	if m != nil {
		return m.ClaimRef
	}
	return nil
}

func (m *PersistentVolume_PersistentVolumeSpec) GetPersistentVolumeSource() *VolumeSource {
	if m != nil {
		return m.PersistentVolumeSource
	}
	return nil
}

type PersistentVolume_PersistentVolumeStatus struct {
	Phase   string `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Reason  string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *PersistentVolume_PersistentVolumeStatus) Reset() {
	*m = PersistentVolume_PersistentVolumeStatus{}
}
func (m *PersistentVolume_PersistentVolumeStatus) String() string { return proto.CompactTextString(m) }
func (*PersistentVolume_PersistentVolumeStatus) ProtoMessage()    {}
func (*PersistentVolume_PersistentVolumeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 1}
}

func (m *PersistentVolume_PersistentVolumeStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *PersistentVolume_PersistentVolumeStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PersistentVolume_PersistentVolumeStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type PersistentVolumeClaim struct {
	Meta   *Meta                                              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *PersistentVolumeClaimSpec                         `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *PersistentVolumeClaim_PersistentVolumeClaimStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *PersistentVolumeClaim) Reset()                    { *m = PersistentVolumeClaim{} }
func (m *PersistentVolumeClaim) String() string            { return proto.CompactTextString(m) }
func (*PersistentVolumeClaim) ProtoMessage()               {}
func (*PersistentVolumeClaim) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PersistentVolumeClaim) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PersistentVolumeClaim) GetSpec() *PersistentVolumeClaimSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PersistentVolumeClaim) GetStatus() *PersistentVolumeClaim_PersistentVolumeClaimStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type PersistentVolumeClaim_PersistentVolumeClaimStatus struct {
	Phase       string            `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	AccessModes []string          `protobuf:"bytes,2,rep,name=access_modes,json=accessModes" json:"access_modes,omitempty"`
	Capacity    map[string]string `protobuf:"bytes,3,rep,name=capacity" json:"capacity,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PersistentVolumeClaim_PersistentVolumeClaimStatus) Reset() {
	*m = PersistentVolumeClaim_PersistentVolumeClaimStatus{}
}
func (m *PersistentVolumeClaim_PersistentVolumeClaimStatus) String() string {
	return proto.CompactTextString(m)
}
func (*PersistentVolumeClaim_PersistentVolumeClaimStatus) ProtoMessage() {}
func (*PersistentVolumeClaim_PersistentVolumeClaimStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27, 0}
}

func (m *PersistentVolumeClaim_PersistentVolumeClaimStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *PersistentVolumeClaim_PersistentVolumeClaimStatus) GetAccessModes() []string {
	if m != nil {
		return m.AccessModes
	}
	return nil
}

func (m *PersistentVolumeClaim_PersistentVolumeClaimStatus) GetCapacity() map[string]string {
	if m != nil {
		return m.Capacity
	}
	return nil
}

type PersistentVolumeClaimSpec struct {
	StorageClassName string                                          `protobuf:"bytes,1,opt,name=storage_class_name,json=storageClassName" json:"storage_class_name,omitempty"`
	AccessModes      []string                                        `protobuf:"bytes,2,rep,name=access_modes,json=accessModes" json:"access_modes,omitempty"`
	Resources        *PersistentVolumeClaimSpec_ResourceRequirements `protobuf:"bytes,3,opt,name=resources" json:"resources,omitempty"`
	VolumeName       string                                          `protobuf:"bytes,4,opt,name=volume_name,json=volumeName" json:"volume_name,omitempty"`
}

func (m *PersistentVolumeClaimSpec) Reset()                    { *m = PersistentVolumeClaimSpec{} }
func (m *PersistentVolumeClaimSpec) String() string            { return proto.CompactTextString(m) }
func (*PersistentVolumeClaimSpec) ProtoMessage()               {}
func (*PersistentVolumeClaimSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *PersistentVolumeClaimSpec) GetStorageClassName() string {
	if m != nil {
		return m.StorageClassName
	}
	return ""
}

func (m *PersistentVolumeClaimSpec) GetAccessModes() []string {
	if m != nil {
		return m.AccessModes
	}
	return nil
}

func (m *PersistentVolumeClaimSpec) GetResources() *PersistentVolumeClaimSpec_ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *PersistentVolumeClaimSpec) GetVolumeName() string {
	if m != nil {
		return m.VolumeName
	}
	return ""
}

type PersistentVolumeClaimSpec_ResourceRequirements struct {
	Limits   map[string]string `protobuf:"bytes,1,rep,name=limits" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Requests map[string]string `protobuf:"bytes,2,rep,name=requests" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PersistentVolumeClaimSpec_ResourceRequirements) Reset() {
	*m = PersistentVolumeClaimSpec_ResourceRequirements{}
}
func (m *PersistentVolumeClaimSpec_ResourceRequirements) String() string {
	return proto.CompactTextString(m)
}
func (*PersistentVolumeClaimSpec_ResourceRequirements) ProtoMessage() {}
func (*PersistentVolumeClaimSpec_ResourceRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28, 0}
}

func (m *PersistentVolumeClaimSpec_ResourceRequirements) GetLimits() map[string]string {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *PersistentVolumeClaimSpec_ResourceRequirements) GetRequests() map[string]string {
	if m != nil {
		return m.Requests
	}
	return nil
}

type ObjectReference struct {
	Kind            string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	Namespace       string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Uid             string `protobuf:"bytes,4,opt,name=uid" json:"uid,omitempty"`
	ApiVersion      string `protobuf:"bytes,5,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
	ResourceVersion string `protobuf:"bytes,6,opt,name=resource_version,json=resourceVersion" json:"resource_version,omitempty"`
}

func (m *ObjectReference) Reset()                    { *m = ObjectReference{} }
func (m *ObjectReference) String() string            { return proto.CompactTextString(m) }
func (*ObjectReference) ProtoMessage()               {}
func (*ObjectReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ObjectReference) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ObjectReference) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ObjectReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectReference) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ObjectReference) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *ObjectReference) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

type Service struct {
	Meta   *Meta           `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string          `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *Service_Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *Service_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *Service) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Service) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *Service) GetSpec() *Service_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Service) GetStatus() *Service_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Service_Spec struct {
	Type                     string               `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Ports                    []*Service_Spec_Port `protobuf:"bytes,2,rep,name=ports" json:"ports,omitempty"`
	Selector                 string               `protobuf:"bytes,3,opt,name=selector" json:"selector,omitempty"`
	ClusterIP                string               `protobuf:"bytes,4,opt,name=clusterIP" json:"clusterIP,omitempty"`
	ExternalIPs              []string             `protobuf:"bytes,5,rep,name=externalIPs" json:"externalIPs,omitempty"`
	LoadbalancerIP           string               `protobuf:"bytes,6,opt,name=loadbalancerIP" json:"loadbalancerIP,omitempty"`
	ExternalName             string               `protobuf:"bytes,7,opt,name=external_name,json=externalName" json:"external_name,omitempty"`
	SessionAffinity          string               `protobuf:"bytes,8,opt,name=session_affinity,json=sessionAffinity" json:"session_affinity,omitempty"`
	LoadBalancerSourceRanges []string             `protobuf:"bytes,9,rep,name=load_balancer_source_ranges,json=loadBalancerSourceRanges" json:"load_balancer_source_ranges,omitempty"`
}

func (m *Service_Spec) Reset()                    { *m = Service_Spec{} }
func (m *Service_Spec) String() string            { return proto.CompactTextString(m) }
func (*Service_Spec) ProtoMessage()               {}
func (*Service_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30, 0} }

func (m *Service_Spec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Service_Spec) GetPorts() []*Service_Spec_Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Service_Spec) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *Service_Spec) GetClusterIP() string {
	if m != nil {
		return m.ClusterIP
	}
	return ""
}

func (m *Service_Spec) GetExternalIPs() []string {
	if m != nil {
		return m.ExternalIPs
	}
	return nil
}

func (m *Service_Spec) GetLoadbalancerIP() string {
	if m != nil {
		return m.LoadbalancerIP
	}
	return ""
}

func (m *Service_Spec) GetExternalName() string {
	if m != nil {
		return m.ExternalName
	}
	return ""
}

func (m *Service_Spec) GetSessionAffinity() string {
	if m != nil {
		return m.SessionAffinity
	}
	return ""
}

func (m *Service_Spec) GetLoadBalancerSourceRanges() []string {
	if m != nil {
		return m.LoadBalancerSourceRanges
	}
	return nil
}

type Service_Spec_Port struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Protocol   string `protobuf:"bytes,2,opt,name=protocol" json:"protocol,omitempty"`
	Port       int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	TargetPort string `protobuf:"bytes,4,opt,name=target_port,json=targetPort" json:"target_port,omitempty"`
	NodePort   int32  `protobuf:"varint,5,opt,name=node_port,json=nodePort" json:"node_port,omitempty"`
}

func (m *Service_Spec_Port) Reset()                    { *m = Service_Spec_Port{} }
func (m *Service_Spec_Port) String() string            { return proto.CompactTextString(m) }
func (*Service_Spec_Port) ProtoMessage()               {}
func (*Service_Spec_Port) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30, 0, 0} }

func (m *Service_Spec_Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service_Spec_Port) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Service_Spec_Port) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Service_Spec_Port) GetTargetPort() string {
	if m != nil {
		return m.TargetPort
	}
	return ""
}

func (m *Service_Spec_Port) GetNodePort() int32 {
	if m != nil {
		return m.NodePort
	}
	return 0
}

type Service_Status struct {
	LoadbalancerIngresses []*Service_Status_LoadBalancerIngress `protobuf:"bytes,1,rep,name=loadbalancer_ingresses,json=loadbalancerIngresses" json:"loadbalancer_ingresses,omitempty"`
}

func (m *Service_Status) Reset()                    { *m = Service_Status{} }
func (m *Service_Status) String() string            { return proto.CompactTextString(m) }
func (*Service_Status) ProtoMessage()               {}
func (*Service_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30, 1} }

func (m *Service_Status) GetLoadbalancerIngresses() []*Service_Status_LoadBalancerIngress {
	if m != nil {
		return m.LoadbalancerIngresses
	}
	return nil
}

type Service_Status_LoadBalancerIngress struct {
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	IP       string `protobuf:"bytes,2,opt,name=IP,json=iP" json:"IP,omitempty"`
}

func (m *Service_Status_LoadBalancerIngress) Reset()         { *m = Service_Status_LoadBalancerIngress{} }
func (m *Service_Status_LoadBalancerIngress) String() string { return proto.CompactTextString(m) }
func (*Service_Status_LoadBalancerIngress) ProtoMessage()    {}
func (*Service_Status_LoadBalancerIngress) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30, 1, 0}
}

func (m *Service_Status_LoadBalancerIngress) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *Service_Status_LoadBalancerIngress) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type Secret struct {
	Meta *Meta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Data map[string]string `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Type string            `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Secret) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Secret) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Secret) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ReplicationController struct {
	Meta   *Meta                         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string                        `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *ReplicationController_Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *ReplicationController_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *ReplicationController) Reset()                    { *m = ReplicationController{} }
func (m *ReplicationController) String() string            { return proto.CompactTextString(m) }
func (*ReplicationController) ProtoMessage()               {}
func (*ReplicationController) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ReplicationController) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ReplicationController) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *ReplicationController) GetSpec() *ReplicationController_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ReplicationController) GetStatus() *ReplicationController_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ReplicationController_Spec struct {
	DesiredReplicas int32    `protobuf:"varint,1,opt,name=desired_replicas,json=desiredReplicas" json:"desired_replicas,omitempty"`
	Selector        string   `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	PodTemplate     *PodSpec `protobuf:"bytes,3,opt,name=pod_template,json=podTemplate" json:"pod_template,omitempty"`
}

func (m *ReplicationController_Spec) Reset()                    { *m = ReplicationController_Spec{} }
func (m *ReplicationController_Spec) String() string            { return proto.CompactTextString(m) }
func (*ReplicationController_Spec) ProtoMessage()               {}
func (*ReplicationController_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32, 0} }

func (m *ReplicationController_Spec) GetDesiredReplicas() int32 {
	if m != nil {
		return m.DesiredReplicas
	}
	return 0
}

func (m *ReplicationController_Spec) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *ReplicationController_Spec) GetPodTemplate() *PodSpec {
	if m != nil {
		return m.PodTemplate
	}
	return nil
}

type ReplicationController_Status struct {
	CurrentReplicas    int32 `protobuf:"varint,1,opt,name=current_replicas,json=currentReplicas" json:"current_replicas,omitempty"`
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observed_generation,json=observedGeneration" json:"observed_generation,omitempty"`
}

func (m *ReplicationController_Status) Reset()         { *m = ReplicationController_Status{} }
func (m *ReplicationController_Status) String() string { return proto.CompactTextString(m) }
func (*ReplicationController_Status) ProtoMessage()    {}
func (*ReplicationController_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 1}
}

func (m *ReplicationController_Status) GetCurrentReplicas() int32 {
	if m != nil {
		return m.CurrentReplicas
	}
	return 0
}

func (m *ReplicationController_Status) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

type ReplicaSet struct {
	Meta   *Meta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string             `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *ReplicaSet_Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *ReplicaSet_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *ReplicaSet) Reset()                    { *m = ReplicaSet{} }
func (m *ReplicaSet) String() string            { return proto.CompactTextString(m) }
func (*ReplicaSet) ProtoMessage()               {}
func (*ReplicaSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ReplicaSet) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ReplicaSet) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *ReplicaSet) GetSpec() *ReplicaSet_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ReplicaSet) GetStatus() *ReplicaSet_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ReplicaSet_Spec struct {
	DesiredReplicas int32    `protobuf:"varint,1,opt,name=desired_replicas,json=desiredReplicas" json:"desired_replicas,omitempty"`
	Selector        string   `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	PodTemplate     *PodSpec `protobuf:"bytes,3,opt,name=pod_template,json=podTemplate" json:"pod_template,omitempty"`
}

func (m *ReplicaSet_Spec) Reset()                    { *m = ReplicaSet_Spec{} }
func (m *ReplicaSet_Spec) String() string            { return proto.CompactTextString(m) }
func (*ReplicaSet_Spec) ProtoMessage()               {}
func (*ReplicaSet_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33, 0} }

func (m *ReplicaSet_Spec) GetDesiredReplicas() int32 {
	if m != nil {
		return m.DesiredReplicas
	}
	return 0
}

func (m *ReplicaSet_Spec) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *ReplicaSet_Spec) GetPodTemplate() *PodSpec {
	if m != nil {
		return m.PodTemplate
	}
	return nil
}

type ReplicaSet_Status struct {
	CurrentReplicas    int32 `protobuf:"varint,1,opt,name=current_replicas,json=currentReplicas" json:"current_replicas,omitempty"`
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observed_generation,json=observedGeneration" json:"observed_generation,omitempty"`
}

func (m *ReplicaSet_Status) Reset()                    { *m = ReplicaSet_Status{} }
func (m *ReplicaSet_Status) String() string            { return proto.CompactTextString(m) }
func (*ReplicaSet_Status) ProtoMessage()               {}
func (*ReplicaSet_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33, 1} }

func (m *ReplicaSet_Status) GetCurrentReplicas() int32 {
	if m != nil {
		return m.CurrentReplicas
	}
	return 0
}

func (m *ReplicaSet_Status) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

type DaemonSet struct {
	Meta   *Meta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string            `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *DaemonSet_Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *DaemonSet_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *DaemonSet) Reset()                    { *m = DaemonSet{} }
func (m *DaemonSet) String() string            { return proto.CompactTextString(m) }
func (*DaemonSet) ProtoMessage()               {}
func (*DaemonSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *DaemonSet) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *DaemonSet) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *DaemonSet) GetSpec() *DaemonSet_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *DaemonSet) GetStatus() *DaemonSet_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type DaemonSet_Spec struct {
	Selector    string   `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
	PodTemplate *PodSpec `protobuf:"bytes,2,opt,name=pod_template,json=podTemplate" json:"pod_template,omitempty"`
}

func (m *DaemonSet_Spec) Reset()                    { *m = DaemonSet_Spec{} }
func (m *DaemonSet_Spec) String() string            { return proto.CompactTextString(m) }
func (*DaemonSet_Spec) ProtoMessage()               {}
func (*DaemonSet_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34, 0} }

func (m *DaemonSet_Spec) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *DaemonSet_Spec) GetPodTemplate() *PodSpec {
	if m != nil {
		return m.PodTemplate
	}
	return nil
}

type DaemonSet_Status struct {
	CurrentNumberScheduled int32 `protobuf:"varint,1,opt,name=current_number_scheduled,json=currentNumberScheduled" json:"current_number_scheduled,omitempty"`
	NumberMisscheduled     int32 `protobuf:"varint,2,opt,name=number_misscheduled,json=numberMisscheduled" json:"number_misscheduled,omitempty"`
	DesiredNumberScheduled int32 `protobuf:"varint,3,opt,name=desired_number_scheduled,json=desiredNumberScheduled" json:"desired_number_scheduled,omitempty"`
}

func (m *DaemonSet_Status) Reset()                    { *m = DaemonSet_Status{} }
func (m *DaemonSet_Status) String() string            { return proto.CompactTextString(m) }
func (*DaemonSet_Status) ProtoMessage()               {}
func (*DaemonSet_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34, 1} }

func (m *DaemonSet_Status) GetCurrentNumberScheduled() int32 {
	if m != nil {
		return m.CurrentNumberScheduled
	}
	return 0
}

func (m *DaemonSet_Status) GetNumberMisscheduled() int32 {
	if m != nil {
		return m.NumberMisscheduled
	}
	return 0
}

func (m *DaemonSet_Status) GetDesiredNumberScheduled() int32 {
	if m != nil {
		return m.DesiredNumberScheduled
	}
	return 0
}

type Deployment struct {
	Meta   *Meta                        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string                       `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *Deployment_Spec             `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *Deployment_DeploymentStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (m *Deployment) String() string            { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *Deployment) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Deployment) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *Deployment) GetSpec() *Deployment_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Deployment) GetStatus() *Deployment_DeploymentStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type Deployment_Spec struct {
	DesiredReplicas         int32                               `protobuf:"varint,1,opt,name=desired_replicas,json=desiredReplicas" json:"desired_replicas,omitempty"`
	Selector                string                              `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	PodTemplate             *PodSpec                            `protobuf:"bytes,3,opt,name=pod_template,json=podTemplate" json:"pod_template,omitempty"`
	MinReadySeconds         int32                               `protobuf:"varint,4,opt,name=min_ready_seconds,json=minReadySeconds" json:"min_ready_seconds,omitempty"`
	RevisionHistoryLimit    int32                               `protobuf:"varint,5,opt,name=revision_history_limit,json=revisionHistoryLimit" json:"revision_history_limit,omitempty"`
	Paused                  bool                                `protobuf:"varint,6,opt,name=paused" json:"paused,omitempty"`
	RollbackTo              *Deployment_Spec_RollbackConfig     `protobuf:"bytes,7,opt,name=rollback_to,json=rollbackTo" json:"rollback_to,omitempty"`
	ProgressDeadlineSeconds int32                               `protobuf:"varint,8,opt,name=progress_deadline_seconds,json=progressDeadlineSeconds" json:"progress_deadline_seconds,omitempty"`
	Strategy                *Deployment_Spec_DeploymentStrategy `protobuf:"bytes,9,opt,name=strategy" json:"strategy,omitempty"`
}

func (m *Deployment_Spec) Reset()                    { *m = Deployment_Spec{} }
func (m *Deployment_Spec) String() string            { return proto.CompactTextString(m) }
func (*Deployment_Spec) ProtoMessage()               {}
func (*Deployment_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35, 0} }

func (m *Deployment_Spec) GetDesiredReplicas() int32 {
	if m != nil {
		return m.DesiredReplicas
	}
	return 0
}

func (m *Deployment_Spec) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *Deployment_Spec) GetPodTemplate() *PodSpec {
	if m != nil {
		return m.PodTemplate
	}
	return nil
}

func (m *Deployment_Spec) GetMinReadySeconds() int32 {
	if m != nil {
		return m.MinReadySeconds
	}
	return 0
}

func (m *Deployment_Spec) GetRevisionHistoryLimit() int32 {
	if m != nil {
		return m.RevisionHistoryLimit
	}
	return 0
}

func (m *Deployment_Spec) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *Deployment_Spec) GetRollbackTo() *Deployment_Spec_RollbackConfig {
	if m != nil {
		return m.RollbackTo
	}
	return nil
}

func (m *Deployment_Spec) GetProgressDeadlineSeconds() int32 {
	if m != nil {
		return m.ProgressDeadlineSeconds
	}
	return 0
}

func (m *Deployment_Spec) GetStrategy() *Deployment_Spec_DeploymentStrategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

type Deployment_Spec_DeploymentStrategy struct {
	Type          string                                   `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	RollingUpdate *Deployment_Spec_RollingUpdateDeployment `protobuf:"bytes,2,opt,name=rolling_update,json=rollingUpdate" json:"rolling_update,omitempty"`
}

func (m *Deployment_Spec_DeploymentStrategy) Reset()         { *m = Deployment_Spec_DeploymentStrategy{} }
func (m *Deployment_Spec_DeploymentStrategy) String() string { return proto.CompactTextString(m) }
func (*Deployment_Spec_DeploymentStrategy) ProtoMessage()    {}
func (*Deployment_Spec_DeploymentStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{35, 0, 0}
}

func (m *Deployment_Spec_DeploymentStrategy) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Deployment_Spec_DeploymentStrategy) GetRollingUpdate() *Deployment_Spec_RollingUpdateDeployment {
	if m != nil {
		return m.RollingUpdate
	}
	return nil
}

type Deployment_Spec_RollingUpdateDeployment struct {
	MaxUnavailable string `protobuf:"bytes,1,opt,name=max_unavailable,json=maxUnavailable" json:"max_unavailable,omitempty"`
	MaxSurge       string `protobuf:"bytes,2,opt,name=max_surge,json=maxSurge" json:"max_surge,omitempty"`
}

func (m *Deployment_Spec_RollingUpdateDeployment) Reset() {
	*m = Deployment_Spec_RollingUpdateDeployment{}
}
func (m *Deployment_Spec_RollingUpdateDeployment) String() string { return proto.CompactTextString(m) }
func (*Deployment_Spec_RollingUpdateDeployment) ProtoMessage()    {}
func (*Deployment_Spec_RollingUpdateDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{35, 0, 1}
}

func (m *Deployment_Spec_RollingUpdateDeployment) GetMaxUnavailable() string {
	if m != nil {
		return m.MaxUnavailable
	}
	return ""
}

func (m *Deployment_Spec_RollingUpdateDeployment) GetMaxSurge() string {
	if m != nil {
		return m.MaxSurge
	}
	return ""
}

type Deployment_Spec_RollbackConfig struct {
	Revision int64 `protobuf:"varint,1,opt,name=revision" json:"revision,omitempty"`
}

func (m *Deployment_Spec_RollbackConfig) Reset()         { *m = Deployment_Spec_RollbackConfig{} }
func (m *Deployment_Spec_RollbackConfig) String() string { return proto.CompactTextString(m) }
func (*Deployment_Spec_RollbackConfig) ProtoMessage()    {}
func (*Deployment_Spec_RollbackConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{35, 0, 2}
}

func (m *Deployment_Spec_RollbackConfig) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type Deployment_DeploymentStatus struct {
	ObservedGeneration  int64                `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration" json:"observed_generation,omitempty"`
	Replicas            int32                `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
	UpdatedReplicas     int32                `protobuf:"varint,3,opt,name=updated_replicas,json=updatedReplicas" json:"updated_replicas,omitempty"`
	AvailableReplicas   int32                `protobuf:"varint,4,opt,name=available_replicas,json=availableReplicas" json:"available_replicas,omitempty"`
	UnavailableReplicas int32                `protobuf:"varint,5,opt,name=unavailable_replicas,json=unavailableReplicas" json:"unavailable_replicas,omitempty"`
	Conditions          []*ResourceCondition `protobuf:"bytes,6,rep,name=conditions" json:"conditions,omitempty"`
}

func (m *Deployment_DeploymentStatus) Reset()                    { *m = Deployment_DeploymentStatus{} }
func (m *Deployment_DeploymentStatus) String() string            { return proto.CompactTextString(m) }
func (*Deployment_DeploymentStatus) ProtoMessage()               {}
func (*Deployment_DeploymentStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35, 1} }

func (m *Deployment_DeploymentStatus) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

func (m *Deployment_DeploymentStatus) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *Deployment_DeploymentStatus) GetUpdatedReplicas() int32 {
	if m != nil {
		return m.UpdatedReplicas
	}
	return 0
}

func (m *Deployment_DeploymentStatus) GetAvailableReplicas() int32 {
	if m != nil {
		return m.AvailableReplicas
	}
	return 0
}

func (m *Deployment_DeploymentStatus) GetUnavailableReplicas() int32 {
	if m != nil {
		return m.UnavailableReplicas
	}
	return 0
}

func (m *Deployment_DeploymentStatus) GetConditions() []*ResourceCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type StatefulSet struct {
	Meta   *Meta               `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string              `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *StatefulSet_Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *StatefulSet_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *StatefulSet) Reset()                    { *m = StatefulSet{} }
func (m *StatefulSet) String() string            { return proto.CompactTextString(m) }
func (*StatefulSet) ProtoMessage()               {}
func (*StatefulSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *StatefulSet) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *StatefulSet) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *StatefulSet) GetSpec() *StatefulSet_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *StatefulSet) GetStatus() *StatefulSet_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type StatefulSet_Spec struct {
	DesiredReplicas int32    `protobuf:"varint,1,opt,name=desired_replicas,json=desiredReplicas" json:"desired_replicas,omitempty"`
	Selector        string   `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	PodTemplate     *PodSpec `protobuf:"bytes,3,opt,name=pod_template,json=podTemplate" json:"pod_template,omitempty"`
	ServiceName     string   `protobuf:"bytes,4,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
}

func (m *StatefulSet_Spec) Reset()                    { *m = StatefulSet_Spec{} }
func (m *StatefulSet_Spec) String() string            { return proto.CompactTextString(m) }
func (*StatefulSet_Spec) ProtoMessage()               {}
func (*StatefulSet_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36, 0} }

func (m *StatefulSet_Spec) GetDesiredReplicas() int32 {
	if m != nil {
		return m.DesiredReplicas
	}
	return 0
}

func (m *StatefulSet_Spec) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *StatefulSet_Spec) GetPodTemplate() *PodSpec {
	if m != nil {
		return m.PodTemplate
	}
	return nil
}

func (m *StatefulSet_Spec) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type StatefulSet_Status struct {
	CurrentReplicas    int32 `protobuf:"varint,1,opt,name=current_replicas,json=currentReplicas" json:"current_replicas,omitempty"`
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observed_generation,json=observedGeneration" json:"observed_generation,omitempty"`
}

func (m *StatefulSet_Status) Reset()                    { *m = StatefulSet_Status{} }
func (m *StatefulSet_Status) String() string            { return proto.CompactTextString(m) }
func (*StatefulSet_Status) ProtoMessage()               {}
func (*StatefulSet_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36, 1} }

func (m *StatefulSet_Status) GetCurrentReplicas() int32 {
	if m != nil {
		return m.CurrentReplicas
	}
	return 0
}

func (m *StatefulSet_Status) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

type StorageClass struct {
	Meta        *Meta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Provisioner string            `protobuf:"bytes,2,opt,name=provisioner" json:"provisioner,omitempty"`
	Parameters  map[string]string `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StorageClass) Reset()                    { *m = StorageClass{} }
func (m *StorageClass) String() string            { return proto.CompactTextString(m) }
func (*StorageClass) ProtoMessage()               {}
func (*StorageClass) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *StorageClass) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *StorageClass) GetProvisioner() string {
	if m != nil {
		return m.Provisioner
	}
	return ""
}

func (m *StorageClass) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type Event struct {
	Meta           *Meta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Reason         string       `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	Message        string       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Source         *EventSource `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	FirstTimestamp int64        `protobuf:"varint,5,opt,name=first_timestamp,json=firstTimestamp" json:"first_timestamp,omitempty"`
	LastTimestamp  int64        `protobuf:"varint,6,opt,name=last_timestamp,json=lastTimestamp" json:"last_timestamp,omitempty"`
	Count          int32        `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`
	Type           string       `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Event) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Event) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Event) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Event) GetSource() *EventSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Event) GetFirstTimestamp() int64 {
	if m != nil {
		return m.FirstTimestamp
	}
	return 0
}

func (m *Event) GetLastTimestamp() int64 {
	if m != nil {
		return m.LastTimestamp
	}
	return 0
}

func (m *Event) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Event) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type EventSource struct {
	Component string `protobuf:"bytes,1,opt,name=component" json:"component,omitempty"`
	Host      string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *EventSource) Reset()                    { *m = EventSource{} }
func (m *EventSource) String() string            { return proto.CompactTextString(m) }
func (*EventSource) ProtoMessage()               {}
func (*EventSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *EventSource) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *EventSource) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type Metrics struct {
	CpuUsage    []*Metrics_DataPoint `protobuf:"bytes,1,rep,name=cpu_usage,json=cpuUsage" json:"cpu_usage,omitempty"`
	MemoryUsage []*Metrics_DataPoint `protobuf:"bytes,2,rep,name=memory_usage,json=memoryUsage" json:"memory_usage,omitempty"`
}

func (m *Metrics) Reset()                    { *m = Metrics{} }
func (m *Metrics) String() string            { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()               {}
func (*Metrics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Metrics) GetCpuUsage() []*Metrics_DataPoint {
	if m != nil {
		return m.CpuUsage
	}
	return nil
}

func (m *Metrics) GetMemoryUsage() []*Metrics_DataPoint {
	if m != nil {
		return m.MemoryUsage
	}
	return nil
}

type Metrics_DataPoint struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     int64 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *Metrics_DataPoint) Reset()                    { *m = Metrics_DataPoint{} }
func (m *Metrics_DataPoint) String() string            { return proto.CompactTextString(m) }
func (*Metrics_DataPoint) ProtoMessage()               {}
func (*Metrics_DataPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40, 0} }

func (m *Metrics_DataPoint) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Metrics_DataPoint) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PersistentVolumeRegisterRequest struct {
	Cluster    string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Identifier string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	Plugin     string `protobuf:"bytes,4,opt,name=plugin" json:"plugin,omitempty"`
	SizeGb     int64  `protobuf:"varint,5,opt,name=size_gb,json=sizeGb" json:"size_gb,omitempty"`
	Endpoint   string `protobuf:"bytes,6,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *PersistentVolumeRegisterRequest) Reset()         { *m = PersistentVolumeRegisterRequest{} }
func (m *PersistentVolumeRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeRegisterRequest) ProtoMessage()    {}
func (*PersistentVolumeRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41}
}

func (m *PersistentVolumeRegisterRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *PersistentVolumeRegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PersistentVolumeRegisterRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *PersistentVolumeRegisterRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *PersistentVolumeRegisterRequest) GetSizeGb() int64 {
	if m != nil {
		return m.SizeGb
	}
	return 0
}

func (m *PersistentVolumeRegisterRequest) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

type PersistentVolumeUnRegisterRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *PersistentVolumeUnRegisterRequest) Reset()         { *m = PersistentVolumeUnRegisterRequest{} }
func (m *PersistentVolumeUnRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeUnRegisterRequest) ProtoMessage()    {}
func (*PersistentVolumeUnRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{42}
}

func (m *PersistentVolumeUnRegisterRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *PersistentVolumeUnRegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PersistentVolumeClaimRegisterRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	SizeGb    int64  `protobuf:"varint,3,opt,name=size_gb,json=sizeGb" json:"size_gb,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *PersistentVolumeClaimRegisterRequest) Reset()         { *m = PersistentVolumeClaimRegisterRequest{} }
func (m *PersistentVolumeClaimRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeClaimRegisterRequest) ProtoMessage()    {}
func (*PersistentVolumeClaimRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43}
}

func (m *PersistentVolumeClaimRegisterRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *PersistentVolumeClaimRegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PersistentVolumeClaimRegisterRequest) GetSizeGb() int64 {
	if m != nil {
		return m.SizeGb
	}
	return 0
}

func (m *PersistentVolumeClaimRegisterRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type PersistentVolumeClaimUnRegisterRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *PersistentVolumeClaimUnRegisterRequest) Reset() {
	*m = PersistentVolumeClaimUnRegisterRequest{}
}
func (m *PersistentVolumeClaimUnRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeClaimUnRegisterRequest) ProtoMessage()    {}
func (*PersistentVolumeClaimUnRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{44}
}

func (m *PersistentVolumeClaimUnRegisterRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *PersistentVolumeClaimUnRegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PersistentVolumeClaimUnRegisterRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ClusterAlert struct {
	Meta *Meta                          `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec *ClusterAlert_ClusterAlertSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *ClusterAlert) Reset()                    { *m = ClusterAlert{} }
func (m *ClusterAlert) String() string            { return proto.CompactTextString(m) }
func (*ClusterAlert) ProtoMessage()               {}
func (*ClusterAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ClusterAlert) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ClusterAlert) GetSpec() *ClusterAlert_ClusterAlertSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ClusterAlert_ClusterAlertSpec struct {
	// Icinga CheckCommand name
	// Values are in
	//    any_http
	//    component_status
	//    json_path
	//    node_exists
	//    pod_exists
	//    kube_event
	//    certificate_expiry
	//    hello_icinga
	//    dig
	//    dns
	//    dummy
	//    icmp
	Check         string            `protobuf:"bytes,1,opt,name=check" json:"check,omitempty"`
	CheckInterval string            `protobuf:"bytes,2,opt,name=check_interval,json=checkInterval" json:"check_interval,omitempty"`
	AlertInterval string            `protobuf:"bytes,3,opt,name=alert_interval,json=alertInterval" json:"alert_interval,omitempty"`
	Receivers     []*AlertReceiver  `protobuf:"bytes,4,rep,name=receivers" json:"receivers,omitempty"`
	Vars          map[string]string `protobuf:"bytes,5,rep,name=vars" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ClusterAlert_ClusterAlertSpec) Reset()         { *m = ClusterAlert_ClusterAlertSpec{} }
func (m *ClusterAlert_ClusterAlertSpec) String() string { return proto.CompactTextString(m) }
func (*ClusterAlert_ClusterAlertSpec) ProtoMessage()    {}
func (*ClusterAlert_ClusterAlertSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{45, 0}
}

func (m *ClusterAlert_ClusterAlertSpec) GetCheck() string {
	if m != nil {
		return m.Check
	}
	return ""
}

func (m *ClusterAlert_ClusterAlertSpec) GetCheckInterval() string {
	if m != nil {
		return m.CheckInterval
	}
	return ""
}

func (m *ClusterAlert_ClusterAlertSpec) GetAlertInterval() string {
	if m != nil {
		return m.AlertInterval
	}
	return ""
}

func (m *ClusterAlert_ClusterAlertSpec) GetReceivers() []*AlertReceiver {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *ClusterAlert_ClusterAlertSpec) GetVars() map[string]string {
	if m != nil {
		return m.Vars
	}
	return nil
}

type NodeAlert struct {
	Meta *Meta                    `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec *NodeAlert_NodeAlertSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *NodeAlert) Reset()                    { *m = NodeAlert{} }
func (m *NodeAlert) String() string            { return proto.CompactTextString(m) }
func (*NodeAlert) ProtoMessage()               {}
func (*NodeAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *NodeAlert) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NodeAlert) GetSpec() *NodeAlert_NodeAlertSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type NodeAlert_NodeAlertSpec struct {
	Selector map[string]string `protobuf:"bytes,1,rep,name=selector" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NodeName string            `protobuf:"bytes,2,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	// Icinga CheckCommand name
	// Values are in
	//    influx_query
	//    node_disk
	//    node_status
	Check         string            `protobuf:"bytes,3,opt,name=check" json:"check,omitempty"`
	CheckInterval string            `protobuf:"bytes,4,opt,name=check_interval,json=checkInterval" json:"check_interval,omitempty"`
	AlertInterval string            `protobuf:"bytes,5,opt,name=alert_interval,json=alertInterval" json:"alert_interval,omitempty"`
	Receivers     []*AlertReceiver  `protobuf:"bytes,6,rep,name=receivers" json:"receivers,omitempty"`
	Vars          map[string]string `protobuf:"bytes,7,rep,name=vars" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NodeAlert_NodeAlertSpec) Reset()                    { *m = NodeAlert_NodeAlertSpec{} }
func (m *NodeAlert_NodeAlertSpec) String() string            { return proto.CompactTextString(m) }
func (*NodeAlert_NodeAlertSpec) ProtoMessage()               {}
func (*NodeAlert_NodeAlertSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46, 0} }

func (m *NodeAlert_NodeAlertSpec) GetSelector() map[string]string {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *NodeAlert_NodeAlertSpec) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeAlert_NodeAlertSpec) GetCheck() string {
	if m != nil {
		return m.Check
	}
	return ""
}

func (m *NodeAlert_NodeAlertSpec) GetCheckInterval() string {
	if m != nil {
		return m.CheckInterval
	}
	return ""
}

func (m *NodeAlert_NodeAlertSpec) GetAlertInterval() string {
	if m != nil {
		return m.AlertInterval
	}
	return ""
}

func (m *NodeAlert_NodeAlertSpec) GetReceivers() []*AlertReceiver {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *NodeAlert_NodeAlertSpec) GetVars() map[string]string {
	if m != nil {
		return m.Vars
	}
	return nil
}

type PodAlert struct {
	Meta *Meta                  `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec *PodAlert_PodAlertSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *PodAlert) Reset()                    { *m = PodAlert{} }
func (m *PodAlert) String() string            { return proto.CompactTextString(m) }
func (*PodAlert) ProtoMessage()               {}
func (*PodAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *PodAlert) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PodAlert) GetSpec() *PodAlert_PodAlertSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type PodAlert_PodAlertSpec struct {
	Selector string `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
	PodName  string `protobuf:"bytes,2,opt,name=pod_name,json=podName" json:"pod_name,omitempty"`
	// Icinga CheckCommand name
	// Values are in
	//    influx_query
	//    pod_status
	//    volume
	//    kube_exec
	Check         string            `protobuf:"bytes,3,opt,name=check" json:"check,omitempty"`
	CheckInterval string            `protobuf:"bytes,4,opt,name=check_interval,json=checkInterval" json:"check_interval,omitempty"`
	AlertInterval string            `protobuf:"bytes,5,opt,name=alert_interval,json=alertInterval" json:"alert_interval,omitempty"`
	Receivers     []*AlertReceiver  `protobuf:"bytes,6,rep,name=receivers" json:"receivers,omitempty"`
	Vars          map[string]string `protobuf:"bytes,7,rep,name=vars" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PodAlert_PodAlertSpec) Reset()                    { *m = PodAlert_PodAlertSpec{} }
func (m *PodAlert_PodAlertSpec) String() string            { return proto.CompactTextString(m) }
func (*PodAlert_PodAlertSpec) ProtoMessage()               {}
func (*PodAlert_PodAlertSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47, 0} }

func (m *PodAlert_PodAlertSpec) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *PodAlert_PodAlertSpec) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *PodAlert_PodAlertSpec) GetCheck() string {
	if m != nil {
		return m.Check
	}
	return ""
}

func (m *PodAlert_PodAlertSpec) GetCheckInterval() string {
	if m != nil {
		return m.CheckInterval
	}
	return ""
}

func (m *PodAlert_PodAlertSpec) GetAlertInterval() string {
	if m != nil {
		return m.AlertInterval
	}
	return ""
}

func (m *PodAlert_PodAlertSpec) GetReceivers() []*AlertReceiver {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *PodAlert_PodAlertSpec) GetVars() map[string]string {
	if m != nil {
		return m.Vars
	}
	return nil
}

type AlertReceiver struct {
	State    string   `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	To       []string `protobuf:"bytes,2,rep,name=to" json:"to,omitempty"`
	Notifier string   `protobuf:"bytes,3,opt,name=notifier" json:"notifier,omitempty"`
}

func (m *AlertReceiver) Reset()                    { *m = AlertReceiver{} }
func (m *AlertReceiver) String() string            { return proto.CompactTextString(m) }
func (*AlertReceiver) ProtoMessage()               {}
func (*AlertReceiver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *AlertReceiver) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *AlertReceiver) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *AlertReceiver) GetNotifier() string {
	if m != nil {
		return m.Notifier
	}
	return ""
}

type Role struct {
	Meta  *Meta   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Rules []*Rule `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *Role) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Role) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type RoleBinding struct {
	Meta     *Meta            `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Subjects []*Subject       `protobuf:"bytes,2,rep,name=subjects" json:"subjects,omitempty"`
	RoleRef  *ObjectReference `protobuf:"bytes,3,opt,name=role_ref,json=roleRef" json:"role_ref,omitempty"`
}

func (m *RoleBinding) Reset()                    { *m = RoleBinding{} }
func (m *RoleBinding) String() string            { return proto.CompactTextString(m) }
func (*RoleBinding) ProtoMessage()               {}
func (*RoleBinding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *RoleBinding) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RoleBinding) GetSubjects() []*Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *RoleBinding) GetRoleRef() *ObjectReference {
	if m != nil {
		return m.RoleRef
	}
	return nil
}

type ClusterRole struct {
	Meta  *Meta   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Rules []*Rule `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (m *ClusterRole) Reset()                    { *m = ClusterRole{} }
func (m *ClusterRole) String() string            { return proto.CompactTextString(m) }
func (*ClusterRole) ProtoMessage()               {}
func (*ClusterRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *ClusterRole) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ClusterRole) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type ClusterRoleBinding struct {
	Meta     *Meta            `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Subjects []*Subject       `protobuf:"bytes,2,rep,name=subjects" json:"subjects,omitempty"`
	RoleRef  *ObjectReference `protobuf:"bytes,3,opt,name=role_ref,json=roleRef" json:"role_ref,omitempty"`
}

func (m *ClusterRoleBinding) Reset()                    { *m = ClusterRoleBinding{} }
func (m *ClusterRoleBinding) String() string            { return proto.CompactTextString(m) }
func (*ClusterRoleBinding) ProtoMessage()               {}
func (*ClusterRoleBinding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *ClusterRoleBinding) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ClusterRoleBinding) GetSubjects() []*Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *ClusterRoleBinding) GetRoleRef() *ObjectReference {
	if m != nil {
		return m.RoleRef
	}
	return nil
}

type Rule struct {
	Verbs           []string `protobuf:"bytes,1,rep,name=verbs" json:"verbs,omitempty"`
	ApiGroups       []string `protobuf:"bytes,2,rep,name=api_groups,json=apiGroups" json:"api_groups,omitempty"`
	Resources       []string `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty"`
	ResourceNames   []string `protobuf:"bytes,4,rep,name=resource_names,json=resourceNames" json:"resource_names,omitempty"`
	NonResourceUrls []string `protobuf:"bytes,5,rep,name=non_resource_urls,json=nonResourceUrls" json:"non_resource_urls,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *Rule) GetVerbs() []string {
	if m != nil {
		return m.Verbs
	}
	return nil
}

func (m *Rule) GetApiGroups() []string {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

func (m *Rule) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Rule) GetResourceNames() []string {
	if m != nil {
		return m.ResourceNames
	}
	return nil
}

func (m *Rule) GetNonResourceUrls() []string {
	if m != nil {
		return m.NonResourceUrls
	}
	return nil
}

type Subject struct {
	Kind      string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	ApiGroup  string `protobuf:"bytes,2,opt,name=api_group,json=apiGroup" json:"api_group,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *Subject) Reset()                    { *m = Subject{} }
func (m *Subject) String() string            { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()               {}
func (*Subject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *Subject) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Subject) GetApiGroup() string {
	if m != nil {
		return m.ApiGroup
	}
	return ""
}

func (m *Subject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subject) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type Restic struct {
	Meta   *Meta          `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *Restic_Spec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Restic_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Restic) Reset()                    { *m = Restic{} }
func (m *Restic) String() string            { return proto.CompactTextString(m) }
func (*Restic) ProtoMessage()               {}
func (*Restic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *Restic) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Restic) GetSpec() *Restic_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Restic) GetStatus() *Restic_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Restic_Spec struct {
	Selector      string                   `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
	FileGroups    []*Restic_Spec_FileGroup `protobuf:"bytes,2,rep,name=file_groups,json=fileGroups" json:"file_groups,omitempty"`
	Backend       *StashBackend            `protobuf:"bytes,3,opt,name=backend" json:"backend,omitempty"`
	Schedule      string                   `protobuf:"bytes,4,opt,name=schedule" json:"schedule,omitempty"`
	UseAutoPrefix string                   `protobuf:"bytes,5,opt,name=use_auto_prefix,json=useAutoPrefix" json:"use_auto_prefix,omitempty"`
	VolumeMounts  []*VolumeMount           `protobuf:"bytes,6,rep,name=volume_mounts,json=volumeMounts" json:"volume_mounts,omitempty"`
}

func (m *Restic_Spec) Reset()                    { *m = Restic_Spec{} }
func (m *Restic_Spec) String() string            { return proto.CompactTextString(m) }
func (*Restic_Spec) ProtoMessage()               {}
func (*Restic_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55, 0} }

func (m *Restic_Spec) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *Restic_Spec) GetFileGroups() []*Restic_Spec_FileGroup {
	if m != nil {
		return m.FileGroups
	}
	return nil
}

func (m *Restic_Spec) GetBackend() *StashBackend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (m *Restic_Spec) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *Restic_Spec) GetUseAutoPrefix() string {
	if m != nil {
		return m.UseAutoPrefix
	}
	return ""
}

func (m *Restic_Spec) GetVolumeMounts() []*VolumeMount {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

type Restic_Spec_FileGroup struct {
	Path            string                       `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Tags            []string                     `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	RetentionPolicy *Restic_Spec_RetentionPolicy `protobuf:"bytes,3,opt,name=retention_policy,json=retentionPolicy" json:"retention_policy,omitempty"`
}

func (m *Restic_Spec_FileGroup) Reset()                    { *m = Restic_Spec_FileGroup{} }
func (m *Restic_Spec_FileGroup) String() string            { return proto.CompactTextString(m) }
func (*Restic_Spec_FileGroup) ProtoMessage()               {}
func (*Restic_Spec_FileGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55, 0, 0} }

func (m *Restic_Spec_FileGroup) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Restic_Spec_FileGroup) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Restic_Spec_FileGroup) GetRetentionPolicy() *Restic_Spec_RetentionPolicy {
	if m != nil {
		return m.RetentionPolicy
	}
	return nil
}

type Restic_Spec_RetentionPolicy struct {
	KeepLast    int32    `protobuf:"varint,1,opt,name=keep_last,json=keepLast" json:"keep_last,omitempty"`
	KeepHourly  int32    `protobuf:"varint,2,opt,name=keep_hourly,json=keepHourly" json:"keep_hourly,omitempty"`
	KeepDaily   int32    `protobuf:"varint,3,opt,name=keep_daily,json=keepDaily" json:"keep_daily,omitempty"`
	KeepWeekly  int32    `protobuf:"varint,4,opt,name=keep_weekly,json=keepWeekly" json:"keep_weekly,omitempty"`
	KeepMonthly int32    `protobuf:"varint,5,opt,name=keep_monthly,json=keepMonthly" json:"keep_monthly,omitempty"`
	KeepYearly  int32    `protobuf:"varint,6,opt,name=keep_yearly,json=keepYearly" json:"keep_yearly,omitempty"`
	KeepTags    []string `protobuf:"bytes,7,rep,name=keep_tags,json=keepTags" json:"keep_tags,omitempty"`
	Prune       bool     `protobuf:"varint,8,opt,name=prune" json:"prune,omitempty"`
	DryRun      bool     `protobuf:"varint,9,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
}

func (m *Restic_Spec_RetentionPolicy) Reset()         { *m = Restic_Spec_RetentionPolicy{} }
func (m *Restic_Spec_RetentionPolicy) String() string { return proto.CompactTextString(m) }
func (*Restic_Spec_RetentionPolicy) ProtoMessage()    {}
func (*Restic_Spec_RetentionPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{55, 0, 1}
}

func (m *Restic_Spec_RetentionPolicy) GetKeepLast() int32 {
	if m != nil {
		return m.KeepLast
	}
	return 0
}

func (m *Restic_Spec_RetentionPolicy) GetKeepHourly() int32 {
	if m != nil {
		return m.KeepHourly
	}
	return 0
}

func (m *Restic_Spec_RetentionPolicy) GetKeepDaily() int32 {
	if m != nil {
		return m.KeepDaily
	}
	return 0
}

func (m *Restic_Spec_RetentionPolicy) GetKeepWeekly() int32 {
	if m != nil {
		return m.KeepWeekly
	}
	return 0
}

func (m *Restic_Spec_RetentionPolicy) GetKeepMonthly() int32 {
	if m != nil {
		return m.KeepMonthly
	}
	return 0
}

func (m *Restic_Spec_RetentionPolicy) GetKeepYearly() int32 {
	if m != nil {
		return m.KeepYearly
	}
	return 0
}

func (m *Restic_Spec_RetentionPolicy) GetKeepTags() []string {
	if m != nil {
		return m.KeepTags
	}
	return nil
}

func (m *Restic_Spec_RetentionPolicy) GetPrune() bool {
	if m != nil {
		return m.Prune
	}
	return false
}

func (m *Restic_Spec_RetentionPolicy) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

type Restic_Status struct {
	FirstBackupTime          int64  `protobuf:"varint,1,opt,name=first_backup_time,json=firstBackupTime" json:"first_backup_time,omitempty"`
	LastBackupTime           int64  `protobuf:"varint,2,opt,name=last_backup_time,json=lastBackupTime" json:"last_backup_time,omitempty"`
	LastSuccessfulBackupTime int64  `protobuf:"varint,3,opt,name=last_successful_backup_time,json=lastSuccessfulBackupTime" json:"last_successful_backup_time,omitempty"`
	LastBackupDuration       string `protobuf:"bytes,4,opt,name=last_backup_duration,json=lastBackupDuration" json:"last_backup_duration,omitempty"`
	BackupCount              int64  `protobuf:"varint,5,opt,name=backup_count,json=backupCount" json:"backup_count,omitempty"`
}

func (m *Restic_Status) Reset()                    { *m = Restic_Status{} }
func (m *Restic_Status) String() string            { return proto.CompactTextString(m) }
func (*Restic_Status) ProtoMessage()               {}
func (*Restic_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55, 1} }

func (m *Restic_Status) GetFirstBackupTime() int64 {
	if m != nil {
		return m.FirstBackupTime
	}
	return 0
}

func (m *Restic_Status) GetLastBackupTime() int64 {
	if m != nil {
		return m.LastBackupTime
	}
	return 0
}

func (m *Restic_Status) GetLastSuccessfulBackupTime() int64 {
	if m != nil {
		return m.LastSuccessfulBackupTime
	}
	return 0
}

func (m *Restic_Status) GetLastBackupDuration() string {
	if m != nil {
		return m.LastBackupDuration
	}
	return ""
}

func (m *Restic_Status) GetBackupCount() int64 {
	if m != nil {
		return m.BackupCount
	}
	return 0
}

type StashBackend struct {
	StorageSecretName string `protobuf:"bytes,1,opt,name=storage_secret_name,json=storageSecretName" json:"storage_secret_name,omitempty"`
	// Types that are valid to be assigned to Storage:
	//	*StashBackend_Local
	//	*StashBackend_S3
	//	*StashBackend_GCS
	//	*StashBackend_Azure
	//	*StashBackend_Swift
	Storage isStashBackend_Storage `protobuf_oneof:"storage"`
}

func (m *StashBackend) Reset()                    { *m = StashBackend{} }
func (m *StashBackend) String() string            { return proto.CompactTextString(m) }
func (*StashBackend) ProtoMessage()               {}
func (*StashBackend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

type isStashBackend_Storage interface {
	isStashBackend_Storage()
}

type StashBackend_Local struct {
	Local *StashBackend_LocalSpec `protobuf:"bytes,2,opt,name=Local,json=local,oneof"`
}
type StashBackend_S3 struct {
	S3 *StashBackend_S3Spec `protobuf:"bytes,3,opt,name=S3,json=s3,oneof"`
}
type StashBackend_GCS struct {
	GCS *StashBackend_GCSSpec `protobuf:"bytes,4,opt,name=GCS,json=gCS,oneof"`
}
type StashBackend_Azure struct {
	Azure *StashBackend_AzureSpec `protobuf:"bytes,5,opt,name=Azure,json=azure,oneof"`
}
type StashBackend_Swift struct {
	Swift *StashBackend_SwiftSpec `protobuf:"bytes,6,opt,name=Swift,json=swift,oneof"`
}

func (*StashBackend_Local) isStashBackend_Storage() {}
func (*StashBackend_S3) isStashBackend_Storage()    {}
func (*StashBackend_GCS) isStashBackend_Storage()   {}
func (*StashBackend_Azure) isStashBackend_Storage() {}
func (*StashBackend_Swift) isStashBackend_Storage() {}

func (m *StashBackend) GetStorage() isStashBackend_Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *StashBackend) GetStorageSecretName() string {
	if m != nil {
		return m.StorageSecretName
	}
	return ""
}

func (m *StashBackend) GetLocal() *StashBackend_LocalSpec {
	if x, ok := m.GetStorage().(*StashBackend_Local); ok {
		return x.Local
	}
	return nil
}

func (m *StashBackend) GetS3() *StashBackend_S3Spec {
	if x, ok := m.GetStorage().(*StashBackend_S3); ok {
		return x.S3
	}
	return nil
}

func (m *StashBackend) GetGCS() *StashBackend_GCSSpec {
	if x, ok := m.GetStorage().(*StashBackend_GCS); ok {
		return x.GCS
	}
	return nil
}

func (m *StashBackend) GetAzure() *StashBackend_AzureSpec {
	if x, ok := m.GetStorage().(*StashBackend_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *StashBackend) GetSwift() *StashBackend_SwiftSpec {
	if x, ok := m.GetStorage().(*StashBackend_Swift); ok {
		return x.Swift
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StashBackend) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StashBackend_OneofMarshaler, _StashBackend_OneofUnmarshaler, _StashBackend_OneofSizer, []interface{}{
		(*StashBackend_Local)(nil),
		(*StashBackend_S3)(nil),
		(*StashBackend_GCS)(nil),
		(*StashBackend_Azure)(nil),
		(*StashBackend_Swift)(nil),
	}
}

func _StashBackend_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StashBackend)
	// storage
	switch x := m.Storage.(type) {
	case *StashBackend_Local:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Local); err != nil {
			return err
		}
	case *StashBackend_S3:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.S3); err != nil {
			return err
		}
	case *StashBackend_GCS:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GCS); err != nil {
			return err
		}
	case *StashBackend_Azure:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Azure); err != nil {
			return err
		}
	case *StashBackend_Swift:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Swift); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StashBackend.Storage has unexpected type %T", x)
	}
	return nil
}

func _StashBackend_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StashBackend)
	switch tag {
	case 2: // storage.Local
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StashBackend_LocalSpec)
		err := b.DecodeMessage(msg)
		m.Storage = &StashBackend_Local{msg}
		return true, err
	case 3: // storage.S3
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StashBackend_S3Spec)
		err := b.DecodeMessage(msg)
		m.Storage = &StashBackend_S3{msg}
		return true, err
	case 4: // storage.GCS
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StashBackend_GCSSpec)
		err := b.DecodeMessage(msg)
		m.Storage = &StashBackend_GCS{msg}
		return true, err
	case 5: // storage.Azure
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StashBackend_AzureSpec)
		err := b.DecodeMessage(msg)
		m.Storage = &StashBackend_Azure{msg}
		return true, err
	case 6: // storage.Swift
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StashBackend_SwiftSpec)
		err := b.DecodeMessage(msg)
		m.Storage = &StashBackend_Swift{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StashBackend_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StashBackend)
	// storage
	switch x := m.Storage.(type) {
	case *StashBackend_Local:
		s := proto.Size(x.Local)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StashBackend_S3:
		s := proto.Size(x.S3)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StashBackend_GCS:
		s := proto.Size(x.GCS)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StashBackend_Azure:
		s := proto.Size(x.Azure)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StashBackend_Swift:
		s := proto.Size(x.Swift)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StashBackend_LocalSpec struct {
	VolumeSource *VolumeSource `protobuf:"bytes,1,opt,name=volumeSource" json:"volumeSource,omitempty"`
	MountPath    string        `protobuf:"bytes,2,opt,name=mountPath" json:"mountPath,omitempty"`
	SubPath      string        `protobuf:"bytes,3,opt,name=subPath" json:"subPath,omitempty"`
}

func (m *StashBackend_LocalSpec) Reset()                    { *m = StashBackend_LocalSpec{} }
func (m *StashBackend_LocalSpec) String() string            { return proto.CompactTextString(m) }
func (*StashBackend_LocalSpec) ProtoMessage()               {}
func (*StashBackend_LocalSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56, 0} }

func (m *StashBackend_LocalSpec) GetVolumeSource() *VolumeSource {
	if m != nil {
		return m.VolumeSource
	}
	return nil
}

func (m *StashBackend_LocalSpec) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *StashBackend_LocalSpec) GetSubPath() string {
	if m != nil {
		return m.SubPath
	}
	return ""
}

type StashBackend_S3Spec struct {
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	Bucket   string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	Prefix   string `protobuf:"bytes,3,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *StashBackend_S3Spec) Reset()                    { *m = StashBackend_S3Spec{} }
func (m *StashBackend_S3Spec) String() string            { return proto.CompactTextString(m) }
func (*StashBackend_S3Spec) ProtoMessage()               {}
func (*StashBackend_S3Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56, 1} }

func (m *StashBackend_S3Spec) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *StashBackend_S3Spec) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *StashBackend_S3Spec) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type StashBackend_GCSSpec struct {
	Bucket string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	Prefix string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *StashBackend_GCSSpec) Reset()                    { *m = StashBackend_GCSSpec{} }
func (m *StashBackend_GCSSpec) String() string            { return proto.CompactTextString(m) }
func (*StashBackend_GCSSpec) ProtoMessage()               {}
func (*StashBackend_GCSSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56, 2} }

func (m *StashBackend_GCSSpec) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *StashBackend_GCSSpec) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type StashBackend_AzureSpec struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Prefix    string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *StashBackend_AzureSpec) Reset()                    { *m = StashBackend_AzureSpec{} }
func (m *StashBackend_AzureSpec) String() string            { return proto.CompactTextString(m) }
func (*StashBackend_AzureSpec) ProtoMessage()               {}
func (*StashBackend_AzureSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56, 3} }

func (m *StashBackend_AzureSpec) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *StashBackend_AzureSpec) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type StashBackend_SwiftSpec struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Prefix    string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *StashBackend_SwiftSpec) Reset()                    { *m = StashBackend_SwiftSpec{} }
func (m *StashBackend_SwiftSpec) String() string            { return proto.CompactTextString(m) }
func (*StashBackend_SwiftSpec) ProtoMessage()               {}
func (*StashBackend_SwiftSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56, 4} }

func (m *StashBackend_SwiftSpec) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *StashBackend_SwiftSpec) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type CronJob struct {
	Meta   *Meta           `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *CronJob_Spec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *CronJob_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *CronJob) Reset()                    { *m = CronJob{} }
func (m *CronJob) String() string            { return proto.CompactTextString(m) }
func (*CronJob) ProtoMessage()               {}
func (*CronJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *CronJob) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CronJob) GetSpec() *CronJob_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CronJob) GetStatus() *CronJob_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type CronJob_Spec struct {
	Schedule                string   `protobuf:"bytes,1,opt,name=schedule" json:"schedule,omitempty"`
	StartingDeadlineSeconds int64    `protobuf:"varint,2,opt,name=starting_deadline_seconds,json=startingDeadlineSeconds" json:"starting_deadline_seconds,omitempty"`
	ConcurrencyPolicy       string   `protobuf:"bytes,3,opt,name=concurrency_policy,json=concurrencyPolicy" json:"concurrency_policy,omitempty"`
	Suspend                 bool     `protobuf:"varint,4,opt,name=suspend" json:"suspend,omitempty"`
	Template                *JobSpec `protobuf:"bytes,5,opt,name=template" json:"template,omitempty"`
}

func (m *CronJob_Spec) Reset()                    { *m = CronJob_Spec{} }
func (m *CronJob_Spec) String() string            { return proto.CompactTextString(m) }
func (*CronJob_Spec) ProtoMessage()               {}
func (*CronJob_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57, 0} }

func (m *CronJob_Spec) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *CronJob_Spec) GetStartingDeadlineSeconds() int64 {
	if m != nil {
		return m.StartingDeadlineSeconds
	}
	return 0
}

func (m *CronJob_Spec) GetConcurrencyPolicy() string {
	if m != nil {
		return m.ConcurrencyPolicy
	}
	return ""
}

func (m *CronJob_Spec) GetSuspend() bool {
	if m != nil {
		return m.Suspend
	}
	return false
}

func (m *CronJob_Spec) GetTemplate() *JobSpec {
	if m != nil {
		return m.Template
	}
	return nil
}

type CronJob_Status struct {
	Active           []*ObjectReference `protobuf:"bytes,1,rep,name=active" json:"active,omitempty"`
	LastScheduleTime int64              `protobuf:"varint,2,opt,name=last_schedule_time,json=lastScheduleTime" json:"last_schedule_time,omitempty"`
}

func (m *CronJob_Status) Reset()                    { *m = CronJob_Status{} }
func (m *CronJob_Status) String() string            { return proto.CompactTextString(m) }
func (*CronJob_Status) ProtoMessage()               {}
func (*CronJob_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57, 1} }

func (m *CronJob_Status) GetActive() []*ObjectReference {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *CronJob_Status) GetLastScheduleTime() int64 {
	if m != nil {
		return m.LastScheduleTime
	}
	return 0
}

type Postgres struct {
	Meta   *Meta            `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *PostgresSpec    `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Postgres_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Postgres) Reset()                    { *m = Postgres{} }
func (m *Postgres) String() string            { return proto.CompactTextString(m) }
func (*Postgres) ProtoMessage()               {}
func (*Postgres) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *Postgres) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Postgres) GetSpec() *PostgresSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Postgres) GetStatus() *Postgres_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Postgres_Status struct {
	CreationTime int64  `protobuf:"varint,1,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	Phase        string `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	Reason       string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *Postgres_Status) Reset()                    { *m = Postgres_Status{} }
func (m *Postgres_Status) String() string            { return proto.CompactTextString(m) }
func (*Postgres_Status) ProtoMessage()               {}
func (*Postgres_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58, 0} }

func (m *Postgres_Status) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *Postgres_Status) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Postgres_Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type PostgresSpec struct {
	Version          string                             `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Replicas         int32                              `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
	Storage          *PersistentVolumeClaimSpec         `protobuf:"bytes,3,opt,name=storage" json:"storage,omitempty"`
	DatabaseSecret   *SecretVolumeSource                `protobuf:"bytes,4,opt,name=database_secret,json=databaseSecret" json:"database_secret,omitempty"`
	NodeSelector     map[string]string                  `protobuf:"bytes,5,rep,name=node_selector,json=nodeSelector" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Init             *InitSpec                          `protobuf:"bytes,6,opt,name=init" json:"init,omitempty"`
	BackupSchedule   *BackupScheduleSpec                `protobuf:"bytes,7,opt,name=backup_schedule,json=backupSchedule" json:"backup_schedule,omitempty"`
	DoNotPause       bool                               `protobuf:"varint,8,opt,name=do_not_pause,json=doNotPause" json:"do_not_pause,omitempty"`
	Standby          string                             `protobuf:"bytes,9,opt,name=standby" json:"standby,omitempty"`
	Streaming        string                             `protobuf:"bytes,10,opt,name=streaming" json:"streaming,omitempty"`
	Archiver         *PostgresSpec_PostgresArchiverSpec `protobuf:"bytes,11,opt,name=archiver" json:"archiver,omitempty"`
	Monitor          *KubemonAgentSpec                  `protobuf:"bytes,12,opt,name=monitor" json:"monitor,omitempty"`
	Resources        *ResourceRequirements              `protobuf:"bytes,13,opt,name=resources" json:"resources,omitempty"`
	Affinity         *Affinity                          `protobuf:"bytes,14,opt,name=affinity" json:"affinity,omitempty"`
	SchedulerName    string                             `protobuf:"bytes,15,opt,name=schedulerName" json:"schedulerName,omitempty"`
	Tolerations      []*Toleration                      `protobuf:"bytes,16,rep,name=tolerations" json:"tolerations,omitempty"`
	ImagePullSecrets []*LocalObjectReference            `protobuf:"bytes,17,rep,name=imagePullSecrets" json:"imagePullSecrets,omitempty"`
}

func (m *PostgresSpec) Reset()                    { *m = PostgresSpec{} }
func (m *PostgresSpec) String() string            { return proto.CompactTextString(m) }
func (*PostgresSpec) ProtoMessage()               {}
func (*PostgresSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *PostgresSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PostgresSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *PostgresSpec) GetStorage() *PersistentVolumeClaimSpec {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *PostgresSpec) GetDatabaseSecret() *SecretVolumeSource {
	if m != nil {
		return m.DatabaseSecret
	}
	return nil
}

func (m *PostgresSpec) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *PostgresSpec) GetInit() *InitSpec {
	if m != nil {
		return m.Init
	}
	return nil
}

func (m *PostgresSpec) GetBackupSchedule() *BackupScheduleSpec {
	if m != nil {
		return m.BackupSchedule
	}
	return nil
}

func (m *PostgresSpec) GetDoNotPause() bool {
	if m != nil {
		return m.DoNotPause
	}
	return false
}

func (m *PostgresSpec) GetStandby() string {
	if m != nil {
		return m.Standby
	}
	return ""
}

func (m *PostgresSpec) GetStreaming() string {
	if m != nil {
		return m.Streaming
	}
	return ""
}

func (m *PostgresSpec) GetArchiver() *PostgresSpec_PostgresArchiverSpec {
	if m != nil {
		return m.Archiver
	}
	return nil
}

func (m *PostgresSpec) GetMonitor() *KubemonAgentSpec {
	if m != nil {
		return m.Monitor
	}
	return nil
}

func (m *PostgresSpec) GetResources() *ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *PostgresSpec) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *PostgresSpec) GetSchedulerName() string {
	if m != nil {
		return m.SchedulerName
	}
	return ""
}

func (m *PostgresSpec) GetTolerations() []*Toleration {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *PostgresSpec) GetImagePullSecrets() []*LocalObjectReference {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

type PostgresSpec_PostgresArchiverSpec struct {
	Storage *SnapshotStorageSpec `protobuf:"bytes,1,opt,name=storage" json:"storage,omitempty"`
}

func (m *PostgresSpec_PostgresArchiverSpec) Reset()         { *m = PostgresSpec_PostgresArchiverSpec{} }
func (m *PostgresSpec_PostgresArchiverSpec) String() string { return proto.CompactTextString(m) }
func (*PostgresSpec_PostgresArchiverSpec) ProtoMessage()    {}
func (*PostgresSpec_PostgresArchiverSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{59, 1}
}

func (m *PostgresSpec_PostgresArchiverSpec) GetStorage() *SnapshotStorageSpec {
	if m != nil {
		return m.Storage
	}
	return nil
}

type Elasticsearch struct {
	Meta   *Meta                 `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *ElasticsearchSpec    `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Elasticsearch_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Elasticsearch) Reset()                    { *m = Elasticsearch{} }
func (m *Elasticsearch) String() string            { return proto.CompactTextString(m) }
func (*Elasticsearch) ProtoMessage()               {}
func (*Elasticsearch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *Elasticsearch) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Elasticsearch) GetSpec() *ElasticsearchSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Elasticsearch) GetStatus() *Elasticsearch_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Elasticsearch_Status struct {
	CreationTime int64  `protobuf:"varint,1,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	Phase        string `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	Reason       string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *Elasticsearch_Status) Reset()                    { *m = Elasticsearch_Status{} }
func (m *Elasticsearch_Status) String() string            { return proto.CompactTextString(m) }
func (*Elasticsearch_Status) ProtoMessage()               {}
func (*Elasticsearch_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60, 0} }

func (m *Elasticsearch_Status) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *Elasticsearch_Status) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Elasticsearch_Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ElasticsearchSpec struct {
	Version           string                                          `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Replicas          int32                                           `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
	Storage           *PersistentVolumeClaimSpec                      `protobuf:"bytes,3,opt,name=storage" json:"storage,omitempty"`
	NodeSelector      map[string]string                               `protobuf:"bytes,4,rep,name=node_selector,json=nodeSelector" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Init              *InitSpec                                       `protobuf:"bytes,5,opt,name=init" json:"init,omitempty"`
	BackupSchedule    *BackupScheduleSpec                             `protobuf:"bytes,6,opt,name=backup_schedule,json=backupSchedule" json:"backup_schedule,omitempty"`
	DoNotPause        bool                                            `protobuf:"varint,7,opt,name=do_not_pause,json=doNotPause" json:"do_not_pause,omitempty"`
	Topology          *ElasticsearchSpec_ElasticsearchClusterTopology `protobuf:"bytes,8,opt,name=topology" json:"topology,omitempty"`
	EnableSSL         bool                                            `protobuf:"varint,9,opt,name=enableSSL" json:"enableSSL,omitempty"`
	CertificateSecret *SecretVolumeSource                             `protobuf:"bytes,10,opt,name=certificateSecret" json:"certificateSecret,omitempty"`
	DatabaseSecret    *SecretVolumeSource                             `protobuf:"bytes,11,opt,name=databaseSecret" json:"databaseSecret,omitempty"`
	Monitor           *KubemonAgentSpec                               `protobuf:"bytes,12,opt,name=monitor" json:"monitor,omitempty"`
	Resources         *ResourceRequirements                           `protobuf:"bytes,13,opt,name=resources" json:"resources,omitempty"`
	Affinity          *Affinity                                       `protobuf:"bytes,14,opt,name=affinity" json:"affinity,omitempty"`
	SchedulerName     string                                          `protobuf:"bytes,15,opt,name=schedulerName" json:"schedulerName,omitempty"`
	Tolerations       []*Toleration                                   `protobuf:"bytes,16,rep,name=tolerations" json:"tolerations,omitempty"`
	ImagePullSecrets  []*LocalObjectReference                         `protobuf:"bytes,17,rep,name=imagePullSecrets" json:"imagePullSecrets,omitempty"`
}

func (m *ElasticsearchSpec) Reset()                    { *m = ElasticsearchSpec{} }
func (m *ElasticsearchSpec) String() string            { return proto.CompactTextString(m) }
func (*ElasticsearchSpec) ProtoMessage()               {}
func (*ElasticsearchSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *ElasticsearchSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ElasticsearchSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *ElasticsearchSpec) GetStorage() *PersistentVolumeClaimSpec {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *ElasticsearchSpec) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *ElasticsearchSpec) GetInit() *InitSpec {
	if m != nil {
		return m.Init
	}
	return nil
}

func (m *ElasticsearchSpec) GetBackupSchedule() *BackupScheduleSpec {
	if m != nil {
		return m.BackupSchedule
	}
	return nil
}

func (m *ElasticsearchSpec) GetDoNotPause() bool {
	if m != nil {
		return m.DoNotPause
	}
	return false
}

func (m *ElasticsearchSpec) GetTopology() *ElasticsearchSpec_ElasticsearchClusterTopology {
	if m != nil {
		return m.Topology
	}
	return nil
}

func (m *ElasticsearchSpec) GetEnableSSL() bool {
	if m != nil {
		return m.EnableSSL
	}
	return false
}

func (m *ElasticsearchSpec) GetCertificateSecret() *SecretVolumeSource {
	if m != nil {
		return m.CertificateSecret
	}
	return nil
}

func (m *ElasticsearchSpec) GetDatabaseSecret() *SecretVolumeSource {
	if m != nil {
		return m.DatabaseSecret
	}
	return nil
}

func (m *ElasticsearchSpec) GetMonitor() *KubemonAgentSpec {
	if m != nil {
		return m.Monitor
	}
	return nil
}

func (m *ElasticsearchSpec) GetResources() *ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ElasticsearchSpec) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *ElasticsearchSpec) GetSchedulerName() string {
	if m != nil {
		return m.SchedulerName
	}
	return ""
}

func (m *ElasticsearchSpec) GetTolerations() []*Toleration {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *ElasticsearchSpec) GetImagePullSecrets() []*LocalObjectReference {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

type ElasticsearchSpec_ElasticsearchClusterTopology struct {
	Master *ElasticsearchSpec_ElasticsearchNode `protobuf:"bytes,1,opt,name=master" json:"master,omitempty"`
	Data   *ElasticsearchSpec_ElasticsearchNode `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Client *ElasticsearchSpec_ElasticsearchNode `protobuf:"bytes,3,opt,name=client" json:"client,omitempty"`
}

func (m *ElasticsearchSpec_ElasticsearchClusterTopology) Reset() {
	*m = ElasticsearchSpec_ElasticsearchClusterTopology{}
}
func (m *ElasticsearchSpec_ElasticsearchClusterTopology) String() string {
	return proto.CompactTextString(m)
}
func (*ElasticsearchSpec_ElasticsearchClusterTopology) ProtoMessage() {}
func (*ElasticsearchSpec_ElasticsearchClusterTopology) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{61, 1}
}

func (m *ElasticsearchSpec_ElasticsearchClusterTopology) GetMaster() *ElasticsearchSpec_ElasticsearchNode {
	if m != nil {
		return m.Master
	}
	return nil
}

func (m *ElasticsearchSpec_ElasticsearchClusterTopology) GetData() *ElasticsearchSpec_ElasticsearchNode {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ElasticsearchSpec_ElasticsearchClusterTopology) GetClient() *ElasticsearchSpec_ElasticsearchNode {
	if m != nil {
		return m.Client
	}
	return nil
}

type ElasticsearchSpec_ElasticsearchNode struct {
	Replicas int32  `protobuf:"varint,1,opt,name=replicas" json:"replicas,omitempty"`
	Prefix   string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *ElasticsearchSpec_ElasticsearchNode) Reset()         { *m = ElasticsearchSpec_ElasticsearchNode{} }
func (m *ElasticsearchSpec_ElasticsearchNode) String() string { return proto.CompactTextString(m) }
func (*ElasticsearchSpec_ElasticsearchNode) ProtoMessage()    {}
func (*ElasticsearchSpec_ElasticsearchNode) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{61, 2}
}

func (m *ElasticsearchSpec_ElasticsearchNode) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *ElasticsearchSpec_ElasticsearchNode) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type DormantDatabase struct {
	Meta   *Meta                   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *DormantDatabase_Spec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *DormantDatabase_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *DormantDatabase) Reset()                    { *m = DormantDatabase{} }
func (m *DormantDatabase) String() string            { return proto.CompactTextString(m) }
func (*DormantDatabase) ProtoMessage()               {}
func (*DormantDatabase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *DormantDatabase) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *DormantDatabase) GetSpec() *DormantDatabase_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *DormantDatabase) GetStatus() *DormantDatabase_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type DormantDatabase_Spec struct {
	WipeOut bool    `protobuf:"varint,1,opt,name=wipe_out,json=wipeOut" json:"wipe_out,omitempty"`
	Resume  bool    `protobuf:"varint,2,opt,name=resume" json:"resume,omitempty"`
	Origin  *Origin `protobuf:"bytes,3,opt,name=origin" json:"origin,omitempty"`
}

func (m *DormantDatabase_Spec) Reset()                    { *m = DormantDatabase_Spec{} }
func (m *DormantDatabase_Spec) String() string            { return proto.CompactTextString(m) }
func (*DormantDatabase_Spec) ProtoMessage()               {}
func (*DormantDatabase_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62, 0} }

func (m *DormantDatabase_Spec) GetWipeOut() bool {
	if m != nil {
		return m.WipeOut
	}
	return false
}

func (m *DormantDatabase_Spec) GetResume() bool {
	if m != nil {
		return m.Resume
	}
	return false
}

func (m *DormantDatabase_Spec) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

type DormantDatabase_Status struct {
	CreationTime int64  `protobuf:"varint,1,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	PausingTime  int64  `protobuf:"varint,2,opt,name=pausing_time,json=pausingTime" json:"pausing_time,omitempty"`
	WipeOutTime  int64  `protobuf:"varint,3,opt,name=wipe_out_time,json=wipeOutTime" json:"wipe_out_time,omitempty"`
	Phase        string `protobuf:"bytes,4,opt,name=phase" json:"phase,omitempty"`
	Reason       string `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
}

func (m *DormantDatabase_Status) Reset()                    { *m = DormantDatabase_Status{} }
func (m *DormantDatabase_Status) String() string            { return proto.CompactTextString(m) }
func (*DormantDatabase_Status) ProtoMessage()               {}
func (*DormantDatabase_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62, 1} }

func (m *DormantDatabase_Status) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *DormantDatabase_Status) GetPausingTime() int64 {
	if m != nil {
		return m.PausingTime
	}
	return 0
}

func (m *DormantDatabase_Status) GetWipeOutTime() int64 {
	if m != nil {
		return m.WipeOutTime
	}
	return 0
}

func (m *DormantDatabase_Status) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *DormantDatabase_Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type Mysql struct {
	Meta   *Meta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *MysqlSpec    `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Mysql_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Mysql) Reset()                    { *m = Mysql{} }
func (m *Mysql) String() string            { return proto.CompactTextString(m) }
func (*Mysql) ProtoMessage()               {}
func (*Mysql) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *Mysql) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Mysql) GetSpec() *MysqlSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Mysql) GetStatus() *Mysql_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Mysql_Status struct {
	CreationTime int64  `protobuf:"varint,1,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	Phase        string `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	Reason       string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *Mysql_Status) Reset()                    { *m = Mysql_Status{} }
func (m *Mysql_Status) String() string            { return proto.CompactTextString(m) }
func (*Mysql_Status) ProtoMessage()               {}
func (*Mysql_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63, 0} }

func (m *Mysql_Status) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *Mysql_Status) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Mysql_Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MysqlSpec struct {
	Version          string                     `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Replicas         int32                      `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
	Storage          *PersistentVolumeClaimSpec `protobuf:"bytes,3,opt,name=storage" json:"storage,omitempty"`
	NodeSelector     map[string]string          `protobuf:"bytes,4,rep,name=node_selector,json=nodeSelector" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Init             *InitSpec                  `protobuf:"bytes,5,opt,name=init" json:"init,omitempty"`
	BackupSchedule   *BackupScheduleSpec        `protobuf:"bytes,6,opt,name=backup_schedule,json=backupSchedule" json:"backup_schedule,omitempty"`
	DoNotPause       bool                       `protobuf:"varint,7,opt,name=do_not_pause,json=doNotPause" json:"do_not_pause,omitempty"`
	DatabaseSecret   *SecretVolumeSource        `protobuf:"bytes,8,opt,name=databaseSecret" json:"databaseSecret,omitempty"`
	Monitor          *KubemonAgentSpec          `protobuf:"bytes,9,opt,name=monitor" json:"monitor,omitempty"`
	Resources        *ResourceRequirements      `protobuf:"bytes,10,opt,name=resources" json:"resources,omitempty"`
	Affinity         *Affinity                  `protobuf:"bytes,11,opt,name=affinity" json:"affinity,omitempty"`
	SchedulerName    string                     `protobuf:"bytes,12,opt,name=schedulerName" json:"schedulerName,omitempty"`
	Tolerations      []*Toleration              `protobuf:"bytes,13,rep,name=tolerations" json:"tolerations,omitempty"`
	ImagePullSecrets []*LocalObjectReference    `protobuf:"bytes,14,rep,name=imagePullSecrets" json:"imagePullSecrets,omitempty"`
}

func (m *MysqlSpec) Reset()                    { *m = MysqlSpec{} }
func (m *MysqlSpec) String() string            { return proto.CompactTextString(m) }
func (*MysqlSpec) ProtoMessage()               {}
func (*MysqlSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *MysqlSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MysqlSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *MysqlSpec) GetStorage() *PersistentVolumeClaimSpec {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *MysqlSpec) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *MysqlSpec) GetInit() *InitSpec {
	if m != nil {
		return m.Init
	}
	return nil
}

func (m *MysqlSpec) GetBackupSchedule() *BackupScheduleSpec {
	if m != nil {
		return m.BackupSchedule
	}
	return nil
}

func (m *MysqlSpec) GetDoNotPause() bool {
	if m != nil {
		return m.DoNotPause
	}
	return false
}

func (m *MysqlSpec) GetDatabaseSecret() *SecretVolumeSource {
	if m != nil {
		return m.DatabaseSecret
	}
	return nil
}

func (m *MysqlSpec) GetMonitor() *KubemonAgentSpec {
	if m != nil {
		return m.Monitor
	}
	return nil
}

func (m *MysqlSpec) GetResources() *ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *MysqlSpec) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MysqlSpec) GetSchedulerName() string {
	if m != nil {
		return m.SchedulerName
	}
	return ""
}

func (m *MysqlSpec) GetTolerations() []*Toleration {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *MysqlSpec) GetImagePullSecrets() []*LocalObjectReference {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

type Redis struct {
	Meta   *Meta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *RedisSpec    `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Redis_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Redis) Reset()                    { *m = Redis{} }
func (m *Redis) String() string            { return proto.CompactTextString(m) }
func (*Redis) ProtoMessage()               {}
func (*Redis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *Redis) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Redis) GetSpec() *RedisSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Redis) GetStatus() *Redis_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Redis_Status struct {
	CreationTime int64  `protobuf:"varint,1,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	Phase        string `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	Reason       string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *Redis_Status) Reset()                    { *m = Redis_Status{} }
func (m *Redis_Status) String() string            { return proto.CompactTextString(m) }
func (*Redis_Status) ProtoMessage()               {}
func (*Redis_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65, 0} }

func (m *Redis_Status) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *Redis_Status) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Redis_Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type RedisSpec struct {
	Version          string                     `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Replicas         int32                      `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
	Storage          *PersistentVolumeClaimSpec `protobuf:"bytes,3,opt,name=storage" json:"storage,omitempty"`
	NodeSelector     map[string]string          `protobuf:"bytes,4,rep,name=node_selector,json=nodeSelector" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DoNotPause       bool                       `protobuf:"varint,5,opt,name=do_not_pause,json=doNotPause" json:"do_not_pause,omitempty"`
	Monitor          *KubemonAgentSpec          `protobuf:"bytes,6,opt,name=monitor" json:"monitor,omitempty"`
	Resources        *ResourceRequirements      `protobuf:"bytes,7,opt,name=resources" json:"resources,omitempty"`
	Affinity         *Affinity                  `protobuf:"bytes,8,opt,name=affinity" json:"affinity,omitempty"`
	SchedulerName    string                     `protobuf:"bytes,9,opt,name=schedulerName" json:"schedulerName,omitempty"`
	Tolerations      []*Toleration              `protobuf:"bytes,10,rep,name=tolerations" json:"tolerations,omitempty"`
	ImagePullSecrets []*LocalObjectReference    `protobuf:"bytes,11,rep,name=imagePullSecrets" json:"imagePullSecrets,omitempty"`
}

func (m *RedisSpec) Reset()                    { *m = RedisSpec{} }
func (m *RedisSpec) String() string            { return proto.CompactTextString(m) }
func (*RedisSpec) ProtoMessage()               {}
func (*RedisSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *RedisSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RedisSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *RedisSpec) GetStorage() *PersistentVolumeClaimSpec {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *RedisSpec) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *RedisSpec) GetDoNotPause() bool {
	if m != nil {
		return m.DoNotPause
	}
	return false
}

func (m *RedisSpec) GetMonitor() *KubemonAgentSpec {
	if m != nil {
		return m.Monitor
	}
	return nil
}

func (m *RedisSpec) GetResources() *ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *RedisSpec) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *RedisSpec) GetSchedulerName() string {
	if m != nil {
		return m.SchedulerName
	}
	return ""
}

func (m *RedisSpec) GetTolerations() []*Toleration {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *RedisSpec) GetImagePullSecrets() []*LocalObjectReference {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

type Mongodb struct {
	Meta   *Meta           `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *MongodbSpec    `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Mongodb_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Mongodb) Reset()                    { *m = Mongodb{} }
func (m *Mongodb) String() string            { return proto.CompactTextString(m) }
func (*Mongodb) ProtoMessage()               {}
func (*Mongodb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *Mongodb) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Mongodb) GetSpec() *MongodbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Mongodb) GetStatus() *Mongodb_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Mongodb_Status struct {
	CreationTime int64  `protobuf:"varint,1,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	Phase        string `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	Reason       string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *Mongodb_Status) Reset()                    { *m = Mongodb_Status{} }
func (m *Mongodb_Status) String() string            { return proto.CompactTextString(m) }
func (*Mongodb_Status) ProtoMessage()               {}
func (*Mongodb_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67, 0} }

func (m *Mongodb_Status) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *Mongodb_Status) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Mongodb_Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MongodbSpec struct {
	Version          string                     `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Replicas         int32                      `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
	Storage          *PersistentVolumeClaimSpec `protobuf:"bytes,3,opt,name=storage" json:"storage,omitempty"`
	NodeSelector     map[string]string          `protobuf:"bytes,4,rep,name=node_selector,json=nodeSelector" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Init             *InitSpec                  `protobuf:"bytes,5,opt,name=init" json:"init,omitempty"`
	BackupSchedule   *BackupScheduleSpec        `protobuf:"bytes,6,opt,name=backup_schedule,json=backupSchedule" json:"backup_schedule,omitempty"`
	DoNotPause       bool                       `protobuf:"varint,7,opt,name=do_not_pause,json=doNotPause" json:"do_not_pause,omitempty"`
	DatabaseSecret   *SecretVolumeSource        `protobuf:"bytes,8,opt,name=databaseSecret" json:"databaseSecret,omitempty"`
	Monitor          *KubemonAgentSpec          `protobuf:"bytes,9,opt,name=monitor" json:"monitor,omitempty"`
	Resources        *ResourceRequirements      `protobuf:"bytes,10,opt,name=resources" json:"resources,omitempty"`
	Affinity         *Affinity                  `protobuf:"bytes,11,opt,name=affinity" json:"affinity,omitempty"`
	SchedulerName    string                     `protobuf:"bytes,12,opt,name=schedulerName" json:"schedulerName,omitempty"`
	Tolerations      []*Toleration              `protobuf:"bytes,13,rep,name=tolerations" json:"tolerations,omitempty"`
	ImagePullSecrets []*LocalObjectReference    `protobuf:"bytes,14,rep,name=imagePullSecrets" json:"imagePullSecrets,omitempty"`
}

func (m *MongodbSpec) Reset()                    { *m = MongodbSpec{} }
func (m *MongodbSpec) String() string            { return proto.CompactTextString(m) }
func (*MongodbSpec) ProtoMessage()               {}
func (*MongodbSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *MongodbSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MongodbSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *MongodbSpec) GetStorage() *PersistentVolumeClaimSpec {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *MongodbSpec) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *MongodbSpec) GetInit() *InitSpec {
	if m != nil {
		return m.Init
	}
	return nil
}

func (m *MongodbSpec) GetBackupSchedule() *BackupScheduleSpec {
	if m != nil {
		return m.BackupSchedule
	}
	return nil
}

func (m *MongodbSpec) GetDoNotPause() bool {
	if m != nil {
		return m.DoNotPause
	}
	return false
}

func (m *MongodbSpec) GetDatabaseSecret() *SecretVolumeSource {
	if m != nil {
		return m.DatabaseSecret
	}
	return nil
}

func (m *MongodbSpec) GetMonitor() *KubemonAgentSpec {
	if m != nil {
		return m.Monitor
	}
	return nil
}

func (m *MongodbSpec) GetResources() *ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *MongodbSpec) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MongodbSpec) GetSchedulerName() string {
	if m != nil {
		return m.SchedulerName
	}
	return ""
}

func (m *MongodbSpec) GetTolerations() []*Toleration {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *MongodbSpec) GetImagePullSecrets() []*LocalObjectReference {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

type Memcached struct {
	Meta   *Meta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *MemcachedSpec    `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Memcached_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Memcached) Reset()                    { *m = Memcached{} }
func (m *Memcached) String() string            { return proto.CompactTextString(m) }
func (*Memcached) ProtoMessage()               {}
func (*Memcached) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *Memcached) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Memcached) GetSpec() *MemcachedSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Memcached) GetStatus() *Memcached_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Memcached_Status struct {
	CreationTime int64  `protobuf:"varint,1,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	Phase        string `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	Reason       string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *Memcached_Status) Reset()                    { *m = Memcached_Status{} }
func (m *Memcached_Status) String() string            { return proto.CompactTextString(m) }
func (*Memcached_Status) ProtoMessage()               {}
func (*Memcached_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69, 0} }

func (m *Memcached_Status) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *Memcached_Status) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Memcached_Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MemcachedSpec struct {
	Version          string                  `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Replicas         int32                   `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
	NodeSelector     map[string]string       `protobuf:"bytes,3,rep,name=node_selector,json=nodeSelector" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DoNotPause       bool                    `protobuf:"varint,4,opt,name=do_not_pause,json=doNotPause" json:"do_not_pause,omitempty"`
	Monitor          *KubemonAgentSpec       `protobuf:"bytes,5,opt,name=monitor" json:"monitor,omitempty"`
	Resources        *ResourceRequirements   `protobuf:"bytes,6,opt,name=resources" json:"resources,omitempty"`
	Affinity         *Affinity               `protobuf:"bytes,7,opt,name=affinity" json:"affinity,omitempty"`
	SchedulerName    string                  `protobuf:"bytes,8,opt,name=schedulerName" json:"schedulerName,omitempty"`
	Tolerations      []*Toleration           `protobuf:"bytes,9,rep,name=tolerations" json:"tolerations,omitempty"`
	ImagePullSecrets []*LocalObjectReference `protobuf:"bytes,10,rep,name=imagePullSecrets" json:"imagePullSecrets,omitempty"`
}

func (m *MemcachedSpec) Reset()                    { *m = MemcachedSpec{} }
func (m *MemcachedSpec) String() string            { return proto.CompactTextString(m) }
func (*MemcachedSpec) ProtoMessage()               {}
func (*MemcachedSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *MemcachedSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MemcachedSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *MemcachedSpec) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *MemcachedSpec) GetDoNotPause() bool {
	if m != nil {
		return m.DoNotPause
	}
	return false
}

func (m *MemcachedSpec) GetMonitor() *KubemonAgentSpec {
	if m != nil {
		return m.Monitor
	}
	return nil
}

func (m *MemcachedSpec) GetResources() *ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *MemcachedSpec) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MemcachedSpec) GetSchedulerName() string {
	if m != nil {
		return m.SchedulerName
	}
	return ""
}

func (m *MemcachedSpec) GetTolerations() []*Toleration {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *MemcachedSpec) GetImagePullSecrets() []*LocalObjectReference {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

type Recovery struct {
	Meta   *Meta            `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *Recovery_Spec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Recovery_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Recovery) Reset()                    { *m = Recovery{} }
func (m *Recovery) String() string            { return proto.CompactTextString(m) }
func (*Recovery) ProtoMessage()               {}
func (*Recovery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *Recovery) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Recovery) GetSpec() *Recovery_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Recovery) GetStatus() *Recovery_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Recovery_Spec struct {
	Backend          *StashBackend                      `protobuf:"bytes,1,opt,name=backend" json:"backend,omitempty"`
	Paths            []string                           `protobuf:"bytes,2,rep,name=paths" json:"paths,omitempty"`
	Workload         *Recovery_Spec_LocalTypedReference `protobuf:"bytes,3,opt,name=workload" json:"workload,omitempty"`
	PodOrdinal       string                             `protobuf:"bytes,4,opt,name=podOrdinal" json:"podOrdinal,omitempty"`
	NodeName         string                             `protobuf:"bytes,5,opt,name=nodeName" json:"nodeName,omitempty"`
	RecoveredVolumes []*Recovery_Spec_LocalSpec         `protobuf:"bytes,6,rep,name=recoveredVolumes" json:"recoveredVolumes,omitempty"`
}

func (m *Recovery_Spec) Reset()                    { *m = Recovery_Spec{} }
func (m *Recovery_Spec) String() string            { return proto.CompactTextString(m) }
func (*Recovery_Spec) ProtoMessage()               {}
func (*Recovery_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71, 0} }

func (m *Recovery_Spec) GetBackend() *StashBackend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (m *Recovery_Spec) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *Recovery_Spec) GetWorkload() *Recovery_Spec_LocalTypedReference {
	if m != nil {
		return m.Workload
	}
	return nil
}

func (m *Recovery_Spec) GetPodOrdinal() string {
	if m != nil {
		return m.PodOrdinal
	}
	return ""
}

func (m *Recovery_Spec) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Recovery_Spec) GetRecoveredVolumes() []*Recovery_Spec_LocalSpec {
	if m != nil {
		return m.RecoveredVolumes
	}
	return nil
}

type Recovery_Spec_LocalTypedReference struct {
	Kind       string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ApiVersion string `protobuf:"bytes,3,opt,name=apiVersion" json:"apiVersion,omitempty"`
}

func (m *Recovery_Spec_LocalTypedReference) Reset()         { *m = Recovery_Spec_LocalTypedReference{} }
func (m *Recovery_Spec_LocalTypedReference) String() string { return proto.CompactTextString(m) }
func (*Recovery_Spec_LocalTypedReference) ProtoMessage()    {}
func (*Recovery_Spec_LocalTypedReference) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{71, 0, 0}
}

func (m *Recovery_Spec_LocalTypedReference) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Recovery_Spec_LocalTypedReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Recovery_Spec_LocalTypedReference) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

type Recovery_Spec_LocalSpec struct {
	VolumeSource *VolumeSource `protobuf:"bytes,1,opt,name=volumeSource" json:"volumeSource,omitempty"`
	MountPath    string        `protobuf:"bytes,2,opt,name=mountPath" json:"mountPath,omitempty"`
	SubPath      string        `protobuf:"bytes,3,opt,name=subPath" json:"subPath,omitempty"`
}

func (m *Recovery_Spec_LocalSpec) Reset()                    { *m = Recovery_Spec_LocalSpec{} }
func (m *Recovery_Spec_LocalSpec) String() string            { return proto.CompactTextString(m) }
func (*Recovery_Spec_LocalSpec) ProtoMessage()               {}
func (*Recovery_Spec_LocalSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71, 0, 1} }

func (m *Recovery_Spec_LocalSpec) GetVolumeSource() *VolumeSource {
	if m != nil {
		return m.VolumeSource
	}
	return nil
}

func (m *Recovery_Spec_LocalSpec) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *Recovery_Spec_LocalSpec) GetSubPath() string {
	if m != nil {
		return m.SubPath
	}
	return ""
}

type Recovery_Status struct {
	Phase string                          `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	Stats []*Recovery_Status_RestoreStats `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
}

func (m *Recovery_Status) Reset()                    { *m = Recovery_Status{} }
func (m *Recovery_Status) String() string            { return proto.CompactTextString(m) }
func (*Recovery_Status) ProtoMessage()               {}
func (*Recovery_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71, 1} }

func (m *Recovery_Status) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Recovery_Status) GetStats() []*Recovery_Status_RestoreStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type Recovery_Status_RestoreStats struct {
	Path     string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Phase    string `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	Duration string `protobuf:"bytes,3,opt,name=duration" json:"duration,omitempty"`
}

func (m *Recovery_Status_RestoreStats) Reset()         { *m = Recovery_Status_RestoreStats{} }
func (m *Recovery_Status_RestoreStats) String() string { return proto.CompactTextString(m) }
func (*Recovery_Status_RestoreStats) ProtoMessage()    {}
func (*Recovery_Status_RestoreStats) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{71, 1, 0}
}

func (m *Recovery_Status_RestoreStats) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Recovery_Status_RestoreStats) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Recovery_Status_RestoreStats) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

type Origin struct {
	Meta *Meta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec *Origin_Spec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *Origin) Reset()                    { *m = Origin{} }
func (m *Origin) String() string            { return proto.CompactTextString(m) }
func (*Origin) ProtoMessage()               {}
func (*Origin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *Origin) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Origin) GetSpec() *Origin_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type Origin_Spec struct {
	Elasticsearch *ElasticsearchSpec `protobuf:"bytes,1,opt,name=elasticsearch" json:"elasticsearch,omitempty"`
	Postgres      *PostgresSpec      `protobuf:"bytes,2,opt,name=postgres" json:"postgres,omitempty"`
	Mysql         *MysqlSpec         `protobuf:"bytes,3,opt,name=mysql" json:"mysql,omitempty"`
	Mongodb       *MongodbSpec       `protobuf:"bytes,4,opt,name=mongodb" json:"mongodb,omitempty"`
	Redis         *RedisSpec         `protobuf:"bytes,5,opt,name=redis" json:"redis,omitempty"`
	Memcached     *MemcachedSpec     `protobuf:"bytes,6,opt,name=memcached" json:"memcached,omitempty"`
}

func (m *Origin_Spec) Reset()                    { *m = Origin_Spec{} }
func (m *Origin_Spec) String() string            { return proto.CompactTextString(m) }
func (*Origin_Spec) ProtoMessage()               {}
func (*Origin_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72, 0} }

func (m *Origin_Spec) GetElasticsearch() *ElasticsearchSpec {
	if m != nil {
		return m.Elasticsearch
	}
	return nil
}

func (m *Origin_Spec) GetPostgres() *PostgresSpec {
	if m != nil {
		return m.Postgres
	}
	return nil
}

func (m *Origin_Spec) GetMysql() *MysqlSpec {
	if m != nil {
		return m.Mysql
	}
	return nil
}

func (m *Origin_Spec) GetMongodb() *MongodbSpec {
	if m != nil {
		return m.Mongodb
	}
	return nil
}

func (m *Origin_Spec) GetRedis() *RedisSpec {
	if m != nil {
		return m.Redis
	}
	return nil
}

func (m *Origin_Spec) GetMemcached() *MemcachedSpec {
	if m != nil {
		return m.Memcached
	}
	return nil
}

type Snapshot struct {
	Meta   *Meta            `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *Snapshot_Spec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Snapshot_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *Snapshot) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Snapshot) GetSpec() *Snapshot_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Snapshot) GetStatus() *Snapshot_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Snapshot_Spec struct {
	DatabaseName        string               `protobuf:"bytes,1,opt,name=database_name,json=databaseName" json:"database_name,omitempty"`
	SnapshotStorageSpec *SnapshotStorageSpec `protobuf:"bytes,2,opt,name=snapshot_storage_spec,json=snapshotStorageSpec" json:"snapshot_storage_spec,omitempty"`
}

func (m *Snapshot_Spec) Reset()                    { *m = Snapshot_Spec{} }
func (m *Snapshot_Spec) String() string            { return proto.CompactTextString(m) }
func (*Snapshot_Spec) ProtoMessage()               {}
func (*Snapshot_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73, 0} }

func (m *Snapshot_Spec) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

func (m *Snapshot_Spec) GetSnapshotStorageSpec() *SnapshotStorageSpec {
	if m != nil {
		return m.SnapshotStorageSpec
	}
	return nil
}

type Snapshot_Status struct {
	StartTime      int64  `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	CompletionTime int64  `protobuf:"varint,2,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	Phase          string `protobuf:"bytes,3,opt,name=phase" json:"phase,omitempty"`
	Reason         string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
}

func (m *Snapshot_Status) Reset()                    { *m = Snapshot_Status{} }
func (m *Snapshot_Status) String() string            { return proto.CompactTextString(m) }
func (*Snapshot_Status) ProtoMessage()               {}
func (*Snapshot_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73, 1} }

func (m *Snapshot_Status) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Snapshot_Status) GetCompletionTime() int64 {
	if m != nil {
		return m.CompletionTime
	}
	return 0
}

func (m *Snapshot_Status) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Snapshot_Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type InitSpec struct {
	ScriptSource   *ScriptSourceSpec   `protobuf:"bytes,1,opt,name=script_source,json=scriptSource" json:"script_source,omitempty"`
	SnapshotSource *SnapshotSourceSpec `protobuf:"bytes,2,opt,name=snapshot_source,json=snapshotSource" json:"snapshot_source,omitempty"`
}

func (m *InitSpec) Reset()                    { *m = InitSpec{} }
func (m *InitSpec) String() string            { return proto.CompactTextString(m) }
func (*InitSpec) ProtoMessage()               {}
func (*InitSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *InitSpec) GetScriptSource() *ScriptSourceSpec {
	if m != nil {
		return m.ScriptSource
	}
	return nil
}

func (m *InitSpec) GetSnapshotSource() *SnapshotSourceSpec {
	if m != nil {
		return m.SnapshotSource
	}
	return nil
}

type ScriptSourceSpec struct {
	ScriptPath   string        `protobuf:"bytes,1,opt,name=script_path,json=scriptPath" json:"script_path,omitempty"`
	VolumeSource *VolumeSource `protobuf:"bytes,2,opt,name=volume_source,json=volumeSource" json:"volume_source,omitempty"`
}

func (m *ScriptSourceSpec) Reset()                    { *m = ScriptSourceSpec{} }
func (m *ScriptSourceSpec) String() string            { return proto.CompactTextString(m) }
func (*ScriptSourceSpec) ProtoMessage()               {}
func (*ScriptSourceSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *ScriptSourceSpec) GetScriptPath() string {
	if m != nil {
		return m.ScriptPath
	}
	return ""
}

func (m *ScriptSourceSpec) GetVolumeSource() *VolumeSource {
	if m != nil {
		return m.VolumeSource
	}
	return nil
}

type SnapshotSourceSpec struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *SnapshotSourceSpec) Reset()                    { *m = SnapshotSourceSpec{} }
func (m *SnapshotSourceSpec) String() string            { return proto.CompactTextString(m) }
func (*SnapshotSourceSpec) ProtoMessage()               {}
func (*SnapshotSourceSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *SnapshotSourceSpec) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SnapshotSourceSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BackupScheduleSpec struct {
	CronExpression      string               `protobuf:"bytes,1,opt,name=cron_expression,json=cronExpression" json:"cron_expression,omitempty"`
	SnapshotStorageSpec *SnapshotStorageSpec `protobuf:"bytes,2,opt,name=snapshot_storage_spec,json=snapshotStorageSpec" json:"snapshot_storage_spec,omitempty"`
}

func (m *BackupScheduleSpec) Reset()                    { *m = BackupScheduleSpec{} }
func (m *BackupScheduleSpec) String() string            { return proto.CompactTextString(m) }
func (*BackupScheduleSpec) ProtoMessage()               {}
func (*BackupScheduleSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *BackupScheduleSpec) GetCronExpression() string {
	if m != nil {
		return m.CronExpression
	}
	return ""
}

func (m *BackupScheduleSpec) GetSnapshotStorageSpec() *SnapshotStorageSpec {
	if m != nil {
		return m.SnapshotStorageSpec
	}
	return nil
}

type SnapshotStorageSpec struct {
	StorageSecretName string `protobuf:"bytes,1,opt,name=storage_secret_name,json=storageSecretName" json:"storage_secret_name,omitempty"`
	// Types that are valid to be assigned to Storage:
	//	*SnapshotStorageSpec_Local
	//	*SnapshotStorageSpec_S3
	//	*SnapshotStorageSpec_GCS
	//	*SnapshotStorageSpec_Azure
	//	*SnapshotStorageSpec_Swift
	Storage isSnapshotStorageSpec_Storage `protobuf_oneof:"storage"`
}

func (m *SnapshotStorageSpec) Reset()                    { *m = SnapshotStorageSpec{} }
func (m *SnapshotStorageSpec) String() string            { return proto.CompactTextString(m) }
func (*SnapshotStorageSpec) ProtoMessage()               {}
func (*SnapshotStorageSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

type isSnapshotStorageSpec_Storage interface {
	isSnapshotStorageSpec_Storage()
}

type SnapshotStorageSpec_Local struct {
	Local *SnapshotStorageSpec_LocalSpec `protobuf:"bytes,2,opt,name=Local,json=local,oneof"`
}
type SnapshotStorageSpec_S3 struct {
	S3 *SnapshotStorageSpec_S3Spec `protobuf:"bytes,3,opt,name=S3,json=s3,oneof"`
}
type SnapshotStorageSpec_GCS struct {
	GCS *SnapshotStorageSpec_GCSSpec `protobuf:"bytes,4,opt,name=GCS,json=gCS,oneof"`
}
type SnapshotStorageSpec_Azure struct {
	Azure *SnapshotStorageSpec_AzureSpec `protobuf:"bytes,5,opt,name=Azure,json=azure,oneof"`
}
type SnapshotStorageSpec_Swift struct {
	Swift *SnapshotStorageSpec_SwiftSpec `protobuf:"bytes,6,opt,name=Swift,json=swift,oneof"`
}

func (*SnapshotStorageSpec_Local) isSnapshotStorageSpec_Storage() {}
func (*SnapshotStorageSpec_S3) isSnapshotStorageSpec_Storage()    {}
func (*SnapshotStorageSpec_GCS) isSnapshotStorageSpec_Storage()   {}
func (*SnapshotStorageSpec_Azure) isSnapshotStorageSpec_Storage() {}
func (*SnapshotStorageSpec_Swift) isSnapshotStorageSpec_Storage() {}

func (m *SnapshotStorageSpec) GetStorage() isSnapshotStorageSpec_Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *SnapshotStorageSpec) GetStorageSecretName() string {
	if m != nil {
		return m.StorageSecretName
	}
	return ""
}

func (m *SnapshotStorageSpec) GetLocal() *SnapshotStorageSpec_LocalSpec {
	if x, ok := m.GetStorage().(*SnapshotStorageSpec_Local); ok {
		return x.Local
	}
	return nil
}

func (m *SnapshotStorageSpec) GetS3() *SnapshotStorageSpec_S3Spec {
	if x, ok := m.GetStorage().(*SnapshotStorageSpec_S3); ok {
		return x.S3
	}
	return nil
}

func (m *SnapshotStorageSpec) GetGCS() *SnapshotStorageSpec_GCSSpec {
	if x, ok := m.GetStorage().(*SnapshotStorageSpec_GCS); ok {
		return x.GCS
	}
	return nil
}

func (m *SnapshotStorageSpec) GetAzure() *SnapshotStorageSpec_AzureSpec {
	if x, ok := m.GetStorage().(*SnapshotStorageSpec_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *SnapshotStorageSpec) GetSwift() *SnapshotStorageSpec_SwiftSpec {
	if x, ok := m.GetStorage().(*SnapshotStorageSpec_Swift); ok {
		return x.Swift
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SnapshotStorageSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SnapshotStorageSpec_OneofMarshaler, _SnapshotStorageSpec_OneofUnmarshaler, _SnapshotStorageSpec_OneofSizer, []interface{}{
		(*SnapshotStorageSpec_Local)(nil),
		(*SnapshotStorageSpec_S3)(nil),
		(*SnapshotStorageSpec_GCS)(nil),
		(*SnapshotStorageSpec_Azure)(nil),
		(*SnapshotStorageSpec_Swift)(nil),
	}
}

func _SnapshotStorageSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SnapshotStorageSpec)
	// storage
	switch x := m.Storage.(type) {
	case *SnapshotStorageSpec_Local:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Local); err != nil {
			return err
		}
	case *SnapshotStorageSpec_S3:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.S3); err != nil {
			return err
		}
	case *SnapshotStorageSpec_GCS:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GCS); err != nil {
			return err
		}
	case *SnapshotStorageSpec_Azure:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Azure); err != nil {
			return err
		}
	case *SnapshotStorageSpec_Swift:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Swift); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SnapshotStorageSpec.Storage has unexpected type %T", x)
	}
	return nil
}

func _SnapshotStorageSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SnapshotStorageSpec)
	switch tag {
	case 2: // storage.Local
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnapshotStorageSpec_LocalSpec)
		err := b.DecodeMessage(msg)
		m.Storage = &SnapshotStorageSpec_Local{msg}
		return true, err
	case 3: // storage.S3
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnapshotStorageSpec_S3Spec)
		err := b.DecodeMessage(msg)
		m.Storage = &SnapshotStorageSpec_S3{msg}
		return true, err
	case 4: // storage.GCS
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnapshotStorageSpec_GCSSpec)
		err := b.DecodeMessage(msg)
		m.Storage = &SnapshotStorageSpec_GCS{msg}
		return true, err
	case 5: // storage.Azure
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnapshotStorageSpec_AzureSpec)
		err := b.DecodeMessage(msg)
		m.Storage = &SnapshotStorageSpec_Azure{msg}
		return true, err
	case 6: // storage.Swift
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnapshotStorageSpec_SwiftSpec)
		err := b.DecodeMessage(msg)
		m.Storage = &SnapshotStorageSpec_Swift{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SnapshotStorageSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SnapshotStorageSpec)
	// storage
	switch x := m.Storage.(type) {
	case *SnapshotStorageSpec_Local:
		s := proto.Size(x.Local)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SnapshotStorageSpec_S3:
		s := proto.Size(x.S3)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SnapshotStorageSpec_GCS:
		s := proto.Size(x.GCS)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SnapshotStorageSpec_Azure:
		s := proto.Size(x.Azure)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SnapshotStorageSpec_Swift:
		s := proto.Size(x.Swift)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SnapshotStorageSpec_LocalSpec struct {
	VolumeSource *VolumeSource `protobuf:"bytes,1,opt,name=volumeSource" json:"volumeSource,omitempty"`
	MountPath    string        `protobuf:"bytes,2,opt,name=mountPath" json:"mountPath,omitempty"`
	SubPath      string        `protobuf:"bytes,3,opt,name=subPath" json:"subPath,omitempty"`
}

func (m *SnapshotStorageSpec_LocalSpec) Reset()         { *m = SnapshotStorageSpec_LocalSpec{} }
func (m *SnapshotStorageSpec_LocalSpec) String() string { return proto.CompactTextString(m) }
func (*SnapshotStorageSpec_LocalSpec) ProtoMessage()    {}
func (*SnapshotStorageSpec_LocalSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{78, 0}
}

func (m *SnapshotStorageSpec_LocalSpec) GetVolumeSource() *VolumeSource {
	if m != nil {
		return m.VolumeSource
	}
	return nil
}

func (m *SnapshotStorageSpec_LocalSpec) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *SnapshotStorageSpec_LocalSpec) GetSubPath() string {
	if m != nil {
		return m.SubPath
	}
	return ""
}

type SnapshotStorageSpec_S3Spec struct {
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	Bucket   string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	Prefix   string `protobuf:"bytes,3,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *SnapshotStorageSpec_S3Spec) Reset()                    { *m = SnapshotStorageSpec_S3Spec{} }
func (m *SnapshotStorageSpec_S3Spec) String() string            { return proto.CompactTextString(m) }
func (*SnapshotStorageSpec_S3Spec) ProtoMessage()               {}
func (*SnapshotStorageSpec_S3Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78, 1} }

func (m *SnapshotStorageSpec_S3Spec) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *SnapshotStorageSpec_S3Spec) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *SnapshotStorageSpec_S3Spec) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type SnapshotStorageSpec_GCSSpec struct {
	Bucket string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	Prefix string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *SnapshotStorageSpec_GCSSpec) Reset()                    { *m = SnapshotStorageSpec_GCSSpec{} }
func (m *SnapshotStorageSpec_GCSSpec) String() string            { return proto.CompactTextString(m) }
func (*SnapshotStorageSpec_GCSSpec) ProtoMessage()               {}
func (*SnapshotStorageSpec_GCSSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78, 2} }

func (m *SnapshotStorageSpec_GCSSpec) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *SnapshotStorageSpec_GCSSpec) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type SnapshotStorageSpec_AzureSpec struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Prefix    string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *SnapshotStorageSpec_AzureSpec) Reset()         { *m = SnapshotStorageSpec_AzureSpec{} }
func (m *SnapshotStorageSpec_AzureSpec) String() string { return proto.CompactTextString(m) }
func (*SnapshotStorageSpec_AzureSpec) ProtoMessage()    {}
func (*SnapshotStorageSpec_AzureSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{78, 3}
}

func (m *SnapshotStorageSpec_AzureSpec) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *SnapshotStorageSpec_AzureSpec) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type SnapshotStorageSpec_SwiftSpec struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Prefix    string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *SnapshotStorageSpec_SwiftSpec) Reset()         { *m = SnapshotStorageSpec_SwiftSpec{} }
func (m *SnapshotStorageSpec_SwiftSpec) String() string { return proto.CompactTextString(m) }
func (*SnapshotStorageSpec_SwiftSpec) ProtoMessage()    {}
func (*SnapshotStorageSpec_SwiftSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{78, 4}
}

func (m *SnapshotStorageSpec_SwiftSpec) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *SnapshotStorageSpec_SwiftSpec) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type Certificate struct {
	Meta   *Meta               `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *Certificate_Spec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Certificate_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *Certificate) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Certificate) GetSpec() *Certificate_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Certificate) GetStatus() *Certificate_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Certificate_Spec struct {
	// Obtain a single certificate for all the domains. The first Domain provided wiil
	// be counted as Name and other domains will be in SANs.
	Domains            []string                             `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	ACMEUserSecretName string                               `protobuf:"bytes,2,opt,name=ACME_user_secret_name,json=aCMEUserSecretName" json:"ACME_user_secret_name,omitempty"`
	ChallengeProvider  *Certificate_Spec_ChallengeProvider  `protobuf:"bytes,3,opt,name=challenge_provider,json=challengeProvider" json:"challenge_provider,omitempty"`
	Storage            *Certificate_Spec_CertificateStorage `protobuf:"bytes,4,opt,name=storage" json:"storage,omitempty"`
}

func (m *Certificate_Spec) Reset()                    { *m = Certificate_Spec{} }
func (m *Certificate_Spec) String() string            { return proto.CompactTextString(m) }
func (*Certificate_Spec) ProtoMessage()               {}
func (*Certificate_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79, 0} }

func (m *Certificate_Spec) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *Certificate_Spec) GetACMEUserSecretName() string {
	if m != nil {
		return m.ACMEUserSecretName
	}
	return ""
}

func (m *Certificate_Spec) GetChallengeProvider() *Certificate_Spec_ChallengeProvider {
	if m != nil {
		return m.ChallengeProvider
	}
	return nil
}

func (m *Certificate_Spec) GetStorage() *Certificate_Spec_CertificateStorage {
	if m != nil {
		return m.Storage
	}
	return nil
}

type Certificate_Spec_ChallengeProvider struct {
	Http *Certificate_Spec_HTTPChallengeProvider `protobuf:"bytes,1,opt,name=http" json:"http,omitempty"`
	Dns  *Certificate_Spec_DNSChallengeProvider  `protobuf:"bytes,2,opt,name=dns" json:"dns,omitempty"`
}

func (m *Certificate_Spec_ChallengeProvider) Reset()         { *m = Certificate_Spec_ChallengeProvider{} }
func (m *Certificate_Spec_ChallengeProvider) String() string { return proto.CompactTextString(m) }
func (*Certificate_Spec_ChallengeProvider) ProtoMessage()    {}
func (*Certificate_Spec_ChallengeProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{79, 0, 0}
}

func (m *Certificate_Spec_ChallengeProvider) GetHttp() *Certificate_Spec_HTTPChallengeProvider {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *Certificate_Spec_ChallengeProvider) GetDns() *Certificate_Spec_DNSChallengeProvider {
	if m != nil {
		return m.Dns
	}
	return nil
}

type Certificate_Spec_HTTPChallengeProvider struct {
	Ingress *ObjectReference `protobuf:"bytes,1,opt,name=ingress" json:"ingress,omitempty"`
}

func (m *Certificate_Spec_HTTPChallengeProvider) Reset() {
	*m = Certificate_Spec_HTTPChallengeProvider{}
}
func (m *Certificate_Spec_HTTPChallengeProvider) String() string { return proto.CompactTextString(m) }
func (*Certificate_Spec_HTTPChallengeProvider) ProtoMessage()    {}
func (*Certificate_Spec_HTTPChallengeProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{79, 0, 1}
}

func (m *Certificate_Spec_HTTPChallengeProvider) GetIngress() *ObjectReference {
	if m != nil {
		return m.Ingress
	}
	return nil
}

type Certificate_Spec_DNSChallengeProvider struct {
	Provider             string `protobuf:"bytes,1,opt,name=provider" json:"provider,omitempty"`
	CredentialSecretName string `protobuf:"bytes,2,opt,name=credential_secret_name,json=credentialSecretName" json:"credential_secret_name,omitempty"`
}

func (m *Certificate_Spec_DNSChallengeProvider) Reset()         { *m = Certificate_Spec_DNSChallengeProvider{} }
func (m *Certificate_Spec_DNSChallengeProvider) String() string { return proto.CompactTextString(m) }
func (*Certificate_Spec_DNSChallengeProvider) ProtoMessage()    {}
func (*Certificate_Spec_DNSChallengeProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{79, 0, 2}
}

func (m *Certificate_Spec_DNSChallengeProvider) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Certificate_Spec_DNSChallengeProvider) GetCredentialSecretName() string {
	if m != nil {
		return m.CredentialSecretName
	}
	return ""
}

type Certificate_Spec_CertificateStorage struct {
	Secret *LocalObjectReference        `protobuf:"bytes,1,opt,name=secret" json:"secret,omitempty"`
	Vault  *Certificate_Spec_VaultStore `protobuf:"bytes,2,opt,name=vault" json:"vault,omitempty"`
}

func (m *Certificate_Spec_CertificateStorage) Reset()         { *m = Certificate_Spec_CertificateStorage{} }
func (m *Certificate_Spec_CertificateStorage) String() string { return proto.CompactTextString(m) }
func (*Certificate_Spec_CertificateStorage) ProtoMessage()    {}
func (*Certificate_Spec_CertificateStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{79, 0, 3}
}

func (m *Certificate_Spec_CertificateStorage) GetSecret() *LocalObjectReference {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *Certificate_Spec_CertificateStorage) GetVault() *Certificate_Spec_VaultStore {
	if m != nil {
		return m.Vault
	}
	return nil
}

type Certificate_Spec_VaultStore struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Prefix string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *Certificate_Spec_VaultStore) Reset()         { *m = Certificate_Spec_VaultStore{} }
func (m *Certificate_Spec_VaultStore) String() string { return proto.CompactTextString(m) }
func (*Certificate_Spec_VaultStore) ProtoMessage()    {}
func (*Certificate_Spec_VaultStore) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{79, 0, 4}
}

func (m *Certificate_Spec_VaultStore) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Certificate_Spec_VaultStore) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type Certificate_Status struct {
	CreationTime          int64                                      `protobuf:"varint,1,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	Conditions            []*Certificate_Status_CertificateCondition `protobuf:"bytes,2,rep,name=conditions" json:"conditions,omitempty"`
	LastIssuedCertificate *Certificate_Status_CertificateDetails     `protobuf:"bytes,3,opt,name=last_issued_certificate,json=lastIssuedCertificate" json:"last_issued_certificate,omitempty"`
}

func (m *Certificate_Status) Reset()                    { *m = Certificate_Status{} }
func (m *Certificate_Status) String() string            { return proto.CompactTextString(m) }
func (*Certificate_Status) ProtoMessage()               {}
func (*Certificate_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79, 1} }

func (m *Certificate_Status) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *Certificate_Status) GetConditions() []*Certificate_Status_CertificateCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Certificate_Status) GetLastIssuedCertificate() *Certificate_Status_CertificateDetails {
	if m != nil {
		return m.LastIssuedCertificate
	}
	return nil
}

type Certificate_Status_ACMECertificateDetails struct {
	Domain        string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	CertURL       string `protobuf:"bytes,2,opt,name=certURL" json:"certURL,omitempty"`
	CertStableURL string `protobuf:"bytes,3,opt,name=cert_stableURL,json=certStableURL" json:"cert_stableURL,omitempty"`
	AccountRef    string `protobuf:"bytes,4,opt,name=account_ref,json=accountRef" json:"account_ref,omitempty"`
}

func (m *Certificate_Status_ACMECertificateDetails) Reset() {
	*m = Certificate_Status_ACMECertificateDetails{}
}
func (m *Certificate_Status_ACMECertificateDetails) String() string { return proto.CompactTextString(m) }
func (*Certificate_Status_ACMECertificateDetails) ProtoMessage()    {}
func (*Certificate_Status_ACMECertificateDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{79, 1, 0}
}

func (m *Certificate_Status_ACMECertificateDetails) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Certificate_Status_ACMECertificateDetails) GetCertURL() string {
	if m != nil {
		return m.CertURL
	}
	return ""
}

func (m *Certificate_Status_ACMECertificateDetails) GetCertStableURL() string {
	if m != nil {
		return m.CertStableURL
	}
	return ""
}

func (m *Certificate_Status_ACMECertificateDetails) GetAccountRef() string {
	if m != nil {
		return m.AccountRef
	}
	return ""
}

type Certificate_Status_CertificateCondition struct {
	Type           string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Reason         string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	Message        string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	LastUpdateTime int64  `protobuf:"varint,4,opt,name=last_update_time,json=lastUpdateTime" json:"last_update_time,omitempty"`
}

func (m *Certificate_Status_CertificateCondition) Reset() {
	*m = Certificate_Status_CertificateCondition{}
}
func (m *Certificate_Status_CertificateCondition) String() string { return proto.CompactTextString(m) }
func (*Certificate_Status_CertificateCondition) ProtoMessage()    {}
func (*Certificate_Status_CertificateCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{79, 1, 1}
}

func (m *Certificate_Status_CertificateCondition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Certificate_Status_CertificateCondition) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Certificate_Status_CertificateCondition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Certificate_Status_CertificateCondition) GetLastUpdateTime() int64 {
	if m != nil {
		return m.LastUpdateTime
	}
	return 0
}

type Certificate_Status_CertificateDetails struct {
	SerialNumber  string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	NotBefore     int64  `protobuf:"varint,2,opt,name=not_before,json=notBefore" json:"not_before,omitempty"`
	NotAfter      int64  `protobuf:"varint,3,opt,name=not_after,json=notAfter" json:"not_after,omitempty"`
	CertUrl       string `protobuf:"bytes,4,opt,name=cert_url,json=certUrl" json:"cert_url,omitempty"`
	CertStableUrl string `protobuf:"bytes,5,opt,name=cert_stable_url,json=certStableUrl" json:"cert_stable_url,omitempty"`
	AccountRef    string `protobuf:"bytes,6,opt,name=account_ref,json=accountRef" json:"account_ref,omitempty"`
}

func (m *Certificate_Status_CertificateDetails) Reset()         { *m = Certificate_Status_CertificateDetails{} }
func (m *Certificate_Status_CertificateDetails) String() string { return proto.CompactTextString(m) }
func (*Certificate_Status_CertificateDetails) ProtoMessage()    {}
func (*Certificate_Status_CertificateDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{79, 1, 2}
}

func (m *Certificate_Status_CertificateDetails) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Certificate_Status_CertificateDetails) GetNotBefore() int64 {
	if m != nil {
		return m.NotBefore
	}
	return 0
}

func (m *Certificate_Status_CertificateDetails) GetNotAfter() int64 {
	if m != nil {
		return m.NotAfter
	}
	return 0
}

func (m *Certificate_Status_CertificateDetails) GetCertUrl() string {
	if m != nil {
		return m.CertUrl
	}
	return ""
}

func (m *Certificate_Status_CertificateDetails) GetCertStableUrl() string {
	if m != nil {
		return m.CertStableUrl
	}
	return ""
}

func (m *Certificate_Status_CertificateDetails) GetAccountRef() string {
	if m != nil {
		return m.AccountRef
	}
	return ""
}

type DiskListRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *DiskListRequest) Reset()                    { *m = DiskListRequest{} }
func (m *DiskListRequest) String() string            { return proto.CompactTextString(m) }
func (*DiskListRequest) ProtoMessage()               {}
func (*DiskListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *DiskListRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

type DiskListResponse struct {
	Disks []*Disk `protobuf:"bytes,1,rep,name=disks" json:"disks,omitempty"`
}

func (m *DiskListResponse) Reset()                    { *m = DiskListResponse{} }
func (m *DiskListResponse) String() string            { return proto.CompactTextString(m) }
func (*DiskListResponse) ProtoMessage()               {}
func (*DiskListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *DiskListResponse) GetDisks() []*Disk {
	if m != nil {
		return m.Disks
	}
	return nil
}

type DiskDescribeRequest struct {
	Cluster  string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Provider string `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
}

func (m *DiskDescribeRequest) Reset()                    { *m = DiskDescribeRequest{} }
func (m *DiskDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*DiskDescribeRequest) ProtoMessage()               {}
func (*DiskDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *DiskDescribeRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DiskDescribeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DiskDescribeRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type DiskDescribeResponse struct {
	Disk *Disk `protobuf:"bytes,1,opt,name=disk" json:"disk,omitempty"`
}

func (m *DiskDescribeResponse) Reset()                    { *m = DiskDescribeResponse{} }
func (m *DiskDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*DiskDescribeResponse) ProtoMessage()               {}
func (*DiskDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *DiskDescribeResponse) GetDisk() *Disk {
	if m != nil {
		return m.Disk
	}
	return nil
}

type DiskCreateRequest struct {
	Cluster  string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Zone     string `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	DiskType string `protobuf:"bytes,4,opt,name=disk_type,json=diskType" json:"disk_type,omitempty"`
	SizeGb   int64  `protobuf:"varint,5,opt,name=size_gb,json=sizeGb" json:"size_gb,omitempty"`
}

func (m *DiskCreateRequest) Reset()                    { *m = DiskCreateRequest{} }
func (m *DiskCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*DiskCreateRequest) ProtoMessage()               {}
func (*DiskCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *DiskCreateRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DiskCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DiskCreateRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *DiskCreateRequest) GetDiskType() string {
	if m != nil {
		return m.DiskType
	}
	return ""
}

func (m *DiskCreateRequest) GetSizeGb() int64 {
	if m != nil {
		return m.SizeGb
	}
	return 0
}

type DiskDeleteRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Uid     string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
}

func (m *DiskDeleteRequest) Reset()                    { *m = DiskDeleteRequest{} }
func (m *DiskDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DiskDeleteRequest) ProtoMessage()               {}
func (*DiskDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *DiskDeleteRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DiskDeleteRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type Disk struct {
	Name                  string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id                    string                 `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Provider              string                 `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	SizeGb                int64                  `protobuf:"varint,4,opt,name=size_gb,json=sizeGb" json:"size_gb,omitempty"`
	Type                  string                 `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Zone                  string                 `protobuf:"bytes,6,opt,name=zone" json:"zone,omitempty"`
	Status                string                 `protobuf:"bytes,7,opt,name=status" json:"status,omitempty"`
	Endpoint              string                 `protobuf:"bytes,8,opt,name=endpoint" json:"endpoint,omitempty"`
	Iops                  int64                  `protobuf:"varint,9,opt,name=iops" json:"iops,omitempty"`
	PersistentVolume      *PersistentVolume      `protobuf:"bytes,10,opt,name=persistent_volume,json=persistentVolume" json:"persistent_volume,omitempty"`
	PersistentVolumeClaim *PersistentVolumeClaim `protobuf:"bytes,11,opt,name=persistent_volume_claim,json=persistentVolumeClaim" json:"persistent_volume_claim,omitempty"`
}

func (m *Disk) Reset()                    { *m = Disk{} }
func (m *Disk) String() string            { return proto.CompactTextString(m) }
func (*Disk) ProtoMessage()               {}
func (*Disk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *Disk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Disk) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Disk) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Disk) GetSizeGb() int64 {
	if m != nil {
		return m.SizeGb
	}
	return 0
}

func (m *Disk) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Disk) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Disk) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Disk) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Disk) GetIops() int64 {
	if m != nil {
		return m.Iops
	}
	return 0
}

func (m *Disk) GetPersistentVolume() *PersistentVolume {
	if m != nil {
		return m.PersistentVolume
	}
	return nil
}

func (m *Disk) GetPersistentVolumeClaim() *PersistentVolumeClaim {
	if m != nil {
		return m.PersistentVolumeClaim
	}
	return nil
}

type ResourceCondition struct {
	Type               string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Status             string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	LastHeartbeatTime  int64  `protobuf:"varint,3,opt,name=last_heartbeat_time,json=lastHeartbeatTime" json:"last_heartbeat_time,omitempty"`
	LastTransitionTime int64  `protobuf:"varint,4,opt,name=last_transition_time,json=lastTransitionTime" json:"last_transition_time,omitempty"`
	Reason             string `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
	Message            string `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
}

func (m *ResourceCondition) Reset()                    { *m = ResourceCondition{} }
func (m *ResourceCondition) String() string            { return proto.CompactTextString(m) }
func (*ResourceCondition) ProtoMessage()               {}
func (*ResourceCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *ResourceCondition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ResourceCondition) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ResourceCondition) GetLastHeartbeatTime() int64 {
	if m != nil {
		return m.LastHeartbeatTime
	}
	return 0
}

func (m *ResourceCondition) GetLastTransitionTime() int64 {
	if m != nil {
		return m.LastTransitionTime
	}
	return 0
}

func (m *ResourceCondition) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ResourceCondition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Prometheus defines a Prometheus deployment.
type Prometheus struct {
	Meta   *Meta                        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *Prometheus_PrometheusSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Prometheus_PrometheusStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Prometheus) Reset()                    { *m = Prometheus{} }
func (m *Prometheus) String() string            { return proto.CompactTextString(m) }
func (*Prometheus) ProtoMessage()               {}
func (*Prometheus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *Prometheus) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Prometheus) GetSpec() *Prometheus_PrometheusSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Prometheus) GetStatus() *Prometheus_PrometheusStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Specification of the desired behavior of the Prometheus cluster.
type Prometheus_PrometheusSpec struct {
	// ServiceMonitors to be selected for target discovery.
	ServiceMonitorSelector string `protobuf:"bytes,1,opt,name=service_monitor_selector,json=serviceMonitorSelector" json:"service_monitor_selector,omitempty"`
	// Version of Prometheus to be deployed.
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// When a Prometheus deployment is paused, no actions except for deletion
	// will be performed on the underlying objects.
	Paused bool `protobuf:"varint,3,opt,name=paused" json:"paused,omitempty"`
	// Base image to use for a Prometheus deployment.
	BaseImage string `protobuf:"bytes,4,opt,name=base_image,json=baseImage" json:"base_image,omitempty"`
	// An optional list of references to secrets in the same namespace
	// to use for pulling prometheus and alertmanager images from registries
	ImagePullSecrets []*LocalObjectReference `protobuf:"bytes,5,rep,name=image_pull_secrets,json=imagePullSecrets" json:"image_pull_secrets,omitempty"`
	// Number of instances to deploy for a Prometheus deployment.
	Replicas int32 `protobuf:"varint,6,opt,name=replicas" json:"replicas,omitempty"`
	// Time duration Prometheus shall retain data for.
	Retention string `protobuf:"bytes,7,opt,name=retention" json:"retention,omitempty"`
	// The labels to add to any time series or alerts when communicating with
	// external systems (federation, remote storage, Alertmanager).
	ExternalLabels map[string]string `protobuf:"bytes,8,rep,name=external_labels,json=externalLabels" json:"external_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The external URL the Prometheus instances will be available under. This is
	// necessary to generate correct URLs. This is necessary if Prometheus is not
	// served from root of a DNS name.
	ExternalUrl string `protobuf:"bytes,9,opt,name=external_url,json=externalUrl" json:"external_url,omitempty"`
	// The route prefix Prometheus registers HTTP handlers for. This is useful,
	// if using ExternalURL and a proxy is rewriting HTTP routes of a request,
	// and the actual ExternalURL is still true, but the server serves requests
	// under a different route prefix. For example for use with `kubectl proxy`.
	RoutePrefix string `protobuf:"bytes,10,opt,name=route_prefix,json=routePrefix" json:"route_prefix,omitempty"`
	// A selector to select which ConfigMaps to mount for loading rule files from.
	RuleSelector string `protobuf:"bytes,11,opt,name=rule_selector,json=ruleSelector" json:"rule_selector,omitempty"`
	// Define which Nodes the Pods are scheduled on.
	NodeSelector map[string]string `protobuf:"bytes,12,rep,name=node_selector,json=nodeSelector" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ServiceAccountName is the name of the ServiceAccount to use to run the
	// Prometheus Pods.
	ServiceAccountName string `protobuf:"bytes,13,opt,name=service_account_name,json=serviceAccountName" json:"service_account_name,omitempty"`
	// Secrets is a list of Secrets in the same namespace as the Prometheus
	// object, which shall be mounted into the Prometheus Pods.
	// The Secrets are mounted into /etc/prometheus/secrets/<secret-name>.
	// Secrets changes after initial creation of a Prometheus object are not
	// reflected in the running Pods. To change the secrets mounted into the
	// Prometheus Pods, the object must be deleted and recreated with the new list
	// of secrets.
	Secrets []string `protobuf:"bytes,14,rep,name=secrets" json:"secrets,omitempty"`
	// Define details regarding alerting.
	Alerting *AlertSpec `protobuf:"bytes,15,opt,name=alerting" json:"alerting,omitempty"`
}

func (m *Prometheus_PrometheusSpec) Reset()                    { *m = Prometheus_PrometheusSpec{} }
func (m *Prometheus_PrometheusSpec) String() string            { return proto.CompactTextString(m) }
func (*Prometheus_PrometheusSpec) ProtoMessage()               {}
func (*Prometheus_PrometheusSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88, 0} }

func (m *Prometheus_PrometheusSpec) GetServiceMonitorSelector() string {
	if m != nil {
		return m.ServiceMonitorSelector
	}
	return ""
}

func (m *Prometheus_PrometheusSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Prometheus_PrometheusSpec) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *Prometheus_PrometheusSpec) GetBaseImage() string {
	if m != nil {
		return m.BaseImage
	}
	return ""
}

func (m *Prometheus_PrometheusSpec) GetImagePullSecrets() []*LocalObjectReference {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

func (m *Prometheus_PrometheusSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *Prometheus_PrometheusSpec) GetRetention() string {
	if m != nil {
		return m.Retention
	}
	return ""
}

func (m *Prometheus_PrometheusSpec) GetExternalLabels() map[string]string {
	if m != nil {
		return m.ExternalLabels
	}
	return nil
}

func (m *Prometheus_PrometheusSpec) GetExternalUrl() string {
	if m != nil {
		return m.ExternalUrl
	}
	return ""
}

func (m *Prometheus_PrometheusSpec) GetRoutePrefix() string {
	if m != nil {
		return m.RoutePrefix
	}
	return ""
}

func (m *Prometheus_PrometheusSpec) GetRuleSelector() string {
	if m != nil {
		return m.RuleSelector
	}
	return ""
}

func (m *Prometheus_PrometheusSpec) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *Prometheus_PrometheusSpec) GetServiceAccountName() string {
	if m != nil {
		return m.ServiceAccountName
	}
	return ""
}

func (m *Prometheus_PrometheusSpec) GetSecrets() []string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *Prometheus_PrometheusSpec) GetAlerting() *AlertSpec {
	if m != nil {
		return m.Alerting
	}
	return nil
}

type Prometheus_PrometheusStatus struct {
	// Represents whether any actions on the underlaying managed objects are
	// being performed. Only delete actions will be performed.
	Paused bool `protobuf:"varint,1,opt,name=paused" json:"paused,omitempty"`
	// Total number of non-terminated pods targeted by this Prometheus deployment
	// (their labels match the selector).
	Replicas            int32 `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
	UpdatedReplicas     int32 `protobuf:"varint,3,opt,name=updated_replicas,json=updatedReplicas" json:"updated_replicas,omitempty"`
	AvailableReplicas   int32 `protobuf:"varint,4,opt,name=available_replicas,json=availableReplicas" json:"available_replicas,omitempty"`
	UnavailableReplicas int32 `protobuf:"varint,5,opt,name=unavailable_replicas,json=unavailableReplicas" json:"unavailable_replicas,omitempty"`
}

func (m *Prometheus_PrometheusStatus) Reset()                    { *m = Prometheus_PrometheusStatus{} }
func (m *Prometheus_PrometheusStatus) String() string            { return proto.CompactTextString(m) }
func (*Prometheus_PrometheusStatus) ProtoMessage()               {}
func (*Prometheus_PrometheusStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88, 1} }

func (m *Prometheus_PrometheusStatus) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *Prometheus_PrometheusStatus) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *Prometheus_PrometheusStatus) GetUpdatedReplicas() int32 {
	if m != nil {
		return m.UpdatedReplicas
	}
	return 0
}

func (m *Prometheus_PrometheusStatus) GetAvailableReplicas() int32 {
	if m != nil {
		return m.AvailableReplicas
	}
	return 0
}

func (m *Prometheus_PrometheusStatus) GetUnavailableReplicas() int32 {
	if m != nil {
		return m.UnavailableReplicas
	}
	return 0
}

// AlertingSpec defines parameters for alerting configuration of Prometheus servers.
type AlertSpec struct {
	// AlertmanagerEndpoints Prometheus should fire alerts against.
	Alertmanager []*PrometheusAlertmanagerEndpoint `protobuf:"bytes,1,rep,name=alertmanager" json:"alertmanager,omitempty"`
}

func (m *AlertSpec) Reset()                    { *m = AlertSpec{} }
func (m *AlertSpec) String() string            { return proto.CompactTextString(m) }
func (*AlertSpec) ProtoMessage()               {}
func (*AlertSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *AlertSpec) GetAlertmanager() []*PrometheusAlertmanagerEndpoint {
	if m != nil {
		return m.Alertmanager
	}
	return nil
}

// AlertmanagerEndpoints defines a selection of a single Endpoints object
// containing alertmanager IPs to fire alerts against.
type PrometheusAlertmanagerEndpoint struct {
	Namespace  string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Port       int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Scheme     string `protobuf:"bytes,4,opt,name=scheme" json:"scheme,omitempty"`
	PathPrefix string `protobuf:"bytes,5,opt,name=path_prefix,json=pathPrefix" json:"path_prefix,omitempty"`
}

func (m *PrometheusAlertmanagerEndpoint) Reset()                    { *m = PrometheusAlertmanagerEndpoint{} }
func (m *PrometheusAlertmanagerEndpoint) String() string            { return proto.CompactTextString(m) }
func (*PrometheusAlertmanagerEndpoint) ProtoMessage()               {}
func (*PrometheusAlertmanagerEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *PrometheusAlertmanagerEndpoint) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PrometheusAlertmanagerEndpoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrometheusAlertmanagerEndpoint) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PrometheusAlertmanagerEndpoint) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *PrometheusAlertmanagerEndpoint) GetPathPrefix() string {
	if m != nil {
		return m.PathPrefix
	}
	return ""
}

// ServiceMonitor defines monitoring for a set of services.
type ServiceMonitor struct {
	Meta *Meta                              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec *ServiceMonitor_ServiceMonitorSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *ServiceMonitor) Reset()                    { *m = ServiceMonitor{} }
func (m *ServiceMonitor) String() string            { return proto.CompactTextString(m) }
func (*ServiceMonitor) ProtoMessage()               {}
func (*ServiceMonitor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *ServiceMonitor) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ServiceMonitor) GetSpec() *ServiceMonitor_ServiceMonitorSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// ServiceMonitorSpec contains specification parameters for a ServiceMonitor.
type ServiceMonitor_ServiceMonitorSpec struct {
	// The label to use to retrieve the job name from.
	JobLabel  string                     `protobuf:"bytes,1,opt,name=job_label,json=jobLabel" json:"job_label,omitempty"`
	Endpoints []*ServiceMonitor_Endpoint `protobuf:"bytes,2,rep,name=endpoints" json:"endpoints,omitempty"`
	// Selector to select Endpoints objects.
	Selector string `protobuf:"bytes,3,opt,name=selector" json:"selector,omitempty"`
	// Selector to select which namespaces the Endpoints objects are discovered from.
	NamespaceSelector *ServiceMonitor_NamespaceSelector `protobuf:"bytes,4,opt,name=namespace_selector,json=namespaceSelector" json:"namespace_selector,omitempty"`
}

func (m *ServiceMonitor_ServiceMonitorSpec) Reset()         { *m = ServiceMonitor_ServiceMonitorSpec{} }
func (m *ServiceMonitor_ServiceMonitorSpec) String() string { return proto.CompactTextString(m) }
func (*ServiceMonitor_ServiceMonitorSpec) ProtoMessage()    {}
func (*ServiceMonitor_ServiceMonitorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{91, 0}
}

func (m *ServiceMonitor_ServiceMonitorSpec) GetJobLabel() string {
	if m != nil {
		return m.JobLabel
	}
	return ""
}

func (m *ServiceMonitor_ServiceMonitorSpec) GetEndpoints() []*ServiceMonitor_Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *ServiceMonitor_ServiceMonitorSpec) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *ServiceMonitor_ServiceMonitorSpec) GetNamespaceSelector() *ServiceMonitor_NamespaceSelector {
	if m != nil {
		return m.NamespaceSelector
	}
	return nil
}

// Endpoint defines a scrapeable endpoint serving Prometheus metrics.
type ServiceMonitor_Endpoint struct {
	// Name of the service port this endpoint refers to. Mutually exclusive with targetPort.
	Port string `protobuf:"bytes,1,opt,name=port" json:"port,omitempty"`
	// Name or number of the target port of the endpoint. Mutually exclusive with port.
	TargetPort string `protobuf:"bytes,2,opt,name=target_port,json=targetPort" json:"target_port,omitempty"`
	// HTTP path to scrape for metrics.
	Path string `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	// HTTP scheme to use for scraping.
	Scheme string `protobuf:"bytes,4,opt,name=scheme" json:"scheme,omitempty"`
	// Interval at which metrics should be scraped
	Interval string `protobuf:"bytes,5,opt,name=interval" json:"interval,omitempty"`
}

func (m *ServiceMonitor_Endpoint) Reset()                    { *m = ServiceMonitor_Endpoint{} }
func (m *ServiceMonitor_Endpoint) String() string            { return proto.CompactTextString(m) }
func (*ServiceMonitor_Endpoint) ProtoMessage()               {}
func (*ServiceMonitor_Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91, 1} }

func (m *ServiceMonitor_Endpoint) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *ServiceMonitor_Endpoint) GetTargetPort() string {
	if m != nil {
		return m.TargetPort
	}
	return ""
}

func (m *ServiceMonitor_Endpoint) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ServiceMonitor_Endpoint) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *ServiceMonitor_Endpoint) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

type ServiceMonitor_NamespaceSelector struct {
	// Boolean describing whether all namespaces are selected in contrast to a
	// list restricting them.
	Any bool `protobuf:"varint,1,opt,name=any" json:"any,omitempty"`
	// List of namespace names.
	MatchNames []string `protobuf:"bytes,2,rep,name=match_names,json=matchNames" json:"match_names,omitempty"`
}

func (m *ServiceMonitor_NamespaceSelector) Reset()         { *m = ServiceMonitor_NamespaceSelector{} }
func (m *ServiceMonitor_NamespaceSelector) String() string { return proto.CompactTextString(m) }
func (*ServiceMonitor_NamespaceSelector) ProtoMessage()    {}
func (*ServiceMonitor_NamespaceSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{91, 2}
}

func (m *ServiceMonitor_NamespaceSelector) GetAny() bool {
	if m != nil {
		return m.Any
	}
	return false
}

func (m *ServiceMonitor_NamespaceSelector) GetMatchNames() []string {
	if m != nil {
		return m.MatchNames
	}
	return nil
}

type ResourceRequirements struct {
	Limits   map[string]string `protobuf:"bytes,1,rep,name=limits" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Requests map[string]string `protobuf:"bytes,2,rep,name=requests" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ResourceRequirements) Reset()                    { *m = ResourceRequirements{} }
func (m *ResourceRequirements) String() string            { return proto.CompactTextString(m) }
func (*ResourceRequirements) ProtoMessage()               {}
func (*ResourceRequirements) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *ResourceRequirements) GetLimits() map[string]string {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *ResourceRequirements) GetRequests() map[string]string {
	if m != nil {
		return m.Requests
	}
	return nil
}

type Ingress struct {
	Meta   *Meta           `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *Ingress_Spec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *Ingress_Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Ingress) Reset()                    { *m = Ingress{} }
func (m *Ingress) String() string            { return proto.CompactTextString(m) }
func (*Ingress) ProtoMessage()               {}
func (*Ingress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *Ingress) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Ingress) GetSpec() *Ingress_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Ingress) GetStatus() *Ingress_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Ingress_Spec struct {
	Backend                  *Ingress_HTTPIngressBackend `protobuf:"bytes,1,opt,name=backend" json:"backend,omitempty"`
	TLS                      []*Ingress_IngressTLS       `protobuf:"bytes,2,rep,name=TLS,json=tLS" json:"TLS,omitempty"`
	FrontendRules            []*Ingress_FrontendRule     `protobuf:"bytes,3,rep,name=frontend_rules,json=frontendRules" json:"frontend_rules,omitempty"`
	Rules                    []*Ingress_IngressRule      `protobuf:"bytes,4,rep,name=rules" json:"rules,omitempty"`
	LoadBalancerSourceRanges []string                    `protobuf:"bytes,5,rep,name=load_balancer_source_ranges,json=loadBalancerSourceRanges" json:"load_balancer_source_ranges,omitempty"`
	Resources                *ResourceRequirements       `protobuf:"bytes,6,opt,name=resources" json:"resources,omitempty"`
	Affinity                 *Affinity                   `protobuf:"bytes,7,opt,name=affinity" json:"affinity,omitempty"`
	SchedulerName            string                      `protobuf:"bytes,8,opt,name=scheduler_name,json=schedulerName" json:"scheduler_name,omitempty"`
	Tolerations              []*Toleration               `protobuf:"bytes,9,rep,name=tolerations" json:"tolerations,omitempty"`
	ImagePullSecrets         []*LocalObjectReference     `protobuf:"bytes,10,rep,name=imagePullSecrets" json:"imagePullSecrets,omitempty"`
}

func (m *Ingress_Spec) Reset()                    { *m = Ingress_Spec{} }
func (m *Ingress_Spec) String() string            { return proto.CompactTextString(m) }
func (*Ingress_Spec) ProtoMessage()               {}
func (*Ingress_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 0} }

func (m *Ingress_Spec) GetBackend() *Ingress_HTTPIngressBackend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (m *Ingress_Spec) GetTLS() []*Ingress_IngressTLS {
	if m != nil {
		return m.TLS
	}
	return nil
}

func (m *Ingress_Spec) GetFrontendRules() []*Ingress_FrontendRule {
	if m != nil {
		return m.FrontendRules
	}
	return nil
}

func (m *Ingress_Spec) GetRules() []*Ingress_IngressRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *Ingress_Spec) GetLoadBalancerSourceRanges() []string {
	if m != nil {
		return m.LoadBalancerSourceRanges
	}
	return nil
}

func (m *Ingress_Spec) GetResources() *ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Ingress_Spec) GetAffinity() *Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *Ingress_Spec) GetSchedulerName() string {
	if m != nil {
		return m.SchedulerName
	}
	return ""
}

func (m *Ingress_Spec) GetTolerations() []*Toleration {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *Ingress_Spec) GetImagePullSecrets() []*LocalObjectReference {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

type Ingress_FrontendRule struct {
	Port  int32               `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	Rules []string            `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	Auth  *Ingress_AuthOption `protobuf:"bytes,3,opt,name=auth" json:"auth,omitempty"`
}

func (m *Ingress_FrontendRule) Reset()                    { *m = Ingress_FrontendRule{} }
func (m *Ingress_FrontendRule) String() string            { return proto.CompactTextString(m) }
func (*Ingress_FrontendRule) ProtoMessage()               {}
func (*Ingress_FrontendRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 1} }

func (m *Ingress_FrontendRule) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Ingress_FrontendRule) GetRules() []string {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *Ingress_FrontendRule) GetAuth() *Ingress_AuthOption {
	if m != nil {
		return m.Auth
	}
	return nil
}

type Ingress_HTTPIngressBackend struct {
	HostNames   []string `protobuf:"bytes,1,rep,name=host_names,json=hostNames" json:"host_names,omitempty"`
	ServiceName string   `protobuf:"bytes,2,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	ServicePort int32    `protobuf:"varint,3,opt,name=service_port,json=servicePort" json:"service_port,omitempty"`
	BackendRule []string `protobuf:"bytes,4,rep,name=backend_rule,json=backendRule" json:"backend_rule,omitempty"`
	RewriteRule []string `protobuf:"bytes,5,rep,name=rewrite_rule,json=rewriteRule" json:"rewrite_rule,omitempty"`
	HeaderRule  []string `protobuf:"bytes,6,rep,name=header_rule,json=headerRule" json:"header_rule,omitempty"`
}

func (m *Ingress_HTTPIngressBackend) Reset()                    { *m = Ingress_HTTPIngressBackend{} }
func (m *Ingress_HTTPIngressBackend) String() string            { return proto.CompactTextString(m) }
func (*Ingress_HTTPIngressBackend) ProtoMessage()               {}
func (*Ingress_HTTPIngressBackend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 2} }

func (m *Ingress_HTTPIngressBackend) GetHostNames() []string {
	if m != nil {
		return m.HostNames
	}
	return nil
}

func (m *Ingress_HTTPIngressBackend) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Ingress_HTTPIngressBackend) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *Ingress_HTTPIngressBackend) GetBackendRule() []string {
	if m != nil {
		return m.BackendRule
	}
	return nil
}

func (m *Ingress_HTTPIngressBackend) GetRewriteRule() []string {
	if m != nil {
		return m.RewriteRule
	}
	return nil
}

func (m *Ingress_HTTPIngressBackend) GetHeaderRule() []string {
	if m != nil {
		return m.HeaderRule
	}
	return nil
}

type Ingress_Status struct {
	LoadBalancer []*Ingress_LoadBalancerIngress `protobuf:"bytes,1,rep,name=load_balancer,json=loadBalancer" json:"load_balancer,omitempty"`
}

func (m *Ingress_Status) Reset()                    { *m = Ingress_Status{} }
func (m *Ingress_Status) String() string            { return proto.CompactTextString(m) }
func (*Ingress_Status) ProtoMessage()               {}
func (*Ingress_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 3} }

func (m *Ingress_Status) GetLoadBalancer() []*Ingress_LoadBalancerIngress {
	if m != nil {
		return m.LoadBalancer
	}
	return nil
}

type Ingress_LoadBalancerIngress struct {
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	IP       string `protobuf:"bytes,2,opt,name=IP,json=iP" json:"IP,omitempty"`
}

func (m *Ingress_LoadBalancerIngress) Reset()                    { *m = Ingress_LoadBalancerIngress{} }
func (m *Ingress_LoadBalancerIngress) String() string            { return proto.CompactTextString(m) }
func (*Ingress_LoadBalancerIngress) ProtoMessage()               {}
func (*Ingress_LoadBalancerIngress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 4} }

func (m *Ingress_LoadBalancerIngress) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *Ingress_LoadBalancerIngress) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type Ingress_IngressTLS struct {
	Hosts      []string         `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	SecretName string           `protobuf:"bytes,2,opt,name=secret_name,json=secretName" json:"secret_name,omitempty"`
	Ref        *ObjectReference `protobuf:"bytes,3,opt,name=ref" json:"ref,omitempty"`
}

func (m *Ingress_IngressTLS) Reset()                    { *m = Ingress_IngressTLS{} }
func (m *Ingress_IngressTLS) String() string            { return proto.CompactTextString(m) }
func (*Ingress_IngressTLS) ProtoMessage()               {}
func (*Ingress_IngressTLS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 5} }

func (m *Ingress_IngressTLS) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *Ingress_IngressTLS) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *Ingress_IngressTLS) GetRef() *ObjectReference {
	if m != nil {
		return m.Ref
	}
	return nil
}

type Ingress_IngressRule struct {
	Host string                        `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	HTTP *Ingress_HTTPIngressRuleValue `protobuf:"bytes,2,opt,name=HTTP,json=hTTP" json:"HTTP,omitempty"`
	TCP  *Ingress_TCPIngressRuleValue  `protobuf:"bytes,3,opt,name=TCP,json=tCP" json:"TCP,omitempty"`
}

func (m *Ingress_IngressRule) Reset()                    { *m = Ingress_IngressRule{} }
func (m *Ingress_IngressRule) String() string            { return proto.CompactTextString(m) }
func (*Ingress_IngressRule) ProtoMessage()               {}
func (*Ingress_IngressRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 6} }

func (m *Ingress_IngressRule) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Ingress_IngressRule) GetHTTP() *Ingress_HTTPIngressRuleValue {
	if m != nil {
		return m.HTTP
	}
	return nil
}

func (m *Ingress_IngressRule) GetTCP() *Ingress_TCPIngressRuleValue {
	if m != nil {
		return m.TCP
	}
	return nil
}

type Ingress_HTTPIngressRuleValue struct {
	Port     int32                      `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	No_TLS   bool                       `protobuf:"varint,2,opt,name=no_TLS,json=noTLS" json:"no_TLS,omitempty"`
	NodePort int32                      `protobuf:"varint,3,opt,name=node_port,json=nodePort" json:"node_port,omitempty"`
	Paths    []*Ingress_HTTPIngressPath `protobuf:"bytes,4,rep,name=paths" json:"paths,omitempty"`
}

func (m *Ingress_HTTPIngressRuleValue) Reset()         { *m = Ingress_HTTPIngressRuleValue{} }
func (m *Ingress_HTTPIngressRuleValue) String() string { return proto.CompactTextString(m) }
func (*Ingress_HTTPIngressRuleValue) ProtoMessage()    {}
func (*Ingress_HTTPIngressRuleValue) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{93, 7}
}

func (m *Ingress_HTTPIngressRuleValue) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Ingress_HTTPIngressRuleValue) GetNo_TLS() bool {
	if m != nil {
		return m.No_TLS
	}
	return false
}

func (m *Ingress_HTTPIngressRuleValue) GetNodePort() int32 {
	if m != nil {
		return m.NodePort
	}
	return 0
}

func (m *Ingress_HTTPIngressRuleValue) GetPaths() []*Ingress_HTTPIngressPath {
	if m != nil {
		return m.Paths
	}
	return nil
}

type Ingress_TCPIngressRuleValue struct {
	Port     int32                   `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	No_TLS   bool                    `protobuf:"varint,2,opt,name=no_TLS,json=noTLS" json:"no_TLS,omitempty"`
	NodePort int32                   `protobuf:"varint,3,opt,name=node_port,json=nodePort" json:"node_port,omitempty"`
	Backend  *Ingress_IngressBackend `protobuf:"bytes,4,opt,name=backend" json:"backend,omitempty"`
	ALPN     []string                `protobuf:"bytes,5,rep,name=ALPN,json=aLPN" json:"ALPN,omitempty"`
}

func (m *Ingress_TCPIngressRuleValue) Reset()                    { *m = Ingress_TCPIngressRuleValue{} }
func (m *Ingress_TCPIngressRuleValue) String() string            { return proto.CompactTextString(m) }
func (*Ingress_TCPIngressRuleValue) ProtoMessage()               {}
func (*Ingress_TCPIngressRuleValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 8} }

func (m *Ingress_TCPIngressRuleValue) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Ingress_TCPIngressRuleValue) GetNo_TLS() bool {
	if m != nil {
		return m.No_TLS
	}
	return false
}

func (m *Ingress_TCPIngressRuleValue) GetNodePort() int32 {
	if m != nil {
		return m.NodePort
	}
	return 0
}

func (m *Ingress_TCPIngressRuleValue) GetBackend() *Ingress_IngressBackend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (m *Ingress_TCPIngressRuleValue) GetALPN() []string {
	if m != nil {
		return m.ALPN
	}
	return nil
}

type Ingress_HTTPIngressPath struct {
	Path    string                      `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Backend *Ingress_HTTPIngressBackend `protobuf:"bytes,2,opt,name=backend" json:"backend,omitempty"`
}

func (m *Ingress_HTTPIngressPath) Reset()                    { *m = Ingress_HTTPIngressPath{} }
func (m *Ingress_HTTPIngressPath) String() string            { return proto.CompactTextString(m) }
func (*Ingress_HTTPIngressPath) ProtoMessage()               {}
func (*Ingress_HTTPIngressPath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 9} }

func (m *Ingress_HTTPIngressPath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Ingress_HTTPIngressPath) GetBackend() *Ingress_HTTPIngressBackend {
	if m != nil {
		return m.Backend
	}
	return nil
}

type Ingress_IngressBackend struct {
	HostNames   []string `protobuf:"bytes,1,rep,name=host_names,json=hostNames" json:"host_names,omitempty"`
	ServiceName string   `protobuf:"bytes,2,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	ServicePort int32    `protobuf:"varint,3,opt,name=service_port,json=servicePort" json:"service_port,omitempty"`
	BackendRule []string `protobuf:"bytes,4,rep,name=backend_rule,json=backendRule" json:"backend_rule,omitempty"`
}

func (m *Ingress_IngressBackend) Reset()                    { *m = Ingress_IngressBackend{} }
func (m *Ingress_IngressBackend) String() string            { return proto.CompactTextString(m) }
func (*Ingress_IngressBackend) ProtoMessage()               {}
func (*Ingress_IngressBackend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 10} }

func (m *Ingress_IngressBackend) GetHostNames() []string {
	if m != nil {
		return m.HostNames
	}
	return nil
}

func (m *Ingress_IngressBackend) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Ingress_IngressBackend) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *Ingress_IngressBackend) GetBackendRule() []string {
	if m != nil {
		return m.BackendRule
	}
	return nil
}

type Ingress_AuthOption struct {
	Basic *Ingress_BasicAuth `protobuf:"bytes,1,opt,name=basic" json:"basic,omitempty"`
	Tls   *Ingress_TLSAuth   `protobuf:"bytes,2,opt,name=tls" json:"tls,omitempty"`
}

func (m *Ingress_AuthOption) Reset()                    { *m = Ingress_AuthOption{} }
func (m *Ingress_AuthOption) String() string            { return proto.CompactTextString(m) }
func (*Ingress_AuthOption) ProtoMessage()               {}
func (*Ingress_AuthOption) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 11} }

func (m *Ingress_AuthOption) GetBasic() *Ingress_BasicAuth {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *Ingress_AuthOption) GetTls() *Ingress_TLSAuth {
	if m != nil {
		return m.Tls
	}
	return nil
}

type Ingress_BasicAuth struct {
	SecretName string `protobuf:"bytes,1,opt,name=secret_name,json=secretName" json:"secret_name,omitempty"`
	Realm      string `protobuf:"bytes,2,opt,name=realm" json:"realm,omitempty"`
}

func (m *Ingress_BasicAuth) Reset()                    { *m = Ingress_BasicAuth{} }
func (m *Ingress_BasicAuth) String() string            { return proto.CompactTextString(m) }
func (*Ingress_BasicAuth) ProtoMessage()               {}
func (*Ingress_BasicAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 12} }

func (m *Ingress_BasicAuth) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *Ingress_BasicAuth) GetRealm() string {
	if m != nil {
		return m.Realm
	}
	return ""
}

type Ingress_TLSAuth struct {
	SecretName   string            `protobuf:"bytes,1,opt,name=secret_name,json=secretName" json:"secret_name,omitempty"`
	VerifyClient string            `protobuf:"bytes,2,opt,name=verify_client,json=verifyClient" json:"verify_client,omitempty"`
	Headers      map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ErrorPage    string            `protobuf:"bytes,4,opt,name=error_page,json=errorPage" json:"error_page,omitempty"`
}

func (m *Ingress_TLSAuth) Reset()                    { *m = Ingress_TLSAuth{} }
func (m *Ingress_TLSAuth) String() string            { return proto.CompactTextString(m) }
func (*Ingress_TLSAuth) ProtoMessage()               {}
func (*Ingress_TLSAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93, 13} }

func (m *Ingress_TLSAuth) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *Ingress_TLSAuth) GetVerifyClient() string {
	if m != nil {
		return m.VerifyClient
	}
	return ""
}

func (m *Ingress_TLSAuth) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Ingress_TLSAuth) GetErrorPage() string {
	if m != nil {
		return m.ErrorPage
	}
	return ""
}

type KubemonAgentSpec struct {
	Agent      string                 `protobuf:"bytes,1,opt,name=agent" json:"agent,omitempty"`
	Prometheus *KubemonPrometheusSpec `protobuf:"bytes,2,opt,name=prometheus" json:"prometheus,omitempty"`
}

func (m *KubemonAgentSpec) Reset()                    { *m = KubemonAgentSpec{} }
func (m *KubemonAgentSpec) String() string            { return proto.CompactTextString(m) }
func (*KubemonAgentSpec) ProtoMessage()               {}
func (*KubemonAgentSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *KubemonAgentSpec) GetAgent() string {
	if m != nil {
		return m.Agent
	}
	return ""
}

func (m *KubemonAgentSpec) GetPrometheus() *KubemonPrometheusSpec {
	if m != nil {
		return m.Prometheus
	}
	return nil
}

type KubemonPrometheusSpec struct {
	Port      int32             `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	Namespace string            `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Intervals string            `protobuf:"bytes,4,opt,name=intervals" json:"intervals,omitempty"`
}

func (m *KubemonPrometheusSpec) Reset()                    { *m = KubemonPrometheusSpec{} }
func (m *KubemonPrometheusSpec) String() string            { return proto.CompactTextString(m) }
func (*KubemonPrometheusSpec) ProtoMessage()               {}
func (*KubemonPrometheusSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *KubemonPrometheusSpec) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *KubemonPrometheusSpec) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *KubemonPrometheusSpec) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *KubemonPrometheusSpec) GetIntervals() string {
	if m != nil {
		return m.Intervals
	}
	return ""
}

type Toleration struct {
	Key               string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Operator          string `protobuf:"bytes,2,opt,name=operator" json:"operator,omitempty"`
	Value             string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Effect            string `protobuf:"bytes,4,opt,name=effect" json:"effect,omitempty"`
	TolerationSeconds int64  `protobuf:"varint,5,opt,name=toleration_seconds,json=tolerationSeconds" json:"toleration_seconds,omitempty"`
}

func (m *Toleration) Reset()                    { *m = Toleration{} }
func (m *Toleration) String() string            { return proto.CompactTextString(m) }
func (*Toleration) ProtoMessage()               {}
func (*Toleration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *Toleration) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Toleration) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Toleration) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Toleration) GetEffect() string {
	if m != nil {
		return m.Effect
	}
	return ""
}

func (m *Toleration) GetTolerationSeconds() int64 {
	if m != nil {
		return m.TolerationSeconds
	}
	return 0
}

type Affinity struct {
	NodeAffinity    *NodeAffinity    `protobuf:"bytes,1,opt,name=node_affinity,json=nodeAffinity" json:"node_affinity,omitempty"`
	PodAffinity     *PodAffinity     `protobuf:"bytes,2,opt,name=pod_affinity,json=podAffinity" json:"pod_affinity,omitempty"`
	PodAntiAffinity *PodAntiAffinity `protobuf:"bytes,3,opt,name=pod_anti_affinity,json=podAntiAffinity" json:"pod_anti_affinity,omitempty"`
}

func (m *Affinity) Reset()                    { *m = Affinity{} }
func (m *Affinity) String() string            { return proto.CompactTextString(m) }
func (*Affinity) ProtoMessage()               {}
func (*Affinity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *Affinity) GetNodeAffinity() *NodeAffinity {
	if m != nil {
		return m.NodeAffinity
	}
	return nil
}

func (m *Affinity) GetPodAffinity() *PodAffinity {
	if m != nil {
		return m.PodAffinity
	}
	return nil
}

func (m *Affinity) GetPodAntiAffinity() *PodAntiAffinity {
	if m != nil {
		return m.PodAntiAffinity
	}
	return nil
}

type NodeAffinity struct {
	RequiredDuringSchedulingIgnoredDuringExecution  *NodeSelector              `protobuf:"bytes,1,opt,name=required_during_scheduling_ignored_during_execution,json=requiredDuringSchedulingIgnoredDuringExecution" json:"required_during_scheduling_ignored_during_execution,omitempty"`
	PreferredDuringSchedulingIgnoredDuringExecution []*PreferredSchedulingTerm `protobuf:"bytes,2,rep,name=preferred_during_scheduling_ignored_during_execution,json=preferredDuringSchedulingIgnoredDuringExecution" json:"preferred_during_scheduling_ignored_during_execution,omitempty"`
}

func (m *NodeAffinity) Reset()                    { *m = NodeAffinity{} }
func (m *NodeAffinity) String() string            { return proto.CompactTextString(m) }
func (*NodeAffinity) ProtoMessage()               {}
func (*NodeAffinity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

func (m *NodeAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() *NodeSelector {
	if m != nil {
		return m.RequiredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

func (m *NodeAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []*PreferredSchedulingTerm {
	if m != nil {
		return m.PreferredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

type PreferredSchedulingTerm struct {
	Weight     int32             `protobuf:"varint,1,opt,name=weight" json:"weight,omitempty"`
	Preference *NodeSelectorTerm `protobuf:"bytes,2,opt,name=preference" json:"preference,omitempty"`
}

func (m *PreferredSchedulingTerm) Reset()                    { *m = PreferredSchedulingTerm{} }
func (m *PreferredSchedulingTerm) String() string            { return proto.CompactTextString(m) }
func (*PreferredSchedulingTerm) ProtoMessage()               {}
func (*PreferredSchedulingTerm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *PreferredSchedulingTerm) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *PreferredSchedulingTerm) GetPreference() *NodeSelectorTerm {
	if m != nil {
		return m.Preference
	}
	return nil
}

type NodeSelector struct {
	NodeSelectorTerms []*NodeSelectorTerm `protobuf:"bytes,1,rep,name=node_selector_terms,json=nodeSelectorTerms" json:"node_selector_terms,omitempty"`
}

func (m *NodeSelector) Reset()                    { *m = NodeSelector{} }
func (m *NodeSelector) String() string            { return proto.CompactTextString(m) }
func (*NodeSelector) ProtoMessage()               {}
func (*NodeSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *NodeSelector) GetNodeSelectorTerms() []*NodeSelectorTerm {
	if m != nil {
		return m.NodeSelectorTerms
	}
	return nil
}

type NodeSelectorTerm struct {
	MatchExpressions []*NodeSelectorRequirement `protobuf:"bytes,1,rep,name=match_expressions,json=matchExpressions" json:"match_expressions,omitempty"`
}

func (m *NodeSelectorTerm) Reset()                    { *m = NodeSelectorTerm{} }
func (m *NodeSelectorTerm) String() string            { return proto.CompactTextString(m) }
func (*NodeSelectorTerm) ProtoMessage()               {}
func (*NodeSelectorTerm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *NodeSelectorTerm) GetMatchExpressions() []*NodeSelectorRequirement {
	if m != nil {
		return m.MatchExpressions
	}
	return nil
}

type NodeSelectorRequirement struct {
	Key      string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Operator string   `protobuf:"bytes,2,opt,name=operator" json:"operator,omitempty"`
	Values   []string `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *NodeSelectorRequirement) Reset()                    { *m = NodeSelectorRequirement{} }
func (m *NodeSelectorRequirement) String() string            { return proto.CompactTextString(m) }
func (*NodeSelectorRequirement) ProtoMessage()               {}
func (*NodeSelectorRequirement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *NodeSelectorRequirement) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NodeSelectorRequirement) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *NodeSelectorRequirement) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type PodAffinity struct {
	RequiredDuringSchedulingIgnoredDuringExecution  []*PodAffinityTerm         `protobuf:"bytes,1,rep,name=required_during_scheduling_ignored_during_execution,json=requiredDuringSchedulingIgnoredDuringExecution" json:"required_during_scheduling_ignored_during_execution,omitempty"`
	PreferredDuringSchedulingIgnoredDuringExecution []*WeightedPodAffinityTerm `protobuf:"bytes,2,rep,name=preferred_during_scheduling_ignored_during_execution,json=preferredDuringSchedulingIgnoredDuringExecution" json:"preferred_during_scheduling_ignored_during_execution,omitempty"`
}

func (m *PodAffinity) Reset()                    { *m = PodAffinity{} }
func (m *PodAffinity) String() string            { return proto.CompactTextString(m) }
func (*PodAffinity) ProtoMessage()               {}
func (*PodAffinity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *PodAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() []*PodAffinityTerm {
	if m != nil {
		return m.RequiredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

func (m *PodAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []*WeightedPodAffinityTerm {
	if m != nil {
		return m.PreferredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

type PodAffinityTerm struct {
	LabelSelector *LabelSelector `protobuf:"bytes,1,opt,name=label_selector,json=labelSelector" json:"label_selector,omitempty"`
	Namespaces    []string       `protobuf:"bytes,2,rep,name=namespaces" json:"namespaces,omitempty"`
	TopologyKey   string         `protobuf:"bytes,3,opt,name=topology_key,json=topologyKey" json:"topology_key,omitempty"`
}

func (m *PodAffinityTerm) Reset()                    { *m = PodAffinityTerm{} }
func (m *PodAffinityTerm) String() string            { return proto.CompactTextString(m) }
func (*PodAffinityTerm) ProtoMessage()               {}
func (*PodAffinityTerm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

func (m *PodAffinityTerm) GetLabelSelector() *LabelSelector {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *PodAffinityTerm) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *PodAffinityTerm) GetTopologyKey() string {
	if m != nil {
		return m.TopologyKey
	}
	return ""
}

type LabelSelector struct {
	MatchLabels      map[string]string           `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels" json:"match_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MatchExpressions []*LabelSelectorRequirement `protobuf:"bytes,2,rep,name=match_expressions,json=matchExpressions" json:"match_expressions,omitempty"`
}

func (m *LabelSelector) Reset()                    { *m = LabelSelector{} }
func (m *LabelSelector) String() string            { return proto.CompactTextString(m) }
func (*LabelSelector) ProtoMessage()               {}
func (*LabelSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *LabelSelector) GetMatchLabels() map[string]string {
	if m != nil {
		return m.MatchLabels
	}
	return nil
}

func (m *LabelSelector) GetMatchExpressions() []*LabelSelectorRequirement {
	if m != nil {
		return m.MatchExpressions
	}
	return nil
}

type LabelSelectorRequirement struct {
	Key      string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Operator string   `protobuf:"bytes,2,opt,name=operator" json:"operator,omitempty"`
	Values   []string `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *LabelSelectorRequirement) Reset()                    { *m = LabelSelectorRequirement{} }
func (m *LabelSelectorRequirement) String() string            { return proto.CompactTextString(m) }
func (*LabelSelectorRequirement) ProtoMessage()               {}
func (*LabelSelectorRequirement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *LabelSelectorRequirement) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LabelSelectorRequirement) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *LabelSelectorRequirement) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type WeightedPodAffinityTerm struct {
	Weight          int32            `protobuf:"varint,1,opt,name=weight" json:"weight,omitempty"`
	PodAffinityTerm *PodAffinityTerm `protobuf:"bytes,2,opt,name=pod_affinity_term,json=podAffinityTerm" json:"pod_affinity_term,omitempty"`
}

func (m *WeightedPodAffinityTerm) Reset()                    { *m = WeightedPodAffinityTerm{} }
func (m *WeightedPodAffinityTerm) String() string            { return proto.CompactTextString(m) }
func (*WeightedPodAffinityTerm) ProtoMessage()               {}
func (*WeightedPodAffinityTerm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *WeightedPodAffinityTerm) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *WeightedPodAffinityTerm) GetPodAffinityTerm() *PodAffinityTerm {
	if m != nil {
		return m.PodAffinityTerm
	}
	return nil
}

type PodAntiAffinity struct {
	RequiredDuringSchedulingIgnoredDuringExecution  []*PodAffinityTerm         `protobuf:"bytes,1,rep,name=required_during_scheduling_ignored_during_execution,json=requiredDuringSchedulingIgnoredDuringExecution" json:"required_during_scheduling_ignored_during_execution,omitempty"`
	PreferredDuringSchedulingIgnoredDuringExecution []*WeightedPodAffinityTerm `protobuf:"bytes,2,rep,name=preferred_during_scheduling_ignored_during_execution,json=preferredDuringSchedulingIgnoredDuringExecution" json:"preferred_during_scheduling_ignored_during_execution,omitempty"`
}

func (m *PodAntiAffinity) Reset()                    { *m = PodAntiAffinity{} }
func (m *PodAntiAffinity) String() string            { return proto.CompactTextString(m) }
func (*PodAntiAffinity) ProtoMessage()               {}
func (*PodAntiAffinity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

func (m *PodAntiAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() []*PodAffinityTerm {
	if m != nil {
		return m.RequiredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

func (m *PodAntiAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []*WeightedPodAffinityTerm {
	if m != nil {
		return m.PreferredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

// Represents the source of a volume to mount.
// Only one of its members may be specified.
type VolumeSource struct {
	// HostPath represents a pre-existing file or directory on the host
	// machine that is directly exposed to the container. This is generally
	// used for system agents or other privileged things that are allowed
	// to see the host machine. Most containers will NOT need this.
	// More info: http://kubernetes.io/docs/user-guide/volumes#hostpath
	// ---
	// TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
	// mount host directories as read/write.
	// +optional
	HostPath *HostPathVolumeSource `protobuf:"bytes,1,opt,name=hostPath" json:"hostPath,omitempty"`
	// EmptyDir represents a temporary directory that shares a pod's lifetime.
	// More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
	// +optional
	EmptyDir *EmptyDirVolumeSource `protobuf:"bytes,2,opt,name=emptyDir" json:"emptyDir,omitempty"`
	// GCEPersistentDisk represents a GCE Disk resource that is attached to a
	// kubelet's host machine and then exposed to the pod.
	// More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
	// +optional
	GcePersistentDisk *GCEPersistentDiskVolumeSource `protobuf:"bytes,3,opt,name=gcePersistentDisk" json:"gcePersistentDisk,omitempty"`
	// AWSElasticBlockStore represents an AWS Disk resource that is attached to a
	// kubelet's host machine and then exposed to the pod.
	// More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
	// +optional
	AwsElasticBlockStore *AWSElasticBlockStoreVolumeSource `protobuf:"bytes,4,opt,name=awsElasticBlockStore" json:"awsElasticBlockStore,omitempty"`
	// GitRepo represents a git repository at a particular revision.
	// +optional
	GitRepo *GitRepoVolumeSource `protobuf:"bytes,5,opt,name=gitRepo" json:"gitRepo,omitempty"`
	// Secret represents a secret that should populate this volume.
	// More info: http://kubernetes.io/docs/user-guide/volumes#secrets
	// +optional
	Secret *SecretVolumeSource `protobuf:"bytes,6,opt,name=secret" json:"secret,omitempty"`
	// NFS represents an NFS mount on the host that shares a pod's lifetime
	// More info: http://kubernetes.io/docs/user-guide/volumes#nfs
	// +optional
	Nfs *NFSVolumeSource `protobuf:"bytes,7,opt,name=nfs" json:"nfs,omitempty"`
	// ISCSI represents an ISCSI Disk resource that is attached to a
	// kubelet's host machine and then exposed to the pod.
	// More info: http://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md
	// +optional
	Iscsi *ISCSIVolumeSource `protobuf:"bytes,8,opt,name=iscsi" json:"iscsi,omitempty"`
	// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
	// More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
	// +optional
	Glusterfs *GlusterfsVolumeSource `protobuf:"bytes,9,opt,name=glusterfs" json:"glusterfs,omitempty"`
	// PersistentVolumeClaimVolumeSource represents a reference to a
	// PersistentVolumeClaim in the same namespace.
	// More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims
	// +optional
	PersistentVolumeClaim *PersistentVolumeClaimVolumeSource `protobuf:"bytes,10,opt,name=persistentVolumeClaim" json:"persistentVolumeClaim,omitempty"`
	// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
	// More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
	// +optional
	Rbd *RBDVolumeSource `protobuf:"bytes,11,opt,name=rbd" json:"rbd,omitempty"`
	// FlexVolume represents a generic volume resource that is
	// provisioned/attached using an exec based plugin. This is an
	// alpha feature and may change in future.
	// +optional
	FlexVolume *FlexVolumeSource `protobuf:"bytes,12,opt,name=flexVolume" json:"flexVolume,omitempty"`
	// Cinder represents a cinder volume attached and mounted on kubelets host machine
	// More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
	// +optional
	Cinder *CinderVolumeSource `protobuf:"bytes,13,opt,name=cinder" json:"cinder,omitempty"`
	// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	// +optional
	Cephfs *CephFSVolumeSource `protobuf:"bytes,14,opt,name=cephfs" json:"cephfs,omitempty"`
	// Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
	// +optional
	Flocker *FlockerVolumeSource `protobuf:"bytes,15,opt,name=flocker" json:"flocker,omitempty"`
	// DownwardAPI represents downward API about the pod that should populate this volume
	// +optional
	DownwardAPI *DownwardAPIVolumeSource `protobuf:"bytes,16,opt,name=downwardAPI" json:"downwardAPI,omitempty"`
	// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	// +optional
	Fc *FCVolumeSource `protobuf:"bytes,17,opt,name=fc" json:"fc,omitempty"`
	// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
	// +optional
	AzureFile *AzureFileVolumeSource `protobuf:"bytes,18,opt,name=azureFile" json:"azureFile,omitempty"`
	// ConfigMap represents a configMap that should populate this volume
	// +optional
	ConfigMap *ConfigMapVolumeSource `protobuf:"bytes,19,opt,name=configMap" json:"configMap,omitempty"`
	// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	// +optional
	VsphereVolume *VsphereVirtualDiskVolumeSource `protobuf:"bytes,20,opt,name=vsphereVolume" json:"vsphereVolume,omitempty"`
	// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	// +optional
	Quobyte *QuobyteVolumeSource `protobuf:"bytes,21,opt,name=quobyte" json:"quobyte,omitempty"`
	// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	// +optional
	AzureDisk *AzureDiskVolumeSource `protobuf:"bytes,22,opt,name=azureDisk" json:"azureDisk,omitempty"`
	// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk *PhotonPersistentDiskVolumeSource `protobuf:"bytes,23,opt,name=photonPersistentDisk" json:"photonPersistentDisk,omitempty"`
}

func (m *VolumeSource) Reset()                    { *m = VolumeSource{} }
func (m *VolumeSource) String() string            { return proto.CompactTextString(m) }
func (*VolumeSource) ProtoMessage()               {}
func (*VolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *VolumeSource) GetHostPath() *HostPathVolumeSource {
	if m != nil {
		return m.HostPath
	}
	return nil
}

func (m *VolumeSource) GetEmptyDir() *EmptyDirVolumeSource {
	if m != nil {
		return m.EmptyDir
	}
	return nil
}

func (m *VolumeSource) GetGcePersistentDisk() *GCEPersistentDiskVolumeSource {
	if m != nil {
		return m.GcePersistentDisk
	}
	return nil
}

func (m *VolumeSource) GetAwsElasticBlockStore() *AWSElasticBlockStoreVolumeSource {
	if m != nil {
		return m.AwsElasticBlockStore
	}
	return nil
}

func (m *VolumeSource) GetGitRepo() *GitRepoVolumeSource {
	if m != nil {
		return m.GitRepo
	}
	return nil
}

func (m *VolumeSource) GetSecret() *SecretVolumeSource {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *VolumeSource) GetNfs() *NFSVolumeSource {
	if m != nil {
		return m.Nfs
	}
	return nil
}

func (m *VolumeSource) GetIscsi() *ISCSIVolumeSource {
	if m != nil {
		return m.Iscsi
	}
	return nil
}

func (m *VolumeSource) GetGlusterfs() *GlusterfsVolumeSource {
	if m != nil {
		return m.Glusterfs
	}
	return nil
}

func (m *VolumeSource) GetPersistentVolumeClaim() *PersistentVolumeClaimVolumeSource {
	if m != nil {
		return m.PersistentVolumeClaim
	}
	return nil
}

func (m *VolumeSource) GetRbd() *RBDVolumeSource {
	if m != nil {
		return m.Rbd
	}
	return nil
}

func (m *VolumeSource) GetFlexVolume() *FlexVolumeSource {
	if m != nil {
		return m.FlexVolume
	}
	return nil
}

func (m *VolumeSource) GetCinder() *CinderVolumeSource {
	if m != nil {
		return m.Cinder
	}
	return nil
}

func (m *VolumeSource) GetCephfs() *CephFSVolumeSource {
	if m != nil {
		return m.Cephfs
	}
	return nil
}

func (m *VolumeSource) GetFlocker() *FlockerVolumeSource {
	if m != nil {
		return m.Flocker
	}
	return nil
}

func (m *VolumeSource) GetDownwardAPI() *DownwardAPIVolumeSource {
	if m != nil {
		return m.DownwardAPI
	}
	return nil
}

func (m *VolumeSource) GetFc() *FCVolumeSource {
	if m != nil {
		return m.Fc
	}
	return nil
}

func (m *VolumeSource) GetAzureFile() *AzureFileVolumeSource {
	if m != nil {
		return m.AzureFile
	}
	return nil
}

func (m *VolumeSource) GetConfigMap() *ConfigMapVolumeSource {
	if m != nil {
		return m.ConfigMap
	}
	return nil
}

func (m *VolumeSource) GetVsphereVolume() *VsphereVirtualDiskVolumeSource {
	if m != nil {
		return m.VsphereVolume
	}
	return nil
}

func (m *VolumeSource) GetQuobyte() *QuobyteVolumeSource {
	if m != nil {
		return m.Quobyte
	}
	return nil
}

func (m *VolumeSource) GetAzureDisk() *AzureDiskVolumeSource {
	if m != nil {
		return m.AzureDisk
	}
	return nil
}

func (m *VolumeSource) GetPhotonPersistentDisk() *PhotonPersistentDiskVolumeSource {
	if m != nil {
		return m.PhotonPersistentDisk
	}
	return nil
}

// Represents a Persistent Disk resource in AWS.
//
// An AWS EBS disk must exist before mounting to a container. The disk
// must also be in the same AWS zone as the kubelet. An AWS EBS disk
// can only be mounted as read/write once. AWS EBS volumes support
// ownership management and SELinux relabeling.
type AWSElasticBlockStoreVolumeSource struct {
	// Unique ID of the persistent disk resource in AWS (Amazon EBS volume).
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
	VolumeID string `protobuf:"bytes,1,opt,name=volumeID" json:"volumeID,omitempty"`
	// Filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
	// TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType string `protobuf:"bytes,2,opt,name=fsType" json:"fsType,omitempty"`
	// The partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition int32 `protobuf:"varint,3,opt,name=partition" json:"partition,omitempty"`
	// Specify "true" to force and set the ReadOnly property in VolumeMounts to "true".
	// If omitted, the default is "false".
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
	ReadOnly bool `protobuf:"varint,4,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *AWSElasticBlockStoreVolumeSource) Reset()         { *m = AWSElasticBlockStoreVolumeSource{} }
func (m *AWSElasticBlockStoreVolumeSource) String() string { return proto.CompactTextString(m) }
func (*AWSElasticBlockStoreVolumeSource) ProtoMessage()    {}
func (*AWSElasticBlockStoreVolumeSource) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{110}
}

func (m *AWSElasticBlockStoreVolumeSource) GetVolumeID() string {
	if m != nil {
		return m.VolumeID
	}
	return ""
}

func (m *AWSElasticBlockStoreVolumeSource) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *AWSElasticBlockStoreVolumeSource) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *AWSElasticBlockStoreVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// Represents a host path mapped into a pod.
// Host path volumes do not support ownership management or SELinux relabeling.
type HostPathVolumeSource struct {
	// Path of the directory on the host.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *HostPathVolumeSource) Reset()                    { *m = HostPathVolumeSource{} }
func (m *HostPathVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*HostPathVolumeSource) ProtoMessage()               {}
func (*HostPathVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{111} }

func (m *HostPathVolumeSource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Adapts a Secret into a volume.
//
// The contents of the target Secret's Data field will be presented in a volume
// as files using the keys in the Data field as the file names.
// Secret volumes support ownership management and SELinux relabeling.
type SecretVolumeSource struct {
	// Name of the secret in the pod's namespace to use.
	// More info: http://kubernetes.io/docs/user-guide/volumes#secrets
	SecretName string `protobuf:"bytes,1,opt,name=secretName" json:"secretName,omitempty"`
	// If unspecified, each key-value pair in the Data field of the referenced
	// Secret will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the Secret,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items []*KeyToPath `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	// Optional: mode bits to use on created files by default. Must be a
	// value between 0 and 0777. Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode int32 `protobuf:"varint,3,opt,name=defaultMode" json:"defaultMode,omitempty"`
}

func (m *SecretVolumeSource) Reset()                    { *m = SecretVolumeSource{} }
func (m *SecretVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*SecretVolumeSource) ProtoMessage()               {}
func (*SecretVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

func (m *SecretVolumeSource) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *SecretVolumeSource) GetItems() []*KeyToPath {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SecretVolumeSource) GetDefaultMode() int32 {
	if m != nil {
		return m.DefaultMode
	}
	return 0
}

// Maps a string key to a path within a volume.
type KeyToPath struct {
	// The key to project.
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// The relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// Optional: mode bits to use on this file, must be a value between 0
	// and 0777. If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	// +optional
	Mode int32 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
}

func (m *KeyToPath) Reset()                    { *m = KeyToPath{} }
func (m *KeyToPath) String() string            { return proto.CompactTextString(m) }
func (*KeyToPath) ProtoMessage()               {}
func (*KeyToPath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

func (m *KeyToPath) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyToPath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *KeyToPath) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

// Represents an empty directory for a pod.
// Empty directory volumes support ownership management and SELinux relabeling.
type EmptyDirVolumeSource struct {
	// What type of storage medium should back this directory.
	// The default is "" which means to use the node's default medium.
	// Must be an empty string (default) or Memory.
	// More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
	Medium string `protobuf:"bytes,1,opt,name=medium" json:"medium,omitempty"`
}

func (m *EmptyDirVolumeSource) Reset()                    { *m = EmptyDirVolumeSource{} }
func (m *EmptyDirVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*EmptyDirVolumeSource) ProtoMessage()               {}
func (*EmptyDirVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

func (m *EmptyDirVolumeSource) GetMedium() string {
	if m != nil {
		return m.Medium
	}
	return ""
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace.
// This volume finds the bound PV and mounts that volume for the pod. A
// PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another
// type of volume that is owned by someone else (the system).
type PersistentVolumeClaimVolumeSource struct {
	// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
	// More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims
	ClaimName string `protobuf:"bytes,1,opt,name=claimName" json:"claimName,omitempty"`
	// Will force the ReadOnly setting in VolumeMounts.
	// Default false.
	// +optional
	ReadOnly bool `protobuf:"varint,2,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *PersistentVolumeClaimVolumeSource) Reset()         { *m = PersistentVolumeClaimVolumeSource{} }
func (m *PersistentVolumeClaimVolumeSource) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeClaimVolumeSource) ProtoMessage()    {}
func (*PersistentVolumeClaimVolumeSource) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{115}
}

func (m *PersistentVolumeClaimVolumeSource) GetClaimName() string {
	if m != nil {
		return m.ClaimName
	}
	return ""
}

func (m *PersistentVolumeClaimVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// DownwardAPIVolumeSource represents a volume containing downward API info.
// Downward API volumes support ownership management and SELinux relabeling.
type DownwardAPIVolumeSource struct {
	// Items is a list of downward API volume file
	// +optional
	Items []*DownwardAPIVolumeFile `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	// Optional: mode bits to use on created files by default. Must be a
	// value between 0 and 0777. Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	// +optional
	DefaultMode int32 `protobuf:"varint,2,opt,name=defaultMode" json:"defaultMode,omitempty"`
}

func (m *DownwardAPIVolumeSource) Reset()                    { *m = DownwardAPIVolumeSource{} }
func (m *DownwardAPIVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*DownwardAPIVolumeSource) ProtoMessage()               {}
func (*DownwardAPIVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

func (m *DownwardAPIVolumeSource) GetItems() []*DownwardAPIVolumeFile {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *DownwardAPIVolumeSource) GetDefaultMode() int32 {
	if m != nil {
		return m.DefaultMode
	}
	return 0
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type DownwardAPIVolumeFile struct {
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	// +optional
	FieldRef *ObjectFieldSelector `protobuf:"bytes,2,opt,name=fieldRef" json:"fieldRef,omitempty"`
	// Selects a resource of the container: only resources limits and requests
	// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	// +optional
	ResourceFieldRef *ResourceFieldSelector `protobuf:"bytes,3,opt,name=resourceFieldRef" json:"resourceFieldRef,omitempty"`
	// Optional: mode bits to use on this file, must be a value between 0
	// and 0777. If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	// +optional
	Mode int32 `protobuf:"varint,4,opt,name=mode" json:"mode,omitempty"`
}

func (m *DownwardAPIVolumeFile) Reset()                    { *m = DownwardAPIVolumeFile{} }
func (m *DownwardAPIVolumeFile) String() string            { return proto.CompactTextString(m) }
func (*DownwardAPIVolumeFile) ProtoMessage()               {}
func (*DownwardAPIVolumeFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{117} }

func (m *DownwardAPIVolumeFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DownwardAPIVolumeFile) GetFieldRef() *ObjectFieldSelector {
	if m != nil {
		return m.FieldRef
	}
	return nil
}

func (m *DownwardAPIVolumeFile) GetResourceFieldRef() *ResourceFieldSelector {
	if m != nil {
		return m.ResourceFieldRef
	}
	return nil
}

func (m *DownwardAPIVolumeFile) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type ConfigMapVolumeSource struct {
	LocalObjectReference *LocalObjectReference `protobuf:"bytes,1,opt,name=localObjectReference" json:"localObjectReference,omitempty"`
	// If unspecified, each key-value pair in the Data field of the referenced
	// ConfigMap will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the ConfigMap,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	// +optional
	Items *KeyToPath `protobuf:"bytes,2,opt,name=items" json:"items,omitempty"`
	// Optional: mode bits to use on created files by default. Must be a
	// value between 0 and 0777. Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	// +optional
	DefaultMode int32 `protobuf:"varint,3,opt,name=defaultMode" json:"defaultMode,omitempty"`
	// Specify whether the ConfigMap or it's keys must be defined
	// +optional
	Optional bool `protobuf:"varint,4,opt,name=optional" json:"optional,omitempty"`
}

func (m *ConfigMapVolumeSource) Reset()                    { *m = ConfigMapVolumeSource{} }
func (m *ConfigMapVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*ConfigMapVolumeSource) ProtoMessage()               {}
func (*ConfigMapVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{118} }

func (m *ConfigMapVolumeSource) GetLocalObjectReference() *LocalObjectReference {
	if m != nil {
		return m.LocalObjectReference
	}
	return nil
}

func (m *ConfigMapVolumeSource) GetItems() *KeyToPath {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ConfigMapVolumeSource) GetDefaultMode() int32 {
	if m != nil {
		return m.DefaultMode
	}
	return 0
}

func (m *ConfigMapVolumeSource) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

// Represents a Photon Controller persistent disk resource.
type PhotonPersistentDiskVolumeSource struct {
	// ID that identifies Photon Controller persistent disk
	PdID string `protobuf:"bytes,1,opt,name=pdID" json:"pdID,omitempty"`
	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType string `protobuf:"bytes,2,opt,name=fsType" json:"fsType,omitempty"`
}

func (m *PhotonPersistentDiskVolumeSource) Reset()         { *m = PhotonPersistentDiskVolumeSource{} }
func (m *PhotonPersistentDiskVolumeSource) String() string { return proto.CompactTextString(m) }
func (*PhotonPersistentDiskVolumeSource) ProtoMessage()    {}
func (*PhotonPersistentDiskVolumeSource) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{119}
}

func (m *PhotonPersistentDiskVolumeSource) GetPdID() string {
	if m != nil {
		return m.PdID
	}
	return ""
}

func (m *PhotonPersistentDiskVolumeSource) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

// LocalObjectReference contains enough information to let you locate the
// referenced object inside the same namespace.
type LocalObjectReference struct {
	// Name of the referent.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	// TODO: Add other useful fields. apiVersion, kind, uid?
	// +optional
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *LocalObjectReference) Reset()                    { *m = LocalObjectReference{} }
func (m *LocalObjectReference) String() string            { return proto.CompactTextString(m) }
func (*LocalObjectReference) ProtoMessage()               {}
func (*LocalObjectReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{120} }

func (m *LocalObjectReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Represents an NFS mount that lasts the lifetime of a pod.
// NFS volumes do not support ownership management or SELinux relabeling.
type NFSVolumeSource struct {
	// Server is the hostname or IP address of the NFS server.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
	Server string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// Path that is exported by the NFS server.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// ReadOnly here will force
	// the NFS export to be mounted with read-only permissions.
	// Defaults to false.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
	ReadOnly bool `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *NFSVolumeSource) Reset()                    { *m = NFSVolumeSource{} }
func (m *NFSVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*NFSVolumeSource) ProtoMessage()               {}
func (*NFSVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{121} }

func (m *NFSVolumeSource) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *NFSVolumeSource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *NFSVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// Represents a Fibre Channel volume.
// Fibre Channel volumes can only be mounted as read/write once.
// Fibre Channel volumes support ownership management and SELinux relabeling.
type FCVolumeSource struct {
	// Required: FC target worldwide names (WWNs)
	TargetWWNs []string `protobuf:"bytes,1,rep,name=targetWWNs" json:"targetWWNs,omitempty"`
	// Required: FC target lun number
	Lun int32 `protobuf:"varint,2,opt,name=lun" json:"lun,omitempty"`
	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType string `protobuf:"bytes,3,opt,name=fsType" json:"fsType,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly bool `protobuf:"varint,4,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *FCVolumeSource) Reset()                    { *m = FCVolumeSource{} }
func (m *FCVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*FCVolumeSource) ProtoMessage()               {}
func (*FCVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{122} }

func (m *FCVolumeSource) GetTargetWWNs() []string {
	if m != nil {
		return m.TargetWWNs
	}
	return nil
}

func (m *FCVolumeSource) GetLun() int32 {
	if m != nil {
		return m.Lun
	}
	return 0
}

func (m *FCVolumeSource) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *FCVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// FlexVolume represents a generic volume resource that is
// provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
type FlexVolumeSource struct {
	// Driver is the name of the driver to use for this volume.
	Driver string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType string `protobuf:"bytes,2,opt,name=fsType" json:"fsType,omitempty"`
	// Optional: SecretRef is reference to the secret object containing
	// sensitive information to pass to the plugin scripts. This may be
	// empty if no secret object is specified. If the secret object
	// contains more than one secret, all secrets are passed to the plugin
	// scripts.
	SecretRef *ObjectReference `protobuf:"bytes,3,opt,name=secretRef" json:"secretRef,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly bool `protobuf:"varint,4,opt,name=readOnly" json:"readOnly,omitempty"`
	// Optional: Extra command options if any.
	Options map[string]string `protobuf:"bytes,5,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FlexVolumeSource) Reset()                    { *m = FlexVolumeSource{} }
func (m *FlexVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*FlexVolumeSource) ProtoMessage()               {}
func (*FlexVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{123} }

func (m *FlexVolumeSource) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *FlexVolumeSource) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *FlexVolumeSource) GetSecretRef() *ObjectReference {
	if m != nil {
		return m.SecretRef
	}
	return nil
}

func (m *FlexVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *FlexVolumeSource) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

// Represents a Flocker volume mounted by the Flocker agent.
// Flocker volumes do not support ownership management or SELinux relabeling.
type FlockerVolumeSource struct {
	// Required: the volume name. This is going to be store on metadata -> name on the payload for Flocker
	DatasetName string `protobuf:"bytes,1,opt,name=datasetName" json:"datasetName,omitempty"`
}

func (m *FlockerVolumeSource) Reset()                    { *m = FlockerVolumeSource{} }
func (m *FlockerVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*FlockerVolumeSource) ProtoMessage()               {}
func (*FlockerVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{124} }

func (m *FlockerVolumeSource) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

// Represents a Persistent Disk resource in Google Compute Engine.
//
// A GCE PD must exist before mounting to a container. The disk must
// also be in the same GCE project and zone as the kubelet. A GCE PD
// can only be mounted as read/write once or read-only many times. GCE
// PDs support ownership management and SELinux relabeling.
type GCEPersistentDiskVolumeSource struct {
	// Unique name of the PD resource in GCE. Used to identify the disk in GCE.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
	PdName string `protobuf:"bytes,1,opt,name=pdName" json:"pdName,omitempty"`
	// Filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
	// TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType string `protobuf:"bytes,2,opt,name=fsType" json:"fsType,omitempty"`
	// The partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
	Partition int32 `protobuf:"varint,3,opt,name=partition" json:"partition,omitempty"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
	ReadOnly bool `protobuf:"varint,4,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *GCEPersistentDiskVolumeSource) Reset()                    { *m = GCEPersistentDiskVolumeSource{} }
func (m *GCEPersistentDiskVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*GCEPersistentDiskVolumeSource) ProtoMessage()               {}
func (*GCEPersistentDiskVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{125} }

func (m *GCEPersistentDiskVolumeSource) GetPdName() string {
	if m != nil {
		return m.PdName
	}
	return ""
}

func (m *GCEPersistentDiskVolumeSource) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *GCEPersistentDiskVolumeSource) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *GCEPersistentDiskVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// Represents a volume that is populated with the contents of a git repository.
// Git repo volumes do not support ownership management.
// Git repo volumes support SELinux relabeling.
type GitRepoVolumeSource struct {
	// Repository URL
	Repository string `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	// Commit hash for the specified revision.
	Revision string `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	// Target directory name.
	// Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
	// git repository.  Otherwise, if specified, the volume will contain the git repository in
	// the subdirectory with the given name.
	Directory string `protobuf:"bytes,3,opt,name=directory" json:"directory,omitempty"`
}

func (m *GitRepoVolumeSource) Reset()                    { *m = GitRepoVolumeSource{} }
func (m *GitRepoVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*GitRepoVolumeSource) ProtoMessage()               {}
func (*GitRepoVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{126} }

func (m *GitRepoVolumeSource) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *GitRepoVolumeSource) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *GitRepoVolumeSource) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

// Represents a Glusterfs mount that lasts the lifetime of a pod.
// Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsVolumeSource struct {
	// EndpointsName is the endpoint name that details Glusterfs topology.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `protobuf:"bytes,1,opt,name=endpoints" json:"endpoints,omitempty"`
	// Path is the Glusterfs volume path.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md#create-a-pod
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions.
	// Defaults to false.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md#create-a-pod
	ReadOnly bool `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *GlusterfsVolumeSource) Reset()                    { *m = GlusterfsVolumeSource{} }
func (m *GlusterfsVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*GlusterfsVolumeSource) ProtoMessage()               {}
func (*GlusterfsVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{127} }

func (m *GlusterfsVolumeSource) GetEndpoints() string {
	if m != nil {
		return m.Endpoints
	}
	return ""
}

func (m *GlusterfsVolumeSource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GlusterfsVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod.
// RBD volumes support ownership management and SELinux relabeling.
type RBDVolumeSource struct {
	// A collection of Ceph monitors.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	Monitors []string `protobuf:"bytes,1,rep,name=monitors" json:"monitors,omitempty"`
	// The rados image name.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	Image string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	// Filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#rbd
	// TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType string `protobuf:"bytes,3,opt,name=fsType" json:"fsType,omitempty"`
	// The rados pool name.
	// Default is rbd.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it.
	Pool string `protobuf:"bytes,4,opt,name=pool" json:"pool,omitempty"`
	// The rados user name.
	// Default is admin.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	User string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	// Keyring is the path to key ring for RBDUser.
	// Default is /etc/ceph/keyring.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	Keyring string `protobuf:"bytes,6,opt,name=keyring" json:"keyring,omitempty"`
	// SecretRef is name of the authentication secret for RBDUser. If provided
	// overrides keyring.
	// Default is nil.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	SecretRef *ObjectReference `protobuf:"bytes,7,opt,name=secretRef" json:"secretRef,omitempty"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	ReadOnly bool `protobuf:"varint,8,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *RBDVolumeSource) Reset()                    { *m = RBDVolumeSource{} }
func (m *RBDVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*RBDVolumeSource) ProtoMessage()               {}
func (*RBDVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{128} }

func (m *RBDVolumeSource) GetMonitors() []string {
	if m != nil {
		return m.Monitors
	}
	return nil
}

func (m *RBDVolumeSource) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *RBDVolumeSource) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *RBDVolumeSource) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *RBDVolumeSource) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *RBDVolumeSource) GetKeyring() string {
	if m != nil {
		return m.Keyring
	}
	return ""
}

func (m *RBDVolumeSource) GetSecretRef() *ObjectReference {
	if m != nil {
		return m.SecretRef
	}
	return nil
}

func (m *RBDVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// Represents an ISCSI disk.
// ISCSI volumes can only be mounted as read/write once.
// ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIVolumeSource struct {
	// iSCSI target portal. The portal is either an IP or ip_addr:port if the port
	// is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `protobuf:"bytes,1,opt,name=targetPortal" json:"targetPortal,omitempty"`
	// Target iSCSI Qualified Name.
	Iqn string `protobuf:"bytes,2,opt,name=iqn" json:"iqn,omitempty"`
	// iSCSI target lun number.
	Lun int32 `protobuf:"varint,3,opt,name=lun" json:"lun,omitempty"`
	// Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
	IscsiInterface string `protobuf:"bytes,4,opt,name=iscsiInterface" json:"iscsiInterface,omitempty"`
	// Filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#iscsi
	// TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType string `protobuf:"bytes,5,opt,name=fsType" json:"fsType,omitempty"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	ReadOnly bool `protobuf:"varint,6,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *ISCSIVolumeSource) Reset()                    { *m = ISCSIVolumeSource{} }
func (m *ISCSIVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*ISCSIVolumeSource) ProtoMessage()               {}
func (*ISCSIVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{129} }

func (m *ISCSIVolumeSource) GetTargetPortal() string {
	if m != nil {
		return m.TargetPortal
	}
	return ""
}

func (m *ISCSIVolumeSource) GetIqn() string {
	if m != nil {
		return m.Iqn
	}
	return ""
}

func (m *ISCSIVolumeSource) GetLun() int32 {
	if m != nil {
		return m.Lun
	}
	return 0
}

func (m *ISCSIVolumeSource) GetIscsiInterface() string {
	if m != nil {
		return m.IscsiInterface
	}
	return ""
}

func (m *ISCSIVolumeSource) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *ISCSIVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFileVolumeSource struct {
	// the name of secret that contains Azure Storage Account Name and Key
	SecretName string `protobuf:"bytes,1,opt,name=secretName" json:"secretName,omitempty"`
	// Share Name
	ShareName string `protobuf:"bytes,2,opt,name=shareName" json:"shareName,omitempty"`
	// Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly bool `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *AzureFileVolumeSource) Reset()                    { *m = AzureFileVolumeSource{} }
func (m *AzureFileVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*AzureFileVolumeSource) ProtoMessage()               {}
func (*AzureFileVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{130} }

func (m *AzureFileVolumeSource) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *AzureFileVolumeSource) GetShareName() string {
	if m != nil {
		return m.ShareName
	}
	return ""
}

func (m *AzureFileVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// Represents a vSphere volume resource.
type VsphereVirtualDiskVolumeSource struct {
	// Path that identifies vSphere volume vmdk
	VolumePath string `protobuf:"bytes,1,opt,name=volumePath" json:"volumePath,omitempty"`
	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType string `protobuf:"bytes,2,opt,name=fsType" json:"fsType,omitempty"`
}

func (m *VsphereVirtualDiskVolumeSource) Reset()         { *m = VsphereVirtualDiskVolumeSource{} }
func (m *VsphereVirtualDiskVolumeSource) String() string { return proto.CompactTextString(m) }
func (*VsphereVirtualDiskVolumeSource) ProtoMessage()    {}
func (*VsphereVirtualDiskVolumeSource) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{131}
}

func (m *VsphereVirtualDiskVolumeSource) GetVolumePath() string {
	if m != nil {
		return m.VolumePath
	}
	return ""
}

func (m *VsphereVirtualDiskVolumeSource) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

// Represents a Quobyte mount that lasts the lifetime of a pod.
// Quobyte volumes do not support ownership management or SELinux relabeling.
type QuobyteVolumeSource struct {
	// Registry represents a single or multiple Quobyte Registry services
	// specified as a string as host:port pair (multiple entries are separated with commas)
	// which acts as the central registry for volumes
	Registry string `protobuf:"bytes,1,opt,name=registry" json:"registry,omitempty"`
	// Volume is a string that references an already created Quobyte volume by name.
	Volume string `protobuf:"bytes,2,opt,name=volume" json:"volume,omitempty"`
	// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions.
	// Defaults to false.
	ReadOnly bool `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
	// User to map volume access to
	// Defaults to serivceaccount user
	User string `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	// Group to map volume access to
	// Default is no group
	Group string `protobuf:"bytes,5,opt,name=group" json:"group,omitempty"`
}

func (m *QuobyteVolumeSource) Reset()                    { *m = QuobyteVolumeSource{} }
func (m *QuobyteVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*QuobyteVolumeSource) ProtoMessage()               {}
func (*QuobyteVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{132} }

func (m *QuobyteVolumeSource) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *QuobyteVolumeSource) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *QuobyteVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *QuobyteVolumeSource) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *QuobyteVolumeSource) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AzureDiskVolumeSource struct {
	// The Name of the data disk in the blob storage
	DiskName string `protobuf:"bytes,1,opt,name=diskName" json:"diskName,omitempty"`
	// The URI the data disk in the blob storage
	DiskURI string `protobuf:"bytes,2,opt,name=diskURI" json:"diskURI,omitempty"`
	// Host Caching mode: None, Read Only, Read Write.
	CachingMode string `protobuf:"bytes,3,opt,name=cachingMode" json:"cachingMode,omitempty"`
	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType string `protobuf:"bytes,4,opt,name=fsType" json:"fsType,omitempty"`
	// Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly bool `protobuf:"varint,5,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *AzureDiskVolumeSource) Reset()                    { *m = AzureDiskVolumeSource{} }
func (m *AzureDiskVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*AzureDiskVolumeSource) ProtoMessage()               {}
func (*AzureDiskVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{133} }

func (m *AzureDiskVolumeSource) GetDiskName() string {
	if m != nil {
		return m.DiskName
	}
	return ""
}

func (m *AzureDiskVolumeSource) GetDiskURI() string {
	if m != nil {
		return m.DiskURI
	}
	return ""
}

func (m *AzureDiskVolumeSource) GetCachingMode() string {
	if m != nil {
		return m.CachingMode
	}
	return ""
}

func (m *AzureDiskVolumeSource) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *AzureDiskVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// Represents a cinder volume resource in Openstack.
// A Cinder volume must exist before mounting to a container.
// The volume must also be in the same region as the kubelet.
// Cinder volumes support ownership management and SELinux relabeling.
type CinderVolumeSource struct {
	// volume id used to identify the volume in cinder
	// More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
	VolumeID string `protobuf:"bytes,1,opt,name=volumeID" json:"volumeID,omitempty"`
	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
	FsType string `protobuf:"bytes,2,opt,name=fsType" json:"fsType,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
	ReadOnly bool `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *CinderVolumeSource) Reset()                    { *m = CinderVolumeSource{} }
func (m *CinderVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*CinderVolumeSource) ProtoMessage()               {}
func (*CinderVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{134} }

func (m *CinderVolumeSource) GetVolumeID() string {
	if m != nil {
		return m.VolumeID
	}
	return ""
}

func (m *CinderVolumeSource) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *CinderVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod
// Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSVolumeSource struct {
	// Required: Monitors is a collection of Ceph monitors
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `protobuf:"bytes,1,rep,name=monitors" json:"monitors,omitempty"`
	// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// Optional: User is the rados user name, default is admin
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/cephfs/README.md#how-to-use-it
	User string `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/cephfs/README.md#how-to-use-it
	SecretFile string `protobuf:"bytes,4,opt,name=secretFile" json:"secretFile,omitempty"`
	// Optional: SecretRef is reference to the authentication secret for User, default is empty.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/cephfs/README.md#how-to-use-it
	SecretRef *ObjectReference `protobuf:"bytes,5,opt,name=secretRef" json:"secretRef,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/cephfs/README.md#how-to-use-it
	ReadOnly bool `protobuf:"varint,6,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *CephFSVolumeSource) Reset()                    { *m = CephFSVolumeSource{} }
func (m *CephFSVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*CephFSVolumeSource) ProtoMessage()               {}
func (*CephFSVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{135} }

func (m *CephFSVolumeSource) GetMonitors() []string {
	if m != nil {
		return m.Monitors
	}
	return nil
}

func (m *CephFSVolumeSource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CephFSVolumeSource) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CephFSVolumeSource) GetSecretFile() string {
	if m != nil {
		return m.SecretFile
	}
	return ""
}

func (m *CephFSVolumeSource) GetSecretRef() *ObjectReference {
	if m != nil {
		return m.SecretRef
	}
	return nil
}

func (m *CephFSVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type EnvVar struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Variable references $(VAR_NAME) are expanded
	// using the previous defined environment variables in the container and
	// any service environment variables. If a variable cannot be resolved,
	// the reference in the input string will be unchanged. The $(VAR_NAME)
	// syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
	// references will never be expanded, regardless of whether the variable
	// exists or not.
	// Defaults to "".
	// +optional
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	// +optional
	ValueFrom *EnvVarSource `protobuf:"bytes,3,opt,name=value_from,json=valueFrom" json:"value_from,omitempty"`
}

func (m *EnvVar) Reset()                    { *m = EnvVar{} }
func (m *EnvVar) String() string            { return proto.CompactTextString(m) }
func (*EnvVar) ProtoMessage()               {}
func (*EnvVar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{136} }

func (m *EnvVar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvVar) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EnvVar) GetValueFrom() *EnvVarSource {
	if m != nil {
		return m.ValueFrom
	}
	return nil
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSource struct {
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations,
	// spec.nodeName, spec.serviceAccountName, status.podIP.
	// +optional
	FieldRef *ObjectFieldSelector `protobuf:"bytes,1,opt,name=field_ref,json=fieldRef" json:"field_ref,omitempty"`
	// Selects a resource of the container: only resources limits and requests
	// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	// +optional
	ResourceFieldRef *ResourceFieldSelector `protobuf:"bytes,2,opt,name=resource_field_ref,json=resourceFieldRef" json:"resource_field_ref,omitempty"`
	// Selects a key of a ConfigMap.
	// +optional
	ConfigMapKeyRef *ConfigMapKeySelector `protobuf:"bytes,3,opt,name=config_map_key_ref,json=configMapKeyRef" json:"config_map_key_ref,omitempty"`
	// Selects a key of a secret in the pod's namespace
	// +optional
	SecretKeyRef *SecretKeySelector `protobuf:"bytes,4,opt,name=secret_key_ref,json=secretKeyRef" json:"secret_key_ref,omitempty"`
}

func (m *EnvVarSource) Reset()                    { *m = EnvVarSource{} }
func (m *EnvVarSource) String() string            { return proto.CompactTextString(m) }
func (*EnvVarSource) ProtoMessage()               {}
func (*EnvVarSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{137} }

func (m *EnvVarSource) GetFieldRef() *ObjectFieldSelector {
	if m != nil {
		return m.FieldRef
	}
	return nil
}

func (m *EnvVarSource) GetResourceFieldRef() *ResourceFieldSelector {
	if m != nil {
		return m.ResourceFieldRef
	}
	return nil
}

func (m *EnvVarSource) GetConfigMapKeyRef() *ConfigMapKeySelector {
	if m != nil {
		return m.ConfigMapKeyRef
	}
	return nil
}

func (m *EnvVarSource) GetSecretKeyRef() *SecretKeySelector {
	if m != nil {
		return m.SecretKeyRef
	}
	return nil
}

// ObjectFieldSelector selects an APIVersioned field of an object.
type ObjectFieldSelector struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	// +optional
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
	// Path of the field to select in the specified API version.
	FieldPath string `protobuf:"bytes,2,opt,name=field_path,json=fieldPath" json:"field_path,omitempty"`
}

func (m *ObjectFieldSelector) Reset()                    { *m = ObjectFieldSelector{} }
func (m *ObjectFieldSelector) String() string            { return proto.CompactTextString(m) }
func (*ObjectFieldSelector) ProtoMessage()               {}
func (*ObjectFieldSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{138} }

func (m *ObjectFieldSelector) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *ObjectFieldSelector) GetFieldPath() string {
	if m != nil {
		return m.FieldPath
	}
	return ""
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format
type ResourceFieldSelector struct {
	// Container name: required for volumes, optional for env vars
	// +optional
	ContainerName string `protobuf:"bytes,1,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	// Required: resource to select
	Resource string `protobuf:"bytes,2,opt,name=resource" json:"resource,omitempty"`
	// Specifies the output format of the exposed resources, defaults to "1"
	// +optional
	Divisor string `protobuf:"bytes,3,opt,name=divisor" json:"divisor,omitempty"`
}

func (m *ResourceFieldSelector) Reset()                    { *m = ResourceFieldSelector{} }
func (m *ResourceFieldSelector) String() string            { return proto.CompactTextString(m) }
func (*ResourceFieldSelector) ProtoMessage()               {}
func (*ResourceFieldSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{139} }

func (m *ResourceFieldSelector) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *ResourceFieldSelector) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ResourceFieldSelector) GetDivisor() string {
	if m != nil {
		return m.Divisor
	}
	return ""
}

// Selects a key from a ConfigMap.
type ConfigMapKeySelector struct {
	// The ConfigMap to select from.
	LocalObjectReference *ObjectReference `protobuf:"bytes,1,opt,name=local_object_reference,json=localObjectReference" json:"local_object_reference,omitempty"`
	// The key to select.
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *ConfigMapKeySelector) Reset()                    { *m = ConfigMapKeySelector{} }
func (m *ConfigMapKeySelector) String() string            { return proto.CompactTextString(m) }
func (*ConfigMapKeySelector) ProtoMessage()               {}
func (*ConfigMapKeySelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{140} }

func (m *ConfigMapKeySelector) GetLocalObjectReference() *ObjectReference {
	if m != nil {
		return m.LocalObjectReference
	}
	return nil
}

func (m *ConfigMapKeySelector) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelector struct {
	// The name of the secret in the pod's namespace to select from.
	LocalObjectReference *ObjectReference `protobuf:"bytes,1,opt,name=local_object_reference,json=localObjectReference" json:"local_object_reference,omitempty"`
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *SecretKeySelector) Reset()                    { *m = SecretKeySelector{} }
func (m *SecretKeySelector) String() string            { return proto.CompactTextString(m) }
func (*SecretKeySelector) ProtoMessage()               {}
func (*SecretKeySelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{141} }

func (m *SecretKeySelector) GetLocalObjectReference() *ObjectReference {
	if m != nil {
		return m.LocalObjectReference
	}
	return nil
}

func (m *SecretKeySelector) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*ListResourceRequest)(nil), "appscode.kubernetes.v1beta1.ListResourceRequest")
	proto.RegisterType((*ReverseIndexResourceRequest)(nil), "appscode.kubernetes.v1beta1.ReverseIndexResourceRequest")
	proto.RegisterType((*ListResourceResponse)(nil), "appscode.kubernetes.v1beta1.ListResourceResponse")
	proto.RegisterType((*DescribeResourceRequest)(nil), "appscode.kubernetes.v1beta1.DescribeResourceRequest")
	proto.RegisterType((*DescribeResourceResponse)(nil), "appscode.kubernetes.v1beta1.DescribeResourceResponse")
	proto.RegisterType((*UpdateResourceRequest)(nil), "appscode.kubernetes.v1beta1.UpdateResourceRequest")
	proto.RegisterType((*ConfigMapEditRequest)(nil), "appscode.kubernetes.v1beta1.ConfigMapEditRequest")
	proto.RegisterType((*SecretEditRequest)(nil), "appscode.kubernetes.v1beta1.SecretEditRequest")
	proto.RegisterType((*CopyResourceRequest)(nil), "appscode.kubernetes.v1beta1.CopyResourceRequest")
	proto.RegisterType((*CreateResourceRequest)(nil), "appscode.kubernetes.v1beta1.CreateResourceRequest")
	proto.RegisterType((*DeleteResourceRequest)(nil), "appscode.kubernetes.v1beta1.DeleteResourceRequest")
	proto.RegisterType((*KubeResourceList)(nil), "appscode.kubernetes.v1beta1.KubeResourceList")
	proto.RegisterType((*KubeResourceList_Events)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Events")
	proto.RegisterType((*KubeResourceList_ConfigMaps)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.ConfigMaps")
	proto.RegisterType((*KubeResourceList_DaemonSets)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.DaemonSets")
	proto.RegisterType((*KubeResourceList_Deployments)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Deployments")
	proto.RegisterType((*KubeResourceList_Jobs)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Jobs")
	proto.RegisterType((*KubeResourceList_Namespaces)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Namespaces")
	proto.RegisterType((*KubeResourceList_Nodes)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Nodes")
	proto.RegisterType((*KubeResourceList_StatefulSets)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.StatefulSets")
	proto.RegisterType((*KubeResourceList_Pods)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Pods")
	proto.RegisterType((*KubeResourceList_ReplicaSets)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.ReplicaSets")
	proto.RegisterType((*KubeResourceList_Services)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Services")
	proto.RegisterType((*KubeResourceList_Secrets)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Secrets")
	proto.RegisterType((*KubeResourceList_ReplicationControllers)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.ReplicationControllers")
	proto.RegisterType((*KubeResourceList_StorageClasses)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.StorageClasses")
	proto.RegisterType((*KubeResourceList_PersistentVolumes)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.PersistentVolumes")
	proto.RegisterType((*KubeResourceList_PersistentVolumeClaims)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.PersistentVolumeClaims")
	proto.RegisterType((*KubeResourceList_ClusterAlerts)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.ClusterAlerts")
	proto.RegisterType((*KubeResourceList_NodeAlerts)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.NodeAlerts")
	proto.RegisterType((*KubeResourceList_PodAlerts)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.PodAlerts")
	proto.RegisterType((*KubeResourceList_Roles)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Roles")
	proto.RegisterType((*KubeResourceList_ClusterRoles)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.ClusterRoles")
	proto.RegisterType((*KubeResourceList_RoleBindings)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.RoleBindings")
	proto.RegisterType((*KubeResourceList_ClusterRoleBindings)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.ClusterRoleBindings")
	proto.RegisterType((*KubeResourceList_Certificates)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Certificates")
	proto.RegisterType((*KubeResourceList_CronJobs)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.CronJobs")
	proto.RegisterType((*KubeResourceList_Postgreses)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Postgreses")
	proto.RegisterType((*KubeResourceList_Elasticsearches)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Elasticsearches")
	proto.RegisterType((*KubeResourceList_DormantDatabases)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.DormantDatabases")
	proto.RegisterType((*KubeResourceList_Mysqls)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Mysqls")
	proto.RegisterType((*KubeResourceList_Redises)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Redises")
	proto.RegisterType((*KubeResourceList_Mongodbs)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Mongodbs")
	proto.RegisterType((*KubeResourceList_Memcacheds)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Memcacheds")
	proto.RegisterType((*KubeResourceList_Recoveries)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Recoveries")
	proto.RegisterType((*KubeResourceList_Snapshots)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Snapshots")
	proto.RegisterType((*KubeResourceList_Restics)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Restics")
	proto.RegisterType((*KubeResourceList_Ingresses)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Ingresses")
	proto.RegisterType((*KubeResourceList_Prometheuses)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.Prometheuses")
	proto.RegisterType((*KubeResourceList_ServiceMonitors)(nil), "appscode.kubernetes.v1beta1.KubeResourceList.ServiceMonitors")
	proto.RegisterType((*KubeResource)(nil), "appscode.kubernetes.v1beta1.KubeResource")
	proto.RegisterType((*Meta)(nil), "appscode.kubernetes.v1beta1.Meta")
	proto.RegisterType((*KubeObject)(nil), "appscode.kubernetes.v1beta1.KubeObject")
	proto.RegisterType((*IcingaState)(nil), "appscode.kubernetes.v1beta1.IcingaState")
	proto.RegisterType((*PodSpec)(nil), "appscode.kubernetes.v1beta1.PodSpec")
	proto.RegisterType((*PodSpec_Container)(nil), "appscode.kubernetes.v1beta1.PodSpec.Container")
	proto.RegisterType((*Volume)(nil), "appscode.kubernetes.v1beta1.Volume")
	proto.RegisterType((*VolumeMount)(nil), "appscode.kubernetes.v1beta1.VolumeMount")
	proto.RegisterType((*Raw)(nil), "appscode.kubernetes.v1beta1.Raw")
	proto.RegisterType((*ConfigMap)(nil), "appscode.kubernetes.v1beta1.ConfigMap")
	proto.RegisterType((*Job)(nil), "appscode.kubernetes.v1beta1.Job")
	proto.RegisterType((*Job_Status)(nil), "appscode.kubernetes.v1beta1.Job.Status")
	proto.RegisterType((*JobSpec)(nil), "appscode.kubernetes.v1beta1.JobSpec")
	proto.RegisterType((*Namespace)(nil), "appscode.kubernetes.v1beta1.Namespace")
	proto.RegisterType((*Namespace_NamespaceSpec)(nil), "appscode.kubernetes.v1beta1.Namespace.NamespaceSpec")
	proto.RegisterType((*Namespace_Status)(nil), "appscode.kubernetes.v1beta1.Namespace.Status")
	proto.RegisterType((*Node)(nil), "appscode.kubernetes.v1beta1.Node")
	proto.RegisterType((*Node_Spec)(nil), "appscode.kubernetes.v1beta1.Node.Spec")
	proto.RegisterType((*Node_NodeStatus)(nil), "appscode.kubernetes.v1beta1.Node.NodeStatus")
	proto.RegisterType((*Node_NodeStatus_Capacity)(nil), "appscode.kubernetes.v1beta1.Node.NodeStatus.Capacity")
	proto.RegisterType((*Node_NodeStatus_NodeSystemInfo)(nil), "appscode.kubernetes.v1beta1.Node.NodeStatus.NodeSystemInfo")
	proto.RegisterType((*Node_NodeStatus_NodeAddress)(nil), "appscode.kubernetes.v1beta1.Node.NodeStatus.NodeAddress")
	proto.RegisterType((*Node_NodeStatus_ContainerImage)(nil), "appscode.kubernetes.v1beta1.Node.NodeStatus.ContainerImage")
	proto.RegisterType((*Node_NodeStatus_AttachedVolume)(nil), "appscode.kubernetes.v1beta1.Node.NodeStatus.AttachedVolume")
	proto.RegisterType((*Pod)(nil), "appscode.kubernetes.v1beta1.Pod")
	proto.RegisterType((*Pod_PodStatus)(nil), "appscode.kubernetes.v1beta1.Pod.PodStatus")
	proto.RegisterType((*PersistentVolume)(nil), "appscode.kubernetes.v1beta1.PersistentVolume")
	proto.RegisterType((*PersistentVolume_PersistentVolumeSpec)(nil), "appscode.kubernetes.v1beta1.PersistentVolume.PersistentVolumeSpec")
	proto.RegisterType((*PersistentVolume_PersistentVolumeStatus)(nil), "appscode.kubernetes.v1beta1.PersistentVolume.PersistentVolumeStatus")
	proto.RegisterType((*PersistentVolumeClaim)(nil), "appscode.kubernetes.v1beta1.PersistentVolumeClaim")
	proto.RegisterType((*PersistentVolumeClaim_PersistentVolumeClaimStatus)(nil), "appscode.kubernetes.v1beta1.PersistentVolumeClaim.PersistentVolumeClaimStatus")
	proto.RegisterType((*PersistentVolumeClaimSpec)(nil), "appscode.kubernetes.v1beta1.PersistentVolumeClaimSpec")
	proto.RegisterType((*PersistentVolumeClaimSpec_ResourceRequirements)(nil), "appscode.kubernetes.v1beta1.PersistentVolumeClaimSpec.ResourceRequirements")
	proto.RegisterType((*ObjectReference)(nil), "appscode.kubernetes.v1beta1.ObjectReference")
	proto.RegisterType((*Service)(nil), "appscode.kubernetes.v1beta1.Service")
	proto.RegisterType((*Service_Spec)(nil), "appscode.kubernetes.v1beta1.Service.Spec")
	proto.RegisterType((*Service_Spec_Port)(nil), "appscode.kubernetes.v1beta1.Service.Spec.Port")
	proto.RegisterType((*Service_Status)(nil), "appscode.kubernetes.v1beta1.Service.Status")
	proto.RegisterType((*Service_Status_LoadBalancerIngress)(nil), "appscode.kubernetes.v1beta1.Service.Status.LoadBalancerIngress")
	proto.RegisterType((*Secret)(nil), "appscode.kubernetes.v1beta1.Secret")
	proto.RegisterType((*ReplicationController)(nil), "appscode.kubernetes.v1beta1.ReplicationController")
	proto.RegisterType((*ReplicationController_Spec)(nil), "appscode.kubernetes.v1beta1.ReplicationController.Spec")
	proto.RegisterType((*ReplicationController_Status)(nil), "appscode.kubernetes.v1beta1.ReplicationController.Status")
	proto.RegisterType((*ReplicaSet)(nil), "appscode.kubernetes.v1beta1.ReplicaSet")
	proto.RegisterType((*ReplicaSet_Spec)(nil), "appscode.kubernetes.v1beta1.ReplicaSet.Spec")
	proto.RegisterType((*ReplicaSet_Status)(nil), "appscode.kubernetes.v1beta1.ReplicaSet.Status")
	proto.RegisterType((*DaemonSet)(nil), "appscode.kubernetes.v1beta1.DaemonSet")
	proto.RegisterType((*DaemonSet_Spec)(nil), "appscode.kubernetes.v1beta1.DaemonSet.Spec")
	proto.RegisterType((*DaemonSet_Status)(nil), "appscode.kubernetes.v1beta1.DaemonSet.Status")
	proto.RegisterType((*Deployment)(nil), "appscode.kubernetes.v1beta1.Deployment")
	proto.RegisterType((*Deployment_Spec)(nil), "appscode.kubernetes.v1beta1.Deployment.Spec")
	proto.RegisterType((*Deployment_Spec_DeploymentStrategy)(nil), "appscode.kubernetes.v1beta1.Deployment.Spec.DeploymentStrategy")
	proto.RegisterType((*Deployment_Spec_RollingUpdateDeployment)(nil), "appscode.kubernetes.v1beta1.Deployment.Spec.RollingUpdateDeployment")
	proto.RegisterType((*Deployment_Spec_RollbackConfig)(nil), "appscode.kubernetes.v1beta1.Deployment.Spec.RollbackConfig")
	proto.RegisterType((*Deployment_DeploymentStatus)(nil), "appscode.kubernetes.v1beta1.Deployment.DeploymentStatus")
	proto.RegisterType((*StatefulSet)(nil), "appscode.kubernetes.v1beta1.StatefulSet")
	proto.RegisterType((*StatefulSet_Spec)(nil), "appscode.kubernetes.v1beta1.StatefulSet.Spec")
	proto.RegisterType((*StatefulSet_Status)(nil), "appscode.kubernetes.v1beta1.StatefulSet.Status")
	proto.RegisterType((*StorageClass)(nil), "appscode.kubernetes.v1beta1.StorageClass")
	proto.RegisterType((*Event)(nil), "appscode.kubernetes.v1beta1.Event")
	proto.RegisterType((*EventSource)(nil), "appscode.kubernetes.v1beta1.EventSource")
	proto.RegisterType((*Metrics)(nil), "appscode.kubernetes.v1beta1.Metrics")
	proto.RegisterType((*Metrics_DataPoint)(nil), "appscode.kubernetes.v1beta1.Metrics.DataPoint")
	proto.RegisterType((*PersistentVolumeRegisterRequest)(nil), "appscode.kubernetes.v1beta1.PersistentVolumeRegisterRequest")
	proto.RegisterType((*PersistentVolumeUnRegisterRequest)(nil), "appscode.kubernetes.v1beta1.PersistentVolumeUnRegisterRequest")
	proto.RegisterType((*PersistentVolumeClaimRegisterRequest)(nil), "appscode.kubernetes.v1beta1.PersistentVolumeClaimRegisterRequest")
	proto.RegisterType((*PersistentVolumeClaimUnRegisterRequest)(nil), "appscode.kubernetes.v1beta1.PersistentVolumeClaimUnRegisterRequest")
	proto.RegisterType((*ClusterAlert)(nil), "appscode.kubernetes.v1beta1.ClusterAlert")
	proto.RegisterType((*ClusterAlert_ClusterAlertSpec)(nil), "appscode.kubernetes.v1beta1.ClusterAlert.ClusterAlertSpec")
	proto.RegisterType((*NodeAlert)(nil), "appscode.kubernetes.v1beta1.NodeAlert")
	proto.RegisterType((*NodeAlert_NodeAlertSpec)(nil), "appscode.kubernetes.v1beta1.NodeAlert.NodeAlertSpec")
	proto.RegisterType((*PodAlert)(nil), "appscode.kubernetes.v1beta1.PodAlert")
	proto.RegisterType((*PodAlert_PodAlertSpec)(nil), "appscode.kubernetes.v1beta1.PodAlert.PodAlertSpec")
	proto.RegisterType((*AlertReceiver)(nil), "appscode.kubernetes.v1beta1.AlertReceiver")
	proto.RegisterType((*Role)(nil), "appscode.kubernetes.v1beta1.Role")
	proto.RegisterType((*RoleBinding)(nil), "appscode.kubernetes.v1beta1.RoleBinding")
	proto.RegisterType((*ClusterRole)(nil), "appscode.kubernetes.v1beta1.ClusterRole")
	proto.RegisterType((*ClusterRoleBinding)(nil), "appscode.kubernetes.v1beta1.ClusterRoleBinding")
	proto.RegisterType((*Rule)(nil), "appscode.kubernetes.v1beta1.Rule")
	proto.RegisterType((*Subject)(nil), "appscode.kubernetes.v1beta1.Subject")
	proto.RegisterType((*Restic)(nil), "appscode.kubernetes.v1beta1.Restic")
	proto.RegisterType((*Restic_Spec)(nil), "appscode.kubernetes.v1beta1.Restic.Spec")
	proto.RegisterType((*Restic_Spec_FileGroup)(nil), "appscode.kubernetes.v1beta1.Restic.Spec.FileGroup")
	proto.RegisterType((*Restic_Spec_RetentionPolicy)(nil), "appscode.kubernetes.v1beta1.Restic.Spec.RetentionPolicy")
	proto.RegisterType((*Restic_Status)(nil), "appscode.kubernetes.v1beta1.Restic.Status")
	proto.RegisterType((*StashBackend)(nil), "appscode.kubernetes.v1beta1.StashBackend")
	proto.RegisterType((*StashBackend_LocalSpec)(nil), "appscode.kubernetes.v1beta1.StashBackend.LocalSpec")
	proto.RegisterType((*StashBackend_S3Spec)(nil), "appscode.kubernetes.v1beta1.StashBackend.S3Spec")
	proto.RegisterType((*StashBackend_GCSSpec)(nil), "appscode.kubernetes.v1beta1.StashBackend.GCSSpec")
	proto.RegisterType((*StashBackend_AzureSpec)(nil), "appscode.kubernetes.v1beta1.StashBackend.AzureSpec")
	proto.RegisterType((*StashBackend_SwiftSpec)(nil), "appscode.kubernetes.v1beta1.StashBackend.SwiftSpec")
	proto.RegisterType((*CronJob)(nil), "appscode.kubernetes.v1beta1.CronJob")
	proto.RegisterType((*CronJob_Spec)(nil), "appscode.kubernetes.v1beta1.CronJob.Spec")
	proto.RegisterType((*CronJob_Status)(nil), "appscode.kubernetes.v1beta1.CronJob.Status")
	proto.RegisterType((*Postgres)(nil), "appscode.kubernetes.v1beta1.Postgres")
	proto.RegisterType((*Postgres_Status)(nil), "appscode.kubernetes.v1beta1.Postgres.Status")
	proto.RegisterType((*PostgresSpec)(nil), "appscode.kubernetes.v1beta1.PostgresSpec")
	proto.RegisterType((*PostgresSpec_PostgresArchiverSpec)(nil), "appscode.kubernetes.v1beta1.PostgresSpec.PostgresArchiverSpec")
	proto.RegisterType((*Elasticsearch)(nil), "appscode.kubernetes.v1beta1.Elasticsearch")
	proto.RegisterType((*Elasticsearch_Status)(nil), "appscode.kubernetes.v1beta1.Elasticsearch.Status")
	proto.RegisterType((*ElasticsearchSpec)(nil), "appscode.kubernetes.v1beta1.ElasticsearchSpec")
	proto.RegisterType((*ElasticsearchSpec_ElasticsearchClusterTopology)(nil), "appscode.kubernetes.v1beta1.ElasticsearchSpec.ElasticsearchClusterTopology")
	proto.RegisterType((*ElasticsearchSpec_ElasticsearchNode)(nil), "appscode.kubernetes.v1beta1.ElasticsearchSpec.ElasticsearchNode")
	proto.RegisterType((*DormantDatabase)(nil), "appscode.kubernetes.v1beta1.DormantDatabase")
	proto.RegisterType((*DormantDatabase_Spec)(nil), "appscode.kubernetes.v1beta1.DormantDatabase.Spec")
	proto.RegisterType((*DormantDatabase_Status)(nil), "appscode.kubernetes.v1beta1.DormantDatabase.Status")
	proto.RegisterType((*Mysql)(nil), "appscode.kubernetes.v1beta1.Mysql")
	proto.RegisterType((*Mysql_Status)(nil), "appscode.kubernetes.v1beta1.Mysql.Status")
	proto.RegisterType((*MysqlSpec)(nil), "appscode.kubernetes.v1beta1.MysqlSpec")
	proto.RegisterType((*Redis)(nil), "appscode.kubernetes.v1beta1.Redis")
	proto.RegisterType((*Redis_Status)(nil), "appscode.kubernetes.v1beta1.Redis.Status")
	proto.RegisterType((*RedisSpec)(nil), "appscode.kubernetes.v1beta1.RedisSpec")
	proto.RegisterType((*Mongodb)(nil), "appscode.kubernetes.v1beta1.Mongodb")
	proto.RegisterType((*Mongodb_Status)(nil), "appscode.kubernetes.v1beta1.Mongodb.Status")
	proto.RegisterType((*MongodbSpec)(nil), "appscode.kubernetes.v1beta1.MongodbSpec")
	proto.RegisterType((*Memcached)(nil), "appscode.kubernetes.v1beta1.Memcached")
	proto.RegisterType((*Memcached_Status)(nil), "appscode.kubernetes.v1beta1.Memcached.Status")
	proto.RegisterType((*MemcachedSpec)(nil), "appscode.kubernetes.v1beta1.MemcachedSpec")
	proto.RegisterType((*Recovery)(nil), "appscode.kubernetes.v1beta1.Recovery")
	proto.RegisterType((*Recovery_Spec)(nil), "appscode.kubernetes.v1beta1.Recovery.Spec")
	proto.RegisterType((*Recovery_Spec_LocalTypedReference)(nil), "appscode.kubernetes.v1beta1.Recovery.Spec.LocalTypedReference")
	proto.RegisterType((*Recovery_Spec_LocalSpec)(nil), "appscode.kubernetes.v1beta1.Recovery.Spec.LocalSpec")
	proto.RegisterType((*Recovery_Status)(nil), "appscode.kubernetes.v1beta1.Recovery.Status")
	proto.RegisterType((*Recovery_Status_RestoreStats)(nil), "appscode.kubernetes.v1beta1.Recovery.Status.RestoreStats")
	proto.RegisterType((*Origin)(nil), "appscode.kubernetes.v1beta1.Origin")
	proto.RegisterType((*Origin_Spec)(nil), "appscode.kubernetes.v1beta1.Origin.Spec")
	proto.RegisterType((*Snapshot)(nil), "appscode.kubernetes.v1beta1.Snapshot")
	proto.RegisterType((*Snapshot_Spec)(nil), "appscode.kubernetes.v1beta1.Snapshot.Spec")
	proto.RegisterType((*Snapshot_Status)(nil), "appscode.kubernetes.v1beta1.Snapshot.Status")
	proto.RegisterType((*InitSpec)(nil), "appscode.kubernetes.v1beta1.InitSpec")
	proto.RegisterType((*ScriptSourceSpec)(nil), "appscode.kubernetes.v1beta1.ScriptSourceSpec")
	proto.RegisterType((*SnapshotSourceSpec)(nil), "appscode.kubernetes.v1beta1.SnapshotSourceSpec")
	proto.RegisterType((*BackupScheduleSpec)(nil), "appscode.kubernetes.v1beta1.BackupScheduleSpec")
	proto.RegisterType((*SnapshotStorageSpec)(nil), "appscode.kubernetes.v1beta1.SnapshotStorageSpec")
	proto.RegisterType((*SnapshotStorageSpec_LocalSpec)(nil), "appscode.kubernetes.v1beta1.SnapshotStorageSpec.LocalSpec")
	proto.RegisterType((*SnapshotStorageSpec_S3Spec)(nil), "appscode.kubernetes.v1beta1.SnapshotStorageSpec.S3Spec")
	proto.RegisterType((*SnapshotStorageSpec_GCSSpec)(nil), "appscode.kubernetes.v1beta1.SnapshotStorageSpec.GCSSpec")
	proto.RegisterType((*SnapshotStorageSpec_AzureSpec)(nil), "appscode.kubernetes.v1beta1.SnapshotStorageSpec.AzureSpec")
	proto.RegisterType((*SnapshotStorageSpec_SwiftSpec)(nil), "appscode.kubernetes.v1beta1.SnapshotStorageSpec.SwiftSpec")
	proto.RegisterType((*Certificate)(nil), "appscode.kubernetes.v1beta1.Certificate")
	proto.RegisterType((*Certificate_Spec)(nil), "appscode.kubernetes.v1beta1.Certificate.Spec")
	proto.RegisterType((*Certificate_Spec_ChallengeProvider)(nil), "appscode.kubernetes.v1beta1.Certificate.Spec.ChallengeProvider")
	proto.RegisterType((*Certificate_Spec_HTTPChallengeProvider)(nil), "appscode.kubernetes.v1beta1.Certificate.Spec.HTTPChallengeProvider")
	proto.RegisterType((*Certificate_Spec_DNSChallengeProvider)(nil), "appscode.kubernetes.v1beta1.Certificate.Spec.DNSChallengeProvider")
	proto.RegisterType((*Certificate_Spec_CertificateStorage)(nil), "appscode.kubernetes.v1beta1.Certificate.Spec.CertificateStorage")
	proto.RegisterType((*Certificate_Spec_VaultStore)(nil), "appscode.kubernetes.v1beta1.Certificate.Spec.VaultStore")
	proto.RegisterType((*Certificate_Status)(nil), "appscode.kubernetes.v1beta1.Certificate.Status")
	proto.RegisterType((*Certificate_Status_ACMECertificateDetails)(nil), "appscode.kubernetes.v1beta1.Certificate.Status.ACMECertificateDetails")
	proto.RegisterType((*Certificate_Status_CertificateCondition)(nil), "appscode.kubernetes.v1beta1.Certificate.Status.CertificateCondition")
	proto.RegisterType((*Certificate_Status_CertificateDetails)(nil), "appscode.kubernetes.v1beta1.Certificate.Status.CertificateDetails")
	proto.RegisterType((*DiskListRequest)(nil), "appscode.kubernetes.v1beta1.DiskListRequest")
	proto.RegisterType((*DiskListResponse)(nil), "appscode.kubernetes.v1beta1.DiskListResponse")
	proto.RegisterType((*DiskDescribeRequest)(nil), "appscode.kubernetes.v1beta1.DiskDescribeRequest")
	proto.RegisterType((*DiskDescribeResponse)(nil), "appscode.kubernetes.v1beta1.DiskDescribeResponse")
	proto.RegisterType((*DiskCreateRequest)(nil), "appscode.kubernetes.v1beta1.DiskCreateRequest")
	proto.RegisterType((*DiskDeleteRequest)(nil), "appscode.kubernetes.v1beta1.DiskDeleteRequest")
	proto.RegisterType((*Disk)(nil), "appscode.kubernetes.v1beta1.Disk")
	proto.RegisterType((*ResourceCondition)(nil), "appscode.kubernetes.v1beta1.ResourceCondition")
	proto.RegisterType((*Prometheus)(nil), "appscode.kubernetes.v1beta1.Prometheus")
	proto.RegisterType((*Prometheus_PrometheusSpec)(nil), "appscode.kubernetes.v1beta1.Prometheus.PrometheusSpec")
	proto.RegisterType((*Prometheus_PrometheusStatus)(nil), "appscode.kubernetes.v1beta1.Prometheus.PrometheusStatus")
	proto.RegisterType((*AlertSpec)(nil), "appscode.kubernetes.v1beta1.AlertSpec")
	proto.RegisterType((*PrometheusAlertmanagerEndpoint)(nil), "appscode.kubernetes.v1beta1.PrometheusAlertmanagerEndpoint")
	proto.RegisterType((*ServiceMonitor)(nil), "appscode.kubernetes.v1beta1.ServiceMonitor")
	proto.RegisterType((*ServiceMonitor_ServiceMonitorSpec)(nil), "appscode.kubernetes.v1beta1.ServiceMonitor.ServiceMonitorSpec")
	proto.RegisterType((*ServiceMonitor_Endpoint)(nil), "appscode.kubernetes.v1beta1.ServiceMonitor.Endpoint")
	proto.RegisterType((*ServiceMonitor_NamespaceSelector)(nil), "appscode.kubernetes.v1beta1.ServiceMonitor.NamespaceSelector")
	proto.RegisterType((*ResourceRequirements)(nil), "appscode.kubernetes.v1beta1.ResourceRequirements")
	proto.RegisterType((*Ingress)(nil), "appscode.kubernetes.v1beta1.Ingress")
	proto.RegisterType((*Ingress_Spec)(nil), "appscode.kubernetes.v1beta1.Ingress.Spec")
	proto.RegisterType((*Ingress_FrontendRule)(nil), "appscode.kubernetes.v1beta1.Ingress.FrontendRule")
	proto.RegisterType((*Ingress_HTTPIngressBackend)(nil), "appscode.kubernetes.v1beta1.Ingress.HTTPIngressBackend")
	proto.RegisterType((*Ingress_Status)(nil), "appscode.kubernetes.v1beta1.Ingress.Status")
	proto.RegisterType((*Ingress_LoadBalancerIngress)(nil), "appscode.kubernetes.v1beta1.Ingress.LoadBalancerIngress")
	proto.RegisterType((*Ingress_IngressTLS)(nil), "appscode.kubernetes.v1beta1.Ingress.IngressTLS")
	proto.RegisterType((*Ingress_IngressRule)(nil), "appscode.kubernetes.v1beta1.Ingress.IngressRule")
	proto.RegisterType((*Ingress_HTTPIngressRuleValue)(nil), "appscode.kubernetes.v1beta1.Ingress.HTTPIngressRuleValue")
	proto.RegisterType((*Ingress_TCPIngressRuleValue)(nil), "appscode.kubernetes.v1beta1.Ingress.TCPIngressRuleValue")
	proto.RegisterType((*Ingress_HTTPIngressPath)(nil), "appscode.kubernetes.v1beta1.Ingress.HTTPIngressPath")
	proto.RegisterType((*Ingress_IngressBackend)(nil), "appscode.kubernetes.v1beta1.Ingress.IngressBackend")
	proto.RegisterType((*Ingress_AuthOption)(nil), "appscode.kubernetes.v1beta1.Ingress.AuthOption")
	proto.RegisterType((*Ingress_BasicAuth)(nil), "appscode.kubernetes.v1beta1.Ingress.BasicAuth")
	proto.RegisterType((*Ingress_TLSAuth)(nil), "appscode.kubernetes.v1beta1.Ingress.TLSAuth")
	proto.RegisterType((*KubemonAgentSpec)(nil), "appscode.kubernetes.v1beta1.KubemonAgentSpec")
	proto.RegisterType((*KubemonPrometheusSpec)(nil), "appscode.kubernetes.v1beta1.KubemonPrometheusSpec")
	proto.RegisterType((*Toleration)(nil), "appscode.kubernetes.v1beta1.Toleration")
	proto.RegisterType((*Affinity)(nil), "appscode.kubernetes.v1beta1.Affinity")
	proto.RegisterType((*NodeAffinity)(nil), "appscode.kubernetes.v1beta1.NodeAffinity")
	proto.RegisterType((*PreferredSchedulingTerm)(nil), "appscode.kubernetes.v1beta1.PreferredSchedulingTerm")
	proto.RegisterType((*NodeSelector)(nil), "appscode.kubernetes.v1beta1.NodeSelector")
	proto.RegisterType((*NodeSelectorTerm)(nil), "appscode.kubernetes.v1beta1.NodeSelectorTerm")
	proto.RegisterType((*NodeSelectorRequirement)(nil), "appscode.kubernetes.v1beta1.NodeSelectorRequirement")
	proto.RegisterType((*PodAffinity)(nil), "appscode.kubernetes.v1beta1.PodAffinity")
	proto.RegisterType((*PodAffinityTerm)(nil), "appscode.kubernetes.v1beta1.PodAffinityTerm")
	proto.RegisterType((*LabelSelector)(nil), "appscode.kubernetes.v1beta1.LabelSelector")
	proto.RegisterType((*LabelSelectorRequirement)(nil), "appscode.kubernetes.v1beta1.LabelSelectorRequirement")
	proto.RegisterType((*WeightedPodAffinityTerm)(nil), "appscode.kubernetes.v1beta1.WeightedPodAffinityTerm")
	proto.RegisterType((*PodAntiAffinity)(nil), "appscode.kubernetes.v1beta1.PodAntiAffinity")
	proto.RegisterType((*VolumeSource)(nil), "appscode.kubernetes.v1beta1.VolumeSource")
	proto.RegisterType((*AWSElasticBlockStoreVolumeSource)(nil), "appscode.kubernetes.v1beta1.AWSElasticBlockStoreVolumeSource")
	proto.RegisterType((*HostPathVolumeSource)(nil), "appscode.kubernetes.v1beta1.HostPathVolumeSource")
	proto.RegisterType((*SecretVolumeSource)(nil), "appscode.kubernetes.v1beta1.SecretVolumeSource")
	proto.RegisterType((*KeyToPath)(nil), "appscode.kubernetes.v1beta1.KeyToPath")
	proto.RegisterType((*EmptyDirVolumeSource)(nil), "appscode.kubernetes.v1beta1.EmptyDirVolumeSource")
	proto.RegisterType((*PersistentVolumeClaimVolumeSource)(nil), "appscode.kubernetes.v1beta1.PersistentVolumeClaimVolumeSource")
	proto.RegisterType((*DownwardAPIVolumeSource)(nil), "appscode.kubernetes.v1beta1.DownwardAPIVolumeSource")
	proto.RegisterType((*DownwardAPIVolumeFile)(nil), "appscode.kubernetes.v1beta1.DownwardAPIVolumeFile")
	proto.RegisterType((*ConfigMapVolumeSource)(nil), "appscode.kubernetes.v1beta1.ConfigMapVolumeSource")
	proto.RegisterType((*PhotonPersistentDiskVolumeSource)(nil), "appscode.kubernetes.v1beta1.PhotonPersistentDiskVolumeSource")
	proto.RegisterType((*LocalObjectReference)(nil), "appscode.kubernetes.v1beta1.LocalObjectReference")
	proto.RegisterType((*NFSVolumeSource)(nil), "appscode.kubernetes.v1beta1.NFSVolumeSource")
	proto.RegisterType((*FCVolumeSource)(nil), "appscode.kubernetes.v1beta1.FCVolumeSource")
	proto.RegisterType((*FlexVolumeSource)(nil), "appscode.kubernetes.v1beta1.FlexVolumeSource")
	proto.RegisterType((*FlockerVolumeSource)(nil), "appscode.kubernetes.v1beta1.FlockerVolumeSource")
	proto.RegisterType((*GCEPersistentDiskVolumeSource)(nil), "appscode.kubernetes.v1beta1.GCEPersistentDiskVolumeSource")
	proto.RegisterType((*GitRepoVolumeSource)(nil), "appscode.kubernetes.v1beta1.GitRepoVolumeSource")
	proto.RegisterType((*GlusterfsVolumeSource)(nil), "appscode.kubernetes.v1beta1.GlusterfsVolumeSource")
	proto.RegisterType((*RBDVolumeSource)(nil), "appscode.kubernetes.v1beta1.RBDVolumeSource")
	proto.RegisterType((*ISCSIVolumeSource)(nil), "appscode.kubernetes.v1beta1.ISCSIVolumeSource")
	proto.RegisterType((*AzureFileVolumeSource)(nil), "appscode.kubernetes.v1beta1.AzureFileVolumeSource")
	proto.RegisterType((*VsphereVirtualDiskVolumeSource)(nil), "appscode.kubernetes.v1beta1.VsphereVirtualDiskVolumeSource")
	proto.RegisterType((*QuobyteVolumeSource)(nil), "appscode.kubernetes.v1beta1.QuobyteVolumeSource")
	proto.RegisterType((*AzureDiskVolumeSource)(nil), "appscode.kubernetes.v1beta1.AzureDiskVolumeSource")
	proto.RegisterType((*CinderVolumeSource)(nil), "appscode.kubernetes.v1beta1.CinderVolumeSource")
	proto.RegisterType((*CephFSVolumeSource)(nil), "appscode.kubernetes.v1beta1.CephFSVolumeSource")
	proto.RegisterType((*EnvVar)(nil), "appscode.kubernetes.v1beta1.EnvVar")
	proto.RegisterType((*EnvVarSource)(nil), "appscode.kubernetes.v1beta1.EnvVarSource")
	proto.RegisterType((*ObjectFieldSelector)(nil), "appscode.kubernetes.v1beta1.ObjectFieldSelector")
	proto.RegisterType((*ResourceFieldSelector)(nil), "appscode.kubernetes.v1beta1.ResourceFieldSelector")
	proto.RegisterType((*ConfigMapKeySelector)(nil), "appscode.kubernetes.v1beta1.ConfigMapKeySelector")
	proto.RegisterType((*SecretKeySelector)(nil), "appscode.kubernetes.v1beta1.SecretKeySelector")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Clients service

type ClientsClient interface {
	List(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*ListResourceResponse, error)
	Describe(ctx context.Context, in *DescribeResourceRequest, opts ...grpc.CallOption) (*DescribeResourceResponse, error)
	Create(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	Delete(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	Update(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	Copy(ctx context.Context, in *CopyResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	// Followings are type specific actions api, that can be applied upon fixed resources.
	// TODO: (@sadlil) Consider seperating them.
	EditConfigMap(ctx context.Context, in *ConfigMapEditRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	EditSecret(ctx context.Context, in *SecretEditRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	RegisterPersistentVolume(ctx context.Context, in *PersistentVolumeRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	UnregisterPersistentVolume(ctx context.Context, in *PersistentVolumeUnRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	RegisterPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	UnregisterPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimUnRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	ReverseIndex(ctx context.Context, in *ReverseIndexResourceRequest, opts ...grpc.CallOption) (*ListResourceResponse, error)
}

type clientsClient struct {
	cc *grpc.ClientConn
}

func NewClientsClient(cc *grpc.ClientConn) ClientsClient {
	return &clientsClient{cc}
}

func (c *clientsClient) List(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*ListResourceResponse, error) {
	out := new(ListResourceResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Describe(ctx context.Context, in *DescribeResourceRequest, opts ...grpc.CallOption) (*DescribeResourceResponse, error) {
	out := new(DescribeResourceResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Create(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Delete(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Update(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Copy(ctx context.Context, in *CopyResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/Copy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) EditConfigMap(ctx context.Context, in *ConfigMapEditRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/EditConfigMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) EditSecret(ctx context.Context, in *SecretEditRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/EditSecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) RegisterPersistentVolume(ctx context.Context, in *PersistentVolumeRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/RegisterPersistentVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) UnregisterPersistentVolume(ctx context.Context, in *PersistentVolumeUnRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/UnregisterPersistentVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) RegisterPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/RegisterPersistentVolumeClaim", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) UnregisterPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimUnRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/UnregisterPersistentVolumeClaim", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) ReverseIndex(ctx context.Context, in *ReverseIndexResourceRequest, opts ...grpc.CallOption) (*ListResourceResponse, error) {
	out := new(ListResourceResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clients/ReverseIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Clients service

type ClientsServer interface {
	List(context.Context, *ListResourceRequest) (*ListResourceResponse, error)
	Describe(context.Context, *DescribeResourceRequest) (*DescribeResourceResponse, error)
	Create(context.Context, *CreateResourceRequest) (*appscode_dtypes.VoidResponse, error)
	Delete(context.Context, *DeleteResourceRequest) (*appscode_dtypes.VoidResponse, error)
	Update(context.Context, *UpdateResourceRequest) (*appscode_dtypes.VoidResponse, error)
	Copy(context.Context, *CopyResourceRequest) (*appscode_dtypes.VoidResponse, error)
	// Followings are type specific actions api, that can be applied upon fixed resources.
	// TODO: (@sadlil) Consider seperating them.
	EditConfigMap(context.Context, *ConfigMapEditRequest) (*appscode_dtypes.VoidResponse, error)
	EditSecret(context.Context, *SecretEditRequest) (*appscode_dtypes.VoidResponse, error)
	RegisterPersistentVolume(context.Context, *PersistentVolumeRegisterRequest) (*appscode_dtypes.VoidResponse, error)
	UnregisterPersistentVolume(context.Context, *PersistentVolumeUnRegisterRequest) (*appscode_dtypes.VoidResponse, error)
	RegisterPersistentVolumeClaim(context.Context, *PersistentVolumeClaimRegisterRequest) (*appscode_dtypes.VoidResponse, error)
	UnregisterPersistentVolumeClaim(context.Context, *PersistentVolumeClaimUnRegisterRequest) (*appscode_dtypes.VoidResponse, error)
	ReverseIndex(context.Context, *ReverseIndexResourceRequest) (*ListResourceResponse, error)
}

func RegisterClientsServer(s *grpc.Server, srv ClientsServer) {
	s.RegisterService(&_Clients_serviceDesc, srv)
}

func _Clients_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).List(ctx, req.(*ListResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Describe(ctx, req.(*DescribeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Create(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Delete(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Update(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Copy(ctx, req.(*CopyResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_EditConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).EditConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/EditConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).EditConfigMap(ctx, req.(*ConfigMapEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_EditSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).EditSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/EditSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).EditSecret(ctx, req.(*SecretEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_RegisterPersistentVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).RegisterPersistentVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/RegisterPersistentVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).RegisterPersistentVolume(ctx, req.(*PersistentVolumeRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_UnregisterPersistentVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeUnRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).UnregisterPersistentVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/UnregisterPersistentVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).UnregisterPersistentVolume(ctx, req.(*PersistentVolumeUnRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_RegisterPersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeClaimRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).RegisterPersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/RegisterPersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).RegisterPersistentVolumeClaim(ctx, req.(*PersistentVolumeClaimRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_UnregisterPersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeClaimUnRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).UnregisterPersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/UnregisterPersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).UnregisterPersistentVolumeClaim(ctx, req.(*PersistentVolumeClaimUnRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_ReverseIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseIndexResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).ReverseIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clients/ReverseIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).ReverseIndex(ctx, req.(*ReverseIndexResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clients_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.kubernetes.v1beta1.Clients",
	HandlerType: (*ClientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Clients_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Clients_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Clients_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Clients_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Clients_Update_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _Clients_Copy_Handler,
		},
		{
			MethodName: "EditConfigMap",
			Handler:    _Clients_EditConfigMap_Handler,
		},
		{
			MethodName: "EditSecret",
			Handler:    _Clients_EditSecret_Handler,
		},
		{
			MethodName: "RegisterPersistentVolume",
			Handler:    _Clients_RegisterPersistentVolume_Handler,
		},
		{
			MethodName: "UnregisterPersistentVolume",
			Handler:    _Clients_UnregisterPersistentVolume_Handler,
		},
		{
			MethodName: "RegisterPersistentVolumeClaim",
			Handler:    _Clients_RegisterPersistentVolumeClaim_Handler,
		},
		{
			MethodName: "UnregisterPersistentVolumeClaim",
			Handler:    _Clients_UnregisterPersistentVolumeClaim_Handler,
		},
		{
			MethodName: "ReverseIndex",
			Handler:    _Clients_ReverseIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}

// Client API for Disks service

type DisksClient interface {
	List(ctx context.Context, in *DiskListRequest, opts ...grpc.CallOption) (*DiskListResponse, error)
	Describe(ctx context.Context, in *DiskDescribeRequest, opts ...grpc.CallOption) (*DiskDescribeResponse, error)
	Create(ctx context.Context, in *DiskCreateRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	Delete(ctx context.Context, in *DiskDeleteRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
}

type disksClient struct {
	cc *grpc.ClientConn
}

func NewDisksClient(cc *grpc.ClientConn) DisksClient {
	return &disksClient{cc}
}

func (c *disksClient) List(ctx context.Context, in *DiskListRequest, opts ...grpc.CallOption) (*DiskListResponse, error) {
	out := new(DiskListResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Disks/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disksClient) Describe(ctx context.Context, in *DiskDescribeRequest, opts ...grpc.CallOption) (*DiskDescribeResponse, error) {
	out := new(DiskDescribeResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Disks/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disksClient) Create(ctx context.Context, in *DiskCreateRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Disks/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *disksClient) Delete(ctx context.Context, in *DiskDeleteRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Disks/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Disks service

type DisksServer interface {
	List(context.Context, *DiskListRequest) (*DiskListResponse, error)
	Describe(context.Context, *DiskDescribeRequest) (*DiskDescribeResponse, error)
	Create(context.Context, *DiskCreateRequest) (*appscode_dtypes.VoidResponse, error)
	Delete(context.Context, *DiskDeleteRequest) (*appscode_dtypes.VoidResponse, error)
}

func RegisterDisksServer(s *grpc.Server, srv DisksServer) {
	s.RegisterService(&_Disks_serviceDesc, srv)
}

func _Disks_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisksServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Disks/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisksServer).List(ctx, req.(*DiskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disks_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisksServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Disks/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisksServer).Describe(ctx, req.(*DiskDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disks_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisksServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Disks/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisksServer).Create(ctx, req.(*DiskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disks_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisksServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Disks/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisksServer).Delete(ctx, req.(*DiskDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Disks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.kubernetes.v1beta1.Disks",
	HandlerType: (*DisksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Disks_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Disks_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Disks_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Disks_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}

func init() { proto.RegisterFile("client.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 13266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x6d, 0x8c, 0x24, 0x49,
	0x76, 0xd0, 0x64, 0x7d, 0xd7, 0xab, 0xfe, 0x8c, 0xe9, 0x99, 0xa9, 0xad, 0xbd, 0xdd, 0x9d, 0xad,
	0xfd, 0xde, 0xdb, 0xed, 0xd9, 0xcf, 0xdb, 0xd9, 0xd9, 0x9d, 0xd9, 0xed, 0xaf, 0x99, 0xee, 0x9d,
	0xe9, 0xd9, 0xde, 0xec, 0x9e, 0xd9, 0xbd, 0x8f, 0xbd, 0xba, 0xec, 0xca, 0xe8, 0xee, 0xdc, 0xce,
	0xca, 0xcc, 0xcd, 0xcc, 0xea, 0x99, 0xbe, 0xf3, 0x81, 0x6d, 0x6c, 0x83, 0x7d, 0x46, 0xc6, 0xdf,
	0x1f, 0x08, 0x8c, 0x38, 0x04, 0x08, 0xf9, 0x0e, 0xc9, 0x92, 0x05, 0x86, 0x13, 0xc2, 0x27, 0x2c,
	0xf3, 0x03, 0xb8, 0x1f, 0x27, 0x23, 0xd9, 0x08, 0x04, 0xc8, 0x12, 0x18, 0x63, 0x30, 0x08, 0x90,
	0x6c, 0x21, 0x1f, 0x8a, 0xcf, 0x8c, 0xcc, 0xca, 0xae, 0xca, 0xac, 0xe9, 0x1d, 0xcf, 0x1d, 0xfb,
	0xa7, 0xbb, 0x22, 0x32, 0xde, 0x8b, 0x88, 0x17, 0x11, 0x2f, 0x5e, 0xbc, 0xf7, 0xe2, 0x05, 0x4c,
	0x74, 0x6d, 0x0b, 0x3b, 0xe1, 0xbc, 0xe7, 0xbb, 0xa1, 0x8b, 0xee, 0x37, 0x3c, 0x2f, 0xe8, 0xba,
	0x26, 0x9e, 0xdf, 0xef, 0x6f, 0x63, 0xdf, 0xc1, 0x21, 0x0e, 0xe6, 0x0f, 0x9e, 0xdf, 0xc6, 0xa1,
	0xf1, 0x7c, 0xeb, 0x13, 0xbb, 0xae, 0xbb, 0x6b, 0xe3, 0x73, 0x86, 0x67, 0x9d, 0x33, 0x1c, 0xc7,
	0x0d, 0x8d, 0xd0, 0x72, 0x9d, 0x80, 0x81, 0xb6, 0x1e, 0x14, 0xa0, 0x47, 0x7c, 0x7f, 0x44, 0xa2,
	0xee, 0xba, 0x3d, 0x5a, 0xc6, 0x0c, 0x0f, 0x3d, 0x1c, 0x9c, 0xa3, 0x7f, 0x59, 0xa1, 0xf6, 0x6f,
	0x69, 0x70, 0xf2, 0x9a, 0x15, 0x84, 0x3a, 0x0e, 0xdc, 0xbe, 0xdf, 0xc5, 0x3a, 0xfe, 0xb0, 0x8f,
	0x83, 0x10, 0x35, 0xa1, 0xda, 0xb5, 0xfb, 0x41, 0x88, 0xfd, 0xa6, 0x76, 0x56, 0x7b, 0xb2, 0xae,
	0x8b, 0x24, 0x42, 0x50, 0x22, 0x08, 0x9a, 0x05, 0x9a, 0x4d, 0x7f, 0xa3, 0x4f, 0x40, 0xdd, 0x31,
	0x7a, 0x38, 0xf0, 0x8c, 0x2e, 0x6e, 0x16, 0xe9, 0x87, 0x28, 0x03, 0x3d, 0x04, 0x0d, 0xc3, 0xb3,
	0x3a, 0x07, 0xd8, 0x0f, 0x2c, 0xd7, 0x69, 0x96, 0xe8, 0x77, 0x30, 0x3c, 0xeb, 0x26, 0xcb, 0x41,
	0x4f, 0xc0, 0xb4, 0xe5, 0x74, 0xed, 0xbe, 0x89, 0x3b, 0x3d, 0x1c, 0xfa, 0x56, 0x37, 0x68, 0x96,
	0xcf, 0x6a, 0x4f, 0xd6, 0xf4, 0x29, 0x9e, 0xbd, 0xce, 0x72, 0x51, 0x0b, 0x6a, 0x01, 0xb6, 0x71,
	0x37, 0x74, 0xfd, 0x66, 0x85, 0xa2, 0x91, 0xe9, 0xf6, 0x3f, 0xd1, 0xe0, 0x7e, 0x1d, 0x93, 0x4a,
	0xf0, 0x9a, 0x63, 0xe2, 0xdb, 0x77, 0xd6, 0x23, 0x04, 0x25, 0xd2, 0x01, 0xde, 0x19, 0xfa, 0x3b,
	0xde, 0xcb, 0xd2, 0x88, 0x5e, 0x96, 0x07, 0x7a, 0xf9, 0x20, 0x40, 0x68, 0xf8, 0xbb, 0x38, 0xdc,
	0x22, 0x95, 0x55, 0xd9, 0xf7, 0x28, 0xa7, 0xdd, 0x85, 0xb9, 0xf8, 0x48, 0x04, 0x9e, 0xeb, 0x04,
	0x18, 0x5d, 0x85, 0xba, 0xcf, 0xf3, 0x02, 0xda, 0xf4, 0xc6, 0x0b, 0xcf, 0xce, 0x0f, 0x99, 0x36,
	0xf3, 0x57, 0xfb, 0xdb, 0x58, 0x60, 0xa1, 0x18, 0x23, 0xf8, 0xf6, 0x6f, 0x6b, 0x70, 0x66, 0x19,
	0x07, 0x5d, 0xdf, 0x8a, 0xca, 0x7c, 0x14, 0x63, 0x2e, 0xe8, 0x57, 0x52, 0xe8, 0x37, 0x03, 0x45,
	0xdf, 0xb8, 0xc5, 0x29, 0x43, 0x7e, 0xa6, 0x0d, 0x7c, 0x25, 0x75, 0xe0, 0x13, 0xc4, 0xad, 0x26,
	0x89, 0xdb, 0x36, 0xa0, 0x39, 0xd8, 0x2d, 0x4e, 0xc0, 0x15, 0xa8, 0x09, 0x02, 0x70, 0xfa, 0x3d,
	0x95, 0x99, 0x7e, 0xba, 0x04, 0x6d, 0xff, 0x0b, 0x0d, 0x4e, 0xdd, 0xf0, 0x4c, 0x23, 0xbc, 0xeb,
	0x84, 0x7b, 0x21, 0x22, 0x5c, 0xe3, 0x85, 0xb3, 0x43, 0xdb, 0xae, 0x1b, 0xb7, 0x18, 0x69, 0x13,
	0x14, 0xab, 0x0c, 0x50, 0xec, 0x67, 0x8a, 0x30, 0xb7, 0xe4, 0x3a, 0x3b, 0xd6, 0xee, 0xba, 0xe1,
	0xad, 0x98, 0x56, 0x38, 0xba, 0x37, 0xb1, 0x96, 0x17, 0x8e, 0x6a, 0xb9, 0xba, 0x64, 0xae, 0x41,
	0xd1, 0x30, 0xcd, 0x66, 0xe9, 0x6c, 0xf1, 0xc9, 0xc6, 0x0b, 0x17, 0x86, 0xb6, 0x3c, 0xad, 0x2d,
	0xf3, 0x0b, 0xa6, 0xb9, 0xe2, 0x84, 0xfe, 0xa1, 0x4e, 0xd0, 0xa0, 0x1b, 0x50, 0xe9, 0xd3, 0x01,
	0x68, 0x96, 0x29, 0xc2, 0x8b, 0xf9, 0x11, 0xb2, 0x01, 0x64, 0x38, 0x39, 0x32, 0xd2, 0x61, 0x13,
	0xdb, 0x38, 0xc4, 0x66, 0xb3, 0x72, 0xb6, 0x48, 0x3a, 0xcc, 0x93, 0xad, 0x4f, 0x41, 0x4d, 0xb4,
	0x80, 0xcc, 0xde, 0x7d, 0x7c, 0xc8, 0x49, 0x42, 0x7e, 0xa2, 0x39, 0x28, 0x1f, 0x18, 0x76, 0x5f,
	0x90, 0x82, 0x25, 0x2e, 0x14, 0xce, 0x6b, 0xad, 0x57, 0xa1, 0xa1, 0x54, 0x94, 0x07, 0xb4, 0xfd,
	0x95, 0x22, 0xcc, 0x6e, 0xe2, 0xae, 0x8f, 0xc3, 0x8f, 0x6a, 0x4c, 0xd6, 0xd4, 0x31, 0x79, 0x65,
	0x28, 0x09, 0x07, 0x1a, 0x92, 0x18, 0x10, 0x3d, 0x31, 0x20, 0x17, 0x72, 0x62, 0xbb, 0xe7, 0x47,
	0xe3, 0x9b, 0x1a, 0x9c, 0x5c, 0x72, 0xbd, 0xc3, 0xe4, 0x8a, 0x7f, 0x03, 0x2a, 0x31, 0x86, 0xf2,
	0xc4, 0x48, 0x86, 0xf2, 0xf6, 0xf6, 0x07, 0xb8, 0x1b, 0xea, 0x1c, 0x0c, 0xad, 0x41, 0xc3, 0xc4,
	0x41, 0x68, 0x39, 0x74, 0xcb, 0xa6, 0x15, 0xe7, 0xc0, 0xa2, 0xc2, 0x26, 0x57, 0x7a, 0x71, 0x60,
	0xa5, 0x7f, 0x5d, 0x83, 0x53, 0x4b, 0x3e, 0xbe, 0x63, 0xc6, 0x75, 0xd7, 0x58, 0xd3, 0x2f, 0x68,
	0x70, 0x6a, 0x99, 0x0e, 0xfa, 0xdd, 0xe6, 0xb4, 0xa3, 0x36, 0xf1, 0xf6, 0x6f, 0xbf, 0x08, 0x33,
	0xc9, 0xfd, 0x35, 0x09, 0xa5, 0x0d, 0x6c, 0xfd, 0x08, 0x4a, 0xfb, 0x96, 0x63, 0x8a, 0xc6, 0x91,
	0xdf, 0xe8, 0xb3, 0xd0, 0xe8, 0x52, 0x0e, 0xd5, 0xe9, 0x19, 0x5e, 0x40, 0x9b, 0xd7, 0x78, 0xe1,
	0x7c, 0xae, 0x8d, 0x3d, 0x62, 0x71, 0xc1, 0xea, 0x09, 0x1d, 0xba, 0x32, 0x45, 0x90, 0x9b, 0x06,
	0xee, 0xb9, 0x4e, 0x27, 0xc0, 0x61, 0x40, 0xbb, 0x98, 0x1b, 0xf9, 0x32, 0x45, 0xb0, 0x89, 0x43,
	0x8a, 0xdc, 0x94, 0x29, 0xf4, 0x3e, 0x99, 0xbb, 0x9e, 0xed, 0x1e, 0xf6, 0xb0, 0x13, 0x06, 0x7c,
	0xec, 0x5f, 0xcd, 0x89, 0x3c, 0x42, 0xb0, 0x7a, 0x42, 0x57, 0xf1, 0xa1, 0x55, 0x28, 0x7d, 0xe0,
	0x6e, 0x33, 0x49, 0xa0, 0xf1, 0xc2, 0x0b, 0xf9, 0xf0, 0xbe, 0xe5, 0x6e, 0x13, 0x84, 0x14, 0x03,
	0xfa, 0x0c, 0x80, 0x1c, 0xee, 0x80, 0x0a, 0x0d, 0xb9, 0x89, 0x70, 0x5d, 0xc2, 0x13, 0x22, 0x44,
	0xd8, 0xd0, 0x55, 0x28, 0x3b, 0xae, 0x89, 0x83, 0x66, 0x8d, 0xa2, 0x7d, 0x31, 0x27, 0x5a, 0x02,
	0xba, 0x7a, 0x42, 0x67, 0x38, 0x90, 0x01, 0x93, 0x41, 0x68, 0x84, 0x78, 0xa7, 0x6f, 0xb3, 0x01,
	0xab, 0x53, 0xa4, 0x17, 0xf2, 0x21, 0xdd, 0xe4, 0x28, 0xf8, 0x90, 0x4d, 0x04, 0x4a, 0x9a, 0x50,
	0xd5, 0x73, 0xcd, 0xa0, 0x09, 0xe3, 0x50, 0x75, 0xc3, 0x35, 0x29, 0x55, 0x09, 0x06, 0xf4, 0x79,
	0x98, 0xf0, 0xb1, 0x67, 0x5b, 0x5d, 0x83, 0xb5, 0xb5, 0x31, 0xce, 0xf8, 0xeb, 0x0c, 0x03, 0x6f,
	0x6a, 0xc3, 0x8f, 0x92, 0x68, 0x8b, 0x08, 0xf9, 0xfe, 0x81, 0x45, 0xc6, 0x6c, 0x82, 0xe2, 0xfe,
	0x54, 0x4e, 0x3a, 0x70, 0xe8, 0xd5, 0x13, 0xba, 0xc4, 0x84, 0xde, 0x81, 0x6a, 0x40, 0xf7, 0x9f,
	0xa0, 0x39, 0x49, 0x91, 0xbe, 0x9c, 0x17, 0x29, 0x05, 0x5e, 0x3d, 0xa1, 0x0b, 0x3c, 0xe8, 0xcf,
	0xc3, 0x19, 0xde, 0x6e, 0xc2, 0x87, 0x3b, 0x5d, 0xd7, 0x09, 0x7d, 0xd7, 0xb6, 0xb1, 0x1f, 0x34,
	0xa7, 0x68, 0x15, 0xcb, 0x63, 0xd1, 0x84, 0x20, 0x5b, 0x8a, 0x70, 0xad, 0x9e, 0xd0, 0x4f, 0xfb,
	0xa9, 0x5f, 0xd0, 0x2e, 0x4c, 0x07, 0xa1, 0xeb, 0x1b, 0xbb, 0xb8, 0xd3, 0xb5, 0x8d, 0x20, 0xc0,
	0x41, 0x73, 0x9a, 0x56, 0xfc, 0x7a, 0xde, 0x89, 0x43, 0x91, 0x2c, 0x31, 0x1c, 0xab, 0x27, 0xf4,
	0xa9, 0x20, 0x96, 0x83, 0x3c, 0x40, 0x1e, 0x61, 0x65, 0x41, 0x88, 0x9d, 0xb0, 0x73, 0xe0, 0xda,
	0xfd, 0x1e, 0x0e, 0x9a, 0x33, 0xb4, 0xae, 0x37, 0x72, 0x4e, 0x25, 0x89, 0xe7, 0x26, 0x43, 0xb3,
	0x7a, 0x42, 0x9f, 0xf5, 0x92, 0x99, 0xe8, 0xfb, 0x35, 0x68, 0x0e, 0x54, 0x49, 0x7a, 0x69, 0xf5,
	0x82, 0xe6, 0xec, 0x38, 0xd4, 0x4d, 0x56, 0xbc, 0x44, 0x71, 0x11, 0xea, 0x7a, 0xa9, 0x5f, 0xc8,
	0x0a, 0xf7, 0x5d, 0x1b, 0x07, 0x4d, 0x34, 0xce, 0x0a, 0xd7, 0x09, 0x28, 0x59, 0xe1, 0x14, 0x07,
	0x59, 0xe1, 0x7c, 0xa7, 0xea, 0x30, 0xa4, 0x27, 0xc7, 0x59, 0xe1, 0x4b, 0x0c, 0x85, 0xc0, 0x3d,
	0xd1, 0x55, 0xd2, 0xa4, 0x0a, 0x82, 0xba, 0xb3, 0x6d, 0x39, 0xa6, 0xe5, 0xec, 0x06, 0xcd, 0xb9,
	0x71, 0xaa, 0x20, 0xb8, 0x16, 0x39, 0x06, 0x52, 0x85, 0xaf, 0xa4, 0xd1, 0x2d, 0x38, 0xa5, 0xf6,
	0x22, 0xaa, 0xea, 0x14, 0xad, 0x6a, 0x61, 0xec, 0xde, 0x28, 0x35, 0x9e, 0xec, 0x0e, 0x66, 0xa3,
	0x2f, 0xc0, 0x44, 0x17, 0xfb, 0xa1, 0xb5, 0x43, 0x56, 0x01, 0x0e, 0x9a, 0xa7, 0xc7, 0xa2, 0x9e,
	0x82, 0x81, 0x52, 0x4f, 0x49, 0xa3, 0x1b, 0x50, 0xef, 0xfa, 0xae, 0xd3, 0xa1, 0x5b, 0xcf, 0x99,
	0x71, 0xd8, 0xce, 0x92, 0xef, 0x3a, 0x7c, 0xfb, 0xa9, 0x75, 0xf9, 0x6f, 0xc2, 0x76, 0x7c, 0x22,
	0xab, 0x75, 0x83, 0x66, 0x73, 0x1c, 0xb6, 0xa3, 0x33, 0x60, 0xc2, 0x76, 0x38, 0x1e, 0xb2, 0xab,
	0x79, 0x6e, 0x10, 0xee, 0xfa, 0x98, 0x2c, 0xf8, 0xfb, 0xc6, 0xd9, 0xd5, 0x36, 0x24, 0x3c, 0xd9,
	0xd5, 0x22, 0x6c, 0x68, 0x17, 0xa6, 0xb0, 0x6d, 0xd0, 0x7a, 0xb0, 0xe1, 0x77, 0xf7, 0x82, 0x66,
	0x8b, 0xe2, 0xbf, 0x98, 0x0f, 0xff, 0x8a, 0x8a, 0x83, 0x71, 0x94, 0x38, 0x5a, 0xd4, 0x83, 0x59,
	0xd3, 0xf5, 0x7b, 0x86, 0x13, 0x76, 0x4c, 0x23, 0x34, 0xb6, 0x0d, 0xd2, 0x97, 0xfb, 0x69, 0x5d,
	0x97, 0x72, 0x4a, 0x12, 0x0c, 0xcd, 0xb2, 0xc0, 0xb2, 0x7a, 0x42, 0x9f, 0x31, 0x13, 0x79, 0xe8,
	0x5d, 0xa8, 0x07, 0x8e, 0xe1, 0x05, 0x7b, 0x6e, 0x18, 0x34, 0x3f, 0x41, 0xab, 0x79, 0x25, 0x27,
	0x8f, 0x14, 0xe0, 0xab, 0x27, 0xf4, 0x08, 0x17, 0xba, 0x0e, 0x15, 0x7c, 0x40, 0xc5, 0xa0, 0x07,
	0x28, 0xd6, 0x97, 0x72, 0x12, 0xea, 0x80, 0x4b, 0x40, 0x1c, 0x0b, 0x69, 0xa8, 0xe5, 0x90, 0xc1,
	0x20, 0xf4, 0x78, 0x70, 0x9c, 0x86, 0xae, 0x09, 0x70, 0xd2, 0x50, 0x89, 0x8b, 0xac, 0x20, 0xcf,
	0x77, 0x7b, 0x38, 0xdc, 0xc3, 0x7d, 0x82, 0xfb, 0xa1, 0x71, 0x56, 0xd0, 0x86, 0x82, 0x81, 0xac,
	0x20, 0x15, 0x23, 0xfa, 0x00, 0x66, 0xf8, 0x6e, 0xdb, 0xe9, 0xb9, 0x8e, 0x15, 0xba, 0x7e, 0xd0,
	0x3c, 0x3b, 0xce, 0xec, 0xe1, 0xfb, 0xf7, 0x3a, 0x47, 0xb2, 0x7a, 0x42, 0x9f, 0x0e, 0xe2, 0x59,
	0xc8, 0x84, 0x29, 0xc1, 0x88, 0x0c, 0x1b, 0xfb, 0x61, 0xd0, 0x7c, 0x98, 0xd6, 0xf4, 0xda, 0x58,
	0x1c, 0x68, 0x81, 0xa2, 0x58, 0x3d, 0xa1, 0x0b, 0x1e, 0xcd, 0x32, 0x88, 0x14, 0x4d, 0xe4, 0x33,
	0x51, 0x45, 0x7b, 0x2c, 0x01, 0xd2, 0x35, 0xb1, 0xc4, 0x0f, 0x8e, 0x4c, 0xa1, 0xf7, 0xc8, 0x32,
	0x36, 0x05, 0xee, 0x47, 0xc6, 0x19, 0xea, 0x0d, 0xd7, 0x94, 0xa8, 0xeb, 0x9e, 0x48, 0x90, 0x39,
	0xd9, 0x3b, 0x0c, 0x3e, 0xb4, 0x83, 0xe6, 0xa3, 0xe3, 0xcc, 0xc9, 0x75, 0x0a, 0x4b, 0xe6, 0x24,
	0xc3, 0xc2, 0x78, 0x98, 0x69, 0x91, 0x59, 0xf3, 0xd8, 0x78, 0x3c, 0x8c, 0x02, 0x33, 0x1e, 0x46,
	0x7f, 0x12, 0x19, 0xaf, 0xe7, 0x3a, 0xbb, 0xae, 0xb9, 0x1d, 0x34, 0x1f, 0x1f, 0x87, 0xd9, 0xae,
	0x73, 0x68, 0xc2, 0x6c, 0x05, 0x26, 0xc2, 0x19, 0x7b, 0xb8, 0xd7, 0x35, 0xba, 0x7b, 0xd8, 0x0c,
	0x9a, 0x4f, 0x8c, 0x33, 0x5c, 0xeb, 0x12, 0x9e, 0x0c, 0x57, 0x84, 0x8d, 0xe0, 0xf6, 0x71, 0xd7,
	0x3d, 0xc0, 0xbe, 0x85, 0x83, 0xe6, 0x93, 0xe3, 0xe0, 0xd6, 0x25, 0x3c, 0xc1, 0x1d, 0x61, 0x6b,
	0x2d, 0x42, 0x85, 0x31, 0x02, 0x74, 0x1e, 0xca, 0x56, 0x88, 0x7b, 0x41, 0x53, 0xa3, 0xfa, 0x94,
	0xf6, 0xd0, 0x0a, 0x28, 0x8c, 0xce, 0x00, 0x5a, 0x6f, 0x01, 0x44, 0xa7, 0x41, 0xf4, 0x7a, 0x1c,
	0xcf, 0xe3, 0xd9, 0x14, 0x65, 0x0a, 0xae, 0xe8, 0xf0, 0x97, 0x0f, 0x97, 0x84, 0x13, 0xb8, 0xae,
	0x41, 0x43, 0x39, 0xeb, 0xa1, 0x8b, 0x71, 0x64, 0xc3, 0x35, 0x1e, 0x11, 0xa0, 0xc0, 0x76, 0x09,
	0x4a, 0x74, 0x5b, 0xfd, 0x54, 0x1c, 0xcd, 0x70, 0xc5, 0xc3, 0x5b, 0xee, 0xb6, 0xd2, 0xb3, 0xe8,
	0x44, 0x97, 0xaf, 0x67, 0x12, 0x4e, 0xe0, 0x7a, 0x13, 0xca, 0xf4, 0x18, 0x87, 0x5e, 0x89, 0xa3,
	0x79, 0x78, 0x38, 0x1a, 0xd7, 0x94, 0x18, 0xae, 0xc3, 0x84, 0x7a, 0x66, 0x43, 0x97, 0xe2, 0x88,
	0x9e, 0x1c, 0xae, 0x4d, 0x8b, 0x20, 0x15, 0xea, 0x90, 0x93, 0x5a, 0x3e, 0xea, 0x6c, 0xb8, 0xa6,
	0x32, 0x56, 0xca, 0xb9, 0x2c, 0xdf, 0x58, 0x45, 0x80, 0x02, 0xdb, 0x65, 0xa8, 0x89, 0x93, 0x18,
	0xba, 0x10, 0x47, 0xf5, 0xe8, 0x08, 0x3d, 0x21, 0x85, 0x12, 0x78, 0x96, 0xa1, 0xca, 0x0f, 0x5f,
	0xe8, 0xd5, 0x38, 0x9a, 0x47, 0x32, 0xa8, 0x1b, 0x05, 0x96, 0x6d, 0x38, 0x9d, 0x7e, 0xbe, 0x42,
	0xab, 0x71, 0xa4, 0x2f, 0x64, 0xe9, 0x66, 0x1c, 0x87, 0xa8, 0xe3, 0x1d, 0x98, 0x8a, 0x1f, 0xa5,
	0xd0, 0x1b, 0x71, 0xdc, 0x4f, 0x8d, 0x18, 0xd1, 0x08, 0x56, 0xa0, 0x7c, 0x0f, 0x66, 0x07, 0x4e,
	0x4c, 0x68, 0x29, 0x8e, 0x75, 0xb8, 0x35, 0x28, 0x09, 0xae, 0x10, 0x24, 0xfd, 0x48, 0x94, 0x8f,
	0x20, 0xa9, 0x38, 0x44, 0x1d, 0x1b, 0x30, 0x19, 0xdb, 0x62, 0xf3, 0xd1, 0x43, 0x05, 0x55, 0x17,
	0x70, 0xb4, 0x87, 0xe6, 0x5b, 0xc0, 0x02, 0x4e, 0xe0, 0x5a, 0x85, 0xba, 0xdc, 0x41, 0xd1, 0x6b,
	0x71, 0x54, 0x8f, 0x8d, 0x5a, 0x33, 0x31, 0x4c, 0x6f, 0x42, 0x99, 0x9d, 0xc1, 0x72, 0xb1, 0x02,
	0x02, 0xa2, 0xb0, 0x02, 0xf5, 0x70, 0x97, 0x8f, 0x15, 0x28, 0x90, 0x0a, 0xbe, 0xd8, 0x01, 0x2a,
	0x17, 0x3e, 0x05, 0x52, 0xe0, 0xfb, 0x1c, 0x9c, 0x4c, 0x39, 0xae, 0xa1, 0x95, 0x38, 0xda, 0x73,
	0x59, 0x9b, 0x99, 0xc0, 0x4e, 0x7a, 0xaf, 0x1e, 0xc6, 0xf2, 0xf5, 0x3e, 0x82, 0x54, 0x58, 0x8f,
	0x38, 0x8d, 0xe5, 0x63, 0x3d, 0x1c, 0x4a, 0xe0, 0x59, 0x03, 0x88, 0x8e, 0x4a, 0x79, 0xa7, 0x08,
	0x83, 0x13, 0xa8, 0x36, 0x61, 0x3a, 0x71, 0x2a, 0x42, 0x6f, 0xc6, 0xf1, 0x3d, 0x3d, 0x7c, 0xb3,
	0x57, 0x81, 0x05, 0xd2, 0x9b, 0x30, 0x93, 0x3c, 0xfe, 0xa0, 0xc5, 0x38, 0xd6, 0x67, 0x86, 0xef,
	0xb0, 0x71, 0x68, 0x81, 0x77, 0x11, 0x2a, 0x4c, 0x0a, 0xcc, 0x27, 0x90, 0x50, 0x18, 0x81, 0x63,
	0x09, 0xaa, 0x5c, 0xf0, 0xcb, 0x87, 0x84, 0x02, 0x29, 0x03, 0x29, 0x24, 0xbd, 0x7c, 0x03, 0xc9,
	0xa1, 0x14, 0xb6, 0x11, 0x49, 0x76, 0xf9, 0xd8, 0x86, 0x84, 0x53, 0x26, 0x45, 0x24, 0xc9, 0xe5,
	0x9b, 0x14, 0x1c, 0xee, 0x50, 0xe1, 0x40, 0xf2, 0x5c, 0x19, 0x61, 0x2a, 0x64, 0xc0, 0x24, 0xc0,
	0x94, 0x4d, 0x92, 0xab, 0x0a, 0xf2, 0x6d, 0x92, 0x0c, 0x48, 0x60, 0xb9, 0x02, 0x75, 0x79, 0x7c,
	0xcc, 0x47, 0x6f, 0x0e, 0x26, 0x10, 0xad, 0xc3, 0x84, 0x7a, 0x56, 0xcc, 0x27, 0x4a, 0x44, 0x90,
	0x02, 0xdd, 0x16, 0x4c, 0x27, 0x0e, 0x85, 0x68, 0x21, 0x8e, 0xf1, 0x93, 0x59, 0x24, 0x0a, 0x0e,
	0xcc, 0xb1, 0x2e, 0x42, 0xe4, 0x17, 0xd0, 0xfe, 0xa1, 0x33, 0x30, 0xa1, 0x0a, 0xec, 0xe3, 0xd9,
	0x74, 0xb8, 0x35, 0xac, 0x98, 0xc7, 0x1a, 0x76, 0x41, 0x6a, 0x10, 0x4a, 0x99, 0x65, 0x7e, 0xa1,
	0x2d, 0xb8, 0x02, 0x10, 0xd9, 0x90, 0xb8, 0x21, 0x26, 0xa3, 0xac, 0x4f, 0x8e, 0x8c, 0xd2, 0x60,
	0x44, 0x10, 0x45, 0xf6, 0x22, 0x6e, 0x79, 0xc9, 0x28, 0xe8, 0x13, 0x44, 0xd2, 0x38, 0x84, 0xd6,
	0x00, 0x22, 0x5b, 0x0e, 0x37, 0xb9, 0x64, 0x15, 0xf2, 0xa9, 0x99, 0x49, 0xa6, 0xd0, 0x4b, 0x50,
	0xfc, 0xc0, 0xdd, 0xe6, 0xf6, 0x95, 0x91, 0x12, 0xfe, 0xea, 0x09, 0x9d, 0x14, 0x47, 0x97, 0x55,
	0x9b, 0x5f, 0x3d, 0x43, 0x47, 0xa4, 0x5c, 0x4f, 0x3a, 0x12, 0x59, 0x07, 0x5f, 0x81, 0x12, 0x39,
	0xac, 0x73, 0x7b, 0xc9, 0x68, 0x99, 0x7e, 0xf5, 0x84, 0x4e, 0x01, 0xd0, 0x3a, 0x4c, 0xa8, 0xb6,
	0x1c, 0x6e, 0x1e, 0xc9, 0x2c, 0xcb, 0xaf, 0x9e, 0xd0, 0x1b, 0x8a, 0xe1, 0x86, 0x50, 0xc1, 0x73,
	0x4d, 0x6e, 0x08, 0x19, 0x29, 0xc9, 0x13, 0x2a, 0x78, 0xae, 0x89, 0xde, 0x82, 0x86, 0x62, 0xa3,
	0xe1, 0x16, 0x8f, 0xac, 0x02, 0x3c, 0x3b, 0x9d, 0x8a, 0x14, 0x7a, 0x13, 0xaa, 0x5c, 0xfd, 0xc2,
	0xcd, 0x1a, 0x99, 0xa4, 0x77, 0x66, 0x28, 0xa1, 0x3f, 0xd1, 0x45, 0xa8, 0x30, 0x9b, 0x09, 0x37,
	0x4f, 0x64, 0x91, 0xdb, 0x57, 0x4f, 0xe8, 0x1c, 0x08, 0xed, 0xc3, 0xe9, 0x74, 0x3b, 0x0b, 0xb7,
	0x40, 0x8c, 0x21, 0xb1, 0xaf, 0x9e, 0xd0, 0x4f, 0xa5, 0x1a, 0x55, 0xd0, 0x06, 0x4c, 0xc6, 0x6c,
	0x2a, 0xdc, 0xd8, 0x90, 0x5d, 0x72, 0x67, 0x96, 0xb7, 0x28, 0x8d, 0x3e, 0x07, 0xb3, 0x03, 0x96,
	0x0c, 0x6e, 0x53, 0xc8, 0x27, 0xb9, 0xaf, 0x9e, 0xd0, 0x67, 0x92, 0xb6, 0x0a, 0x64, 0xc3, 0x99,
	0x23, 0xec, 0x24, 0xdc, 0xc4, 0x30, 0x86, 0xf8, 0x4e, 0xa8, 0x93, 0x6a, 0x14, 0x21, 0xab, 0xc2,
	0x77, 0x6d, 0xcc, 0x4d, 0x0b, 0xa3, 0xc5, 0x5b, 0xb2, 0x2a, 0x08, 0x00, 0x59, 0x15, 0xaa, 0xe5,
	0x80, 0x1b, 0x0c, 0x32, 0x8b, 0xb5, 0x64, 0x55, 0x28, 0x76, 0x01, 0x82, 0x4e, 0x35, 0x40, 0x70,
	0x7b, 0x40, 0x66, 0xa9, 0x96, 0x9a, 0x1c, 0xa3, 0x24, 0xea, 0xc2, 0x5c, 0x9a, 0x5d, 0x83, 0xdb,
	0x01, 0xf2, 0x4a, 0xb5, 0xab, 0x27, 0x74, 0x34, 0x68, 0xc4, 0x40, 0xd7, 0xa0, 0xa1, 0x58, 0x1c,
	0xb8, 0x39, 0x20, 0xb3, 0x68, 0x4b, 0x29, 0x10, 0x25, 0xd1, 0x02, 0xd4, 0x84, 0xbd, 0x82, 0xdb,
	0x00, 0x32, 0x49, 0xb6, 0x64, 0x59, 0x72, 0xe3, 0x04, 0x59, 0x96, 0xcc, 0xa6, 0xc0, 0x95, 0xfc,
	0x59, 0x24, 0x05, 0xb2, 0x2c, 0x19, 0x10, 0x5a, 0x82, 0x9a, 0xb0, 0x1c, 0x70, 0xcd, 0x7d, 0x36,
	0x89, 0x78, 0xf5, 0x84, 0x2e, 0x01, 0x91, 0x0e, 0x93, 0x31, 0xcb, 0x00, 0x57, 0xce, 0xe7, 0x90,
	0x85, 0x57, 0x4f, 0xe8, 0x71, 0x14, 0xe8, 0xd3, 0x30, 0x93, 0xb4, 0x2d, 0x70, 0xed, 0x7c, 0x2e,
	0x61, 0x78, 0xf5, 0x84, 0x3e, 0x9d, 0x30, 0x24, 0x90, 0x3e, 0x0b, 0xdd, 0x3f, 0xd7, 0xce, 0x67,
	0x13, 0xd3, 0xa8, 0x29, 0x9a, 0xff, 0x26, 0x0c, 0x95, 0xeb, 0xe5, 0xb9, 0x16, 0x3e, 0x93, 0x68,
	0x45, 0x46, 0x8e, 0x83, 0x91, 0x5d, 0x36, 0x52, 0xbd, 0x73, 0x25, 0x7b, 0x56, 0x99, 0x8a, 0x5a,
	0x7c, 0x64, 0x0a, 0xbd, 0x97, 0xa2, 0xb5, 0x67, 0xba, 0xf4, 0x3c, 0x22, 0x55, 0x9a, 0x8e, 0x7e,
	0x23, 0x32, 0x79, 0x52, 0x25, 0x37, 0xd7, 0x9f, 0x67, 0x3f, 0xf3, 0x2b, 0x16, 0x4e, 0x9a, 0x26,
	0x52, 0x4a, 0xa4, 0x8f, 0xe7, 0x2a, 0xf3, 0x8c, 0x67, 0x7e, 0xba, 0xb9, 0x8b, 0x04, 0x5a, 0x86,
	0xba, 0xd4, 0xbd, 0x73, 0x25, 0x79, 0xb6, 0x03, 0x3f, 0x9b, 0xbb, 0xec, 0x37, 0x11, 0x90, 0xa9,
	0x86, 0x9c, 0x6b, 0xc5, 0x33, 0x9c, 0x8d, 0x56, 0x4f, 0xe8, 0x0c, 0x84, 0xc0, 0x52, 0x5d, 0x38,
	0xd7, 0x7e, 0x67, 0x38, 0x12, 0x51, 0x5b, 0x32, 0xf9, 0x41, 0xe6, 0x0f, 0x57, 0x79, 0x73, 0x1d,
	0x77, 0xa6, 0xa3, 0x10, 0x99, 0x3f, 0x1c, 0x8c, 0x08, 0x49, 0x52, 0xb5, 0xcd, 0x75, 0xd9, 0x19,
	0x0f, 0x41, 0x84, 0x8e, 0x12, 0x94, 0x2c, 0x07, 0xae, 0xc6, 0x3e, 0x6c, 0x3e, 0x95, 0x81, 0x8c,
	0xe2, 0xfc, 0x43, 0xc8, 0x28, 0x00, 0x63, 0x62, 0xf8, 0x1f, 0x17, 0xa1, 0xb4, 0x8e, 0x43, 0x43,
	0x3a, 0x67, 0x69, 0x47, 0xf9, 0x5f, 0x0f, 0xb8, 0x3a, 0xde, 0x0f, 0xf5, 0x00, 0xdb, 0x3b, 0x1d,
	0xdb, 0x72, 0xf6, 0xb9, 0xb3, 0x57, 0x8d, 0x64, 0x5c, 0xb3, 0x9c, 0x7d, 0xf4, 0x14, 0xcc, 0x88,
	0x3a, 0x12, 0x7e, 0xe8, 0xd3, 0x22, 0x5f, 0xc8, 0xf5, 0xcf, 0x02, 0xea, 0xfa, 0x98, 0x89, 0x1a,
	0xa1, 0xd5, 0xc3, 0x41, 0x68, 0xf4, 0x98, 0x6c, 0x5d, 0xd4, 0x67, 0xc5, 0x97, 0x2d, 0xf1, 0x01,
	0x3d, 0x08, 0xb0, 0x8b, 0x1d, 0xec, 0x33, 0x3f, 0xbe, 0x0a, 0x2d, 0xa6, 0xe4, 0xa0, 0x15, 0xa8,
	0xd8, 0xc6, 0x36, 0xb6, 0x83, 0x66, 0x35, 0x83, 0xb2, 0x8e, 0xf4, 0x7d, 0xfe, 0x1a, 0x2d, 0xcf,
	0xbd, 0x22, 0x19, 0x30, 0xda, 0x82, 0x86, 0xe2, 0xe1, 0xdf, 0xac, 0x65, 0xd0, 0xcc, 0x51, 0x5c,
	0x0b, 0x11, 0x10, 0x43, 0xa8, 0xa2, 0x41, 0x33, 0x50, 0xec, 0x5b, 0x26, 0x15, 0x93, 0xeb, 0x3a,
	0xf9, 0xd9, 0x7a, 0x15, 0x1a, 0x4a, 0xf5, 0xb9, 0xdc, 0x2c, 0x2f, 0xc1, 0x4c, 0xb2, 0xb6, 0x5c,
	0xbe, 0x96, 0x36, 0x40, 0xe4, 0xe2, 0xf8, 0x51, 0x7b, 0xfa, 0xb5, 0x7b, 0xd0, 0x58, 0xeb, 0x5a,
	0xce, 0xae, 0x41, 0x65, 0x6f, 0x34, 0x05, 0x85, 0xb7, 0xaf, 0xd2, 0x9a, 0xca, 0x7a, 0xc1, 0xbd,
	0x4a, 0xaa, 0x7f, 0xd7, 0xf0, 0x1d, 0x22, 0x04, 0x14, 0x68, 0x66, 0xf5, 0x16, 0x4b, 0xa2, 0x16,
	0xd4, 0x96, 0x7c, 0x2b, 0xb4, 0xba, 0x86, 0x4d, 0x6b, 0x2a, 0xeb, 0xb5, 0x2e, 0x4f, 0x13, 0xa8,
	0x1b, 0xce, 0xbe, 0xe3, 0xde, 0x62, 0xb3, 0xab, 0xac, 0x57, 0xfb, 0x2c, 0xd9, 0xfe, 0x66, 0x19,
	0xaa, 0x1b, 0xae, 0xb9, 0xe9, 0xe1, 0x2e, 0xba, 0x08, 0x55, 0xe1, 0x42, 0x93, 0xe5, 0x88, 0xce,
	0xd5, 0xb6, 0x02, 0x06, 0x5d, 0xa7, 0x87, 0xbe, 0xd0, 0xb0, 0x1c, 0xec, 0x0b, 0x65, 0xc1, 0xfc,
	0x28, 0xee, 0x45, 0x2a, 0x26, 0x87, 0x3f, 0x06, 0xa6, 0x2b, 0x18, 0xd0, 0x67, 0x61, 0x92, 0x72,
	0x55, 0x79, 0xb3, 0xa2, 0x48, 0x51, 0x7e, 0x2a, 0x13, 0x4a, 0xc2, 0x60, 0x37, 0x39, 0x20, 0x9b,
	0x60, 0x13, 0x8e, 0x92, 0x85, 0x9e, 0x83, 0x39, 0xb1, 0xbd, 0x18, 0xdd, 0xae, 0xdb, 0x77, 0xc2,
	0x8e, 0x32, 0x14, 0x88, 0x7f, 0x5b, 0x60, 0x9f, 0xc8, 0x51, 0x8c, 0xac, 0x63, 0xda, 0x1c, 0x5a,
	0x8c, 0x39, 0x60, 0xd6, 0x48, 0x06, 0xfd, 0xf8, 0x0c, 0x20, 0xab, 0x47, 0x64, 0x73, 0xaf, 0x6f,
	0x93, 0xe3, 0x15, 0x73, 0xe8, 0x62, 0x7e, 0xc2, 0x33, 0xf4, 0xcb, 0x46, 0xdf, 0xb6, 0xb9, 0xb9,
	0xa0, 0xf5, 0x06, 0xcc, 0x0e, 0xb4, 0x2f, 0xd7, 0x94, 0xfe, 0xf1, 0x02, 0xd4, 0x25, 0xd1, 0x52,
	0x79, 0xd2, 0x1c, 0x94, 0x69, 0xb5, 0x02, 0x96, 0x26, 0xc8, 0x1c, 0xe9, 0xba, 0xbd, 0x9e, 0xe1,
	0x98, 0x01, 0xa5, 0x66, 0x5d, 0x97, 0x69, 0xb4, 0x0e, 0x93, 0x5c, 0x4a, 0xef, 0x91, 0x3e, 0x8b,
	0x63, 0xff, 0x93, 0x19, 0xe6, 0xc0, 0x3a, 0x01, 0xd0, 0x27, 0x0e, 0xa2, 0x44, 0x40, 0x1a, 0x65,
	0xf8, 0xbb, 0x01, 0x75, 0xc0, 0xae, 0xeb, 0xf4, 0x37, 0x7a, 0x08, 0x1a, 0xb7, 0x5c, 0x7f, 0xdf,
	0x72, 0x76, 0x3b, 0xa6, 0x25, 0x6e, 0xca, 0x00, 0xcf, 0x5a, 0xb6, 0x7c, 0xf4, 0x32, 0x14, 0xb1,
	0x73, 0xc0, 0x39, 0xd2, 0xf0, 0xd9, 0xb7, 0xe2, 0x1c, 0xdc, 0x34, 0x7c, 0x9d, 0x94, 0x6f, 0xef,
	0x43, 0x85, 0x9f, 0x3a, 0xd2, 0x48, 0xb1, 0x0e, 0xbc, 0x65, 0x9b, 0xcc, 0x33, 0xba, 0x90, 0x61,
	0xbb, 0xbf, 0xa9, 0x00, 0xe8, 0x31, 0xf0, 0xf6, 0xfb, 0xd0, 0x50, 0x7a, 0x9d, 0x5a, 0xe3, 0xfd,
	0x50, 0xf7, 0xb1, 0x61, 0x76, 0x5c, 0xc7, 0x3e, 0xa4, 0xd5, 0xd5, 0xc8, 0xb6, 0x62, 0x98, 0x6f,
	0x3b, 0xf6, 0x21, 0x7a, 0x00, 0x80, 0x12, 0xb8, 0xe3, 0x19, 0xe1, 0x9e, 0xe0, 0x09, 0x34, 0x67,
	0xc3, 0x08, 0xf7, 0xda, 0xcf, 0x43, 0x51, 0x37, 0x6e, 0xa1, 0xd3, 0x50, 0xd9, 0x21, 0x32, 0x5e,
	0xc8, 0x11, 0xf3, 0x14, 0xa9, 0x8e, 0xc8, 0x8e, 0x82, 0xc9, 0x90, 0xdf, 0xed, 0xdf, 0xd0, 0xe8,
	0x6c, 0xe0, 0x2a, 0x93, 0x97, 0xa1, 0xd4, 0xc3, 0xa1, 0xc1, 0x1d, 0xc0, 0x1f, 0x1e, 0xc9, 0x8a,
	0x75, 0x5a, 0x1c, 0x2d, 0x4b, 0xc4, 0x84, 0xf6, 0xcf, 0x65, 0x53, 0xd6, 0xcc, 0x13, 0x01, 0x94,
	0x2d, 0x2f, 0x0a, 0xdd, 0x7a, 0x05, 0xea, 0x32, 0x2b, 0x17, 0x93, 0xfd, 0x47, 0x45, 0x28, 0x12,
	0xd9, 0x7f, 0xcc, 0xd6, 0xcf, 0x40, 0xd1, 0xf0, 0x3c, 0x8e, 0x96, 0xfc, 0x44, 0xe7, 0xa1, 0x14,
	0x78, 0xb8, 0xcb, 0x75, 0x5e, 0x8f, 0x8e, 0x52, 0xd3, 0x10, 0xa6, 0xa1, 0x53, 0x08, 0xea, 0x43,
	0x1f, 0x1a, 0x61, 0x5f, 0xb8, 0x27, 0x3f, 0x31, 0x0a, 0x96, 0xaa, 0x49, 0xfa, 0x81, 0xce, 0xc1,
	0x5a, 0xff, 0x4d, 0x83, 0x0a, 0xcb, 0x22, 0x83, 0x1d, 0x84, 0x86, 0x1f, 0xd2, 0x1d, 0x9b, 0x76,
	0xaa, 0xa8, 0xd7, 0x69, 0x0e, 0xd9, 0xa9, 0xd1, 0x13, 0x30, 0xdd, 0x75, 0x7b, 0x9e, 0x8d, 0xe5,
	0xae, 0x4e, 0xbb, 0x50, 0xd4, 0xa7, 0xa2, 0x6c, 0x5a, 0xf0, 0x34, 0x54, 0x8c, 0x6e, 0x68, 0x1d,
	0x60, 0xce, 0xda, 0x79, 0x8a, 0xec, 0x2f, 0x41, 0xbf, 0xdb, 0xc5, 0xd8, 0xc4, 0x26, 0x67, 0xed,
	0x51, 0x06, 0x9d, 0x44, 0x86, 0x65, 0x63, 0x93, 0xf2, 0xab, 0xb2, 0xce, 0x53, 0x9c, 0x53, 0x9b,
	0x16, 0xdb, 0xb3, 0x2b, 0x19, 0x38, 0xb5, 0x50, 0x3f, 0x2e, 0x09, 0x30, 0x5d, 0xc1, 0xd0, 0xfe,
	0x2d, 0x0d, 0xaa, 0x9c, 0x86, 0xe8, 0x2c, 0x34, 0x3c, 0xc3, 0x37, 0x6c, 0x1b, 0xdb, 0x56, 0xd0,
	0xe3, 0x3b, 0x97, 0x9a, 0x45, 0x4a, 0x44, 0xbd, 0x0b, 0xf8, 0x36, 0xa6, 0x66, 0xa1, 0x37, 0xa1,
	0x16, 0xe2, 0x9e, 0x67, 0x93, 0xe3, 0x68, 0x96, 0xf1, 0xe3, 0x4c, 0x5f, 0x97, 0x50, 0xe8, 0x53,
	0x70, 0x86, 0x51, 0xa8, 0x63, 0x62, 0xc3, 0xb4, 0x2d, 0x87, 0x6c, 0x23, 0xa4, 0xc5, 0x6c, 0x50,
	0x8b, 0xfa, 0x29, 0xf6, 0x79, 0x99, 0x7f, 0xdd, 0x64, 0x1f, 0xdb, 0x7f, 0xab, 0x00, 0x75, 0xa9,
	0x78, 0x1b, 0x77, 0x32, 0xae, 0xc8, 0x09, 0x54, 0xc8, 0xa0, 0x4d, 0x91, 0xd5, 0x25, 0xa6, 0x11,
	0x5a, 0x8d, 0xcd, 0xe0, 0x97, 0x32, 0x22, 0x91, 0xbf, 0xa2, 0x19, 0xdd, 0x3a, 0x07, 0x93, 0xb1,
	0x6c, 0x22, 0x1c, 0xee, 0x58, 0x8e, 0x61, 0x5b, 0x5f, 0x24, 0x5b, 0xb5, 0x46, 0x59, 0xb4, 0x92,
	0xd3, 0x7a, 0x50, 0x4e, 0xe0, 0x39, 0x28, 0x7b, 0x7b, 0xe4, 0xa0, 0xca, 0x56, 0x31, 0x4b, 0xb4,
	0x7f, 0x76, 0x0a, 0x4a, 0x64, 0x07, 0x1b, 0x97, 0x42, 0x17, 0x78, 0xd7, 0x0a, 0x19, 0x8f, 0x4a,
	0xf3, 0xca, 0xf2, 0xbc, 0x1f, 0xea, 0x56, 0xd0, 0xe9, 0x19, 0x54, 0x04, 0x2b, 0x32, 0xe6, 0x6a,
	0x05, 0xeb, 0x34, 0x8d, 0x96, 0x13, 0x6b, 0xf7, 0x99, 0xd1, 0xa8, 0xe9, 0x4e, 0x1c, 0xa7, 0xfc,
	0x25, 0xa8, 0xaa, 0xf7, 0x3d, 0x47, 0x1e, 0x64, 0x58, 0x59, 0x5d, 0x00, 0xb5, 0xfe, 0x92, 0x06,
	0x25, 0x4a, 0xe7, 0x87, 0xa0, 0x81, 0x6f, 0x87, 0xd8, 0x77, 0x0c, 0xbb, 0x63, 0x99, 0x42, 0x59,
	0x2f, 0xb2, 0xd6, 0x4c, 0x52, 0xc0, 0xf3, 0xdd, 0x03, 0xcb, 0xc4, 0x3e, 0x29, 0xc0, 0xf8, 0x17,
	0x88, 0xac, 0x35, 0x13, 0x3d, 0x0a, 0x93, 0x7d, 0x27, 0x20, 0x87, 0x9a, 0xbe, 0x6d, 0x6c, 0xdb,
	0x98, 0xf7, 0x38, 0x9e, 0x49, 0xe4, 0x3b, 0xcf, 0x35, 0x97, 0xd6, 0x96, 0x75, 0x2e, 0xc0, 0x88,
	0x64, 0xeb, 0x0f, 0x80, 0x19, 0xa6, 0xf9, 0x70, 0xbe, 0x03, 0xb5, 0xae, 0xe1, 0x19, 0x5d, 0x2b,
	0x3c, 0xe4, 0x63, 0xf6, 0x72, 0x1e, 0x0a, 0xcd, 0x2f, 0x71, 0x60, 0x5d, 0xa2, 0x89, 0x66, 0x48,
	0x41, 0x99, 0x21, 0xe8, 0x3d, 0x2e, 0x2d, 0x59, 0xce, 0x8e, 0xcb, 0x67, 0xf0, 0x6b, 0xb9, 0x6a,
	0xa2, 0x3f, 0x0f, 0x83, 0x10, 0xf7, 0xd6, 0x9c, 0x1d, 0x97, 0x89, 0x5a, 0xe4, 0x17, 0x7a, 0x17,
	0x1a, 0x86, 0x6d, 0xbb, 0x5d, 0x23, 0xa4, 0xf4, 0x28, 0xdd, 0x49, 0x2f, 0x54, 0x4c, 0x09, 0xae,
	0x58, 0xbe, 0x53, 0xae, 0x88, 0x74, 0xa8, 0x1a, 0xa6, 0x49, 0xd5, 0x29, 0x8c, 0xc5, 0x9e, 0xcf,
	0x4d, 0x80, 0x05, 0x06, 0xaf, 0x0b, 0x44, 0x68, 0x13, 0x2a, 0x54, 0x92, 0x13, 0xa7, 0xb6, 0x7c,
	0x34, 0x95, 0x22, 0xe3, 0x1a, 0xc1, 0xa1, 0x73, 0x54, 0xe8, 0x51, 0x98, 0xe2, 0x32, 0x7c, 0xc7,
	0x72, 0x3a, 0xfd, 0x00, 0xd3, 0x63, 0x5c, 0x5d, 0xc8, 0x3d, 0xc1, 0x9a, 0x73, 0x23, 0xc0, 0x68,
	0x07, 0x66, 0x44, 0x29, 0x23, 0x0c, 0xd9, 0x11, 0xbd, 0x3e, 0x46, 0x23, 0x16, 0x38, 0x30, 0x3f,
	0x3e, 0x4c, 0x73, 0xa4, 0x22, 0xbb, 0xb5, 0x0d, 0x35, 0x31, 0x3e, 0x64, 0x5b, 0xef, 0x7a, 0x7d,
	0xbe, 0x6f, 0x92, 0x9f, 0x64, 0x4b, 0xeb, 0xe1, 0x9e, 0xeb, 0x1f, 0xf2, 0x8d, 0x92, 0xa7, 0x88,
	0x5c, 0x44, 0xaf, 0x91, 0x14, 0x69, 0x2e, 0xbb, 0x10, 0xd2, 0x84, 0x2a, 0x57, 0x78, 0x8b, 0x55,
	0xc1, 0x93, 0xad, 0x1f, 0x2b, 0xc2, 0x54, 0x7c, 0x82, 0x91, 0x9d, 0xb4, 0x67, 0x74, 0xf7, 0x2c,
	0x07, 0xaf, 0x2d, 0x73, 0xc9, 0x34, 0xca, 0x20, 0x0c, 0x33, 0xa0, 0x65, 0x6f, 0xdc, 0x58, 0x5b,
	0x16, 0xd7, 0x7c, 0xa3, 0x1c, 0xd2, 0xac, 0x6d, 0xd7, 0x0d, 0xd7, 0x96, 0xa9, 0x59, 0xa8, 0xae,
	0xf3, 0x14, 0x7a, 0x0c, 0xa6, 0xf6, 0x09, 0x41, 0xec, 0x84, 0xc1, 0x6e, 0x92, 0xe5, 0x8a, 0xb3,
	0xfd, 0x7d, 0x50, 0x73, 0x83, 0x8e, 0x2a, 0xb0, 0x57, 0xdd, 0x80, 0x0e, 0x12, 0xba, 0x00, 0xf7,
	0xc9, 0x33, 0x51, 0xc7, 0xef, 0x3b, 0x44, 0x48, 0x48, 0xdc, 0xa9, 0x3b, 0x23, 0x0b, 0xe8, 0xec,
	0xbb, 0x72, 0x7f, 0x9d, 0x0c, 0x88, 0x8d, 0xc3, 0x84, 0x72, 0x61, 0x8a, 0x67, 0x8b, 0x82, 0xcf,
	0x00, 0x22, 0x39, 0x1d, 0xcf, 0x77, 0x6f, 0x1f, 0x26, 0x6e, 0x99, 0xcd, 0x90, 0x2f, 0x1b, 0xe4,
	0x83, 0x28, 0xfd, 0x14, 0xcc, 0xb8, 0x1e, 0xd5, 0x23, 0x38, 0xbb, 0x1d, 0x46, 0x04, 0x7e, 0x54,
	0x9f, 0x96, 0xf9, 0x8c, 0xb2, 0xa8, 0x0d, 0x13, 0x86, 0xdf, 0xdd, 0xb3, 0x42, 0xdc, 0x0d, 0xfb,
	0x3e, 0xb3, 0x5a, 0xd5, 0xf5, 0x58, 0x5e, 0xeb, 0x35, 0x68, 0x28, 0x73, 0x5d, 0x1e, 0xa3, 0x35,
	0xe5, 0x18, 0xdd, 0x8c, 0x96, 0x12, 0x27, 0x0f, 0x4f, 0xb6, 0x56, 0x60, 0x2a, 0x3e, 0xab, 0x09,
	0x3f, 0xa2, 0x27, 0x6c, 0xbe, 0xad, 0xb1, 0x04, 0x15, 0xc4, 0xac, 0x2f, 0xe2, 0xce, 0xf6, 0x61,
	0x88, 0x03, 0x3e, 0x77, 0xea, 0x24, 0x67, 0x91, 0x64, 0x10, 0x34, 0xf1, 0x79, 0x99, 0x2a, 0xd7,
	0x3f, 0x04, 0x0d, 0x13, 0xd3, 0x33, 0x23, 0x95, 0xdd, 0x39, 0xb7, 0x66, 0x59, 0x54, 0x78, 0xff,
	0xe7, 0x25, 0x28, 0x6e, 0xb8, 0xe6, 0x9f, 0x8d, 0x14, 0x2b, 0xa4, 0x20, 0xb6, 0x4d, 0x2e, 0x26,
	0x76, 0xc2, 0xa7, 0x47, 0xc1, 0x52, 0xf8, 0xe3, 0xdd, 0x07, 0x7f, 0xbd, 0x40, 0x3d, 0x99, 0x86,
	0x89, 0x12, 0x64, 0x68, 0x7b, 0x38, 0x08, 0x94, 0x99, 0xcf, 0x93, 0x64, 0x4d, 0xf9, 0xd8, 0x08,
	0xe4, 0x34, 0xe7, 0x29, 0x92, 0xbf, 0xe7, 0x06, 0xe1, 0xda, 0x06, 0x9f, 0xcc, 0x3c, 0x45, 0xf1,
	0xbb, 0xe6, 0xda, 0x06, 0x9f, 0xb7, 0x2c, 0x71, 0xdc, 0xb2, 0x6e, 0x42, 0xa2, 0xaf, 0x26, 0x25,
	0xfa, 0x2b, 0x30, 0x21, 0xf4, 0x0a, 0x74, 0xeb, 0xab, 0xe5, 0xf0, 0x2b, 0x6c, 0x70, 0x48, 0xc2,
	0x8f, 0xda, 0xbf, 0x51, 0x81, 0x99, 0xa4, 0x11, 0x6c, 0xdc, 0x79, 0x75, 0x33, 0x26, 0x6e, 0x2d,
	0xe6, 0x32, 0xbc, 0x0d, 0x64, 0x28, 0x73, 0xec, 0x73, 0x72, 0x8e, 0x15, 0x33, 0xdc, 0x7c, 0x1a,
	0x8d, 0x39, 0x7e, 0x8c, 0xfa, 0xb7, 0x45, 0x98, 0x4b, 0xab, 0x1c, 0xd9, 0x31, 0x21, 0x86, 0xd0,
	0x77, 0xe3, 0xce, 0xbb, 0x24, 0x85, 0x02, 0x76, 0x9c, 0x8d, 0xe4, 0x9b, 0x87, 0x61, 0xc2, 0xe8,
	0x76, 0x71, 0x10, 0x74, 0x7a, 0xf4, 0x5e, 0x65, 0x81, 0xb2, 0x95, 0x06, 0xcb, 0x5b, 0xa7, 0x8e,
	0xb6, 0x57, 0xe0, 0xec, 0xa0, 0xad, 0xd3, 0xc7, 0xd4, 0xda, 0xd9, 0xf1, 0x5c, 0xdb, 0xea, 0x1e,
	0xf2, 0x39, 0xfc, 0x40, 0xd2, 0x7c, 0xa9, 0xb3, 0x52, 0x1b, 0xb4, 0x10, 0x5a, 0x83, 0x3a, 0x03,
	0xf2, 0xf1, 0x4e, 0x26, 0x09, 0x96, 0xdf, 0xbb, 0xc6, 0x3b, 0xd8, 0xc7, 0x4e, 0x17, 0xeb, 0x35,
	0x0a, 0xae, 0xe3, 0x1d, 0xd4, 0x4d, 0xbb, 0xa7, 0xc6, 0xef, 0x86, 0x97, 0xf3, 0x6a, 0x40, 0x06,
	0xae, 0xa2, 0xb1, 0xfc, 0xd6, 0x6b, 0x30, 0x19, 0x23, 0x5b, 0x2e, 0x25, 0xd6, 0x17, 0x06, 0x1d,
	0x3d, 0x8f, 0x97, 0x53, 0xb4, 0x7f, 0xaa, 0x04, 0xa7, 0x52, 0x0d, 0xc9, 0xe3, 0x2e, 0xa4, 0xb7,
	0x62, 0x0b, 0xe9, 0x53, 0xf9, 0x2d, 0xd8, 0xca, 0xe2, 0xd9, 0x49, 0x2c, 0x9e, 0xeb, 0xf9, 0xb1,
	0x1d, 0x51, 0x47, 0x7c, 0x19, 0xfd, 0xe5, 0x02, 0xdc, 0x3f, 0xa4, 0xdc, 0x11, 0xc4, 0xce, 0x30,
	0xeb, 0x6f, 0x2b, 0xcb, 0x90, 0xa9, 0x66, 0x3f, 0x77, 0xbc, 0x5d, 0x38, 0x6a, 0x49, 0xde, 0xd1,
	0xb4, 0x6b, 0xff, 0x8f, 0x12, 0xdc, 0x77, 0xe4, 0xd8, 0x10, 0x49, 0x28, 0xe6, 0x66, 0xd1, 0x51,
	0x84, 0x80, 0x19, 0xd5, 0x7d, 0x82, 0xaa, 0x7d, 0x33, 0x50, 0xc9, 0x52, 0xa3, 0xe4, 0xb0, 0x91,
	0xbe, 0x3a, 0xde, 0xbc, 0x99, 0x57, 0x83, 0x0e, 0x58, 0x3e, 0xa6, 0x17, 0x17, 0x94, 0x18, 0x3a,
	0x44, 0x3c, 0xe1, 0xeb, 0x5c, 0x51, 0x65, 0x03, 0xcb, 0x22, 0xcd, 0x6d, 0xfd, 0x9f, 0x02, 0xcc,
	0xa5, 0x21, 0x41, 0x2e, 0x54, 0x6c, 0xab, 0x67, 0x85, 0x42, 0xf1, 0xff, 0xee, 0x31, 0xb6, 0x70,
	0xfe, 0x1a, 0xc5, 0x2c, 0xcc, 0x46, 0x34, 0x81, 0xfa, 0x50, 0xf3, 0x59, 0xe8, 0x04, 0x61, 0x29,
	0xf8, 0xf4, 0x71, 0x56, 0xc9, 0xc3, 0x32, 0xf0, 0x4a, 0x65, 0x55, 0xd4, 0x8a, 0x14, 0xb5, 0x26,
	0x17, 0xb7, 0x7a, 0x0d, 0x26, 0x63, 0x58, 0x73, 0xcd, 0xb9, 0x5f, 0xd3, 0x60, 0x3a, 0xc1, 0xaa,
	0xa5, 0x9f, 0x9e, 0xa6, 0xf8, 0xe9, 0xe5, 0x0f, 0x9a, 0xc2, 0x2d, 0x65, 0x25, 0x69, 0x29, 0x1b,
	0x1d, 0xef, 0x29, 0xcd, 0xe6, 0x58, 0x49, 0xb5, 0x39, 0xb6, 0xff, 0x7a, 0x15, 0xaa, 0x5c, 0x3a,
	0x39, 0x3e, 0x99, 0xf6, 0x62, 0x4c, 0xa6, 0x7d, 0x2a, 0x8b, 0x68, 0xa4, 0xea, 0x7f, 0x96, 0x12,
	0x82, 0xed, 0x27, 0xb3, 0x21, 0x88, 0x33, 0xc5, 0x3f, 0x2d, 0x72, 0x0d, 0x4d, 0xda, 0x69, 0x63,
	0x99, 0x08, 0x92, 0x7e, 0x98, 0xcd, 0x86, 0xa5, 0xb6, 0x70, 0x7e, 0xc3, 0xf5, 0x43, 0x9d, 0x01,
	0xc7, 0x62, 0x82, 0x15, 0xe3, 0x31, 0xc1, 0xc8, 0x38, 0x73, 0xab, 0xa1, 0x94, 0x62, 0xa3, 0x0c,
	0x74, 0x36, 0xd2, 0x1a, 0xad, 0x6d, 0x08, 0x0b, 0x8a, 0x9a, 0x85, 0x1e, 0x87, 0x29, 0xdb, 0x35,
	0xcc, 0x6d, 0xc3, 0x36, 0x9c, 0x2e, 0x45, 0xc2, 0x06, 0x30, 0x91, 0x8b, 0x1e, 0x81, 0x49, 0xa9,
	0x7f, 0xa2, 0x53, 0x87, 0x9d, 0x5c, 0x27, 0x44, 0x26, 0x65, 0x62, 0x4f, 0xc1, 0x4c, 0x80, 0x03,
	0x32, 0xde, 0x1d, 0x63, 0x67, 0xc7, 0x72, 0x08, 0x3f, 0x67, 0xa7, 0xd8, 0x69, 0x9e, 0xbf, 0xc0,
	0xb3, 0xd1, 0x45, 0xb8, 0x9f, 0xd4, 0xd0, 0x11, 0x55, 0x70, 0x81, 0xa2, 0xe3, 0x1b, 0xce, 0x2e,
	0x0e, 0xa8, 0x3a, 0xa0, 0xae, 0x37, 0x49, 0x91, 0x45, 0x5e, 0x82, 0x0b, 0x10, 0xf4, 0x3b, 0xd5,
	0x8b, 0x11, 0x12, 0xa5, 0x1e, 0xae, 0x5a, 0x50, 0xa3, 0xa1, 0xdf, 0xba, 0xae, 0xcd, 0x67, 0x8b,
	0x4c, 0xb3, 0xd3, 0xbd, 0x1f, 0x72, 0xe5, 0x37, 0xfd, 0x4d, 0xe6, 0x39, 0x0b, 0x52, 0xd6, 0xa1,
	0x9f, 0x4a, 0x6a, 0xdc, 0x32, 0x5a, 0x89, 0x30, 0xd8, 0xd1, 0xcf, 0x4c, 0x01, 0x4e, 0xb5, 0x48,
	0xe4, 0x63, 0xeb, 0x9f, 0x45, 0x3a, 0xfa, 0x03, 0x38, 0xad, 0x92, 0xad, 0x13, 0xdd, 0x73, 0x65,
	0xcc, 0xf0, 0x8d, 0x1c, 0x13, 0x6c, 0xfe, 0x9a, 0xd2, 0x77, 0xe1, 0x7b, 0x7c, 0x2a, 0x36, 0x2a,
	0x02, 0x7b, 0x6b, 0x11, 0x4e, 0xa6, 0x94, 0x26, 0xcd, 0x26, 0x07, 0x1a, 0x75, 0xe3, 0xa9, 0x91,
	0x0c, 0x3a, 0x56, 0x53, 0x50, 0x58, 0xdb, 0xe0, 0xe4, 0x29, 0x58, 0x1b, 0xed, 0x6f, 0x91, 0x6e,
	0x30, 0x6f, 0xc4, 0x31, 0xd7, 0xe7, 0x42, 0xcc, 0xee, 0xf3, 0x6c, 0x06, 0x0f, 0xc8, 0xa4, 0xd1,
	0x47, 0xae, 0xa1, 0x62, 0xb4, 0x86, 0xc6, 0x37, 0x04, 0x7d, 0xa7, 0x08, 0xa7, 0x52, 0x5d, 0x23,
	0x8f, 0x8f, 0x01, 0x5d, 0x8d, 0x31, 0xa0, 0x57, 0xf2, 0x7b, 0x69, 0xaa, 0xec, 0xe8, 0x9d, 0x04,
	0x3b, 0x7a, 0x75, 0x1c, 0x74, 0x71, 0xe6, 0xf4, 0x73, 0x42, 0x7d, 0xfc, 0x14, 0xcc, 0x98, 0x38,
	0xb0, 0x7c, 0x6c, 0x76, 0xb8, 0x53, 0x68, 0xc0, 0x0d, 0x2a, 0xd3, 0x3c, 0x9f, 0xe3, 0x8b, 0x73,
	0x9b, 0x42, 0x82, 0xdb, 0x5c, 0x81, 0x09, 0xcf, 0x35, 0x3b, 0x63, 0x99, 0x54, 0x1a, 0x9e, 0x6b,
	0x6e, 0x71, 0xc0, 0x96, 0x29, 0xd7, 0xcc, 0x53, 0x30, 0xd3, 0xed, 0xfb, 0x3e, 0x39, 0x5a, 0x24,
	0x5b, 0xc6, 0xf3, 0x65, 0xcb, 0xce, 0xc1, 0x49, 0x77, 0x9b, 0x9c, 0x6c, 0xb1, 0xd9, 0x51, 0x3c,
	0x52, 0x98, 0x0a, 0x06, 0x89, 0x4f, 0x57, 0xe4, 0x97, 0xf6, 0xbf, 0x2b, 0x02, 0x44, 0x4e, 0xbf,
	0xc7, 0x37, 0xec, 0x6f, 0xc6, 0x86, 0xfd, 0x99, 0x8c, 0x4e, 0xc7, 0xea, 0x58, 0x5f, 0x4e, 0x8c,
	0xf5, 0x7c, 0x66, 0x1c, 0x1f, 0x0f, 0xb0, 0x32, 0xc0, 0x7f, 0x5c, 0x24, 0xcc, 0x41, 0x78, 0xe6,
	0x1f, 0xdb, 0xf8, 0xbe, 0x11, 0x1b, 0xdf, 0x4f, 0x66, 0xbb, 0x25, 0xa0, 0x0e, 0xef, 0x4a, 0x62,
	0x78, 0x9f, 0xcd, 0x8a, 0x22, 0x3e, 0xba, 0xfb, 0x7c, 0x70, 0xd5, 0x11, 0xd3, 0x46, 0x8c, 0x58,
	0x61, 0xdc, 0x11, 0xfb, 0x5a, 0xb4, 0x8f, 0x9d, 0x87, 0xa6, 0x18, 0x32, 0xa7, 0xdf, 0xdb, 0x26,
	0xbb, 0x33, 0x33, 0x11, 0x61, 0x93, 0x0f, 0xdd, 0x69, 0xfe, 0xfd, 0x3a, 0xfd, 0xbc, 0x29, 0xbe,
	0x92, 0x11, 0xe4, 0x10, 0x3d, 0x2b, 0x88, 0x80, 0x98, 0x65, 0x16, 0xb1, 0x4f, 0xeb, 0xca, 0x17,
	0x52, 0x95, 0x98, 0xb7, 0x03, 0x55, 0xb1, 0x3d, 0xfa, 0x34, 0xff, 0x9e, 0xa8, 0xaa, 0xfd, 0x3b,
	0x00, 0x10, 0xdd, 0xac, 0xf8, 0xb3, 0x59, 0xdc, 0x51, 0xfd, 0xea, 0xe8, 0x6f, 0x24, 0x46, 0xff,
	0x7c, 0x56, 0x1c, 0xd1, 0xcf, 0xc4, 0x44, 0xf8, 0x7a, 0xe5, 0xde, 0x5c, 0xe6, 0xe8, 0x69, 0x98,
	0xed, 0x59, 0x4e, 0xc7, 0xc7, 0x86, 0x79, 0x18, 0xb3, 0x8b, 0x97, 0xf5, 0xe9, 0x9e, 0xe5, 0xe8,
	0x24, 0x9f, 0x5b, 0xc4, 0xd1, 0x4b, 0x70, 0xda, 0xc7, 0x07, 0x16, 0x15, 0x0f, 0xf7, 0x2c, 0x72,
	0x02, 0x3e, 0xec, 0xd0, 0x43, 0x1c, 0x17, 0xa9, 0xe6, 0xc4, 0xd7, 0x55, 0xf6, 0x91, 0x9e, 0xaf,
	0xd0, 0x69, 0xa8, 0x78, 0x46, 0x3f, 0xa0, 0xb1, 0x12, 0xb5, 0x27, 0x6b, 0x3a, 0x4f, 0xa1, 0xcf,
	0x41, 0x83, 0xec, 0x79, 0xdb, 0x46, 0x77, 0xbf, 0x13, 0xba, 0xfc, 0x1e, 0xce, 0x6b, 0x79, 0x46,
	0x6b, 0x5e, 0xe7, 0xf0, 0xcc, 0x09, 0x45, 0x07, 0x81, 0x6f, 0xcb, 0x45, 0x17, 0xe0, 0x3e, 0xcf,
	0x77, 0xa9, 0x18, 0x35, 0x68, 0xf7, 0xaf, 0xd1, 0xe6, 0x9e, 0x11, 0x05, 0x12, 0x96, 0x7f, 0xf4,
	0x59, 0xa8, 0x05, 0xa1, 0x6f, 0x84, 0x78, 0xf7, 0x90, 0x5f, 0xcf, 0x79, 0x23, 0x57, 0xb3, 0xd4,
	0x59, 0xc0, 0xd0, 0xe8, 0x12, 0x61, 0xeb, 0x67, 0x35, 0x40, 0x83, 0x05, 0x52, 0x0f, 0x1f, 0xfb,
	0x30, 0x45, 0x7a, 0x64, 0x39, 0xbb, 0x1d, 0x1e, 0xc2, 0xb2, 0x90, 0x41, 0xb7, 0x9a, 0x46, 0x24,
	0xcb, 0xd9, 0x65, 0xe1, 0x25, 0x95, 0x70, 0x05, 0x93, 0xbe, 0xfa, 0xa1, 0xd5, 0x81, 0x33, 0x47,
	0x94, 0x44, 0x4f, 0xc0, 0x74, 0xcf, 0xb8, 0xdd, 0xe9, 0x3b, 0xc6, 0x81, 0x61, 0x31, 0xd3, 0x33,
	0x6b, 0xe6, 0x54, 0xcf, 0xb8, 0x7d, 0x23, 0xca, 0x25, 0xf2, 0x2a, 0x29, 0x18, 0xf4, 0x7d, 0xa9,
	0x98, 0xab, 0xf5, 0x8c, 0xdb, 0x9b, 0x24, 0xdd, 0x7a, 0x06, 0xa6, 0xe2, 0xe3, 0x45, 0x26, 0xb8,
	0x98, 0x31, 0xdc, 0xae, 0x27, 0xd3, 0xad, 0x6f, 0x14, 0x60, 0x26, 0xb9, 0x9a, 0x8e, 0xda, 0x5e,
	0xb4, 0xa3, 0xb6, 0x17, 0x56, 0x03, 0x5f, 0x65, 0x8c, 0x85, 0xc9, 0x34, 0x59, 0x89, 0x8c, 0xaa,
	0xca, 0x4a, 0x64, 0x0c, 0x6b, 0x9a, 0xe7, 0xcb, 0x95, 0xf8, 0x2c, 0x20, 0xd9, 0xc9, 0xa8, 0x30,
	0x5b, 0x25, 0xb3, 0xf2, 0x8b, 0x2c, 0xfe, 0x3c, 0xcc, 0x29, 0xb4, 0x8a, 0x00, 0xd8, 0x2a, 0x39,
	0xa9, 0x7c, 0x93, 0x20, 0xc7, 0xed, 0x86, 0xf3, 0x43, 0x25, 0x68, 0x28, 0x37, 0xb6, 0x8e, 0x8f,
	0xb9, 0x2e, 0xc4, 0x98, 0xeb, 0xb3, 0x59, 0xaf, 0x8c, 0xa9, 0xdc, 0xf5, 0x4a, 0x82, 0xbb, 0x9e,
	0xcb, 0x8e, 0x24, 0xce, 0x54, 0x7f, 0xfd, 0x1e, 0x95, 0x9d, 0xd0, 0xc3, 0x91, 0xe5, 0x47, 0x51,
	0xbf, 0x09, 0x9b, 0x0e, 0xd5, 0xbf, 0xdd, 0x1d, 0xf1, 0xea, 0x07, 0x0a, 0x30, 0xa1, 0x5e, 0xfc,
	0x1a, 0x77, 0x1e, 0x9c, 0xe5, 0xbe, 0x29, 0x64, 0x69, 0x62, 0x41, 0x38, 0x35, 0x0b, 0x7d, 0x1a,
	0xc0, 0x33, 0x7c, 0xa3, 0x87, 0x43, 0xec, 0x07, 0x5c, 0x07, 0xfc, 0x6a, 0xe6, 0x0b, 0x69, 0xf3,
	0x1b, 0x12, 0x96, 0x9d, 0x26, 0x15, 0x64, 0xad, 0x8b, 0x30, 0x9d, 0xf8, 0x9c, 0xeb, 0x14, 0xf9,
	0x2b, 0x05, 0x28, 0xd3, 0x2b, 0xa9, 0xe3, 0x76, 0x3e, 0x32, 0x29, 0x14, 0x62, 0xc6, 0x47, 0xc5,
	0x08, 0x51, 0x8c, 0x1b, 0x21, 0xde, 0x94, 0xa1, 0x77, 0x4b, 0x19, 0x6e, 0x50, 0xd1, 0xc6, 0x71,
	0xe5, 0x88, 0x88, 0xbd, 0xfb, 0x04, 0x4c, 0xef, 0x58, 0x7e, 0x10, 0x0e, 0xb8, 0xf7, 0x4f, 0xd1,
	0xec, 0xc8, 0xb7, 0xff, 0x31, 0x98, 0xb2, 0x8d, 0x58, 0x39, 0xe6, 0xdf, 0x3f, 0x49, 0x72, 0xa3,
	0x62, 0x73, 0x50, 0xa6, 0xee, 0xcb, 0x74, 0x9b, 0x2d, 0xeb, 0x2c, 0x21, 0x37, 0x9d, 0x5a, 0xb4,
	0xe9, 0xb4, 0xdf, 0x80, 0x86, 0xd2, 0x20, 0xaa, 0x9e, 0x72, 0x7b, 0x9e, 0xeb, 0x60, 0x47, 0xf8,
	0x9f, 0x46, 0x19, 0x04, 0xc1, 0x9e, 0x1b, 0x84, 0xc2, 0x05, 0x95, 0xfc, 0x6e, 0xff, 0x17, 0x0d,
	0xaa, 0x22, 0x26, 0xfa, 0x55, 0xa8, 0x77, 0xbd, 0x7e, 0xa7, 0x4f, 0x89, 0xa4, 0x65, 0xe0, 0x6a,
	0x1c, 0x90, 0xea, 0x15, 0x36, 0x5c, 0xcb, 0x09, 0xf5, 0x5a, 0xd7, 0xeb, 0xdf, 0xa0, 0x54, 0x7d,
	0x07, 0x26, 0x98, 0x87, 0x07, 0xc7, 0x57, 0x18, 0x0b, 0x5f, 0x83, 0xe1, 0xa0, 0x28, 0x5b, 0x6f,
	0x30, 0xd5, 0x04, 0xfd, 0x42, 0xba, 0x1a, 0x51, 0x91, 0xfb, 0x67, 0x86, 0x2a, 0x05, 0xa3, 0x09,
	0x56, 0xe4, 0x13, 0xac, 0xfd, 0x0d, 0x0d, 0x1e, 0x1a, 0x88, 0x5e, 0x82, 0x77, 0x2d, 0x7a, 0xb1,
	0x2e, 0x4b, 0x40, 0x60, 0xca, 0x1f, 0x0a, 0x8a, 0xee, 0xeb, 0x41, 0x00, 0xcb, 0xc4, 0x4e, 0x68,
	0xed, 0x58, 0x58, 0x68, 0x0b, 0x95, 0x1c, 0x2a, 0x4e, 0xd9, 0xfd, 0x5d, 0x4b, 0xf8, 0x6f, 0xf0,
	0x14, 0x3a, 0x03, 0x55, 0xea, 0xd5, 0xb0, 0xbb, 0xcd, 0x67, 0x4a, 0x85, 0x24, 0xaf, 0x6c, 0x13,
	0x8e, 0x87, 0x1d, 0xd3, 0x23, 0x5d, 0x14, 0x0f, 0x12, 0x88, 0x74, 0xfb, 0x1d, 0x78, 0x38, 0xd9,
	0xfa, 0x1b, 0xce, 0x1d, 0xb5, 0xbf, 0xfd, 0x15, 0x0d, 0x1e, 0x4d, 0x0f, 0xb8, 0x72, 0x47, 0x64,
	0x51, 0xba, 0x57, 0x8c, 0x75, 0x6f, 0xe8, 0x8b, 0x07, 0xed, 0x10, 0x1e, 0x4f, 0x6d, 0xcc, 0x1d,
	0xf6, 0x72, 0xf8, 0x65, 0x8e, 0xf6, 0x1f, 0x14, 0x65, 0xa8, 0x14, 0x76, 0x0d, 0x6b, 0x4c, 0xce,
	0x73, 0x3d, 0x66, 0x63, 0xbc, 0x90, 0xf9, 0x56, 0x5a, 0x2c, 0xa1, 0x38, 0x7f, 0x7e, 0xbb, 0x00,
	0x33, 0xc9, 0x4f, 0x94, 0x35, 0xec, 0xe1, 0xee, 0xbe, 0x30, 0xfa, 0xd1, 0x04, 0xe1, 0x2b, 0xf4,
	0x47, 0xc7, 0x72, 0x42, 0xec, 0x1f, 0x18, 0x42, 0x11, 0x3b, 0x49, 0x73, 0xd7, 0x78, 0x26, 0x29,
	0x46, 0x6f, 0xa8, 0x45, 0xc5, 0x18, 0x31, 0x26, 0x69, 0xae, 0x2c, 0xb6, 0x0a, 0x75, 0x1f, 0x77,
	0xb1, 0x75, 0x40, 0x36, 0x87, 0x52, 0x86, 0x50, 0x22, 0x2c, 0x74, 0x0d, 0x07, 0xd1, 0x23, 0x60,
	0xf4, 0x1e, 0x94, 0x0e, 0x0c, 0x5f, 0xf8, 0xe4, 0x2d, 0x8f, 0x4f, 0x92, 0xf9, 0x9b, 0x86, 0xd8,
	0x6c, 0x28, 0xc6, 0xd6, 0x2b, 0x50, 0x97, 0x59, 0xb9, 0x36, 0x98, 0x9f, 0x2e, 0x43, 0x5d, 0x5e,
	0xe2, 0x1b, 0x77, 0xa8, 0x57, 0x63, 0x43, 0xfd, 0x52, 0xb6, 0x1b, 0x83, 0xd1, 0x2f, 0x65, 0x90,
	0x7f, 0xa8, 0x04, 0x93, 0xb1, 0x7c, 0xf4, 0xf9, 0x98, 0xf6, 0xa1, 0x38, 0xd2, 0xef, 0xe3, 0x08,
	0xfc, 0xf3, 0xf1, 0x4b, 0x34, 0x91, 0xdc, 0x14, 0xbb, 0x0e, 0x53, 0x48, 0x5c, 0x87, 0x91, 0xd3,
	0xab, 0x38, 0x7c, 0x7a, 0x95, 0xb2, 0x4d, 0xaf, 0xf2, 0xc8, 0xe9, 0x55, 0xb9, 0x93, 0xe9, 0xa5,
	0xf3, 0xe9, 0xc5, 0x5c, 0x2a, 0x2f, 0x8d, 0x45, 0xa6, 0xe4, 0xc4, 0x7a, 0x0d, 0x26, 0xc7, 0xbf,
	0xde, 0x33, 0xf6, 0xac, 0xfc, 0xb1, 0x12, 0xd4, 0xc4, 0x95, 0xd0, 0x71, 0x27, 0xe5, 0xe5, 0xd8,
	0xa4, 0x7c, 0x21, 0xd3, 0xf5, 0x53, 0xf9, 0x43, 0x99, 0x92, 0x7f, 0x5a, 0x80, 0x09, 0x35, 0x7b,
	0xa8, 0x3e, 0xec, 0x3e, 0xa8, 0x11, 0x29, 0x5c, 0x99, 0x4c, 0x55, 0xcf, 0x35, 0xbf, 0x0b, 0xe7,
	0xd2, 0x46, 0x6c, 0x2e, 0xbd, 0x9e, 0x9f, 0x7a, 0xc7, 0xc7, 0xa2, 0xde, 0x81, 0xc9, 0x58, 0x33,
	0x49, 0x51, 0x1a, 0xc1, 0x43, 0x30, 0xfd, 0x40, 0xdc, 0x30, 0x0c, 0x5d, 0xee, 0xb9, 0x50, 0x08,
	0x5d, 0x32, 0x4c, 0x8e, 0x1b, 0x93, 0x44, 0x64, 0xba, 0x7d, 0x00, 0x25, 0x1a, 0xe6, 0x60, 0xcc,
	0xa9, 0xf5, 0x0a, 0x94, 0xfd, 0xbe, 0x8d, 0x85, 0x61, 0x75, 0x44, 0x98, 0x86, 0xbe, 0x8d, 0x75,
	0x56, 0xbe, 0xfd, 0x2d, 0x0d, 0x1a, 0x6a, 0xc8, 0x82, 0x31, 0xeb, 0x7f, 0x13, 0x6a, 0x41, 0x9f,
	0x9a, 0xe1, 0x45, 0x13, 0x46, 0x38, 0xe6, 0xb1, 0xc2, 0xba, 0x84, 0x42, 0x57, 0xa0, 0x46, 0x03,
	0x31, 0xf8, 0x78, 0x27, 0x93, 0xaa, 0x31, 0xe9, 0x9f, 0x55, 0x25, 0xd0, 0x3a, 0xde, 0x69, 0x7f,
	0x19, 0x1a, 0x4a, 0x80, 0x86, 0xbb, 0x4e, 0xd0, 0x7f, 0xad, 0x01, 0x1a, 0x0c, 0x10, 0xf1, 0x3d,
	0x40, 0xd7, 0x5f, 0xd1, 0xa0, 0x44, 0x3a, 0x4a, 0xd7, 0x05, 0xf6, 0xb7, 0xa5, 0x1b, 0x30, 0x4d,
	0xa0, 0x07, 0x00, 0x0c, 0xcf, 0xea, 0xec, 0xfa, 0x6e, 0xdf, 0x13, 0xee, 0x3a, 0x75, 0xc3, 0xb3,
	0xae, 0xd0, 0x0c, 0x22, 0xe1, 0xa9, 0xce, 0x3a, 0xf4, 0x6b, 0xe4, 0x5f, 0xf3, 0x18, 0x4c, 0x49,
	0xc7, 0x09, 0xe6, 0x62, 0x5c, 0xa2, 0x45, 0x26, 0x45, 0x2e, 0xbd, 0x64, 0x83, 0x9e, 0x86, 0x59,
	0xc7, 0x75, 0x3a, 0xb2, 0x68, 0xdf, 0xb7, 0x85, 0x11, 0x7f, 0xda, 0x71, 0x1d, 0xa1, 0xc3, 0xb9,
	0xe1, 0xdb, 0x41, 0xdb, 0x86, 0x2a, 0x27, 0x46, 0xaa, 0x3f, 0xc8, 0xfd, 0x50, 0x97, 0xcd, 0x15,
	0x9b, 0xac, 0x68, 0x6d, 0xfe, 0xa7, 0xc0, 0xda, 0xbf, 0x59, 0x87, 0x0a, 0x0b, 0x97, 0x31, 0xee,
	0x48, 0xbf, 0x1e, 0xdb, 0x1c, 0x9e, 0xcc, 0x10, 0x98, 0x63, 0x3e, 0xd5, 0x27, 0xb9, 0x98, 0xc1,
	0x27, 0x59, 0xc0, 0xc7, 0xf5, 0x3f, 0x3f, 0x5e, 0xc9, 0x60, 0x5e, 0xd9, 0x84, 0xc6, 0x8e, 0x65,
	0x63, 0x75, 0x9c, 0x47, 0x87, 0xe3, 0x91, 0xad, 0x9d, 0xbf, 0x6c, 0xd9, 0x98, 0xd2, 0x58, 0x87,
	0x1d, 0xf1, 0x33, 0x40, 0x4b, 0x50, 0xdd, 0x36, 0xba, 0xfb, 0xd8, 0x31, 0xb3, 0xb9, 0xae, 0x84,
	0x46, 0xb0, 0xb7, 0xc8, 0x00, 0x74, 0x01, 0x49, 0x5b, 0xcd, 0x8d, 0x21, 0x7c, 0x7c, 0x64, 0x1a,
	0x3d, 0x0e, 0xd3, 0xfd, 0x00, 0x77, 0x8c, 0x7e, 0xe8, 0x76, 0x3c, 0x1f, 0xef, 0x58, 0xb7, 0xc5,
	0x6e, 0xd5, 0x0f, 0xf0, 0x42, 0x3f, 0x74, 0x37, 0x68, 0xe6, 0xe0, 0x4d, 0xdd, 0xca, 0x9d, 0xdc,
	0xd4, 0x6d, 0xfd, 0x82, 0x06, 0x75, 0xd9, 0x63, 0xea, 0x6a, 0x61, 0x84, 0x7b, 0x62, 0x1a, 0x92,
	0xdf, 0x54, 0x65, 0x60, 0xec, 0x8a, 0xf5, 0x42, 0x7f, 0xa3, 0x2e, 0xcc, 0xf8, 0x98, 0x1c, 0xb0,
	0x2c, 0xd7, 0x51, 0x7d, 0x5c, 0x47, 0x19, 0x4e, 0x54, 0x3a, 0xeb, 0x02, 0x01, 0x73, 0x7f, 0xd5,
	0xa7, 0xfd, 0x78, 0x46, 0xeb, 0x97, 0x0b, 0x30, 0x9d, 0x28, 0x44, 0xd6, 0xc4, 0x3e, 0xc6, 0x5e,
	0xc7, 0x36, 0x82, 0x90, 0xeb, 0xcc, 0x6a, 0x24, 0xe3, 0x9a, 0xc1, 0x5e, 0xbc, 0xa1, 0x1f, 0xf7,
	0xdc, 0xbe, 0xcf, 0xef, 0xde, 0x96, 0x75, 0x20, 0x59, 0xab, 0x34, 0x87, 0x30, 0x00, 0x5a, 0xc0,
	0x34, 0x2c, 0xfb, 0x90, 0xab, 0x7e, 0x29, 0xbe, 0x65, 0x92, 0x21, 0xe1, 0x6f, 0x61, 0xbc, 0x6f,
	0x1f, 0x72, 0x6d, 0x2f, 0x85, 0x78, 0x97, 0xe6, 0xa0, 0x87, 0x61, 0x82, 0x16, 0xe8, 0xb9, 0x4e,
	0xb8, 0x67, 0x1f, 0x72, 0xf5, 0x2e, 0x05, 0x5a, 0x67, 0x59, 0x12, 0xc7, 0x21, 0x36, 0x48, 0x1b,
	0x2a, 0x11, 0x8e, 0x4f, 0xd3, 0x1c, 0xd9, 0x03, 0x4a, 0xd3, 0x2a, 0xbb, 0x86, 0x4d, 0x32, 0xb6,
	0x08, 0x5d, 0xe7, 0xa0, 0xec, 0xf9, 0x7d, 0x87, 0xe9, 0x67, 0x6a, 0x3a, 0x4b, 0x90, 0x93, 0xb0,
	0xe9, 0x1f, 0x76, 0xfc, 0xbe, 0x43, 0x8d, 0x13, 0x35, 0xbd, 0x62, 0xfa, 0x87, 0x7a, 0xdf, 0x69,
	0xfd, 0xcf, 0xc8, 0xfe, 0xf7, 0x34, 0xcc, 0x32, 0xf5, 0x11, 0x99, 0x6b, 0x7d, 0x4f, 0xbd, 0x72,
	0xca, 0xf4, 0x4a, 0x8b, 0x34, 0x9f, 0xba, 0xa9, 0x3f, 0x09, 0x33, 0x54, 0x83, 0xa4, 0x16, 0xe5,
	0x37, 0x4f, 0x49, 0xbe, 0x52, 0xf2, 0x22, 0xdc, 0x4f, 0x4b, 0xd2, 0x5b, 0xa5, 0x41, 0xb0, 0xd3,
	0xb7, 0x63, 0x40, 0xec, 0x5c, 0xde, 0x24, 0x45, 0x36, 0x65, 0x09, 0x05, 0xfc, 0x39, 0x98, 0x53,
	0x2b, 0x32, 0xfb, 0x5c, 0x7d, 0xc9, 0xef, 0xd9, 0x47, 0x95, 0x2d, 0xf3, 0x2f, 0x84, 0xc2, 0xbc,
	0x30, 0x53, 0x5e, 0x31, 0xc5, 0x46, 0x83, 0xe5, 0x2d, 0x91, 0xac, 0xf6, 0x7f, 0xaa, 0xd0, 0x00,
	0xc5, 0x72, 0x79, 0xa1, 0x79, 0x38, 0x29, 0xbc, 0x36, 0xd9, 0xdd, 0x7b, 0xd5, 0x7b, 0x66, 0x96,
	0x7f, 0x62, 0xde, 0x2b, 0x54, 0xa6, 0xbc, 0x0a, 0xe5, 0x6b, 0x6e, 0x97, 0x9f, 0x6f, 0x47, 0x3d,
	0xa1, 0xa1, 0xd6, 0x34, 0x4f, 0xc1, 0xc8, 0xe4, 0x5d, 0x3d, 0xa1, 0x97, 0x6d, 0x92, 0x40, 0x8b,
	0x50, 0xd8, 0x7c, 0x91, 0xcf, 0xfd, 0xe7, 0xb2, 0x63, 0xda, 0x7c, 0x91, 0xa3, 0x29, 0x04, 0x2f,
	0xa2, 0x15, 0x28, 0x5e, 0x59, 0xda, 0xe4, 0x9a, 0xc3, 0xe7, 0xb3, 0x23, 0xb9, 0xb2, 0xb4, 0xc9,
	0xb1, 0x14, 0x77, 0x97, 0x36, 0x49, 0xbf, 0x16, 0xbe, 0xd8, 0xf7, 0x85, 0x87, 0x77, 0x8e, 0x7e,
	0x51, 0x30, 0xd1, 0x2f, 0x83, 0x24, 0x08, 0xb2, 0xcd, 0x5b, 0xd6, 0x8e, 0x08, 0xbb, 0x97, 0x03,
	0x19, 0x05, 0x13, 0xc8, 0x02, 0x92, 0x68, 0xfd, 0x94, 0x06, 0x75, 0x49, 0xbb, 0x81, 0x2b, 0xf9,
	0xda, 0x1d, 0x5d, 0xc9, 0xa7, 0x77, 0xb7, 0xc4, 0x05, 0x7a, 0xe1, 0x36, 0x29, 0x33, 0xe8, 0x35,
	0xb0, 0xfe, 0xf6, 0x46, 0x74, 0xdb, 0x5e, 0x24, 0x5b, 0x5b, 0x50, 0x61, 0xa3, 0x10, 0xd3, 0x97,
	0x69, 0x71, 0x7d, 0x19, 0xbd, 0xdb, 0xd5, 0xef, 0xee, 0x63, 0xa1, 0xf1, 0xe4, 0x29, 0xaa, 0x94,
	0x63, 0x5c, 0x9a, 0x7b, 0x9d, 0xb3, 0x54, 0xeb, 0x55, 0xa8, 0xf2, 0x61, 0x51, 0x40, 0xb5, 0x23,
	0x40, 0x0b, 0x31, 0xd0, 0x05, 0xa8, 0xcb, 0x81, 0x60, 0x5a, 0x58, 0x7e, 0xb5, 0x29, 0xd2, 0xc2,
	0x8a, 0xa0, 0x0f, 0x43, 0x50, 0x48, 0xf2, 0x8f, 0x87, 0x62, 0xb1, 0x2e, 0xef, 0xcd, 0xb5, 0xbf,
	0x5e, 0x82, 0x2a, 0x8f, 0xd0, 0x35, 0xae, 0xc8, 0x70, 0x31, 0x26, 0x32, 0x3c, 0x95, 0x25, 0x18,
	0x58, 0xba, 0xbb, 0x67, 0x16, 0xbf, 0x0e, 0x89, 0x20, 0x2e, 0x34, 0xfc, 0xbe, 0xa6, 0x08, 0x0d,
	0x62, 0xfb, 0xd5, 0x12, 0xdb, 0xef, 0x05, 0xb8, 0x8f, 0xde, 0xe3, 0xa1, 0xe1, 0x29, 0x92, 0xd6,
	0x63, 0xc6, 0x1c, 0xcf, 0x88, 0x02, 0x49, 0xeb, 0xf1, 0xb3, 0x80, 0xba, 0xae, 0xc3, 0x4c, 0x37,
	0xdd, 0xc3, 0xf8, 0x9d, 0x8f, 0x59, 0xe5, 0x0b, 0xdf, 0xc3, 0xe8, 0x94, 0x0c, 0x3c, 0x22, 0x4a,
	0x94, 0x28, 0x3b, 0x17, 0xc9, 0xd8, 0xd5, 0xf7, 0x72, 0x8e, 0xd0, 0x05, 0x12, 0xaa, 0xf5, 0x7d,
	0x72, 0x43, 0x58, 0x96, 0x41, 0x03, 0xb2, 0x84, 0xdc, 0x4d, 0x8a, 0xd4, 0x22, 0xc4, 0xc0, 0x33,
	0x80, 0xd8, 0x06, 0xc0, 0xe9, 0xa4, 0x6e, 0x16, 0x74, 0x13, 0x11, 0xce, 0x1d, 0x84, 0xdf, 0xb7,
	0xbf, 0x5a, 0x80, 0x9a, 0x08, 0xa8, 0x76, 0x37, 0x66, 0x8c, 0xa8, 0x4b, 0x99, 0x31, 0xcb, 0x89,
	0x19, 0xf3, 0x4c, 0x26, 0x04, 0xc9, 0x29, 0xf3, 0x59, 0x49, 0xc6, 0x47, 0x60, 0x32, 0x16, 0x78,
	0x89, 0xef, 0xa9, 0x13, 0x6a, 0xcc, 0xa5, 0x23, 0x6e, 0x41, 0x1f, 0x75, 0x31, 0xe5, 0xbf, 0xd7,
	0x61, 0x42, 0x6d, 0x39, 0x99, 0x10, 0xf1, 0x0b, 0xa2, 0x22, 0x39, 0xd4, 0x9a, 0xbd, 0x11, 0x5d,
	0x70, 0x2d, 0xde, 0xd1, 0x8d, 0x14, 0x81, 0x06, 0xbd, 0x07, 0xd3, 0x22, 0x34, 0x1d, 0xdf, 0x49,
	0xb3, 0xd9, 0x6b, 0x69, 0xd1, 0x18, 0x87, 0x9e, 0x12, 0x78, 0xb8, 0x7b, 0xea, 0x17, 0x92, 0xd1,
	0x7c, 0xca, 0x19, 0xee, 0x0e, 0xab, 0x34, 0x1a, 0x19, 0xd2, 0xe7, 0x55, 0x28, 0x59, 0x8e, 0x25,
	0xb6, 0xab, 0xc7, 0x46, 0xc4, 0xae, 0xb3, 0xb8, 0xae, 0x8a, 0x80, 0x90, 0x6e, 0x73, 0x99, 0x43,
	0x72, 0x87, 0x6a, 0x86, 0x6e, 0x33, 0xc9, 0x45, 0xcc, 0x7f, 0x8a, 0x6f, 0x6a, 0x3b, 0x96, 0x87,
	0xce, 0xc2, 0x84, 0xe9, 0x76, 0x1c, 0x37, 0xec, 0x50, 0x0f, 0x18, 0x2e, 0xd5, 0x81, 0xe9, 0x5e,
	0x77, 0xc3, 0x0d, 0x92, 0xc3, 0x6e, 0x29, 0x1b, 0x8e, 0xb9, 0x7d, 0xc8, 0x2f, 0xd1, 0x8a, 0x24,
	0x0d, 0xee, 0x11, 0xfa, 0xd8, 0xe8, 0x59, 0xce, 0x2e, 0xbf, 0x39, 0x1b, 0x65, 0xa0, 0xcf, 0x40,
	0x8d, 0x5e, 0xa3, 0x3d, 0xc0, 0x3e, 0x8f, 0xe5, 0x7a, 0x29, 0x3b, 0x2d, 0x45, 0x62, 0x81, 0x63,
	0x60, 0x3c, 0x44, 0xe0, 0x43, 0x57, 0x68, 0x24, 0x37, 0x8b, 0x0c, 0xd3, 0x44, 0xc6, 0x87, 0x9d,
	0x7b, 0xae, 0xb3, 0xb0, 0x8b, 0x1d, 0x46, 0x55, 0x01, 0x8d, 0xde, 0x56, 0x0f, 0xd4, 0x93, 0x19,
	0xa4, 0x9b, 0x51, 0x77, 0x5c, 0x16, 0xa0, 0x26, 0x9d, 0xd4, 0xa7, 0x32, 0x0c, 0xb4, 0x70, 0x5d,
	0xd7, 0x25, 0x18, 0x7a, 0x14, 0x26, 0xc5, 0x28, 0xfb, 0x44, 0x1a, 0xa4, 0xc1, 0x5f, 0xeb, 0x7a,
	0x3c, 0x13, 0xad, 0x41, 0x23, 0x74, 0x6d, 0x6e, 0x53, 0x0f, 0x9a, 0x33, 0x19, 0xe2, 0x43, 0x6f,
	0xc9, 0xf2, 0xba, 0x0a, 0x8b, 0xde, 0x87, 0x81, 0x10, 0x50, 0xcd, 0x59, 0x8a, 0x6f, 0x38, 0x2d,
	0xa8, 0xbc, 0x94, 0x64, 0xcb, 0x1f, 0x41, 0x34, 0xa9, 0x6d, 0x98, 0x4b, 0x9b, 0x0f, 0xe8, 0xad,
	0x88, 0xbd, 0x68, 0x59, 0xa4, 0x5b, 0x1e, 0x47, 0x92, 0xdb, 0xf8, 0x63, 0x8c, 0xa5, 0xfd, 0xab,
	0x05, 0x98, 0x8c, 0x85, 0xc7, 0x1c, 0x77, 0x73, 0x58, 0x8c, 0x6d, 0x0e, 0xf3, 0xd9, 0xe3, 0x71,
	0x2a, 0x3b, 0xc4, 0x5a, 0x62, 0x87, 0x78, 0x3e, 0x3b, 0x96, 0xbb, 0xba, 0x4d, 0xfc, 0xee, 0x04,
	0xcc, 0x0e, 0xf4, 0xe1, 0x9e, 0xd9, 0x2b, 0x70, 0x92, 0xa3, 0x33, 0x1b, 0xdf, 0x9b, 0xf9, 0x86,
	0x24, 0x33, 0x5b, 0x2f, 0x1f, 0x0b, 0x5b, 0xaf, 0x7c, 0x34, 0x6c, 0xbd, 0x3a, 0xc0, 0xd6, 0x77,
	0xa1, 0x16, 0xba, 0x9e, 0x6b, 0xbb, 0xbb, 0x87, 0x3c, 0x54, 0xf8, 0xd5, 0x9c, 0x84, 0x89, 0xe5,
	0x70, 0x65, 0xed, 0x16, 0x47, 0xa9, 0x4b, 0xe4, 0x64, 0x97, 0xc0, 0x8e, 0xb1, 0x6d, 0xe3, 0xcd,
	0xcd, 0x6b, 0x5c, 0x39, 0x10, 0x65, 0xa0, 0xf7, 0x61, 0x56, 0x89, 0xce, 0xcb, 0x58, 0x06, 0x8f,
	0x1d, 0x9e, 0x7b, 0x4b, 0x1f, 0xc4, 0x84, 0xde, 0x85, 0xc4, 0x3e, 0xcf, 0xb7, 0xa2, 0x3b, 0x16,
	0x17, 0x3e, 0xde, 0x81, 0xfe, 0x7f, 0xda, 0x81, 0xfe, 0x6e, 0x01, 0x3e, 0x31, 0x6c, 0xba, 0xa3,
	0xf7, 0xa0, 0xc2, 0x23, 0x3e, 0xb1, 0xed, 0xe2, 0xcd, 0x3b, 0x59, 0x4b, 0xf4, 0xa9, 0x2b, 0x8e,
	0x0f, 0x6d, 0x29, 0x01, 0xf5, 0x8e, 0x03, 0x2f, 0xbb, 0x12, 0xf5, 0x1e, 0x54, 0xba, 0xb6, 0x85,
	0x9d, 0x90, 0x33, 0xdb, 0x63, 0x68, 0x2f, 0xc3, 0xd7, 0xba, 0x92, 0xd8, 0x12, 0x68, 0x18, 0x2e,
	0x95, 0xf1, 0x6b, 0x09, 0xc6, 0x7f, 0xc4, 0x29, 0xbf, 0xfd, 0xc7, 0x45, 0x98, 0x4e, 0x44, 0x96,
	0x1e, 0x3f, 0xe0, 0x99, 0xba, 0x27, 0x3f, 0x9f, 0x27, 0x98, 0xb5, 0x7a, 0xd4, 0xbf, 0x9a, 0xd8,
	0x96, 0x5f, 0xcc, 0x87, 0x28, 0xbe, 0x31, 0x1f, 0xf0, 0x13, 0xff, 0x7d, 0x50, 0xbb, 0x65, 0x79,
	0xb8, 0xe3, 0xf6, 0x99, 0x12, 0xa6, 0xa6, 0x57, 0x49, 0xfa, 0xed, 0x7e, 0xc8, 0xb6, 0xdd, 0xa0,
	0xcf, 0x4f, 0xb3, 0x35, 0x9d, 0xa7, 0xd0, 0x6b, 0x50, 0x71, 0x7d, 0x6b, 0xd7, 0x72, 0x78, 0x3b,
	0x86, 0x07, 0xa2, 0x7c, 0x9b, 0x16, 0xd5, 0x39, 0x48, 0xeb, 0x6f, 0x6a, 0xf9, 0x24, 0x82, 0x87,
	0x61, 0x82, 0x6c, 0x21, 0x96, 0xb3, 0xab, 0x1e, 0xac, 0x1b, 0x3c, 0x8f, 0x16, 0x69, 0xc3, 0xa4,
	0xe8, 0x82, 0xaa, 0x74, 0x6d, 0xf0, 0x7e, 0xc4, 0x05, 0x8b, 0x52, 0xba, 0x60, 0x51, 0x8e, 0x09,
	0x16, 0xbf, 0x54, 0x80, 0x32, 0x0d, 0xfc, 0x7c, 0x37, 0x02, 0xb8, 0xd1, 0x8a, 0x94, 0x61, 0x5e,
	0x48, 0x0c, 0xf3, 0x53, 0xa3, 0xa1, 0xef, 0xaa, 0xd4, 0xf5, 0x47, 0x55, 0xa8, 0xcb, 0x36, 0xdf,
	0x33, 0xd2, 0xd6, 0xfb, 0xe9, 0xd2, 0xd6, 0xf9, 0x6c, 0xa4, 0xff, 0x5e, 0x95, 0xb2, 0x06, 0xe5,
	0x8f, 0xda, 0xb1, 0xcb, 0x1f, 0xf5, 0xe3, 0x93, 0x3f, 0xe0, 0x98, 0xe5, 0x8f, 0xc6, 0x31, 0xc9,
	0x1f, 0x13, 0x19, 0xe4, 0x8f, 0xc9, 0x63, 0x96, 0x3f, 0xa6, 0xee, 0x1d, 0xf9, 0x83, 0xf2, 0x43,
	0x1a, 0xcc, 0xfe, 0x6e, 0xf0, 0x43, 0x5a, 0xd1, 0xd8, 0xfc, 0x90, 0x42, 0xdf, 0x55, 0x7e, 0xf8,
	0x83, 0x15, 0xa8, 0xcb, 0x36, 0x7f, 0x77, 0xf3, 0x43, 0xd9, 0x8d, 0x91, 0xfc, 0x30, 0xc9, 0x7a,
	0xca, 0x03, 0xac, 0x47, 0xe1, 0x10, 0x95, 0xe3, 0xe3, 0x10, 0xd5, 0x63, 0xe6, 0x10, 0xb5, 0x63,
	0xe2, 0x10, 0xf5, 0x0c, 0x1c, 0x02, 0x8e, 0x99, 0x43, 0x34, 0xee, 0x21, 0x0e, 0xf1, 0x37, 0x0a,
	0x50, 0xe5, 0x0f, 0x56, 0xdc, 0x0d, 0xdf, 0x19, 0x5e, 0xd5, 0xd8, 0x76, 0x30, 0x0e, 0x7f, 0x57,
	0xf9, 0xc4, 0xff, 0xaa, 0x42, 0x43, 0x69, 0xf7, 0x3d, 0xc3, 0x29, 0x3a, 0xe9, 0x9c, 0xe2, 0x42,
	0xd6, 0x01, 0xf8, 0x58, 0x76, 0xfa, 0x58, 0x76, 0xfa, 0x58, 0x76, 0x3a, 0x92, 0x33, 0xfe, 0xed,
	0x02, 0xd4, 0xe5, 0x33, 0x3c, 0xe3, 0xf2, 0xc6, 0x4b, 0x31, 0xde, 0xf8, 0x74, 0xb6, 0x37, 0x7f,
	0x52, 0x43, 0x37, 0x64, 0xb9, 0xa3, 0x2a, 0x31, 0xdc, 0x55, 0xfe, 0xf8, 0x0f, 0xcb, 0x30, 0x19,
	0x6b, 0xfb, 0x98, 0x1c, 0xd2, 0x48, 0x7f, 0x17, 0xe5, 0xf5, 0xec, 0x44, 0xcb, 0x2d, 0xfd, 0x94,
	0x86, 0x49, 0x3f, 0xe5, 0xe3, 0x5b, 0xe3, 0x95, 0x63, 0x5e, 0xe3, 0xd5, 0x63, 0x5a, 0xe3, 0xb5,
	0x0c, 0x6b, 0xbc, 0x7e, 0xcc, 0x6b, 0x1c, 0xee, 0xa1, 0x35, 0xfe, 0x1f, 0xaa, 0x50, 0x13, 0x6f,
	0x64, 0xdd, 0x8d, 0x25, 0x2e, 0xea, 0x9a, 0x1f, 0xdb, 0xad, 0x23, 0xc2, 0x10, 0x5f, 0xe1, 0xdf,
	0x2a, 0x71, 0xbd, 0xa0, 0xe2, 0xcd, 0xab, 0x8d, 0xed, 0xcd, 0x4b, 0x18, 0x80, 0x11, 0xee, 0x09,
	0xcf, 0x58, 0x96, 0x40, 0x9f, 0x81, 0xda, 0x2d, 0xd7, 0xdf, 0xb7, 0x5d, 0x43, 0x78, 0x0a, 0x5f,
	0xca, 0xde, 0x5b, 0x36, 0xa6, 0x5b, 0x87, 0x1e, 0x36, 0x95, 0xb0, 0xae, 0x02, 0x1f, 0x7a, 0x10,
	0xc0, 0x73, 0xcd, 0xb7, 0x7d, 0xd3, 0x72, 0xe4, 0x9d, 0x17, 0x25, 0x87, 0xdd, 0xde, 0x60, 0xb7,
	0xb0, 0x06, 0x1e, 0x29, 0xfa, 0x02, 0xcc, 0xf0, 0xc7, 0xcd, 0x44, 0x94, 0x6b, 0xe1, 0x3a, 0xfc,
	0x52, 0xde, 0xf6, 0xd1, 0x71, 0x19, 0xc0, 0xd6, 0x7a, 0x1f, 0x4e, 0xa6, 0x34, 0x3f, 0xd5, 0xb5,
	0xfd, 0x88, 0x6b, 0xb0, 0x51, 0x9c, 0x42, 0x71, 0x0d, 0x36, 0xca, 0xb9, 0x37, 0x9d, 0x08, 0x7f,
	0x53, 0x1b, 0xfe, 0x58, 0x06, 0x7a, 0x9b, 0x5d, 0xbb, 0x11, 0x6e, 0xe8, 0xaf, 0xe6, 0x99, 0xb7,
	0xd4, 0x5d, 0xda, 0xf5, 0x69, 0x60, 0xdc, 0x80, 0xdd, 0xd8, 0x09, 0x5a, 0x5b, 0x30, 0xa1, 0x66,
	0xa7, 0xba, 0x6c, 0xa7, 0x6f, 0x4d, 0x2d, 0xa8, 0x49, 0x0f, 0x5c, 0x7e, 0xb7, 0x47, 0xa4, 0xdb,
	0x5f, 0x2b, 0x41, 0x85, 0xe9, 0xb2, 0xef, 0xc6, 0x01, 0x87, 0xd5, 0xa4, 0xac, 0xef, 0xd6, 0xd7,
	0x44, 0x48, 0xc6, 0xad, 0xe4, 0xd3, 0x9b, 0xda, 0x58, 0xa6, 0xfe, 0xc4, 0xe3, 0x9b, 0x2b, 0xca,
	0xab, 0xa0, 0xb9, 0x1d, 0xcb, 0xa2, 0x77, 0x41, 0x5f, 0x17, 0x6f, 0x2b, 0x16, 0x73, 0x69, 0xbe,
	0xf9, 0xeb, 0x8a, 0x8b, 0xd1, 0x0b, 0x89, 0xa5, 0x9c, 0xa7, 0x40, 0xf9, 0x46, 0xe2, 0xeb, 0xe2,
	0x85, 0xc6, 0x72, 0x2e, 0x5d, 0x13, 0x7f, 0xa3, 0x71, 0x55, 0x7d, 0x61, 0xb1, 0x92, 0x5b, 0xda,
	0x8a, 0x80, 0xdb, 0xff, 0xa6, 0x08, 0x35, 0xe1, 0xf2, 0x71, 0x37, 0xf6, 0x04, 0x51, 0xd7, 0xf8,
	0x7b, 0x42, 0x84, 0x21, 0xbe, 0x27, 0xfc, 0xa4, 0xf0, 0x0e, 0x7d, 0x04, 0x26, 0xa5, 0xf7, 0x9b,
	0xe2, 0x40, 0x3e, 0x21, 0x32, 0x29, 0x17, 0x35, 0xe1, 0x94, 0x78, 0x31, 0xb5, 0x23, 0x9d, 0xce,
	0xa3, 0x4e, 0xe4, 0xf7, 0x91, 0x39, 0x19, 0x0c, 0x66, 0xb6, 0xfe, 0xdc, 0xb1, 0x3f, 0x21, 0x25,
	0x39, 0x42, 0x31, 0x5d, 0x58, 0x2d, 0xc5, 0x85, 0x55, 0x0d, 0x6a, 0xe2, 0xac, 0x8a, 0x74, 0x22,
	0x0f, 0xf9, 0x96, 0x17, 0x8a, 0x00, 0xe2, 0x5a, 0x96, 0x40, 0x30, 0x14, 0x82, 0x31, 0x57, 0xda,
	0xcf, 0x89, 0x40, 0xc9, 0x21, 0x27, 0xdf, 0x88, 0x8c, 0xea, 0xc3, 0x6c, 0xe7, 0xb2, 0x11, 0x30,
	0xc2, 0x3b, 0x15, 0xc4, 0xf2, 0xda, 0x7f, 0x41, 0x83, 0x99, 0x64, 0xe5, 0xe8, 0x21, 0x68, 0xf0,
	0x2e, 0x28, 0xac, 0x12, 0x58, 0x16, 0x65, 0xf0, 0xd7, 0xe5, 0xa5, 0x9a, 0xe0, 0x58, 0x9e, 0x89,
	0xbb, 0x0c, 0x68, 0xb0, 0xad, 0xf1, 0xfb, 0x59, 0xda, 0x51, 0x01, 0x7e, 0xd5, 0xd0, 0x0a, 0x5f,
	0xd5, 0x00, 0x0d, 0x1e, 0xf7, 0xe9, 0xb0, 0xfb, 0xae, 0xd3, 0xc1, 0xb7, 0x3d, 0x9f, 0x05, 0x69,
	0x15, 0xe1, 0x99, 0x48, 0xf6, 0x8a, 0xcc, 0xbd, 0x3b, 0xd3, 0xb5, 0xfd, 0x93, 0x55, 0x38, 0x99,
	0x52, 0x38, 0xf7, 0xc5, 0x0c, 0x3d, 0x7e, 0x31, 0xe3, 0x42, 0xde, 0xd6, 0xa5, 0xdd, 0xcf, 0x58,
	0x53, 0xee, 0x67, 0xbc, 0x92, 0x1b, 0x61, 0xec, 0x9a, 0xc6, 0x35, 0xf5, 0x9a, 0xc6, 0xf9, 0xdc,
	0xb8, 0x12, 0xb7, 0x35, 0xf4, 0xf8, 0x6d, 0x8d, 0xfc, 0x9d, 0x4d, 0xb9, 0xb4, 0xa1, 0xc7, 0x2f,
	0x6d, 0xe4, 0xc7, 0xf9, 0xf1, 0xdd, 0x8d, 0xef, 0x95, 0xbb, 0x1b, 0x7f, 0x32, 0x05, 0x0d, 0xe5,
	0xa1, 0xf6, 0x3b, 0x08, 0x10, 0xac, 0xf0, 0x8b, 0x67, 0xb3, 0xbe, 0x0b, 0x9f, 0x1e, 0xfc, 0xab,
	0x98, 0xe5, 0xe1, 0x7a, 0x15, 0x49, 0x7c, 0xa7, 0xfe, 0xab, 0x55, 0xbe, 0x53, 0x37, 0xa1, 0x6a,
	0xba, 0x3d, 0xc3, 0x72, 0xc4, 0xfd, 0x5e, 0x91, 0x44, 0xcf, 0xc3, 0xa9, 0x85, 0xa5, 0xf5, 0x95,
	0x4e, 0x3f, 0xc0, 0x7e, 0x8c, 0xe7, 0x30, 0x3a, 0x21, 0x63, 0x69, 0x7d, 0xe5, 0x46, 0x80, 0x7d,
	0x85, 0xe9, 0x38, 0x80, 0xba, 0x7b, 0x86, 0x6d, 0x63, 0x67, 0x97, 0x3e, 0x81, 0x44, 0xdf, 0x5e,
	0xe3, 0x4d, 0x7d, 0x23, 0x57, 0x7f, 0xe7, 0x97, 0x04, 0x9e, 0x0d, 0x8e, 0x46, 0x9f, 0xed, 0x26,
	0xb3, 0xd0, 0x67, 0xe2, 0xef, 0x52, 0x8d, 0xf2, 0x0e, 0x1a, 0xac, 0x44, 0x71, 0xc3, 0x63, 0x78,
	0xa2, 0x97, 0xad, 0xbe, 0xa9, 0xc1, 0xec, 0x40, 0x23, 0xd0, 0xbb, 0x50, 0xda, 0x0b, 0x43, 0x8f,
	0x0f, 0xfd, 0x52, 0xbe, 0xea, 0x56, 0xb7, 0xb6, 0x36, 0x06, 0xfb, 0x45, 0x11, 0xa2, 0x2d, 0x28,
	0x9a, 0x4e, 0x90, 0xe9, 0x61, 0x99, 0x01, 0xbc, 0xcb, 0xd7, 0x37, 0x07, 0xd1, 0x12, 0x74, 0xad,
	0x0e, 0x9c, 0x4a, 0xad, 0x14, 0x5d, 0x8e, 0x5e, 0xa8, 0xd7, 0xc6, 0xb9, 0x25, 0xce, 0x81, 0x5b,
	0x7b, 0x30, 0x97, 0x56, 0x3b, 0x8f, 0x41, 0xce, 0xc6, 0x5f, 0x93, 0x31, 0xc8, 0xd9, 0xb7, 0x97,
	0xe0, 0x74, 0xd7, 0xc7, 0x34, 0x26, 0x93, 0x61, 0xa7, 0xcc, 0xac, 0xb9, 0xe8, 0x6b, 0x34, 0xb7,
	0x5a, 0x7f, 0x5f, 0x03, 0x34, 0x38, 0x5e, 0xd4, 0x03, 0x99, 0xe9, 0xdc, 0xb5, 0x0c, 0x2a, 0xaf,
	0x54, 0x35, 0x0f, 0x47, 0x80, 0xae, 0x43, 0xf9, 0xc0, 0xe8, 0xdb, 0x21, 0x1f, 0x84, 0xf3, 0xf9,
	0x06, 0xe1, 0x26, 0x01, 0x25, 0xad, 0xc2, 0x3a, 0x43, 0xd3, 0x3a, 0x0f, 0x10, 0x65, 0xa6, 0x46,
	0x6a, 0x3f, 0x8a, 0x7d, 0xfd, 0x68, 0x25, 0x9f, 0xfa, 0xd4, 0x8c, 0xc5, 0x3f, 0x2c, 0x64, 0x09,
	0xee, 0x33, 0xc0, 0x1a, 0xd4, 0xac, 0xf4, 0x07, 0x9b, 0xbe, 0x08, 0x67, 0xe8, 0xfd, 0x25, 0x2b,
	0x08, 0xfa, 0xd8, 0xec, 0x28, 0x3e, 0xac, 0x7c, 0x89, 0x2f, 0xde, 0x41, 0x95, 0xcb, 0x38, 0x34,
	0x2c, 0x3b, 0xd0, 0x4f, 0x91, 0x2a, 0xd6, 0x68, 0x0d, 0xca, 0x57, 0xb2, 0x73, 0x9e, 0x26, 0xdc,
	0x68, 0x10, 0x82, 0x10, 0x91, 0xb1, 0x2c, 0xb1, 0xbd, 0xb0, 0x14, 0x0d, 0x49, 0x85, 0xfd, 0xf0,
	0x86, 0x7e, 0x4d, 0x04, 0x42, 0xe1, 0x49, 0x1a, 0xf2, 0x04, 0xfb, 0x44, 0x8a, 0x33, 0xb6, 0x6d,
	0x4c, 0x0a, 0xf0, 0xb0, 0x4b, 0x24, 0x77, 0x53, 0x64, 0xd2, 0xf7, 0x1f, 0xf8, 0x8b, 0xd6, 0xe2,
	0x15, 0xa1, 0xba, 0x0e, 0x3c, 0x4b, 0xc7, 0x3b, 0xad, 0x1f, 0xd1, 0x60, 0x2e, 0x8d, 0x6a, 0xa9,
	0xe1, 0x48, 0xf3, 0xc7, 0xc1, 0x13, 0x57, 0x8b, 0x59, 0x3c, 0x4d, 0x36, 0xfa, 0xa5, 0xe8, 0x6a,
	0x31, 0x0b, 0x34, 0x4a, 0xc6, 0xbf, 0xf5, 0x3b, 0xf1, 0xb5, 0x21, 0x28, 0xf3, 0x08, 0x4c, 0x06,
	0xd8, 0x27, 0x8b, 0x8c, 0xc5, 0x16, 0x16, 0xa7, 0x30, 0x96, 0xc9, 0x02, 0x0a, 0x93, 0x53, 0x91,
	0xe3, 0x86, 0x9d, 0x6d, 0xbc, 0xe3, 0xfa, 0xe2, 0xc4, 0x53, 0x77, 0xdc, 0x70, 0x91, 0x66, 0xb0,
	0xe8, 0x44, 0x61, 0xc7, 0xd8, 0x11, 0x8f, 0x84, 0x16, 0x69, 0x14, 0x93, 0x05, 0x92, 0x46, 0xf7,
	0x41, 0x8d, 0x12, 0xb2, 0xef, 0x0b, 0x0d, 0x1a, 0xa3, 0xb1, 0x6f, 0xa3, 0xc7, 0x61, 0x5a, 0xa1,
	0x31, 0x2d, 0x51, 0x1e, 0x20, 0xb2, 0x6f, 0x27, 0x89, 0x5c, 0x49, 0x12, 0xb9, 0xfd, 0x49, 0x98,
	0x5e, 0xb6, 0x82, 0xfd, 0x6b, 0x56, 0x10, 0x8e, 0x0c, 0x36, 0xd6, 0xbe, 0x0a, 0x33, 0x51, 0xe1,
	0xc0, 0x73, 0x9d, 0x00, 0xa3, 0x57, 0xa0, 0x6c, 0x5a, 0xc1, 0xbe, 0x78, 0x84, 0x60, 0xf8, 0x76,
	0x4d, 0xa0, 0x75, 0x56, 0xbe, 0xdd, 0x81, 0x93, 0x24, 0xb9, 0x8c, 0xc9, 0xe1, 0x66, 0x1b, 0x8f,
	0x17, 0xea, 0x4c, 0x65, 0x84, 0xc5, 0x38, 0x23, 0x6c, 0xaf, 0xc3, 0x5c, 0xbc, 0x02, 0xde, 0xe2,
	0x97, 0xa1, 0x44, 0x5a, 0x90, 0x49, 0xbe, 0xa0, 0x0d, 0xa6, 0xc5, 0xdb, 0x5f, 0xd1, 0x60, 0x96,
	0x24, 0x97, 0x08, 0x6b, 0x18, 0xb3, 0xb9, 0x08, 0x4a, 0x5f, 0x74, 0x1d, 0x19, 0x0a, 0x83, 0xfc,
	0x26, 0x53, 0x80, 0xe0, 0xef, 0xd0, 0x29, 0xcd, 0x43, 0x2d, 0x90, 0x8c, 0x2d, 0x32, 0xad, 0x8f,
	0x0a, 0x9c, 0xd7, 0x7e, 0x83, 0x35, 0x66, 0x19, 0xdb, 0x38, 0x4b, 0x63, 0xf8, 0xf3, 0x2b, 0x05,
	0xf9, 0xfc, 0x4a, 0xfb, 0xe7, 0x8b, 0x50, 0x22, 0x18, 0x52, 0x39, 0xe7, 0x14, 0x14, 0x64, 0xe9,
	0x82, 0x65, 0x0e, 0x23, 0xb3, 0xda, 0xc4, 0x52, 0x2c, 0xf8, 0x9d, 0x58, 0xa6, 0x65, 0x65, 0x99,
	0x0a, 0x02, 0x54, 0x14, 0x02, 0x9c, 0x96, 0x52, 0x17, 0x7b, 0xf5, 0x43, 0xbc, 0xea, 0xa7, 0xca,
	0xcb, 0xb5, 0x84, 0xbc, 0x8c, 0xa0, 0x64, 0xb9, 0x5e, 0x40, 0xed, 0xb6, 0x45, 0x9d, 0xfe, 0x46,
	0x9f, 0x81, 0xd9, 0x81, 0x97, 0xc4, 0xb8, 0x35, 0xf6, 0xd9, 0x5c, 0xb6, 0x79, 0x7d, 0x26, 0xf9,
	0x8c, 0x18, 0xfa, 0x00, 0xce, 0x0c, 0xbe, 0x52, 0x46, 0xdf, 0x30, 0xe3, 0xf6, 0xd9, 0x17, 0xf2,
	0x5b, 0xff, 0xf5, 0x53, 0x5e, 0x5a, 0x76, 0xfb, 0xdb, 0x1a, 0xcc, 0x0e, 0x04, 0xd0, 0x3d, 0x8a,
	0xe9, 0x29, 0x0f, 0x38, 0x47, 0x94, 0x9b, 0x87, 0x93, 0x94, 0xb5, 0xed, 0x61, 0xc3, 0x0f, 0xb7,
	0xb1, 0x11, 0x73, 0xc7, 0x9d, 0x25, 0x9f, 0x56, 0xc5, 0x97, 0x58, 0xf0, 0x83, 0xd0, 0x37, 0x9c,
	0xc0, 0x8a, 0x36, 0x43, 0x36, 0x9e, 0xf4, 0x5a, 0xed, 0x96, 0xfc, 0x24, 0xde, 0xf9, 0x4e, 0x73,
	0xd8, 0x55, 0xd9, 0x6d, 0x25, 0xc6, 0x6e, 0xdb, 0xdf, 0x06, 0x80, 0x0d, 0xdf, 0xed, 0xe1, 0x70,
	0x0f, 0xf7, 0x83, 0xbb, 0xf2, 0xb0, 0x99, 0xac, 0x4d, 0xf9, 0x99, 0x1a, 0x48, 0x3d, 0x4b, 0x3c,
	0x90, 0x74, 0x6c, 0x71, 0xb1, 0xff, 0x17, 0xab, 0x30, 0x15, 0xaf, 0x0a, 0x9d, 0x87, 0xa6, 0x88,
	0xb6, 0xcb, 0x2d, 0x89, 0x9d, 0x44, 0x34, 0x98, 0xd3, 0xfc, 0xfb, 0x3a, 0xfb, 0x2c, 0x6d, 0x9b,
	0x8a, 0xd1, 0xb5, 0x10, 0x37, 0xba, 0x46, 0x41, 0xcb, 0x8b, 0xb1, 0xa0, 0xe5, 0x0f, 0x00, 0x50,
	0x95, 0x20, 0x7b, 0x9f, 0x95, 0x47, 0xd5, 0x21, 0x39, 0xec, 0xc1, 0xd1, 0x0e, 0x20, 0xfa, 0xa5,
	0xe3, 0xf5, 0x6d, 0x21, 0x18, 0x8a, 0x58, 0x85, 0xc7, 0x61, 0xbe, 0x8b, 0x19, 0x83, 0x2b, 0x09,
	0x63, 0x30, 0x8d, 0x58, 0xc4, 0x03, 0xa4, 0xf0, 0x75, 0x1e, 0x65, 0xa0, 0x00, 0xa6, 0xe5, 0xfb,
	0x3f, 0xb6, 0xb1, 0x8d, 0xed, 0x80, 0x3f, 0x48, 0xf9, 0xd6, 0x78, 0x23, 0x3c, 0xbf, 0xc2, 0xb1,
	0x5d, 0xa3, 0xc8, 0x98, 0xe9, 0x78, 0x0a, 0xc7, 0x32, 0xd1, 0xc3, 0x20, 0xdf, 0x17, 0xa2, 0x1b,
	0x28, 0x73, 0x1d, 0x93, 0xef, 0x17, 0x91, 0xed, 0xf3, 0x61, 0x98, 0xf0, 0xdd, 0x7e, 0x88, 0x45,
	0x98, 0x1b, 0x76, 0xb9, 0xb5, 0x41, 0xf3, 0x78, 0x90, 0x9b, 0x47, 0x60, 0xd2, 0xef, 0xdb, 0x8a,
	0x95, 0xbb, 0xc1, 0xa4, 0x00, 0x92, 0x29, 0xc7, 0xb2, 0x97, 0x34, 0x85, 0x4f, 0xd0, 0xde, 0xad,
	0x8e, 0xd9, 0xbb, 0x51, 0x66, 0xf1, 0xe7, 0x60, 0x4e, 0x4c, 0x3a, 0xb1, 0xfb, 0x53, 0x16, 0x3f,
	0xc9, 0x8e, 0x96, 0xfc, 0xdb, 0x02, 0xfb, 0x44, 0x8f, 0x96, 0x4d, 0xa8, 0x06, 0x8a, 0xcf, 0x46,
	0x5d, 0x17, 0x49, 0xb4, 0x08, 0x35, 0x1a, 0x83, 0xce, 0x72, 0x76, 0xe9, 0xf5, 0x9f, 0x51, 0x9a,
	0xfc, 0x28, 0xbc, 0x9e, 0x84, 0x6b, 0x2d, 0xc0, 0xc9, 0x94, 0x01, 0xc9, 0x75, 0xf3, 0xe6, 0x8e,
	0xaf, 0xee, 0x7c, 0x5b, 0x83, 0x99, 0xe4, 0xc2, 0x55, 0x56, 0x92, 0x16, 0x5b, 0x49, 0xdf, 0x2d,
	0xa1, 0xd9, 0xdb, 0x36, 0xd4, 0xa3, 0xc0, 0x85, 0x1d, 0x98, 0xa0, 0x24, 0xef, 0x19, 0x8e, 0xb1,
	0x8b, 0x45, 0x38, 0xcd, 0xd7, 0x32, 0x4e, 0xb2, 0x05, 0x05, 0x74, 0x85, 0xef, 0xb3, 0x7a, 0x0c,
	0x61, 0xfb, 0x97, 0x35, 0x78, 0x70, 0x38, 0x40, 0x7e, 0xc5, 0x71, 0xea, 0x9b, 0x59, 0x64, 0x63,
	0xeb, 0xee, 0x61, 0x19, 0x9d, 0x9c, 0xa7, 0xe8, 0x33, 0xf4, 0x46, 0xb8, 0x17, 0x8f, 0x3a, 0x05,
	0x24, 0x8b, 0xad, 0xc6, 0xf6, 0x77, 0x4a, 0x30, 0xb5, 0x19, 0xe3, 0xa7, 0xe3, 0xee, 0x34, 0x7a,
	0x6c, 0xa7, 0xb9, 0x94, 0xe5, 0x6d, 0x2d, 0x5e, 0x63, 0x22, 0xa9, 0x98, 0x0e, 0x7f, 0xa2, 0x00,
	0x68, 0xf0, 0x23, 0x91, 0x00, 0x3f, 0x70, 0xb7, 0x19, 0xe3, 0x13, 0xc7, 0xf9, 0x0f, 0xdc, 0x6d,
	0xba, 0x54, 0x90, 0x0e, 0x75, 0x21, 0xf5, 0x88, 0xb3, 0xe7, 0x4b, 0x79, 0x1a, 0x23, 0x87, 0x32,
	0x42, 0x33, 0xf4, 0xc9, 0x37, 0x1b, 0x90, 0x1c, 0x2f, 0xd5, 0x15, 0x91, 0x50, 0xe1, 0x62, 0x9e,
	0x8a, 0xaf, 0x0b, 0x2c, 0x62, 0xcd, 0xea, 0xb3, 0x4e, 0x32, 0xab, 0xf5, 0x17, 0x35, 0xa8, 0xad,
	0x28, 0x42, 0x1d, 0x9d, 0x09, 0xc2, 0x3e, 0x9c, 0xf2, 0x7a, 0x5a, 0x61, 0xe0, 0xf5, 0x34, 0x61,
	0x54, 0x2e, 0x2a, 0x46, 0xe5, 0xa3, 0xa6, 0x4f, 0x0b, 0x6a, 0x89, 0xf8, 0x9a, 0x32, 0xdd, 0xba,
	0x0c, 0xb3, 0x03, 0x2d, 0xa6, 0x4f, 0x0c, 0x38, 0x87, 0x9c, 0x39, 0x90, 0x9f, 0xa4, 0x3d, 0x3d,
	0x23, 0xec, 0xee, 0xf1, 0xc0, 0x7a, 0xcc, 0x9f, 0x02, 0x68, 0x16, 0x05, 0x6f, 0x7f, 0xf3, 0xa8,
	0xb7, 0x2b, 0x6f, 0x24, 0xde, 0xae, 0xbc, 0x98, 0xdb, 0x7b, 0x28, 0xf5, 0x85, 0xca, 0xcf, 0x0e,
	0xbc, 0x50, 0xf9, 0x46, 0x7e, 0xc4, 0xf7, 0xda, 0x3b, 0x94, 0xbf, 0x7f, 0x1a, 0xaa, 0xe2, 0x9d,
	0xb9, 0xbb, 0x10, 0x9c, 0x85, 0x57, 0x35, 0x7e, 0x38, 0x1f, 0x89, 0x20, 0x2e, 0x0f, 0xfe, 0xc7,
	0x32, 0x57, 0x03, 0xbf, 0x93, 0x74, 0xe2, 0x79, 0x25, 0x13, 0xba, 0xd5, 0xad, 0xad, 0x0d, 0xfe,
	0x7b, 0xc0, 0xa5, 0x67, 0x01, 0x8a, 0x5b, 0xd7, 0x36, 0xf9, 0x90, 0x9f, 0xcb, 0x84, 0x8e, 0xff,
	0xdf, 0xba, 0xb6, 0xa9, 0x17, 0xc3, 0x6b, 0x9b, 0xe8, 0x3d, 0x98, 0xda, 0xf1, 0x5d, 0x27, 0xc4,
	0x8e, 0xd9, 0x61, 0xe1, 0x39, 0x8b, 0x19, 0x84, 0x41, 0x81, 0xed, 0x32, 0x07, 0xa5, 0xe1, 0x3a,
	0x27, 0x77, 0x94, 0x54, 0x80, 0x2e, 0x8b, 0x78, 0x9f, 0xcc, 0x85, 0xf9, 0xb9, 0x3c, 0xcd, 0x53,
	0xc2, 0x7f, 0x8e, 0x7a, 0xc7, 0xb1, 0x3c, 0xfc, 0x1d, 0xc7, 0x7b, 0xd2, 0x67, 0xef, 0x31, 0x98,
	0x92, 0xee, 0x79, 0x4c, 0x2a, 0xfb, 0x2e, 0x77, 0xda, 0xfb, 0x32, 0x4c, 0xa8, 0x53, 0x21, 0xc6,
	0xc5, 0xc5, 0x7e, 0x3e, 0xa7, 0xc6, 0x7f, 0xad, 0x8b, 0xd1, 0x5d, 0x82, 0x92, 0xd1, 0xe7, 0xac,
	0x3b, 0xeb, 0x1c, 0x5e, 0xe8, 0x87, 0x7b, 0x6f, 0x7b, 0xb4, 0x93, 0x14, 0xb8, 0xf5, 0x9f, 0x35,
	0x40, 0x83, 0xeb, 0x84, 0x9c, 0x85, 0xe4, 0xeb, 0x94, 0xc2, 0xf6, 0x52, 0x17, 0xcf, 0x53, 0x06,
	0x03, 0x8f, 0xa0, 0x14, 0x06, 0x1e, 0x41, 0x51, 0x8b, 0x28, 0xf2, 0x89, 0x28, 0x42, 0xf7, 0x1e,
	0x1e, 0x02, 0x50, 0xac, 0x1f, 0x1e, 0x66, 0xb5, 0xc1, 0xf3, 0x28, 0x35, 0x1e, 0x83, 0x09, 0x1f,
	0xdf, 0xf2, 0xad, 0x10, 0xb3, 0x22, 0x74, 0xca, 0x2e, 0x16, 0x9a, 0x9a, 0xde, 0xe0, 0xf9, 0xb4,
	0xd8, 0x23, 0xd0, 0xd8, 0xc3, 0x86, 0x89, 0x7d, 0x56, 0xaa, 0x22, 0x4b, 0x01, 0xcb, 0x26, 0x85,
	0x5a, 0xbb, 0x52, 0x6d, 0xfd, 0x3e, 0x4c, 0xc6, 0xd6, 0x05, 0xdf, 0x52, 0xce, 0x67, 0x22, 0x61,
	0xda, 0xd3, 0x9f, 0x13, 0xea, 0x1a, 0x3a, 0x8e, 0x17, 0x3f, 0xc9, 0xce, 0x0e, 0x11, 0xc3, 0x21,
	0x33, 0x80, 0x14, 0x95, 0x61, 0x6e, 0x69, 0x82, 0x74, 0x7b, 0xc0, 0x40, 0xc1, 0xba, 0x1d, 0x44,
	0x66, 0xaf, 0x4b, 0x50, 0x1c, 0x37, 0xdc, 0x2e, 0x01, 0x6c, 0x7d, 0x43, 0x83, 0x86, 0xc2, 0x5b,
	0xe4, 0xbb, 0x20, 0x5a, 0xf4, 0x2e, 0x08, 0x5a, 0x87, 0x12, 0x99, 0x44, 0x7c, 0xb7, 0x78, 0x35,
	0x2f, 0x77, 0x26, 0x78, 0x6f, 0x92, 0xdd, 0x4b, 0x2f, 0xed, 0x6d, 0x6d, 0x6d, 0xa0, 0xb7, 0xa0,
	0xb8, 0xb5, 0xb4, 0x91, 0x49, 0xaf, 0x20, 0xb0, 0x6d, 0x2d, 0x0d, 0x22, 0x2b, 0x86, 0x4b, 0x1b,
	0xad, 0xbf, 0xa7, 0xc1, 0x5c, 0x5a, 0x55, 0xa9, 0x0b, 0xed, 0x14, 0x54, 0x1c, 0xb7, 0xc3, 0x36,
	0x06, 0x1a, 0x96, 0xd3, 0x71, 0x09, 0xf5, 0x63, 0x4f, 0xcc, 0x16, 0xe3, 0x4f, 0xcc, 0xa2, 0xb7,
	0x84, 0x73, 0x68, 0x29, 0x83, 0x74, 0x99, 0xd2, 0xf9, 0x0d, 0x23, 0xdc, 0xe3, 0x2e, 0xa5, 0xad,
	0x7f, 0xaa, 0xc1, 0xc9, 0x94, 0x9e, 0x1c, 0x5b, 0x5b, 0xd7, 0xa3, 0x8d, 0xb4, 0x94, 0xe1, 0xee,
	0x7d, 0x62, 0x6b, 0x19, 0xd8, 0x44, 0x11, 0x94, 0x16, 0xae, 0x6d, 0x5c, 0xe7, 0x1b, 0x49, 0xc9,
	0xb8, 0xb6, 0x71, 0xbd, 0x75, 0x1b, 0xa6, 0x13, 0x9d, 0x4b, 0x75, 0x5c, 0x54, 0xb6, 0xf4, 0xc2,
	0xf1, 0x6c, 0xe9, 0xad, 0x5f, 0xd0, 0x60, 0xea, 0xde, 0x64, 0x63, 0xad, 0x9f, 0xd2, 0x00, 0x22,
	0xd6, 0x8b, 0x96, 0xa1, 0xbc, 0x6d, 0x04, 0x56, 0x37, 0x93, 0xcb, 0xa3, 0xe8, 0xfa, 0x22, 0x81,
	0x20, 0x48, 0x74, 0x06, 0x4c, 0x16, 0x76, 0x68, 0x0b, 0xa3, 0xec, 0x33, 0xd9, 0x56, 0xc9, 0xb5,
	0x4d, 0x8a, 0x81, 0x00, 0xb6, 0x16, 0xa1, 0x2e, 0x71, 0x52, 0xc7, 0xa9, 0x01, 0xcf, 0x1d, 0x95,
	0x8d, 0x90, 0x3d, 0x08, 0x1b, 0x76, 0x4f, 0x48, 0x9b, 0x34, 0xd1, 0xfa, 0x8e, 0x06, 0x55, 0x8e,
	0x74, 0x34, 0x8a, 0x47, 0x60, 0xf2, 0x00, 0xfb, 0xd6, 0xce, 0x61, 0x87, 0x07, 0xcd, 0x60, 0xa8,
	0x26, 0x58, 0xe6, 0x12, 0xcd, 0x43, 0x9b, 0x50, 0x65, 0x3c, 0x3b, 0xdb, 0x4b, 0x53, 0x89, 0x9e,
	0xcd, 0xaf, 0x32, 0x58, 0x26, 0x89, 0x0b, 0x4c, 0x64, 0x1e, 0x60, 0xdf, 0x77, 0xfd, 0x8e, 0xa7,
	0xa8, 0xf6, 0x68, 0xce, 0x86, 0xb1, 0x8b, 0x5b, 0x17, 0x60, 0x42, 0x85, 0xcb, 0x25, 0x6b, 0x7f,
	0x1f, 0xcc, 0x24, 0x6f, 0x3d, 0x90, 0xd2, 0xc6, 0x6e, 0xf4, 0xa8, 0x12, 0x4b, 0x20, 0x1d, 0xc0,
	0x93, 0xa7, 0xff, 0x4c, 0xef, 0x2e, 0x70, 0xc4, 0x09, 0xf5, 0xab, 0x82, 0xa5, 0xfd, 0x27, 0x1a,
	0x9c, 0x4a, 0x2d, 0x95, 0xca, 0x32, 0x86, 0xbf, 0x3b, 0x7f, 0x13, 0x2a, 0x5c, 0x79, 0x58, 0xcc,
	0xf0, 0x42, 0x46, 0x6a, 0xad, 0xf3, 0xaa, 0xc2, 0x90, 0x63, 0x23, 0xb5, 0x8a, 0x63, 0x62, 0x20,
	0x68, 0x2f, 0x33, 0xe8, 0x19, 0x69, 0x3c, 0xa5, 0x56, 0xfb, 0xe7, 0x35, 0x80, 0x48, 0x6a, 0x4b,
	0x01, 0x6d, 0x41, 0xcd, 0xf5, 0xc8, 0xe7, 0xe8, 0x41, 0x38, 0x91, 0x8e, 0xd0, 0x16, 0x15, 0xb4,
	0xe4, 0xe8, 0x8b, 0x77, 0x76, 0x70, 0x57, 0x3c, 0x34, 0xce, 0x53, 0xe8, 0x59, 0x40, 0x91, 0x4c,
	0x28, 0xa3, 0x85, 0x32, 0x9b, 0xd2, 0x6c, 0xf4, 0x85, 0xc7, 0x09, 0x6d, 0xff, 0x40, 0x01, 0x6a,
	0xf2, 0x35, 0xf5, 0xeb, 0x5c, 0x7b, 0x29, 0x45, 0xdf, 0x2c, 0xae, 0x54, 0xf4, 0xd9, 0x11, 0x21,
	0xfe, 0x52, 0xf5, 0xa4, 0xc4, 0x77, 0x95, 0x3d, 0x65, 0x27, 0xd1, 0x65, 0xf1, 0xc3, 0xde, 0x70,
	0x4d, 0x89, 0xad, 0xe1, 0x45, 0x09, 0xf4, 0x1e, 0xcc, 0x52, 0x64, 0x4e, 0x68, 0x45, 0x18, 0xb3,
	0x05, 0xd4, 0x34, 0x17, 0x9c, 0xd0, 0x92, 0x58, 0xa7, 0xbd, 0x78, 0x46, 0xfb, 0x5f, 0x16, 0x60,
	0x42, 0xed, 0x05, 0xfa, 0x39, 0x0d, 0x5e, 0xf4, 0xd9, 0xc9, 0xc0, 0xec, 0x98, 0x7d, 0xdf, 0x72,
	0x76, 0xc5, 0x75, 0x48, 0xf2, 0xd3, 0xda, 0x75, 0x5c, 0xe5, 0x0b, 0xbe, 0x8d, 0xbb, 0x7d, 0xf9,
	0x04, 0x64, 0x16, 0x72, 0x49, 0x45, 0xc9, 0xbc, 0xa8, 0x65, 0x99, 0xa2, 0xda, 0x94, 0x75, 0xac,
	0xb1, 0x2a, 0x58, 0xf6, 0x8a, 0xa8, 0x00, 0x7d, 0x55, 0x83, 0x97, 0x3c, 0x9f, 0x48, 0x3d, 0x39,
	0x5b, 0x96, 0x45, 0x9f, 0xb4, 0x21, 0x10, 0x47, 0xcd, 0xd8, 0xc2, 0x7e, 0x4f, 0x3f, 0x27, 0x6b,
	0xcc, 0xd6, 0xca, 0xf6, 0xf7, 0x6b, 0x70, 0xe6, 0x08, 0x64, 0x64, 0xda, 0xde, 0xc2, 0xd6, 0xee,
	0x9e, 0x58, 0xee, 0x3c, 0x85, 0xd6, 0x09, 0xcb, 0x11, 0xe2, 0x5c, 0x26, 0xd7, 0x2e, 0x95, 0x90,
	0xb4, 0x9d, 0x0a, 0x82, 0x76, 0x8f, 0x8d, 0xa8, 0xd4, 0xef, 0xbc, 0x0f, 0x27, 0x63, 0x7a, 0xf9,
	0x4e, 0x88, 0xfd, 0x9e, 0x50, 0xd0, 0xe4, 0xac, 0x67, 0xd6, 0x49, 0xe4, 0x04, 0xed, 0x3e, 0xcc,
	0x24, 0x8b, 0x21, 0x03, 0x66, 0x99, 0x02, 0x29, 0xf2, 0x88, 0x15, 0x15, 0xbe, 0x94, 0x7d, 0x86,
	0x44, 0xe7, 0x53, 0x7d, 0x86, 0xa2, 0x8b, 0x3c, 0x69, 0x83, 0x76, 0x07, 0xce, 0x1c, 0x51, 0x38,
	0x27, 0x8b, 0x39, 0x0d, 0x15, 0xca, 0x55, 0xc4, 0x1b, 0x13, 0x3c, 0xd5, 0xfe, 0x56, 0x01, 0x1a,
	0xca, 0x82, 0x44, 0xbf, 0x38, 0xf6, 0xc2, 0x28, 0x66, 0x5a, 0xa6, 0xbc, 0x1e, 0x4a, 0xe6, 0x7b,
	0x6a, 0x6d, 0xbc, 0x4b, 0x67, 0x29, 0x36, 0x93, 0x8d, 0xcc, 0xbd, 0x36, 0xfe, 0x8e, 0x06, 0xd3,
	0x09, 0x24, 0xe8, 0x1d, 0x98, 0xa2, 0x1b, 0x50, 0xdc, 0x60, 0x38, 0xea, 0xfa, 0x01, 0xdd, 0x8b,
	0xe4, 0xd0, 0x4f, 0xda, 0x6a, 0x12, 0x3d, 0x08, 0x20, 0xb7, 0x4b, 0xa9, 0xbc, 0x8c, 0x72, 0x88,
	0x24, 0x28, 0xe2, 0xf5, 0x75, 0xc8, 0x3c, 0x61, 0x5b, 0x4b, 0x43, 0xe4, 0x5d, 0xc5, 0x87, 0xed,
	0x9f, 0x2e, 0xc0, 0x64, 0xac, 0x0e, 0xf4, 0x79, 0x98, 0x60, 0x33, 0x9a, 0x6f, 0xbe, 0x59, 0xcc,
	0x0e, 0x31, 0x0c, 0xf3, 0xeb, 0x04, 0x5c, 0xdd, 0x79, 0x99, 0x8e, 0x95, 0xdb, 0xe9, 0xb6, 0xd3,
	0x56, 0x0c, 0x1b, 0x9d, 0x97, 0x73, 0x90, 0x62, 0xd8, 0x92, 0x69, 0x5d, 0x82, 0x99, 0x64, 0x23,
	0x72, 0xed, 0xe4, 0x5f, 0x80, 0xe6, 0x51, 0xb5, 0x1d, 0xd3, 0x9a, 0xfb, 0x8a, 0x06, 0x67, 0x8e,
	0x98, 0x6e, 0x47, 0x72, 0x4f, 0xb1, 0x37, 0xf2, 0xb2, 0x94, 0xbb, 0x65, 0x12, 0xb7, 0x93, 0xf3,
	0x79, 0xda, 0x8b, 0x67, 0xb4, 0xbf, 0x5d, 0x60, 0xf3, 0x55, 0xd9, 0x2f, 0x3f, 0xe6, 0x02, 0x77,
	0xcc, 0x05, 0x7e, 0x64, 0x1a, 0x26, 0x54, 0x17, 0x74, 0xb4, 0x0e, 0x54, 0xc1, 0xb2, 0x21, 0x0e,
	0x9f, 0xa3, 0x54, 0x76, 0xab, 0xbc, 0x70, 0xcc, 0x8f, 0x5d, 0xa2, 0x20, 0xe8, 0x70, 0xcf, 0x0b,
	0x0f, 0x97, 0x2d, 0x3f, 0x53, 0x0c, 0xbc, 0x15, 0x5e, 0x38, 0x8e, 0x4e, 0xa0, 0x40, 0x7b, 0x30,
	0xbb, 0xdb, 0xc5, 0x91, 0x6f, 0xcb, 0xb2, 0x15, 0xec, 0x73, 0xd1, 0x6b, 0xb8, 0x3f, 0xff, 0x95,
	0xa5, 0x95, 0x38, 0x54, 0x3c, 0x7c, 0xe7, 0x00, 0x52, 0xf4, 0x21, 0xcc, 0x19, 0xb7, 0x02, 0x7e,
	0x77, 0x6e, 0xd1, 0x76, 0xbb, 0xfb, 0xd4, 0xeb, 0x33, 0x93, 0x59, 0x6a, 0xe1, 0xdd, 0xcd, 0x01,
	0xc0, 0x58, 0x7d, 0xa9, 0xa8, 0xd1, 0x5b, 0x50, 0xdd, 0xb5, 0x42, 0x1d, 0x7b, 0x2e, 0xbf, 0xf6,
	0x30, 0x5c, 0x89, 0x7d, 0x85, 0x95, 0x8d, 0x21, 0x16, 0x08, 0xa8, 0x5f, 0x39, 0xf3, 0xa2, 0xad,
	0x8c, 0x17, 0xb9, 0x42, 0xf8, 0xd0, 0x5e, 0x82, 0xa2, 0xb3, 0x23, 0x82, 0xef, 0x0c, 0x5f, 0x31,
	0xd7, 0x2f, 0x6f, 0xc6, 0x50, 0x10, 0x40, 0x72, 0x6e, 0xb7, 0x82, 0x6e, 0x60, 0xf1, 0x08, 0x1a,
	0x23, 0xce, 0xed, 0x9b, 0x4b, 0x9b, 0x6b, 0x31, 0x1c, 0x0c, 0x18, 0x6d, 0x40, 0x7d, 0x97, 0xf9,
	0x95, 0xed, 0x04, 0x3c, 0x72, 0xc6, 0xf0, 0x63, 0xe0, 0x15, 0x51, 0x3a, 0x86, 0x2d, 0x42, 0x82,
	0x42, 0x48, 0xf7, 0x85, 0xe2, 0xee, 0x5b, 0x97, 0xf2, 0x3b, 0x57, 0xc5, 0x6a, 0x4a, 0x47, 0x4e,
	0x15, 0x8b, 0xdb, 0x26, 0x77, 0xe0, 0x1a, 0x71, 0x4d, 0x7b, 0x71, 0x39, 0x4e, 0x4d, 0x7f, 0xdb,
	0x24, 0xc2, 0xe9, 0x8e, 0x8d, 0x6f, 0xb3, 0x0f, 0x99, 0xc2, 0xbf, 0x5e, 0x96, 0xc5, 0x39, 0x1e,
	0x05, 0x01, 0x99, 0x25, 0x5d, 0xcb, 0x31, 0xb1, 0xcf, 0xc3, 0xbf, 0x8e, 0xb8, 0x7d, 0x40, 0x8b,
	0xc6, 0x67, 0x09, 0x03, 0xa7, 0x88, 0xb0, 0xb7, 0xb7, 0x13, 0xf0, 0xb8, 0xaf, 0xa3, 0xae, 0x31,
	0x78, 0x7b, 0x89, 0xb9, 0xc2, 0xc1, 0xc9, 0x1a, 0xd8, 0x21, 0x2b, 0x02, 0xfb, 0xdc, 0xf5, 0xe3,
	0xb9, 0x11, 0xbd, 0xa3, 0x65, 0xe3, 0x6b, 0x80, 0x23, 0x40, 0x37, 0xa1, 0x61, 0xba, 0xb7, 0x9c,
	0x5b, 0x86, 0x6f, 0x2e, 0x6c, 0xac, 0x35, 0x67, 0x32, 0x3c, 0x25, 0xba, 0x1c, 0x95, 0x8f, 0xe1,
	0x54, 0x11, 0xa1, 0xd7, 0xa0, 0xb0, 0xd3, 0x6d, 0xce, 0x66, 0x30, 0xd2, 0x5d, 0x5e, 0x8a, 0x61,
	0x29, 0xec, 0x74, 0xc9, 0x4c, 0xa6, 0xd7, 0x91, 0x2e, 0x5b, 0x36, 0x6e, 0xa2, 0x0c, 0x33, 0x79,
	0x41, 0x94, 0x8e, 0xcf, 0x64, 0x89, 0x84, 0x60, 0xec, 0xba, 0xce, 0x8e, 0xb5, 0xbb, 0x6e, 0x78,
	0xcd, 0x93, 0x19, 0x30, 0x2e, 0x89, 0xd2, 0x71, 0x8c, 0x12, 0x09, 0x32, 0x60, 0xf2, 0x20, 0xf0,
	0xf6, 0xb0, 0xe0, 0x5a, 0xcd, 0x39, 0x8a, 0x75, 0xb8, 0x7c, 0x75, 0x93, 0x43, 0x58, 0x7e, 0xd8,
	0x37, 0xec, 0x01, 0x16, 0x1b, 0xc7, 0x48, 0xc6, 0xf9, 0xc3, 0xbe, 0xbb, 0x7d, 0x18, 0xe2, 0xe6,
	0xa9, 0x0c, 0xe3, 0xfc, 0x0e, 0x2b, 0x1b, 0x1f, 0x67, 0x8e, 0x40, 0x92, 0x94, 0x6e, 0x06, 0xa7,
	0xb3, 0x92, 0x74, 0xa0, 0x85, 0x11, 0x12, 0xc2, 0xfc, 0xbd, 0x3d, 0x37, 0x74, 0x9d, 0xc4, 0x4e,
	0x73, 0x26, 0x03, 0xf3, 0xdf, 0x48, 0x01, 0x8c, 0x33, 0xff, 0x34, 0xd4, 0xed, 0xbf, 0xa2, 0xc1,
	0xd9, 0x51, 0xfb, 0x06, 0x91, 0xe2, 0x98, 0x23, 0xe8, 0xda, 0xb2, 0xb0, 0x86, 0x88, 0x34, 0x91,
	0xc8, 0x76, 0x82, 0xad, 0x43, 0x4f, 0x88, 0x8a, 0x3c, 0x85, 0x3e, 0x01, 0x75, 0xcf, 0xf0, 0x43,
	0x4b, 0xde, 0x6c, 0x2f, 0xeb, 0x51, 0x06, 0x73, 0x3b, 0x32, 0xcc, 0xb7, 0x1d, 0xfe, 0xa4, 0x57,
	0x4d, 0x97, 0xe9, 0xf6, 0xd3, 0x30, 0x97, 0xb6, 0xbb, 0xa7, 0xe9, 0xa6, 0xdb, 0x3f, 0xa3, 0x01,
	0x1a, 0xdc, 0x45, 0x88, 0xf4, 0x1f, 0x29, 0x33, 0x53, 0xd4, 0x9b, 0xaf, 0x43, 0xd9, 0x0a, 0x71,
	0x4f, 0x08, 0xd7, 0xc3, 0xfd, 0xbc, 0xae, 0xe2, 0xc3, 0x2d, 0x97, 0xa9, 0xfe, 0x29, 0x10, 0x3a,
	0x0b, 0x0d, 0x13, 0xef, 0x18, 0x7d, 0x3b, 0x5c, 0x77, 0x4d, 0x2c, 0xf4, 0xcc, 0x4a, 0x56, 0x7b,
	0x05, 0xea, 0x12, 0x2a, 0x45, 0x2a, 0x16, 0x3d, 0x29, 0xc4, 0x5f, 0x74, 0xeb, 0x45, 0xd8, 0xe8,
	0xef, 0xf6, 0x3c, 0xcc, 0xa5, 0x09, 0x26, 0x84, 0xe6, 0x3d, 0x6c, 0x5a, 0xfd, 0x9e, 0xb8, 0xa9,
	0xc0, 0x52, 0xed, 0xf7, 0x07, 0xdf, 0x11, 0x1f, 0xd8, 0x22, 0xe8, 0x2d, 0x36, 0x92, 0xa9, 0x90,
	0x26, 0xca, 0x88, 0x0d, 0x4c, 0x21, 0x31, 0x30, 0x3f, 0xac, 0xc1, 0x99, 0x23, 0x38, 0x15, 0x5a,
	0x15, 0x14, 0xd5, 0x32, 0xbc, 0xec, 0x37, 0x80, 0x84, 0x30, 0x94, 0x23, 0xa8, 0x5b, 0x18, 0xa4,
	0xee, 0x1f, 0x6a, 0x70, 0x2a, 0x15, 0x45, 0xaa, 0xf9, 0xe2, 0x1a, 0xd4, 0x76, 0x2c, 0x6c, 0x9b,
	0x3a, 0xde, 0xc9, 0x74, 0xc3, 0x96, 0x59, 0xd6, 0x2e, 0x13, 0x10, 0x79, 0xc6, 0x91, 0x18, 0xd0,
	0xe7, 0x61, 0x46, 0x18, 0xc9, 0x2f, 0x0b, 0xac, 0xc5, 0x0c, 0x6b, 0x5f, 0x57, 0x81, 0x24, 0xde,
	0x01, 0x5c, 0x72, 0x1a, 0x94, 0x94, 0x69, 0xf0, 0x27, 0x1a, 0x9c, 0x4a, 0x65, 0x9e, 0x08, 0xc3,
	0x9c, 0x9d, 0x62, 0xbb, 0x1e, 0xff, 0x0a, 0x53, 0x2a, 0x3a, 0x75, 0xb9, 0x68, 0x1f, 0xc1, 0x72,
	0x61, 0xa7, 0x44, 0xc2, 0x17, 0x78, 0x00, 0x95, 0x9a, 0x2e, 0xd3, 0xed, 0xeb, 0x70, 0x76, 0x14,
	0x6b, 0xa3, 0xc3, 0x6e, 0x4a, 0xde, 0x44, 0x7f, 0x1f, 0xc5, 0x97, 0x08, 0x77, 0x49, 0xeb, 0x79,
	0xda, 0xe5, 0x80, 0xf6, 0xa7, 0x61, 0x3a, 0x21, 0x5c, 0x52, 0x87, 0x2b, 0xec, 0x1f, 0xc8, 0x7b,
	0x07, 0x3c, 0x95, 0xba, 0xa4, 0xd5, 0xb5, 0x54, 0x4c, 0xac, 0xa5, 0x03, 0x98, 0x8a, 0xef, 0xd2,
	0x84, 0x67, 0x31, 0x67, 0xaf, 0x77, 0xdf, 0xbd, 0x2e, 0x0c, 0x60, 0x4a, 0x0e, 0x61, 0x23, 0x76,
	0xdf, 0xe1, 0xeb, 0x81, 0xfc, 0x54, 0xba, 0x58, 0x8c, 0xb1, 0xde, 0x61, 0xcc, 0xf5, 0x1b, 0x05,
	0x98, 0x49, 0xca, 0x66, 0xf4, 0xe6, 0x93, 0x6f, 0x29, 0x9d, 0x62, 0xa9, 0x23, 0x79, 0xfb, 0x5b,
	0x50, 0x67, 0xcc, 0x54, 0x1f, 0xd3, 0x5a, 0x1d, 0x81, 0x0f, 0x6b, 0x2c, 0xda, 0x82, 0x2a, 0x9b,
	0x07, 0xc2, 0x79, 0xfb, 0x42, 0x2e, 0x99, 0x73, 0x9e, 0xd9, 0xf0, 0x84, 0x85, 0x89, 0xa3, 0x6a,
	0x5d, 0x80, 0x09, 0xf5, 0x43, 0x2e, 0xed, 0xc7, 0x2b, 0x70, 0x32, 0x45, 0xf6, 0xa3, 0x53, 0xdc,
	0x08, 0x8d, 0x20, 0xb6, 0xe1, 0xa8, 0x59, 0xed, 0x1f, 0xd5, 0xe0, 0x81, 0xa1, 0x87, 0x41, 0xea,
	0xa1, 0x6b, 0x2a, 0xe0, 0x3c, 0xf5, 0x11, 0x6c, 0xb0, 0x2e, 0x9c, 0x4c, 0x39, 0xc4, 0x91, 0x09,
	0xe8, 0x63, 0xcf, 0x0d, 0xac, 0xd0, 0xf5, 0x05, 0x39, 0x94, 0x1c, 0x86, 0xf2, 0xc0, 0x52, 0xfc,
	0xf4, 0x65, 0x9a, 0x34, 0xc6, 0xb4, 0x7c, 0xca, 0xd4, 0x84, 0x2e, 0x2d, 0xca, 0x68, 0x63, 0x38,
	0x95, 0x7a, 0x30, 0x62, 0x2f, 0x65, 0x08, 0x97, 0x4f, 0xbe, 0x17, 0x45, 0xce, 0x9b, 0x79, 0xd7,
	0xd4, 0x0f, 0x17, 0x60, 0x3a, 0x71, 0x7c, 0x21, 0xe5, 0xf9, 0x6d, 0x04, 0xb1, 0xa6, 0x64, 0x9a,
	0x0c, 0x33, 0xbb, 0x40, 0xc0, 0x87, 0x99, 0x26, 0x8e, 0x5c, 0x55, 0xd4, 0x4a, 0xe7, 0x8a, 0xfb,
	0x69, 0xf4, 0x37, 0xc9, 0xeb, 0x07, 0xd8, 0x17, 0x17, 0x7f, 0xc8, 0x6f, 0xd4, 0x84, 0xea, 0x3e,
	0x3e, 0xf4, 0x2d, 0x67, 0x57, 0x5c, 0x0c, 0xe1, 0xc9, 0xf8, 0xb2, 0xa9, 0x1e, 0xdf, 0xb2, 0xa9,
	0x25, 0xe8, 0xf0, 0x0f, 0x34, 0x98, 0x1d, 0x38, 0xd2, 0xa2, 0x36, 0x4c, 0x44, 0xce, 0xa4, 0x86,
	0x70, 0xbf, 0x8d, 0xe5, 0x91, 0xa5, 0x60, 0x7d, 0x28, 0x46, 0x97, 0xfc, 0x14, 0x5c, 0xa7, 0x18,
	0x71, 0x9d, 0xc7, 0x61, 0x8a, 0x1e, 0x8e, 0xe9, 0x53, 0xed, 0x3b, 0xd1, 0xab, 0xc6, 0x89, 0x5c,
	0x85, 0x8e, 0xe5, 0x23, 0xb9, 0x53, 0x25, 0xd1, 0xf2, 0x0f, 0xe1, 0x54, 0xea, 0xb9, 0x63, 0xa4,
	0x40, 0xf7, 0x09, 0xa8, 0x07, 0x7b, 0x86, 0xcf, 0xa2, 0x6c, 0x71, 0x73, 0xa9, 0xcc, 0x18, 0x3a,
	0x69, 0xde, 0x83, 0x07, 0x87, 0x1f, 0x21, 0x48, 0xdd, 0x4c, 0xda, 0xdd, 0x50, 0xe2, 0x94, 0x44,
	0x39, 0x47, 0xee, 0x34, 0x3f, 0xa1, 0xc1, 0xc9, 0x94, 0x03, 0x04, 0x6b, 0xcd, 0xae, 0x15, 0x84,
	0x72, 0x95, 0xc9, 0x34, 0xd5, 0x89, 0xb2, 0xb3, 0x0f, 0xc7, 0xc5, 0x52, 0xc3, 0x7a, 0x20, 0x27,
	0x61, 0x49, 0x99, 0x84, 0x73, 0x50, 0x66, 0x4f, 0x54, 0x33, 0xda, 0xb3, 0x44, 0xfb, 0xab, 0x1a,
	0xa7, 0xef, 0x40, 0x1f, 0x5b, 0x40, 0x6f, 0xe2, 0x29, 0xd4, 0x95, 0x69, 0x7a, 0xb3, 0xdf, 0x0a,
	0xf6, 0x6f, 0xe8, 0x6b, 0xe2, 0x7a, 0x0e, 0x4f, 0x12, 0xb6, 0xd7, 0x35, 0xba, 0x7b, 0x96, 0xb3,
	0x2b, 0x77, 0xf6, 0xba, 0xae, 0x66, 0x29, 0xb4, 0x29, 0x1d, 0x39, 0x09, 0xca, 0x89, 0x11, 0x31,
	0x01, 0x0d, 0x1e, 0xf9, 0xc7, 0x3a, 0x83, 0x0c, 0x1b, 0xf7, 0x7f, 0x4f, 0xaf, 0xba, 0x26, 0x15,
	0x02, 0x43, 0xf9, 0xc5, 0x11, 0x62, 0x3b, 0x25, 0x7e, 0x51, 0x21, 0xbe, 0x9c, 0xac, 0xf4, 0xb0,
	0x5d, 0x52, 0x27, 0x2b, 0x95, 0x52, 0x63, 0x7c, 0xa0, 0x7c, 0x7c, 0x7c, 0x20, 0xb9, 0x9a, 0xbe,
	0x0f, 0x2a, 0x2b, 0xce, 0xc1, 0x4d, 0xc3, 0x4f, 0xbd, 0xf9, 0x98, 0xba, 0xc9, 0xa1, 0x55, 0x00,
	0xfa, 0xa3, 0xb3, 0xe3, 0xbb, 0xbd, 0x4c, 0xe1, 0xcf, 0x59, 0x15, 0xe2, 0x30, 0x4b, 0x81, 0x2f,
	0xfb, 0x6e, 0xaf, 0xfd, 0xbf, 0x0b, 0x30, 0xa1, 0x7e, 0x43, 0xeb, 0x50, 0xa7, 0x62, 0x34, 0xbd,
	0x9f, 0xab, 0xdd, 0xb1, 0x24, 0xfe, 0x05, 0x40, 0xf2, 0x41, 0xf7, 0x08, 0x6f, 0xe1, 0x18, 0x65,
	0xf1, 0xcf, 0xd3, 0x27, 0x44, 0x77, 0xac, 0xdd, 0x4e, 0xcf, 0xf0, 0x3a, 0xfb, 0xf8, 0x50, 0x79,
	0x0c, 0xff, 0xf9, 0x6c, 0xaa, 0x8e, 0xab, 0xf8, 0x50, 0x56, 0x30, 0xdd, 0x55, 0x72, 0x09, 0xfe,
	0x2d, 0x98, 0xe2, 0x5e, 0x38, 0x02, 0x77, 0x29, 0x83, 0xb2, 0x92, 0x1d, 0x77, 0x55, 0xc4, 0x13,
	0x81, 0xc8, 0xd2, 0xf1, 0x4e, 0xfb, 0x06, 0x9c, 0x4c, 0x21, 0x1c, 0xbd, 0x1f, 0xed, 0x59, 0x9d,
	0x78, 0x74, 0x53, 0x25, 0x94, 0x1f, 0x7a, 0x00, 0x80, 0x91, 0x51, 0x99, 0xe3, 0x6c, 0xc0, 0x08,
	0x97, 0x6b, 0x87, 0x70, 0x2a, 0x95, 0x6e, 0xf4, 0x12, 0xbc, 0x08, 0x82, 0xa2, 0xba, 0x13, 0x4d,
	0xca, 0xdc, 0x88, 0x07, 0x2b, 0x81, 0x9c, 0x28, 0xd7, 0x63, 0x69, 0xc6, 0x61, 0x0e, 0xac, 0x40,
	0x5e, 0xd2, 0x10, 0xc9, 0xf6, 0x8f, 0x6b, 0x30, 0x97, 0x46, 0x4c, 0xb4, 0x0d, 0xa7, 0xe9, 0x51,
	0xa5, 0xe3, 0xd2, 0xbe, 0x76, 0xfc, 0xc4, 0xd9, 0x27, 0xdf, 0x82, 0x4a, 0x3f, 0xf6, 0x70, 0xc1,
	0xb0, 0x20, 0x05, 0x43, 0x22, 0xc5, 0xcd, 0x0e, 0xd0, 0xff, 0xcf, 0xa6, 0x2d, 0x2f, 0xfc, 0xe1,
	0x29, 0xa8, 0x32, 0x47, 0xac, 0x00, 0xfd, 0x63, 0x0d, 0x4a, 0xd7, 0xac, 0x20, 0x44, 0xc3, 0x17,
	0x14, 0xbf, 0xce, 0x2e, 0x1d, 0xbf, 0x71, 0x10, 0xb6, 0x9e, 0xcf, 0x01, 0xc1, 0xae, 0x95, 0xb7,
	0xaf, 0xff, 0xe0, 0xaf, 0x35, 0x0b, 0x35, 0xed, 0x07, 0xbf, 0xfd, 0x7b, 0x3f, 0x5d, 0x58, 0x44,
	0x6f, 0x9e, 0xeb, 0x08, 0x0c, 0xe7, 0x0c, 0xcf, 0x3a, 0x17, 0x61, 0x39, 0xc7, 0xb1, 0x9c, 0xe3,
	0x77, 0xb3, 0x83, 0x73, 0x5f, 0xe2, 0xbf, 0xbe, 0x7c, 0xee, 0x4b, 0xe1, 0xa1, 0x87, 0xbf, 0x7c,
	0xee, 0x83, 0xc0, 0x75, 0xd0, 0xbf, 0xd2, 0xa0, 0x26, 0xee, 0xae, 0xa3, 0x11, 0x8a, 0xd2, 0xe8,
	0x8a, 0x7b, 0xac, 0x17, 0x2f, 0xe7, 0x84, 0xe2, 0x3d, 0xb9, 0xa1, 0xf4, 0x64, 0x0d, 0x5d, 0xb9,
	0x93, 0x9e, 0x7c, 0x89, 0x4c, 0x7d, 0xde, 0xa1, 0xaf, 0x6b, 0x50, 0x61, 0x97, 0xe7, 0xd1, 0x08,
	0x95, 0x28, 0xbf, 0x61, 0x1f, 0xef, 0xcc, 0x03, 0x11, 0x8c, 0x49, 0x90, 0x07, 0xf3, 0x37, 0x5d,
	0xcb, 0x94, 0x8d, 0x7e, 0x47, 0x69, 0xf4, 0x4a, 0xfb, 0x8e, 0xc9, 0x7f, 0x41, 0x7b, 0x1a, 0xfd,
	0xaa, 0x06, 0x15, 0x76, 0xc1, 0x7e, 0x44, 0x83, 0xc5, 0x2d, 0xfc, 0x5c, 0x0d, 0x8e, 0x51, 0xf9,
	0xe9, 0x63, 0xa3, 0xf2, 0xaf, 0x69, 0x50, 0x61, 0xb1, 0x2b, 0x46, 0x34, 0x9a, 0x15, 0xca, 0xd9,
	0xe8, 0xf7, 0x94, 0x46, 0x5f, 0x6b, 0x1d, 0x57, 0xa3, 0x09, 0xb1, 0xff, 0x9a, 0x06, 0xa5, 0x25,
	0xd7, 0x3b, 0x1c, 0xb1, 0x58, 0x49, 0x91, 0x9c, 0x6d, 0x5e, 0x56, 0xda, 0x7c, 0xbe, 0xf5, 0xe2,
	0xe8, 0x36, 0x1b, 0x5d, 0x7a, 0x0e, 0x3e, 0xd7, 0x75, 0xbd, 0x43, 0xd9, 0xbe, 0xdf, 0xd3, 0x60,
	0x72, 0xc5, 0xb4, 0x42, 0xc9, 0x77, 0x51, 0xc6, 0xcd, 0x8e, 0x00, 0x65, 0x6c, 0xe9, 0xf7, 0x6b,
	0x4a, 0x53, 0xc3, 0xb6, 0x3b, 0x16, 0x79, 0x23, 0x77, 0x0e, 0x46, 0x62, 0xfa, 0xfb, 0xcb, 0xe7,
	0xd8, 0x36, 0xdb, 0x33, 0xbc, 0x40, 0x50, 0x5e, 0x74, 0x13, 0x9b, 0x56, 0x28, 0xbb, 0xf9, 0xbb,
	0x1a, 0x00, 0x69, 0x31, 0x0f, 0x91, 0x9f, 0x65, 0xd3, 0xcd, 0xd1, 0xc1, 0x2f, 0x2b, 0xfd, 0xfb,
	0xb0, 0x6d, 0x1f, 0x67, 0xff, 0xf8, 0x7d, 0xe5, 0xa1, 0x9d, 0xfb, 0x43, 0x0d, 0x9a, 0x3a, 0x3d,
	0x54, 0x60, 0x3f, 0xa9, 0x12, 0x46, 0xaf, 0xe7, 0x8b, 0x11, 0xc1, 0xd1, 0x64, 0xec, 0x78, 0xa8,
	0x74, 0x7c, 0xaf, 0xdd, 0x1d, 0xab, 0xe3, 0x91, 0x11, 0x93, 0x89, 0xf8, 0x03, 0x7d, 0xf5, 0x79,
	0x9b, 0x64, 0x7f, 0xff, 0x48, 0x83, 0xd6, 0x0d, 0xc7, 0x3f, 0xaa, 0xc7, 0xf9, 0xcc, 0xaa, 0x37,
	0x9c, 0x9c, 0x7d, 0x0e, 0x94, 0x3e, 0xef, 0x3e, 0x8d, 0x3f, 0x9a, 0x3e, 0xf7, 0x9d, 0x58, 0xaf,
	0xd1, 0xff, 0xd5, 0xe0, 0x81, 0xa3, 0x86, 0x98, 0x59, 0x7d, 0x17, 0xc6, 0x88, 0xd4, 0x91, 0xaf,
	0xe3, 0x87, 0x4a, 0xc7, 0x7b, 0xed, 0xbd, 0x63, 0xe9, 0x38, 0xb5, 0x45, 0x8c, 0x1e, 0xf1, 0xef,
	0x68, 0xf0, 0xd0, 0xd1, 0x23, 0xce, 0x08, 0xb0, 0x94, 0x9f, 0x00, 0xb9, 0xc7, 0xfe, 0xb6, 0x42,
	0x02, 0xfb, 0xe9, 0x0f, 0x3e, 0x42, 0x12, 0x24, 0x27, 0xc0, 0x7f, 0xd5, 0x60, 0x42, 0xc7, 0x44,
	0xa0, 0xc7, 0x6b, 0x8e, 0x89, 0x6f, 0xa3, 0x51, 0x2f, 0x2d, 0x45, 0x45, 0x8f, 0x41, 0x08, 0x74,
	0x95, 0x7e, 0x77, 0x91, 0x71, 0x0c, 0xfb, 0xe3, 0x97, 0x98, 0x2a, 0x6a, 0x8b, 0xe6, 0xf9, 0xac,
	0xb5, 0x16, 0x69, 0x2d, 0xed, 0xee, 0x0b, 0xdf, 0x29, 0x41, 0x79, 0xd9, 0x0a, 0xf6, 0x03, 0xf4,
	0x4b, 0x42, 0xda, 0x7d, 0x66, 0x64, 0x44, 0x23, 0x25, 0xda, 0x53, 0xeb, 0xd9, 0x8c, 0xa5, 0x79,
	0x07, 0x5f, 0x56, 0x3a, 0xf8, 0x14, 0x7a, 0x22, 0xd1, 0xc1, 0xae, 0xed, 0xf6, 0x4d, 0xd9, 0x37,
	0x1a, 0xe7, 0x89, 0x8d, 0xca, 0xd7, 0x54, 0x61, 0xf6, 0xb9, 0x91, 0x55, 0x26, 0x82, 0x42, 0x8d,
	0x18, 0x89, 0xb4, 0x28, 0x4f, 0xed, 0xd7, 0x95, 0x86, 0x3e, 0x87, 0xe6, 0x33, 0x34, 0x54, 0x95,
	0xa2, 0x7e, 0x32, 0x92, 0x55, 0xe7, 0x47, 0xd6, 0x1d, 0x8b, 0x08, 0x35, 0x6a, 0x65, 0x9c, 0x57,
	0xda, 0xf5, 0x4c, 0x3b, 0x2b, 0x01, 0xc9, 0xda, 0xfe, 0x99, 0x48, 0x1c, 0x9d, 0xcf, 0x40, 0x0f,
	0x25, 0x30, 0xd4, 0xa8, 0x36, 0xbd, 0xa6, 0xb4, 0xe9, 0xdc, 0xd3, 0xcf, 0x66, 0xa1, 0x55, 0xdf,
	0x32, 0x19, 0xa9, 0x16, 0x2f, 0xc2, 0x23, 0x5d, 0xb7, 0x17, 0x55, 0x60, 0x78, 0x56, 0x4a, 0xa3,
	0x16, 0x1b, 0xec, 0x54, 0xb6, 0xe1, 0xbb, 0xa1, 0xbb, 0xa1, 0x7d, 0xa6, 0xca, 0xf3, 0xb7, 0x2b,
	0x1e, 0xc9, 0x79, 0xf1, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x77, 0x7b, 0xf7, 0xa6, 0xd7, 0xfb,
	0x00, 0x00,
}
