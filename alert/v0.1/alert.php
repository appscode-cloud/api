<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: alert.proto
//   Date: 2016-04-20 05:49:19

namespace alert {

  class NotificationRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $state_type = null;
    
    /**  @var string */
    public $state = null;
    
    /**  @var string */
    public $time = null;
    
    /**  @var string */
    public $service_output = null;
    
    /**  @var string */
    public $alert_phid = null;
    
    /**  @var string */
    public $host_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'alert.NotificationRequest');

      // OPTIONAL STRING state_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING service_output = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "service_output";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING alert_phid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "alert_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING host_name = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "host_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state_type> has a value
     *
     * @return boolean
     */
    public function hasStateType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state_type> value
     *
     * @return \alert\NotificationRequest
     */
    public function clearStateType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state_type> value
     *
     * @return string
     */
    public function getStateType(){
      return $this->_get(1);
    }
    
    /**
     * Set <state_type> value
     *
     * @param string $value
     * @return \alert\NotificationRequest
     */
    public function setStateType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \alert\NotificationRequest
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return string
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param string $value
     * @return \alert\NotificationRequest
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <time> value
     *
     * @return \alert\NotificationRequest
     */
    public function clearTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <time> value
     *
     * @return string
     */
    public function getTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <time> value
     *
     * @param string $value
     * @return \alert\NotificationRequest
     */
    public function setTime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <service_output> has a value
     *
     * @return boolean
     */
    public function hasServiceOutput(){
      return $this->_has(4);
    }
    
    /**
     * Clear <service_output> value
     *
     * @return \alert\NotificationRequest
     */
    public function clearServiceOutput(){
      return $this->_clear(4);
    }
    
    /**
     * Get <service_output> value
     *
     * @return string
     */
    public function getServiceOutput(){
      return $this->_get(4);
    }
    
    /**
     * Set <service_output> value
     *
     * @param string $value
     * @return \alert\NotificationRequest
     */
    public function setServiceOutput( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <alert_phid> has a value
     *
     * @return boolean
     */
    public function hasAlertPhid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <alert_phid> value
     *
     * @return \alert\NotificationRequest
     */
    public function clearAlertPhid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <alert_phid> value
     *
     * @return string
     */
    public function getAlertPhid(){
      return $this->_get(5);
    }
    
    /**
     * Set <alert_phid> value
     *
     * @param string $value
     * @return \alert\NotificationRequest
     */
    public function setAlertPhid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <host_name> has a value
     *
     * @return boolean
     */
    public function hasHostName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <host_name> value
     *
     * @return \alert\NotificationRequest
     */
    public function clearHostName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <host_name> value
     *
     * @return string
     */
    public function getHostName(){
      return $this->_get(6);
    }
    
    /**
     * Set <host_name> value
     *
     * @param string $value
     * @return \alert\NotificationRequest
     */
    public function setHostName( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace alert {

  class CreateReuquest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \alert\Spec */
    public $spec = null;
    
    /**  @var string */
    public $matrix_phid = null;
    
    /**  @var \alert\Matrix */
    public $matrix = null;
    
    /**  @var \alert\AlertSpec */
    public $alert_spec = null;
    
    /**  @var int */
    public $check_interval = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'alert.CreateReuquest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE spec = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "spec";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\alert\Spec';
      $descriptor->addField($f);

      // OPTIONAL STRING matrix_phid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "matrix_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE matrix = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "matrix";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\alert\Matrix';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE alert_spec = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "alert_spec";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\alert\AlertSpec';
      $descriptor->addField($f);

      // OPTIONAL INT64 check_interval = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "check_interval";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \alert\CreateReuquest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \alert\CreateReuquest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <spec> has a value
     *
     * @return boolean
     */
    public function hasSpec(){
      return $this->_has(2);
    }
    
    /**
     * Clear <spec> value
     *
     * @return \alert\CreateReuquest
     */
    public function clearSpec(){
      return $this->_clear(2);
    }
    
    /**
     * Get <spec> value
     *
     * @return \alert\Spec
     */
    public function getSpec(){
      return $this->_get(2);
    }
    
    /**
     * Set <spec> value
     *
     * @param \alert\Spec $value
     * @return \alert\CreateReuquest
     */
    public function setSpec(\alert\Spec $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <matrix_phid> has a value
     *
     * @return boolean
     */
    public function hasMatrixPhid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <matrix_phid> value
     *
     * @return \alert\CreateReuquest
     */
    public function clearMatrixPhid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <matrix_phid> value
     *
     * @return string
     */
    public function getMatrixPhid(){
      return $this->_get(3);
    }
    
    /**
     * Set <matrix_phid> value
     *
     * @param string $value
     * @return \alert\CreateReuquest
     */
    public function setMatrixPhid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <matrix> has a value
     *
     * @return boolean
     */
    public function hasMatrix(){
      return $this->_has(4);
    }
    
    /**
     * Clear <matrix> value
     *
     * @return \alert\CreateReuquest
     */
    public function clearMatrix(){
      return $this->_clear(4);
    }
    
    /**
     * Get <matrix> value
     *
     * @return \alert\Matrix
     */
    public function getMatrix(){
      return $this->_get(4);
    }
    
    /**
     * Set <matrix> value
     *
     * @param \alert\Matrix $value
     * @return \alert\CreateReuquest
     */
    public function setMatrix(\alert\Matrix $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <alert_spec> has a value
     *
     * @return boolean
     */
    public function hasAlertSpec(){
      return $this->_has(5);
    }
    
    /**
     * Clear <alert_spec> value
     *
     * @return \alert\CreateReuquest
     */
    public function clearAlertSpec(){
      return $this->_clear(5);
    }
    
    /**
     * Get <alert_spec> value
     *
     * @return \alert\AlertSpec
     */
    public function getAlertSpec(){
      return $this->_get(5);
    }
    
    /**
     * Set <alert_spec> value
     *
     * @param \alert\AlertSpec $value
     * @return \alert\CreateReuquest
     */
    public function setAlertSpec(\alert\AlertSpec $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <check_interval> has a value
     *
     * @return boolean
     */
    public function hasCheckInterval(){
      return $this->_has(6);
    }
    
    /**
     * Clear <check_interval> value
     *
     * @return \alert\CreateReuquest
     */
    public function clearCheckInterval(){
      return $this->_clear(6);
    }
    
    /**
     * Get <check_interval> value
     *
     * @return int
     */
    public function getCheckInterval(){
      return $this->_get(6);
    }
    
    /**
     * Set <check_interval> value
     *
     * @param int $value
     * @return \alert\CreateReuquest
     */
    public function setCheckInterval( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace alert {

  class UpdateReuquest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $phid = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var \alert\Spec */
    public $spec = null;
    
    /**  @var string */
    public $matrix_phid = null;
    
    /**  @var \alert\Matrix */
    public $matrix = null;
    
    /**  @var \alert\AlertSpec */
    public $alert_spec = null;
    
    /**  @var int */
    public $check_interval = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'alert.UpdateReuquest');

      // OPTIONAL STRING phid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE spec = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "spec";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\alert\Spec';
      $descriptor->addField($f);

      // OPTIONAL STRING matrix_phid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "matrix_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE matrix = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "matrix";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\alert\Matrix';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE alert_spec = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "alert_spec";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\alert\AlertSpec';
      $descriptor->addField($f);

      // OPTIONAL INT64 check_interval = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "check_interval";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <phid> has a value
     *
     * @return boolean
     */
    public function hasPhid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <phid> value
     *
     * @return \alert\UpdateReuquest
     */
    public function clearPhid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <phid> value
     *
     * @return string
     */
    public function getPhid(){
      return $this->_get(1);
    }
    
    /**
     * Set <phid> value
     *
     * @param string $value
     * @return \alert\UpdateReuquest
     */
    public function setPhid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \alert\UpdateReuquest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \alert\UpdateReuquest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <spec> has a value
     *
     * @return boolean
     */
    public function hasSpec(){
      return $this->_has(3);
    }
    
    /**
     * Clear <spec> value
     *
     * @return \alert\UpdateReuquest
     */
    public function clearSpec(){
      return $this->_clear(3);
    }
    
    /**
     * Get <spec> value
     *
     * @return \alert\Spec
     */
    public function getSpec(){
      return $this->_get(3);
    }
    
    /**
     * Set <spec> value
     *
     * @param \alert\Spec $value
     * @return \alert\UpdateReuquest
     */
    public function setSpec(\alert\Spec $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <matrix_phid> has a value
     *
     * @return boolean
     */
    public function hasMatrixPhid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <matrix_phid> value
     *
     * @return \alert\UpdateReuquest
     */
    public function clearMatrixPhid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <matrix_phid> value
     *
     * @return string
     */
    public function getMatrixPhid(){
      return $this->_get(4);
    }
    
    /**
     * Set <matrix_phid> value
     *
     * @param string $value
     * @return \alert\UpdateReuquest
     */
    public function setMatrixPhid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <matrix> has a value
     *
     * @return boolean
     */
    public function hasMatrix(){
      return $this->_has(5);
    }
    
    /**
     * Clear <matrix> value
     *
     * @return \alert\UpdateReuquest
     */
    public function clearMatrix(){
      return $this->_clear(5);
    }
    
    /**
     * Get <matrix> value
     *
     * @return \alert\Matrix
     */
    public function getMatrix(){
      return $this->_get(5);
    }
    
    /**
     * Set <matrix> value
     *
     * @param \alert\Matrix $value
     * @return \alert\UpdateReuquest
     */
    public function setMatrix(\alert\Matrix $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <alert_spec> has a value
     *
     * @return boolean
     */
    public function hasAlertSpec(){
      return $this->_has(6);
    }
    
    /**
     * Clear <alert_spec> value
     *
     * @return \alert\UpdateReuquest
     */
    public function clearAlertSpec(){
      return $this->_clear(6);
    }
    
    /**
     * Get <alert_spec> value
     *
     * @return \alert\AlertSpec
     */
    public function getAlertSpec(){
      return $this->_get(6);
    }
    
    /**
     * Set <alert_spec> value
     *
     * @param \alert\AlertSpec $value
     * @return \alert\UpdateReuquest
     */
    public function setAlertSpec(\alert\AlertSpec $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <check_interval> has a value
     *
     * @return boolean
     */
    public function hasCheckInterval(){
      return $this->_has(7);
    }
    
    /**
     * Clear <check_interval> value
     *
     * @return \alert\UpdateReuquest
     */
    public function clearCheckInterval(){
      return $this->_clear(7);
    }
    
    /**
     * Get <check_interval> value
     *
     * @return int
     */
    public function getCheckInterval(){
      return $this->_get(7);
    }
    
    /**
     * Set <check_interval> value
     *
     * @param int $value
     * @return \alert\UpdateReuquest
     */
    public function setCheckInterval( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace alert {

  class Spec extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $object_type = null;
    
    /**  @var string */
    public $object_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'alert.Spec');

      // OPTIONAL STRING cluster = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING object_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "object_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING object_name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "object_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \alert\Spec
     */
    public function clearCluster(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(2);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \alert\Spec
     */
    public function setCluster( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(3);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \alert\Spec
     */
    public function clearNamespace(){
      return $this->_clear(3);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(3);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \alert\Spec
     */
    public function setNamespace( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <object_type> has a value
     *
     * @return boolean
     */
    public function hasObjectType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <object_type> value
     *
     * @return \alert\Spec
     */
    public function clearObjectType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <object_type> value
     *
     * @return string
     */
    public function getObjectType(){
      return $this->_get(4);
    }
    
    /**
     * Set <object_type> value
     *
     * @param string $value
     * @return \alert\Spec
     */
    public function setObjectType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <object_name> has a value
     *
     * @return boolean
     */
    public function hasObjectName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <object_name> value
     *
     * @return \alert\Spec
     */
    public function clearObjectName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <object_name> value
     *
     * @return string
     */
    public function getObjectName(){
      return $this->_get(5);
    }
    
    /**
     * Set <object_name> value
     *
     * @param string $value
     * @return \alert\Spec
     */
    public function setObjectName( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace alert {

  class AlertSpec extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $warning_condition = null;
    
    /**  @var string */
    public $critical_condition = null;
    
    /**  @var string */
    public $warning_user = null;
    
    /**  @var int */
    public $warning_method = null;
    
    /**  @var string */
    public $critical_user = null;
    
    /**  @var int */
    public $critical_method = null;
    
    /**  @var int */
    public $alert_interval = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'alert.AlertSpec');

      // OPTIONAL STRING warning_condition = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "warning_condition";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING critical_condition = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "critical_condition";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING warning_user = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "warning_user";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 warning_method = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "warning_method";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING critical_user = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "critical_user";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 critical_method = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "critical_method";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 alert_interval = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "alert_interval";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <warning_condition> has a value
     *
     * @return boolean
     */
    public function hasWarningCondition(){
      return $this->_has(1);
    }
    
    /**
     * Clear <warning_condition> value
     *
     * @return \alert\AlertSpec
     */
    public function clearWarningCondition(){
      return $this->_clear(1);
    }
    
    /**
     * Get <warning_condition> value
     *
     * @return string
     */
    public function getWarningCondition(){
      return $this->_get(1);
    }
    
    /**
     * Set <warning_condition> value
     *
     * @param string $value
     * @return \alert\AlertSpec
     */
    public function setWarningCondition( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <critical_condition> has a value
     *
     * @return boolean
     */
    public function hasCriticalCondition(){
      return $this->_has(2);
    }
    
    /**
     * Clear <critical_condition> value
     *
     * @return \alert\AlertSpec
     */
    public function clearCriticalCondition(){
      return $this->_clear(2);
    }
    
    /**
     * Get <critical_condition> value
     *
     * @return string
     */
    public function getCriticalCondition(){
      return $this->_get(2);
    }
    
    /**
     * Set <critical_condition> value
     *
     * @param string $value
     * @return \alert\AlertSpec
     */
    public function setCriticalCondition( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <warning_user> has a value
     *
     * @return boolean
     */
    public function hasWarningUser(){
      return $this->_has(4);
    }
    
    /**
     * Clear <warning_user> value
     *
     * @return \alert\AlertSpec
     */
    public function clearWarningUser(){
      return $this->_clear(4);
    }
    
    /**
     * Get <warning_user> value
     *
     * @return string
     */
    public function getWarningUser(){
      return $this->_get(4);
    }
    
    /**
     * Set <warning_user> value
     *
     * @param string $value
     * @return \alert\AlertSpec
     */
    public function setWarningUser( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <warning_method> has a value
     *
     * @return boolean
     */
    public function hasWarningMethod(){
      return $this->_has(5);
    }
    
    /**
     * Clear <warning_method> value
     *
     * @return \alert\AlertSpec
     */
    public function clearWarningMethod(){
      return $this->_clear(5);
    }
    
    /**
     * Get <warning_method> value
     *
     * @return int
     */
    public function getWarningMethod(){
      return $this->_get(5);
    }
    
    /**
     * Set <warning_method> value
     *
     * @param int $value
     * @return \alert\AlertSpec
     */
    public function setWarningMethod( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <critical_user> has a value
     *
     * @return boolean
     */
    public function hasCriticalUser(){
      return $this->_has(6);
    }
    
    /**
     * Clear <critical_user> value
     *
     * @return \alert\AlertSpec
     */
    public function clearCriticalUser(){
      return $this->_clear(6);
    }
    
    /**
     * Get <critical_user> value
     *
     * @return string
     */
    public function getCriticalUser(){
      return $this->_get(6);
    }
    
    /**
     * Set <critical_user> value
     *
     * @param string $value
     * @return \alert\AlertSpec
     */
    public function setCriticalUser( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <critical_method> has a value
     *
     * @return boolean
     */
    public function hasCriticalMethod(){
      return $this->_has(7);
    }
    
    /**
     * Clear <critical_method> value
     *
     * @return \alert\AlertSpec
     */
    public function clearCriticalMethod(){
      return $this->_clear(7);
    }
    
    /**
     * Get <critical_method> value
     *
     * @return int
     */
    public function getCriticalMethod(){
      return $this->_get(7);
    }
    
    /**
     * Set <critical_method> value
     *
     * @param int $value
     * @return \alert\AlertSpec
     */
    public function setCriticalMethod( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <alert_interval> has a value
     *
     * @return boolean
     */
    public function hasAlertInterval(){
      return $this->_has(8);
    }
    
    /**
     * Clear <alert_interval> value
     *
     * @return \alert\AlertSpec
     */
    public function clearAlertInterval(){
      return $this->_clear(8);
    }
    
    /**
     * Get <alert_interval> value
     *
     * @return int
     */
    public function getAlertInterval(){
      return $this->_get(8);
    }
    
    /**
     * Set <alert_interval> value
     *
     * @param int $value
     * @return \alert\AlertSpec
     */
    public function setAlertInterval( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace alert {

  class ListRequest extends \DrSlump\Protobuf\Message {

    /**  @var \alert\Spec */
    public $spec = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'alert.ListRequest');

      // OPTIONAL MESSAGE spec = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "spec";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\alert\Spec';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <spec> has a value
     *
     * @return boolean
     */
    public function hasSpec(){
      return $this->_has(1);
    }
    
    /**
     * Clear <spec> value
     *
     * @return \alert\ListRequest
     */
    public function clearSpec(){
      return $this->_clear(1);
    }
    
    /**
     * Get <spec> value
     *
     * @return \alert\Spec
     */
    public function getSpec(){
      return $this->_get(1);
    }
    
    /**
     * Set <spec> value
     *
     * @param \alert\Spec $value
     * @return \alert\ListRequest
     */
    public function setSpec(\alert\Spec $value){
      return $this->_set(1, $value);
    }
  }
}

namespace alert {

  class DeleteRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $phid = null;
    
    /**  @var \alert\Spec */
    public $spec = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'alert.DeleteRequest');

      // OPTIONAL STRING phid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE spec = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "spec";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\alert\Spec';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <phid> has a value
     *
     * @return boolean
     */
    public function hasPhid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <phid> value
     *
     * @return \alert\DeleteRequest
     */
    public function clearPhid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <phid> value
     *
     * @return string
     */
    public function getPhid(){
      return $this->_get(1);
    }
    
    /**
     * Set <phid> value
     *
     * @param string $value
     * @return \alert\DeleteRequest
     */
    public function setPhid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <spec> has a value
     *
     * @return boolean
     */
    public function hasSpec(){
      return $this->_has(2);
    }
    
    /**
     * Clear <spec> value
     *
     * @return \alert\DeleteRequest
     */
    public function clearSpec(){
      return $this->_clear(2);
    }
    
    /**
     * Get <spec> value
     *
     * @return \alert\Spec
     */
    public function getSpec(){
      return $this->_get(2);
    }
    
    /**
     * Set <spec> value
     *
     * @param \alert\Spec $value
     * @return \alert\DeleteRequest
     */
    public function setSpec(\alert\Spec $value){
      return $this->_set(2, $value);
    }
  }
}

namespace alert {

  class ListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \alert\Alert[]  */
    public $alerts = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'alert.ListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE alerts = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "alerts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\alert\Alert';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \alert\ListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \alert\ListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <alerts> has a value
     *
     * @return boolean
     */
    public function hasAlerts(){
      return $this->_has(2);
    }
    
    /**
     * Clear <alerts> value
     *
     * @return \alert\ListResponse
     */
    public function clearAlerts(){
      return $this->_clear(2);
    }
    
    /**
     * Get <alerts> value
     *
     * @param int $idx
     * @return \alert\Alert
     */
    public function getAlerts($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <alerts> value
     *
     * @param \alert\Alert $value
     * @return \alert\ListResponse
     */
    public function setAlerts(\alert\Alert $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <alerts>
     *
     * @return \alert\Alert[]
     */
    public function getAlertsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <alerts>
     *
     * @param \alert\Alert $value
     * @return \alert\ListResponse
     */
    public function addAlerts(\alert\Alert $value){
     return $this->_add(2, $value);
    }
  }
}

namespace alert {

  class Alert extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $phid = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $icinga_url = null;
    
    /**  @var \alert\Matrix */
    public $matrix = null;
    
    /**  @var \alert\AlertSpec */
    public $spec = null;
    
    /**  @var int */
    public $refresh_interval = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'alert.Alert');

      // OPTIONAL STRING phid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING icinga_url = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "icinga_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE matrix = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "matrix";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\alert\Matrix';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE spec = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "spec";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\alert\AlertSpec';
      $descriptor->addField($f);

      // OPTIONAL INT64 refresh_interval = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "refresh_interval";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <phid> has a value
     *
     * @return boolean
     */
    public function hasPhid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <phid> value
     *
     * @return \alert\Alert
     */
    public function clearPhid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <phid> value
     *
     * @return string
     */
    public function getPhid(){
      return $this->_get(1);
    }
    
    /**
     * Set <phid> value
     *
     * @param string $value
     * @return \alert\Alert
     */
    public function setPhid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \alert\Alert
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \alert\Alert
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <icinga_url> has a value
     *
     * @return boolean
     */
    public function hasIcingaUrl(){
      return $this->_has(3);
    }
    
    /**
     * Clear <icinga_url> value
     *
     * @return \alert\Alert
     */
    public function clearIcingaUrl(){
      return $this->_clear(3);
    }
    
    /**
     * Get <icinga_url> value
     *
     * @return string
     */
    public function getIcingaUrl(){
      return $this->_get(3);
    }
    
    /**
     * Set <icinga_url> value
     *
     * @param string $value
     * @return \alert\Alert
     */
    public function setIcingaUrl( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <matrix> has a value
     *
     * @return boolean
     */
    public function hasMatrix(){
      return $this->_has(4);
    }
    
    /**
     * Clear <matrix> value
     *
     * @return \alert\Alert
     */
    public function clearMatrix(){
      return $this->_clear(4);
    }
    
    /**
     * Get <matrix> value
     *
     * @return \alert\Matrix
     */
    public function getMatrix(){
      return $this->_get(4);
    }
    
    /**
     * Set <matrix> value
     *
     * @param \alert\Matrix $value
     * @return \alert\Alert
     */
    public function setMatrix(\alert\Matrix $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <spec> has a value
     *
     * @return boolean
     */
    public function hasSpec(){
      return $this->_has(5);
    }
    
    /**
     * Clear <spec> value
     *
     * @return \alert\Alert
     */
    public function clearSpec(){
      return $this->_clear(5);
    }
    
    /**
     * Get <spec> value
     *
     * @return \alert\AlertSpec
     */
    public function getSpec(){
      return $this->_get(5);
    }
    
    /**
     * Set <spec> value
     *
     * @param \alert\AlertSpec $value
     * @return \alert\Alert
     */
    public function setSpec(\alert\AlertSpec $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <refresh_interval> has a value
     *
     * @return boolean
     */
    public function hasRefreshInterval(){
      return $this->_has(6);
    }
    
    /**
     * Clear <refresh_interval> value
     *
     * @return \alert\Alert
     */
    public function clearRefreshInterval(){
      return $this->_clear(6);
    }
    
    /**
     * Get <refresh_interval> value
     *
     * @return int
     */
    public function getRefreshInterval(){
      return $this->_get(6);
    }
    
    /**
     * Set <refresh_interval> value
     *
     * @param int $value
     * @return \alert\Alert
     */
    public function setRefreshInterval( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace alert\Matrix {

  class QueryEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'alert.Matrix.QueryEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \alert\Matrix\QueryEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \alert\Matrix\QueryEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \alert\Matrix\QueryEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \alert\Matrix\QueryEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace alert {

  class Matrix extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $command = null;
    
    /**  @var \alert\Matrix\QueryEntry[]  */
    public $query = array();
    
    /**  @var string */
    public $formula = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'alert.Matrix');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING command = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "command";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE query = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\alert\Matrix\QueryEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING formula = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "formula";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \alert\Matrix
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \alert\Matrix
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <command> has a value
     *
     * @return boolean
     */
    public function hasCommand(){
      return $this->_has(2);
    }
    
    /**
     * Clear <command> value
     *
     * @return \alert\Matrix
     */
    public function clearCommand(){
      return $this->_clear(2);
    }
    
    /**
     * Get <command> value
     *
     * @return string
     */
    public function getCommand(){
      return $this->_get(2);
    }
    
    /**
     * Set <command> value
     *
     * @param string $value
     * @return \alert\Matrix
     */
    public function setCommand( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(3);
    }
    
    /**
     * Clear <query> value
     *
     * @return \alert\Matrix
     */
    public function clearQuery(){
      return $this->_clear(3);
    }
    
    /**
     * Get <query> value
     *
     * @param int $idx
     * @return \alert\Matrix\QueryEntry
     */
    public function getQuery($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <query> value
     *
     * @param \alert\Matrix\QueryEntry $value
     * @return \alert\Matrix
     */
    public function setQuery(\alert\Matrix\QueryEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <query>
     *
     * @return \alert\Matrix\QueryEntry[]
     */
    public function getQueryList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <query>
     *
     * @param \alert\Matrix\QueryEntry $value
     * @return \alert\Matrix
     */
    public function addQuery(\alert\Matrix\QueryEntry $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <formula> has a value
     *
     * @return boolean
     */
    public function hasFormula(){
      return $this->_has(4);
    }
    
    /**
     * Clear <formula> value
     *
     * @return \alert\Matrix
     */
    public function clearFormula(){
      return $this->_clear(4);
    }
    
    /**
     * Get <formula> value
     *
     * @return string
     */
    public function getFormula(){
      return $this->_get(4);
    }
    
    /**
     * Set <formula> value
     *
     * @param string $value
     * @return \alert\Matrix
     */
    public function setFormula( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace alert {

  class AlertsClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param alert\NotificationRequest $input
     */
    public function Notify(\alert\NotificationRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/alert.Alerts/Notify', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param alert\CreateReuquest $input
     */
    public function Create(\alert\CreateReuquest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/alert.Alerts/Create', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param alert\UpdateReuquest $input
     */
    public function Update(\alert\UpdateReuquest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/alert.Alerts/Update', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param alert\DeleteRequest $input
     */
    public function Delete(\alert\DeleteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/alert.Alerts/Delete', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param alert\ListRequest $input
     */
    public function List(\alert\ListRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/alert.Alerts/List', $argument, '\alert\ListResponse::deserialize', $metadata, $options);
    }
  }
}
