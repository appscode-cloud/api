<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: dashboard.proto
//   Date: 2016-04-20 05:49:29

namespace monitoring {

  class DashboardCreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $cluster_name = null;
    
    /**  @var string */
    public $object_name = null;
    
    /**  @var string */
    public $namespace = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'monitoring.DashboardCreateRequest');

      // OPTIONAL STRING type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cluster_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING object_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "object_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \monitoring\DashboardCreateRequest
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \monitoring\DashboardCreateRequest
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cluster_name> has a value
     *
     * @return boolean
     */
    public function hasClusterName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cluster_name> value
     *
     * @return \monitoring\DashboardCreateRequest
     */
    public function clearClusterName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cluster_name> value
     *
     * @return string
     */
    public function getClusterName(){
      return $this->_get(2);
    }
    
    /**
     * Set <cluster_name> value
     *
     * @param string $value
     * @return \monitoring\DashboardCreateRequest
     */
    public function setClusterName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <object_name> has a value
     *
     * @return boolean
     */
    public function hasObjectName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <object_name> value
     *
     * @return \monitoring\DashboardCreateRequest
     */
    public function clearObjectName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <object_name> value
     *
     * @return string
     */
    public function getObjectName(){
      return $this->_get(3);
    }
    
    /**
     * Set <object_name> value
     *
     * @param string $value
     * @return \monitoring\DashboardCreateRequest
     */
    public function setObjectName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(4);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \monitoring\DashboardCreateRequest
     */
    public function clearNamespace(){
      return $this->_clear(4);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(4);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \monitoring\DashboardCreateRequest
     */
    public function setNamespace( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace monitoring {

  class DashboardCreateResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $url = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'monitoring.DashboardCreateResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING url = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \monitoring\DashboardCreateResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \monitoring\DashboardCreateResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(2);
    }
    
    /**
     * Clear <url> value
     *
     * @return \monitoring\DashboardCreateResponse
     */
    public function clearUrl(){
      return $this->_clear(2);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(2);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \monitoring\DashboardCreateResponse
     */
    public function setUrl( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace monitoring {

  class DashboardClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param monitoring\DashboardCreateRequest $input
     */
    public function Create(\monitoring\DashboardCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/monitoring.Dashboard/Create', $argument, '\monitoring\DashboardCreateResponse::deserialize', $metadata, $options);
    }
  }
}
