// Code generated by protoc-gen-go.
// source: subscription.proto
// DO NOT EDIT!

package billing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SubscriptionDescribeRequest struct {
	Time string `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
}

func (m *SubscriptionDescribeRequest) Reset()                    { *m = SubscriptionDescribeRequest{} }
func (m *SubscriptionDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionDescribeRequest) ProtoMessage()               {}
func (*SubscriptionDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SubscriptionDescribeResponse struct {
	Status        *dtypes.Status  `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Subscriptions []*Subscription `protobuf:"bytes,2,rep,name=subscriptions" json:"subscriptions,omitempty"`
}

func (m *SubscriptionDescribeResponse) Reset()                    { *m = SubscriptionDescribeResponse{} }
func (m *SubscriptionDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionDescribeResponse) ProtoMessage()               {}
func (*SubscriptionDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SubscriptionDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SubscriptionDescribeResponse) GetSubscriptions() []*Subscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type Subscription struct {
	Author      string `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	ProductSku  string `protobuf:"bytes,2,opt,name=product_sku" json:"product_sku,omitempty"`
	Metadata    string `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	DateStarted string `protobuf:"bytes,4,opt,name=date_started" json:"date_started,omitempty"`
	DateEnded   string `protobuf:"bytes,5,opt,name=date_ended" json:"date_ended,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type SubscriptionOpenRequest struct {
	ProductType      string `protobuf:"bytes,1,opt,name=product_type" json:"product_type,omitempty"`
	AuthorPhid       string `protobuf:"bytes,2,opt,name=author_phid" json:"author_phid,omitempty"`
	ObjectPhid       string `protobuf:"bytes,3,opt,name=object_phid" json:"object_phid,omitempty"`
	SubscriptionPhid string `protobuf:"bytes,4,opt,name=subscription_phid" json:"subscription_phid,omitempty"`
	Metadata         string `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *SubscriptionOpenRequest) Reset()                    { *m = SubscriptionOpenRequest{} }
func (m *SubscriptionOpenRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionOpenRequest) ProtoMessage()               {}
func (*SubscriptionOpenRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type SubscriptionCloseRequest struct {
	ProductType string `protobuf:"bytes,1,opt,name=product_type" json:"product_type,omitempty"`
	ObjectPhid  string `protobuf:"bytes,2,opt,name=object_phid" json:"object_phid,omitempty"`
}

func (m *SubscriptionCloseRequest) Reset()                    { *m = SubscriptionCloseRequest{} }
func (m *SubscriptionCloseRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionCloseRequest) ProtoMessage()               {}
func (*SubscriptionCloseRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func init() {
	proto.RegisterType((*SubscriptionDescribeRequest)(nil), "billing.SubscriptionDescribeRequest")
	proto.RegisterType((*SubscriptionDescribeResponse)(nil), "billing.SubscriptionDescribeResponse")
	proto.RegisterType((*Subscription)(nil), "billing.Subscription")
	proto.RegisterType((*SubscriptionOpenRequest)(nil), "billing.SubscriptionOpenRequest")
	proto.RegisterType((*SubscriptionCloseRequest)(nil), "billing.SubscriptionCloseRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Subscriptions service

type SubscriptionsClient interface {
	Describe(ctx context.Context, in *SubscriptionDescribeRequest, opts ...grpc.CallOption) (*SubscriptionDescribeResponse, error)
	Open(ctx context.Context, in *SubscriptionOpenRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Close(ctx context.Context, in *SubscriptionCloseRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type subscriptionsClient struct {
	cc *grpc.ClientConn
}

func NewSubscriptionsClient(cc *grpc.ClientConn) SubscriptionsClient {
	return &subscriptionsClient{cc}
}

func (c *subscriptionsClient) Describe(ctx context.Context, in *SubscriptionDescribeRequest, opts ...grpc.CallOption) (*SubscriptionDescribeResponse, error) {
	out := new(SubscriptionDescribeResponse)
	err := grpc.Invoke(ctx, "/billing.Subscriptions/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsClient) Open(ctx context.Context, in *SubscriptionOpenRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/billing.Subscriptions/Open", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsClient) Close(ctx context.Context, in *SubscriptionCloseRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/billing.Subscriptions/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Subscriptions service

type SubscriptionsServer interface {
	Describe(context.Context, *SubscriptionDescribeRequest) (*SubscriptionDescribeResponse, error)
	Open(context.Context, *SubscriptionOpenRequest) (*dtypes.VoidResponse, error)
	Close(context.Context, *SubscriptionCloseRequest) (*dtypes.VoidResponse, error)
}

func RegisterSubscriptionsServer(s *grpc.Server, srv SubscriptionsServer) {
	s.RegisterService(&_Subscriptions_serviceDesc, srv)
}

func _Subscriptions_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SubscriptionDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SubscriptionsServer).Describe(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Subscriptions_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SubscriptionOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SubscriptionsServer).Open(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Subscriptions_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SubscriptionCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SubscriptionsServer).Close(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Subscriptions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.Subscriptions",
	HandlerType: (*SubscriptionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _Subscriptions_Describe_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _Subscriptions_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Subscriptions_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x93, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0x86, 0xc9, 0x36, 0x5b, 0xd7, 0xb3, 0xdd, 0x45, 0xc7, 0x55, 0x63, 0x5c, 0xa4, 0x46, 0x17,
	0x64, 0x57, 0x32, 0xb2, 0x22, 0x42, 0x41, 0x10, 0xd4, 0x6b, 0xc1, 0x82, 0xb7, 0x65, 0xd2, 0x1c,
	0xda, 0xd1, 0x34, 0x33, 0x66, 0x26, 0x82, 0x94, 0xa2, 0x88, 0xf8, 0x02, 0xde, 0xf9, 0x5a, 0xbe,
	0x82, 0x0f, 0xe2, 0x64, 0xa6, 0xd1, 0xa1, 0x46, 0x0a, 0xde, 0x94, 0xce, 0x9f, 0x93, 0xf3, 0x7f,
	0xe7, 0x9f, 0x13, 0x20, 0xaa, 0xce, 0xd4, 0xb4, 0xe2, 0x52, 0x73, 0x51, 0xa6, 0xb2, 0x12, 0x5a,
	0x90, 0x0b, 0x19, 0x2f, 0x0a, 0x5e, 0xce, 0xe2, 0xe3, 0x99, 0x10, 0xb3, 0x02, 0x29, 0x93, 0x9c,
	0xb2, 0xb2, 0x14, 0x9a, 0x35, 0x55, 0xca, 0x95, 0xc5, 0xd7, 0x1a, 0x39, 0xd7, 0x1f, 0x24, 0x2a,
	0x6a, 0x7f, 0x9d, 0x9e, 0x9c, 0xc1, 0xcd, 0xb1, 0xd7, 0xf4, 0x39, 0x36, 0x7f, 0x33, 0x7c, 0x85,
	0xef, 0x6a, 0x54, 0x9a, 0x0c, 0x20, 0xd4, 0x7c, 0x81, 0x51, 0x30, 0x0c, 0xee, 0x5d, 0x4c, 0x0a,
	0x38, 0xee, 0x2e, 0x56, 0xd2, 0x38, 0x21, 0xb9, 0x05, 0x7d, 0x65, 0x6c, 0x6b, 0x65, 0xeb, 0xf7,
	0xcf, 0x0f, 0x53, 0xe7, 0x98, 0x8e, 0xad, 0x4a, 0xee, 0xc3, 0x81, 0x3f, 0x81, 0x8a, 0x76, 0x86,
	0x3d, 0x53, 0x76, 0x35, 0x5d, 0xcf, 0x90, 0xfa, 0xdd, 0x13, 0x01, 0x03, 0xff, 0x4c, 0x0e, 0xa1,
	0xcf, 0x6a, 0x3d, 0x17, 0x95, 0xa3, 0x21, 0x57, 0x60, 0xdf, 0xcc, 0x90, 0xd7, 0x53, 0x3d, 0x51,
	0x6f, 0x6b, 0xd3, 0xab, 0x11, 0x2f, 0xc1, 0xde, 0x02, 0x35, 0xcb, 0x99, 0x66, 0x51, 0xcf, 0x2a,
	0x47, 0x30, 0x30, 0x27, 0x9c, 0x18, 0xb2, 0x4a, 0x63, 0x1e, 0x85, 0x56, 0x25, 0x00, 0x56, 0xc5,
	0x32, 0x37, 0xda, 0xae, 0x1d, 0xef, 0x6b, 0x00, 0xd7, 0x7d, 0xc7, 0x97, 0x12, 0xcb, 0x36, 0x08,
	0xd3, 0xa5, 0x35, 0x6b, 0x46, 0xfa, 0x83, 0xe0, 0x90, 0x26, 0x72, 0xce, 0xf3, 0x35, 0x82, 0x11,
	0x45, 0xf6, 0x06, 0x4d, 0xa5, 0x15, 0x1d, 0xc5, 0x0d, 0xb8, 0xec, 0x8f, 0xee, 0x1e, 0x85, 0x7f,
	0x21, 0x3b, 0x90, 0x17, 0x10, 0xf9, 0x1c, 0xcf, 0x0a, 0xa1, 0x70, 0x2b, 0x88, 0xef, 0x69, 0x41,
	0xce, 0xbf, 0xf7, 0xe0, 0xc0, 0xef, 0xa3, 0xc8, 0x97, 0x00, 0xf6, 0xda, 0x5b, 0x23, 0x77, 0x3b,
	0x63, 0xdf, 0xd8, 0x80, 0xf8, 0x64, 0x4b, 0x95, 0xbb, 0xfa, 0xe4, 0xec, 0xf3, 0x8f, 0x9f, 0xdf,
	0x76, 0x4e, 0xc8, 0x1d, 0xbb, 0x7f, 0xeb, 0x57, 0xe8, 0xfb, 0x07, 0xd4, 0x9f, 0x9a, 0x2e, 0x9b,
	0x65, 0x5a, 0x91, 0x4f, 0x01, 0x84, 0x4d, 0xb8, 0x64, 0xd8, 0xd9, 0xdc, 0xcb, 0x3d, 0x3e, 0x6a,
	0x57, 0xe8, 0xb5, 0xe0, 0xf9, 0x6f, 0xb7, 0xa7, 0xd6, 0x6d, 0x14, 0x3f, 0xda, 0x74, 0x93, 0x75,
	0x35, 0x9d, 0x33, 0x85, 0x74, 0xe9, 0x87, 0xb4, 0xa2, 0x4b, 0x2f, 0x9d, 0xd5, 0x28, 0x38, 0x25,
	0x1f, 0x61, 0xd7, 0xc6, 0x4a, 0x6e, 0x77, 0x22, 0xf8, 0x91, 0xff, 0x83, 0xe1, 0x89, 0x65, 0x78,
	0x7c, 0xfa, 0x7f, 0x0c, 0x59, 0xdf, 0x7e, 0x7f, 0x0f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x15,
	0x9c, 0x78, 0x34, 0xd4, 0x03, 0x00, 0x00,
}
