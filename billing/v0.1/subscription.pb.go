// Code generated by protoc-gen-go.
// source: subscription.proto
// DO NOT EDIT!

package billing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Resource int32

const (
	Resource_USER    Resource = 0
	Resource_CLUSTER Resource = 1
	Resource_NODE    Resource = 2
	Resource_DB      Resource = 3
	Resource_CI      Resource = 4
)

var Resource_name = map[int32]string{
	0: "USER",
	1: "CLUSTER",
	2: "NODE",
	3: "DB",
	4: "CI",
}
var Resource_value = map[string]int32{
	"USER":    0,
	"CLUSTER": 1,
	"NODE":    2,
	"DB":      3,
	"CI":      4,
}

func (x Resource) String() string {
	return proto.EnumName(Resource_name, int32(x))
}
func (Resource) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SubscriptionDescribeRequest struct {
}

func (m *SubscriptionDescribeRequest) Reset()                    { *m = SubscriptionDescribeRequest{} }
func (m *SubscriptionDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionDescribeRequest) ProtoMessage()               {}
func (*SubscriptionDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SubscriptionDescribeResponse struct {
	Status        *dtypes.Status  `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Subscriptions []*Subscription `protobuf:"bytes,2,rep,name=subscriptions" json:"subscriptions,omitempty"`
}

func (m *SubscriptionDescribeResponse) Reset()                    { *m = SubscriptionDescribeResponse{} }
func (m *SubscriptionDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionDescribeResponse) ProtoMessage()               {}
func (*SubscriptionDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SubscriptionDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SubscriptionDescribeResponse) GetSubscriptions() []*Subscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type Subscription struct {
	Author      string `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	ProductSku  string `protobuf:"bytes,3,opt,name=product_sku" json:"product_sku,omitempty"`
	ProductType string `protobuf:"bytes,4,opt,name=product_type" json:"product_type,omitempty"`
	Quota       *Quota `protobuf:"bytes,5,opt,name=quota" json:"quota,omitempty"`
	DateStarted string `protobuf:"bytes,6,opt,name=date_started" json:"date_started,omitempty"`
	DateEnded   string `protobuf:"bytes,7,opt,name=date_ended" json:"date_ended,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Subscription) GetQuota() *Quota {
	if m != nil {
		return m.Quota
	}
	return nil
}

type SubscriptionOpenRequest struct {
	ProductType      string `protobuf:"bytes,1,opt,name=product_type" json:"product_type,omitempty"`
	AuthorPhid       string `protobuf:"bytes,2,opt,name=author_phid" json:"author_phid,omitempty"`
	ObjectPhid       string `protobuf:"bytes,3,opt,name=object_phid" json:"object_phid,omitempty"`
	SubscriptionPhid string `protobuf:"bytes,4,opt,name=subscription_phid" json:"subscription_phid,omitempty"`
	Metadata         string `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *SubscriptionOpenRequest) Reset()                    { *m = SubscriptionOpenRequest{} }
func (m *SubscriptionOpenRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionOpenRequest) ProtoMessage()               {}
func (*SubscriptionOpenRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type SubscriptionCloseRequest struct {
	ProductType string `protobuf:"bytes,1,opt,name=product_type" json:"product_type,omitempty"`
	ObjectPhid  string `protobuf:"bytes,2,opt,name=object_phid" json:"object_phid,omitempty"`
}

func (m *SubscriptionCloseRequest) Reset()                    { *m = SubscriptionCloseRequest{} }
func (m *SubscriptionCloseRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionCloseRequest) ProtoMessage()               {}
func (*SubscriptionCloseRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type SubscriptionCreateRequest struct {
	Phid string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
}

func (m *SubscriptionCreateRequest) Reset()                    { *m = SubscriptionCreateRequest{} }
func (m *SubscriptionCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionCreateRequest) ProtoMessage()               {}
func (*SubscriptionCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type Quota struct {
	User        int64             `protobuf:"varint,1,opt,name=user" json:"user,omitempty"`
	Phabricator *PhabricatorQuota `protobuf:"bytes,2,opt,name=phabricator" json:"phabricator,omitempty"`
	Artifact    *ArtifactoryQuota `protobuf:"bytes,3,opt,name=artifact" json:"artifact,omitempty"`
	Kube        *ClusterQuota     `protobuf:"bytes,4,opt,name=kube" json:"kube,omitempty"`
	Ci          *CIQuota          `protobuf:"bytes,5,opt,name=ci" json:"ci,omitempty"`
	Db          *DBQuota          `protobuf:"bytes,6,opt,name=db" json:"db,omitempty"`
}

func (m *Quota) Reset()                    { *m = Quota{} }
func (m *Quota) String() string            { return proto.CompactTextString(m) }
func (*Quota) ProtoMessage()               {}
func (*Quota) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Quota) GetPhabricator() *PhabricatorQuota {
	if m != nil {
		return m.Phabricator
	}
	return nil
}

func (m *Quota) GetArtifact() *ArtifactoryQuota {
	if m != nil {
		return m.Artifact
	}
	return nil
}

func (m *Quota) GetKube() *ClusterQuota {
	if m != nil {
		return m.Kube
	}
	return nil
}

func (m *Quota) GetCi() *CIQuota {
	if m != nil {
		return m.Ci
	}
	return nil
}

func (m *Quota) GetDb() *DBQuota {
	if m != nil {
		return m.Db
	}
	return nil
}

type PhabricatorQuota struct {
	DiskSize   int64 `protobuf:"varint,1,opt,name=disk_size" json:"disk_size,omitempty"`
	Repository int64 `protobuf:"varint,2,opt,name=repository" json:"repository,omitempty"`
}

func (m *PhabricatorQuota) Reset()                    { *m = PhabricatorQuota{} }
func (m *PhabricatorQuota) String() string            { return proto.CompactTextString(m) }
func (*PhabricatorQuota) ProtoMessage()               {}
func (*PhabricatorQuota) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type CIQuota struct {
	Agent     int64 `protobuf:"varint,1,opt,name=agent" json:"agent,omitempty"`
	Executors int64 `protobuf:"varint,2,opt,name=executors" json:"executors,omitempty"`
	Jobs      int64 `protobuf:"varint,3,opt,name=jobs" json:"jobs,omitempty"`
}

func (m *CIQuota) Reset()                    { *m = CIQuota{} }
func (m *CIQuota) String() string            { return proto.CompactTextString(m) }
func (*CIQuota) ProtoMessage()               {}
func (*CIQuota) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type ArtifactoryQuota struct {
	DiskSize   int64 `protobuf:"varint,1,opt,name=disk_size" json:"disk_size,omitempty"`
	Repository int64 `protobuf:"varint,2,opt,name=repository" json:"repository,omitempty"`
}

func (m *ArtifactoryQuota) Reset()                    { *m = ArtifactoryQuota{} }
func (m *ArtifactoryQuota) String() string            { return proto.CompactTextString(m) }
func (*ArtifactoryQuota) ProtoMessage()               {}
func (*ArtifactoryQuota) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type ClusterQuota struct {
	Cluster int64 `protobuf:"varint,1,opt,name=cluster" json:"cluster,omitempty"`
	Nodes   int64 `protobuf:"varint,2,opt,name=nodes" json:"nodes,omitempty"`
}

func (m *ClusterQuota) Reset()                    { *m = ClusterQuota{} }
func (m *ClusterQuota) String() string            { return proto.CompactTextString(m) }
func (*ClusterQuota) ProtoMessage()               {}
func (*ClusterQuota) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

type DBQuota struct {
	Postgres      int64 `protobuf:"varint,1,opt,name=postgres" json:"postgres,omitempty"`
	Elasticsearch int64 `protobuf:"varint,2,opt,name=elasticsearch" json:"elasticsearch,omitempty"`
	Influxdb      int64 `protobuf:"varint,3,opt,name=influxdb" json:"influxdb,omitempty"`
}

func (m *DBQuota) Reset()                    { *m = DBQuota{} }
func (m *DBQuota) String() string            { return proto.CompactTextString(m) }
func (*DBQuota) ProtoMessage()               {}
func (*DBQuota) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

type SubscriptionQutaRequest struct {
	Resource    Resource `protobuf:"varint,1,opt,name=resource,enum=billing.Resource" json:"resource,omitempty"`
	Subresource string   `protobuf:"bytes,2,opt,name=subresource" json:"subresource,omitempty"`
	ObjectPhid  string   `protobuf:"bytes,3,opt,name=object_phid" json:"object_phid,omitempty"`
	Count       int64    `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
}

func (m *SubscriptionQutaRequest) Reset()                    { *m = SubscriptionQutaRequest{} }
func (m *SubscriptionQutaRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionQutaRequest) ProtoMessage()               {}
func (*SubscriptionQutaRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type SubscriptionQutaResponse struct {
	Status           *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	SubscriptionPhid string         `protobuf:"bytes,3,opt,name=subscription_phid" json:"subscription_phid,omitempty"`
}

func (m *SubscriptionQutaResponse) Reset()                    { *m = SubscriptionQutaResponse{} }
func (m *SubscriptionQutaResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionQutaResponse) ProtoMessage()               {}
func (*SubscriptionQutaResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *SubscriptionQutaResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscriptionDescribeRequest)(nil), "billing.SubscriptionDescribeRequest")
	proto.RegisterType((*SubscriptionDescribeResponse)(nil), "billing.SubscriptionDescribeResponse")
	proto.RegisterType((*Subscription)(nil), "billing.Subscription")
	proto.RegisterType((*SubscriptionOpenRequest)(nil), "billing.SubscriptionOpenRequest")
	proto.RegisterType((*SubscriptionCloseRequest)(nil), "billing.SubscriptionCloseRequest")
	proto.RegisterType((*SubscriptionCreateRequest)(nil), "billing.SubscriptionCreateRequest")
	proto.RegisterType((*Quota)(nil), "billing.Quota")
	proto.RegisterType((*PhabricatorQuota)(nil), "billing.PhabricatorQuota")
	proto.RegisterType((*CIQuota)(nil), "billing.CIQuota")
	proto.RegisterType((*ArtifactoryQuota)(nil), "billing.ArtifactoryQuota")
	proto.RegisterType((*ClusterQuota)(nil), "billing.ClusterQuota")
	proto.RegisterType((*DBQuota)(nil), "billing.DBQuota")
	proto.RegisterType((*SubscriptionQutaRequest)(nil), "billing.SubscriptionQutaRequest")
	proto.RegisterType((*SubscriptionQutaResponse)(nil), "billing.SubscriptionQutaResponse")
	proto.RegisterEnum("billing.Resource", Resource_name, Resource_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Subscriptions service

type SubscriptionsClient interface {
	Create(ctx context.Context, in *SubscriptionCreateRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Describe(ctx context.Context, in *SubscriptionDescribeRequest, opts ...grpc.CallOption) (*SubscriptionDescribeResponse, error)
	Subscribe(ctx context.Context, in *SubscriptionOpenRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	UnSubscribe(ctx context.Context, in *SubscriptionCloseRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Quota(ctx context.Context, in *SubscriptionQutaRequest, opts ...grpc.CallOption) (*SubscriptionQutaResponse, error)
}

type subscriptionsClient struct {
	cc *grpc.ClientConn
}

func NewSubscriptionsClient(cc *grpc.ClientConn) SubscriptionsClient {
	return &subscriptionsClient{cc}
}

func (c *subscriptionsClient) Create(ctx context.Context, in *SubscriptionCreateRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/billing.Subscriptions/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsClient) Describe(ctx context.Context, in *SubscriptionDescribeRequest, opts ...grpc.CallOption) (*SubscriptionDescribeResponse, error) {
	out := new(SubscriptionDescribeResponse)
	err := grpc.Invoke(ctx, "/billing.Subscriptions/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsClient) Subscribe(ctx context.Context, in *SubscriptionOpenRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/billing.Subscriptions/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsClient) UnSubscribe(ctx context.Context, in *SubscriptionCloseRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/billing.Subscriptions/UnSubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsClient) Quota(ctx context.Context, in *SubscriptionQutaRequest, opts ...grpc.CallOption) (*SubscriptionQutaResponse, error) {
	out := new(SubscriptionQutaResponse)
	err := grpc.Invoke(ctx, "/billing.Subscriptions/Quota", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Subscriptions service

type SubscriptionsServer interface {
	Create(context.Context, *SubscriptionCreateRequest) (*dtypes.VoidResponse, error)
	Describe(context.Context, *SubscriptionDescribeRequest) (*SubscriptionDescribeResponse, error)
	Subscribe(context.Context, *SubscriptionOpenRequest) (*dtypes.VoidResponse, error)
	UnSubscribe(context.Context, *SubscriptionCloseRequest) (*dtypes.VoidResponse, error)
	Quota(context.Context, *SubscriptionQutaRequest) (*SubscriptionQutaResponse, error)
}

func RegisterSubscriptionsServer(s *grpc.Server, srv SubscriptionsServer) {
	s.RegisterService(&_Subscriptions_serviceDesc, srv)
}

func _Subscriptions_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Subscriptions/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServer).Create(ctx, req.(*SubscriptionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscriptions_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Subscriptions/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServer).Describe(ctx, req.(*SubscriptionDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscriptions_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Subscriptions/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServer).Subscribe(ctx, req.(*SubscriptionOpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscriptions_UnSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServer).UnSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Subscriptions/UnSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServer).UnSubscribe(ctx, req.(*SubscriptionCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscriptions_Quota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionQutaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServer).Quota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Subscriptions/Quota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServer).Quota(ctx, req.(*SubscriptionQutaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Subscriptions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.Subscriptions",
	HandlerType: (*SubscriptionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Subscriptions_Create_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Subscriptions_Describe_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Subscriptions_Subscribe_Handler,
		},
		{
			MethodName: "UnSubscribe",
			Handler:    _Subscriptions_UnSubscribe_Handler,
		},
		{
			MethodName: "Quota",
			Handler:    _Subscriptions_Quota_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0xdb, 0x72, 0xdc, 0x44,
	0x10, 0x45, 0x7b, 0x77, 0xfb, 0x82, 0x3c, 0x24, 0xb0, 0x16, 0x0e, 0x38, 0x0a, 0xae, 0x02, 0x87,
	0x92, 0xc0, 0x3c, 0x50, 0x01, 0xaa, 0x28, 0xec, 0xf5, 0x43, 0xaa, 0x28, 0x42, 0x6c, 0xcc, 0xab,
	0x4b, 0x97, 0xc9, 0x7a, 0x62, 0xa1, 0x51, 0x34, 0x23, 0x88, 0x71, 0xe5, 0x85, 0x87, 0xf0, 0x01,
	0xfc, 0x00, 0xff, 0x94, 0x5f, 0xe0, 0x43, 0xe8, 0xb9, 0x68, 0x3d, 0x8b, 0xd7, 0x4e, 0x8a, 0x97,
	0xc4, 0xea, 0x3e, 0xd3, 0xe7, 0xf4, 0x99, 0x9e, 0x5e, 0x20, 0xa2, 0x49, 0x45, 0x56, 0xb3, 0x4a,
	0x32, 0x5e, 0x46, 0x55, 0xcd, 0x25, 0x27, 0xc3, 0x94, 0x15, 0x05, 0x2b, 0xa7, 0xc1, 0xe6, 0x94,
	0xf3, 0x69, 0x41, 0xe3, 0xa4, 0x62, 0x71, 0x52, 0x96, 0x5c, 0x26, 0x0a, 0x25, 0x0c, 0x2c, 0x78,
	0x57, 0x85, 0x73, 0x79, 0x5e, 0x51, 0x11, 0xeb, 0x7f, 0x4d, 0x3c, 0xbc, 0x03, 0xef, 0x1f, 0x39,
	0x45, 0x27, 0x54, 0xfd, 0x99, 0xd2, 0x43, 0xfa, 0xac, 0xa1, 0x42, 0x86, 0x05, 0x6c, 0x2e, 0x4e,
	0x8b, 0x0a, 0x6b, 0x53, 0xf2, 0x01, 0x0c, 0x04, 0x12, 0x35, 0x62, 0xec, 0x6d, 0x79, 0x1f, 0x2f,
	0xef, 0xae, 0x45, 0x86, 0x23, 0x3a, 0xd2, 0x51, 0xf2, 0x29, 0xac, 0xba, 0x9a, 0xc5, 0xb8, 0xb3,
	0xd5, 0x45, 0xd8, 0xed, 0xc8, 0xaa, 0x8e, 0xdc, 0xea, 0xe1, 0xdf, 0x1e, 0xac, 0xb8, 0x01, 0xb2,
	0x06, 0x83, 0xa4, 0x91, 0xa7, 0xbc, 0xd6, 0xe5, 0x97, 0xc8, 0x0a, 0xf4, 0x54, 0x79, 0xac, 0xa2,
	0xbe, 0xde, 0x81, 0x65, 0x6c, 0x22, 0x6f, 0x32, 0x79, 0x22, 0xce, 0x9a, 0x71, 0x57, 0x07, 0x6f,
	0xc1, 0x4a, 0x1b, 0xd4, 0xd0, 0x9e, 0x8e, 0xde, 0x81, 0xfe, 0xb3, 0x06, 0x2d, 0x19, 0xf7, 0xad,
	0xcc, 0x96, 0xff, 0xb1, 0x8a, 0xaa, 0x43, 0x79, 0x22, 0xe9, 0x09, 0xf6, 0x52, 0x4b, 0x9a, 0x8f,
	0x07, 0xfa, 0x10, 0x01, 0xd0, 0x51, 0x5a, 0xe6, 0x18, 0x1b, 0xaa, 0x58, 0xf8, 0xd2, 0x83, 0xf7,
	0x5c, 0x89, 0x8f, 0x2a, 0x5a, 0x5a, 0xb3, 0xae, 0x50, 0x7b, 0xad, 0x4a, 0xd3, 0xc3, 0x49, 0x75,
	0xca, 0xf2, 0x4b, 0xe9, 0x3c, 0x7d, 0x4a, 0x11, 0xa9, 0x83, 0x46, 0xfa, 0x06, 0xac, 0xbb, 0x66,
	0x99, 0x94, 0xd1, 0xef, 0xc3, 0xe8, 0x17, 0x2a, 0x13, 0x94, 0x63, 0x5a, 0x58, 0x0a, 0x0f, 0x60,
	0xec, 0xea, 0xd8, 0x2f, 0xb8, 0xa0, 0xaf, 0x15, 0xe2, 0x72, 0x6a, 0x21, 0xe1, 0x27, 0xb0, 0x31,
	0x57, 0xa6, 0xa6, 0xd8, 0x71, 0x5b, 0x07, 0xed, 0xd6, 0x50, 0x7d, 0x3e, 0x7c, 0xe5, 0x41, 0xdf,
	0xd8, 0x85, 0xf1, 0x46, 0x50, 0x73, 0x29, 0x5d, 0x12, 0xe1, 0x35, 0x9c, 0x26, 0x69, 0xcd, 0xb2,
	0x44, 0xe2, 0x4d, 0x75, 0xb4, 0xc3, 0x1b, 0x33, 0x87, 0x7f, 0xbc, 0xcc, 0x99, 0xd3, 0xf7, 0x61,
	0x84, 0x2e, 0xb3, 0x27, 0x49, 0x26, 0x75, 0xe3, 0x2e, 0xf8, 0x3b, 0x9b, 0xe0, 0xf5, 0xb9, 0x01,
	0xdf, 0x83, 0xde, 0x59, 0x93, 0x9a, 0x6b, 0x74, 0xe7, 0x66, 0xbf, 0x68, 0x84, 0xa4, 0xb6, 0xe2,
	0x26, 0x74, 0x32, 0x66, 0xaf, 0xd6, 0xbf, 0x84, 0x3c, 0x9c, 0x65, 0xf3, 0x54, 0x5f, 0xa9, 0x9b,
	0x9d, 0xec, 0xe9, 0x6c, 0xf8, 0x00, 0xfc, 0x2b, 0x0a, 0xd7, 0x61, 0x29, 0x67, 0xe2, 0xec, 0x44,
	0xb0, 0xdf, 0xa9, 0x6d, 0x12, 0x67, 0xa1, 0xa6, 0x15, 0x17, 0x4c, 0x49, 0xd3, 0x3d, 0x76, 0xf1,
	0xe8, 0xb0, 0xe5, 0x58, 0x85, 0x7e, 0x32, 0xa5, 0xa5, 0xb4, 0x68, 0x2c, 0x40, 0x9f, 0xd3, 0xac,
	0x41, 0xb0, 0x30, 0x60, 0xe5, 0xd9, 0x53, 0x9e, 0x0a, 0xdd, 0xb1, 0x3a, 0xea, 0x5f, 0x69, 0xf5,
	0x0d, 0x59, 0x23, 0x58, 0x99, 0x6b, 0xfe, 0x6d, 0x18, 0x66, 0xe6, 0xdb, 0x1e, 0x42, 0x2d, 0x25,
	0xcf, 0xa9, 0x25, 0x0e, 0x27, 0x30, 0xb4, 0xbd, 0xaa, 0x29, 0xc2, 0x62, 0x72, 0x5a, 0x53, 0x61,
	0xb1, 0xb7, 0x61, 0x95, 0x16, 0x89, 0x90, 0x2c, 0x13, 0x34, 0xa9, 0xb3, 0x53, 0x2b, 0x16, 0x81,
	0xac, 0x7c, 0x52, 0x34, 0xcf, 0xd1, 0x38, 0x23, 0xf8, 0xb7, 0xf9, 0xb1, 0x7f, 0xdc, 0xc8, 0xa4,
	0x9d, 0x92, 0x7b, 0x30, 0xc2, 0x82, 0xbc, 0xa9, 0x33, 0x23, 0x7b, 0x6d, 0x77, 0x7d, 0xe6, 0xf2,
	0xa1, 0x4d, 0xa8, 0xe1, 0xc3, 0xd9, 0x9e, 0xe1, 0x6e, 0x78, 0x05, 0x28, 0x3f, 0xe3, 0x0d, 0x5a,
	0xd9, 0xd7, 0xc4, 0xc7, 0xf3, 0x73, 0x6e, 0x88, 0xdf, 0x70, 0xfb, 0x2c, 0x7c, 0x50, 0x9a, 0x65,
	0xe7, 0x6b, 0x18, 0xcd, 0xb4, 0x8d, 0xa0, 0x77, 0x7c, 0x74, 0x70, 0xe8, 0xbf, 0x45, 0x96, 0xf1,
	0x46, 0xbf, 0x3f, 0x3e, 0xfa, 0x09, 0x3f, 0x3c, 0x15, 0xfe, 0xe1, 0xd1, 0xe4, 0xc0, 0xef, 0x90,
	0x01, 0x74, 0x26, 0x7b, 0x7e, 0x57, 0xfd, 0xbf, 0xff, 0xd0, 0xef, 0xed, 0xbe, 0xec, 0xc3, 0xaa,
	0x2b, 0x4a, 0x10, 0x06, 0x03, 0xf3, 0x74, 0x48, 0xb8, 0x70, 0xb5, 0xcd, 0xbd, 0xab, 0xe0, 0x56,
	0xab, 0xf3, 0x67, 0xce, 0xf2, 0xb6, 0x9b, 0x70, 0xfb, 0x8f, 0x57, 0xff, 0xfc, 0xd5, 0xf9, 0x30,
	0x08, 0x62, 0x5b, 0x21, 0xfe, 0xf5, 0xb3, 0xe8, 0xf3, 0xd8, 0xed, 0xe0, 0x2b, 0x6f, 0x87, 0x5c,
	0xc0, 0xa8, 0x5d, 0xc3, 0xe4, 0xa3, 0x85, 0x64, 0xff, 0x59, 0xe2, 0xc1, 0xf6, 0x6b, 0x50, 0x96,
	0x3f, 0xd4, 0xfc, 0x9b, 0xe4, 0x06, 0x7e, 0xf2, 0xa7, 0x07, 0x4b, 0xb6, 0x08, 0xd2, 0x6f, 0x2d,
	0x2c, 0xec, 0xac, 0xc4, 0x6b, 0x3a, 0xdd, 0xd3, 0x4c, 0xdf, 0x04, 0x5f, 0x5e, 0xcf, 0x14, 0x5f,
	0xb8, 0x1b, 0xec, 0x45, 0x7c, 0xe1, 0x0c, 0xca, 0x0b, 0x65, 0x03, 0x2a, 0x59, 0x3e, 0x2e, 0x2f,
	0xb5, 0xdc, 0x5d, 0xec, 0xbb, 0xb3, 0x16, 0xaf, 0x11, 0xf3, 0xad, 0x16, 0xf3, 0x60, 0xe7, 0xff,
	0x8a, 0x21, 0xe7, 0xed, 0x5a, 0x5c, 0x6c, 0x87, 0xf3, 0x54, 0x82, 0xbb, 0x37, 0x20, 0xac, 0x9c,
	0xfb, 0x5a, 0xce, 0x76, 0xb8, 0x75, 0x83, 0x1c, 0xfd, 0x53, 0x86, 0x26, 0xa4, 0x03, 0xfd, 0x23,
	0xfe, 0xc5, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x34, 0xbe, 0xa1, 0x90, 0x19, 0x08, 0x00, 0x00,
}
