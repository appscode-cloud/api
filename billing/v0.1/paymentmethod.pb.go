// Code generated by protoc-gen-go.
// source: paymentmethod.proto
// DO NOT EDIT!

package billing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PaymentMethodListResponse struct {
	Status         *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	PaymentMethods []string       `protobuf:"bytes,3,rep,name=payment_methods,json=paymentMethods" json:"payment_methods,omitempty"`
}

func (m *PaymentMethodListResponse) Reset()                    { *m = PaymentMethodListResponse{} }
func (m *PaymentMethodListResponse) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethodListResponse) ProtoMessage()               {}
func (*PaymentMethodListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *PaymentMethodListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*PaymentMethodListResponse)(nil), "billing.PaymentMethodListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for PaymentMethod service

type PaymentMethodClient interface {
	List(ctx context.Context, in *dtypes.VoidRequest, opts ...grpc.CallOption) (*PaymentMethodListResponse, error)
}

type paymentMethodClient struct {
	cc *grpc.ClientConn
}

func NewPaymentMethodClient(cc *grpc.ClientConn) PaymentMethodClient {
	return &paymentMethodClient{cc}
}

func (c *paymentMethodClient) List(ctx context.Context, in *dtypes.VoidRequest, opts ...grpc.CallOption) (*PaymentMethodListResponse, error) {
	out := new(PaymentMethodListResponse)
	err := grpc.Invoke(ctx, "/billing.PaymentMethod/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentMethod service

type PaymentMethodServer interface {
	List(context.Context, *dtypes.VoidRequest) (*PaymentMethodListResponse, error)
}

func RegisterPaymentMethodServer(s *grpc.Server, srv PaymentMethodServer) {
	s.RegisterService(&_PaymentMethod_serviceDesc, srv)
}

func _PaymentMethod_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dtypes.VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMethodServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.PaymentMethod/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMethodServer).List(ctx, req.(*dtypes.VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentMethod_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.PaymentMethod",
	HandlerType: (*PaymentMethodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PaymentMethod_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor2 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x48, 0xac, 0xcc,
	0x4d, 0xcd, 0x2b, 0xc9, 0x4d, 0x2d, 0xc9, 0xc8, 0x4f, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x4f, 0xca, 0xcc, 0xc9, 0xc9, 0xcc, 0x4b, 0x97, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49,
	0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b,
	0x86, 0x28, 0x93, 0x12, 0x03, 0x09, 0xa7, 0x94, 0x54, 0x16, 0xa4, 0x16, 0xeb, 0x83, 0x49, 0x88,
	0xb8, 0x52, 0x0e, 0x97, 0x64, 0x00, 0xc4, 0x54, 0x5f, 0xb0, 0xa9, 0x3e, 0x99, 0xc5, 0x25, 0x41,
	0xa9, 0xc5, 0x05, 0x40, 0x9d, 0xa9, 0x42, 0x6a, 0x5c, 0x6c, 0xc5, 0x40, 0x63, 0x4a, 0x8b, 0x25,
	0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0xf8, 0xf4, 0x20, 0x26, 0xe8, 0x05, 0x83, 0x45, 0x83, 0xa0,
	0xb2, 0x42, 0xea, 0x5c, 0xfc, 0x50, 0xa7, 0xc5, 0x43, 0xdc, 0x56, 0x2c, 0xc1, 0xac, 0xc0, 0xac,
	0xc1, 0x19, 0xc4, 0x57, 0x80, 0x6c, 0x76, 0xb1, 0x51, 0x13, 0x23, 0x17, 0x2f, 0x8a, 0x75, 0x42,
	0x85, 0x5c, 0x2c, 0x20, 0x2b, 0x85, 0x84, 0x61, 0x46, 0x87, 0xe5, 0x67, 0xa6, 0x04, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x48, 0x29, 0xe9, 0x41, 0x3d, 0xa7, 0x87, 0xd3, 0x8d, 0x4a, 0x06, 0x4d,
	0x97, 0x9f, 0x4c, 0x66, 0xd2, 0x12, 0xd2, 0x00, 0x7a, 0xbc, 0xa0, 0x38, 0x39, 0x3f, 0x05, 0x12,
	0x02, 0x50, 0x8d, 0xfa, 0x65, 0x06, 0x7a, 0x86, 0xfa, 0x28, 0xe1, 0x96, 0xc4, 0x06, 0xf6, 0xb9,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xec, 0xf9, 0x3f, 0x4f, 0x01, 0x00, 0x00,
}
