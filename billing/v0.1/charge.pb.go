// Code generated by protoc-gen-go.
// source: charge.proto
// DO NOT EDIT!

/*
Package billing is a generated protocol buffer package.

It is generated from these files:
	charge.proto
	subscription.proto

It has these top-level messages:
	ChargeRequest
	ChargeResponse
	ChargePaymentResponse
	SubscriptionCreateRequest
	SubscriptionDescribeRequest
	SubscriptionDescribeResponse
	Subscription
	SubscriptionOpenRequest
	SubscriptionCloseRequest
	Quota
	PhabricatorQuota
	CIQuota
	ArtifactoryQuota
	ClusterQuota
	DBQuota
	SubscriptionQoutaRequest
	SubscriptionQutaResponse
*/
package billing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ChargeRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *ChargeRequest) Reset()                    { *m = ChargeRequest{} }
func (m *ChargeRequest) String() string            { return proto.CompactTextString(m) }
func (*ChargeRequest) ProtoMessage()               {}
func (*ChargeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ChargeResponse struct {
	Status  *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	CostUsd string         `protobuf:"bytes,2,opt,name=cost_usd,json=costUsd" json:"cost_usd,omitempty"`
}

func (m *ChargeResponse) Reset()                    { *m = ChargeResponse{} }
func (m *ChargeResponse) String() string            { return proto.CompactTextString(m) }
func (*ChargeResponse) ProtoMessage()               {}
func (*ChargeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ChargeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ChargePaymentResponse struct {
	Status    *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	MethodSet bool           `protobuf:"varint,2,opt,name=method_set,json=methodSet" json:"method_set,omitempty"`
	Methods   []string       `protobuf:"bytes,3,rep,name=methods" json:"methods,omitempty"`
}

func (m *ChargePaymentResponse) Reset()                    { *m = ChargePaymentResponse{} }
func (m *ChargePaymentResponse) String() string            { return proto.CompactTextString(m) }
func (*ChargePaymentResponse) ProtoMessage()               {}
func (*ChargePaymentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ChargePaymentResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*ChargeRequest)(nil), "billing.ChargeRequest")
	proto.RegisterType((*ChargeResponse)(nil), "billing.ChargeResponse")
	proto.RegisterType((*ChargePaymentResponse)(nil), "billing.ChargePaymentResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Charge service

type ChargeClient interface {
	Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*ChargeResponse, error)
	ChargePayment(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type chargeClient struct {
	cc *grpc.ClientConn
}

func NewChargeClient(cc *grpc.ClientConn) ChargeClient {
	return &chargeClient{cc}
}

func (c *chargeClient) Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*ChargeResponse, error) {
	out := new(ChargeResponse)
	err := grpc.Invoke(ctx, "/billing.Charge/Charge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargeClient) ChargePayment(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/billing.Charge/ChargePayment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Charge service

type ChargeServer interface {
	Charge(context.Context, *ChargeRequest) (*ChargeResponse, error)
	ChargePayment(context.Context, *ChargeRequest) (*dtypes.VoidResponse, error)
}

func RegisterChargeServer(s *grpc.Server, srv ChargeServer) {
	s.RegisterService(&_Charge_serviceDesc, srv)
}

func _Charge_Charge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargeServer).Charge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Charge/Charge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargeServer).Charge(ctx, req.(*ChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Charge_ChargePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargeServer).ChargePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Charge/ChargePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargeServer).ChargePayment(ctx, req.(*ChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Charge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.Charge",
	HandlerType: (*ChargeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Charge",
			Handler:    _Charge_Charge_Handler,
		},
		{
			MethodName: "ChargePayment",
			Handler:    _Charge_ChargePayment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x91, 0x51, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x43, 0x6b, 0xa0, 0x1d, 0xb5, 0x0f, 0x9b, 0x8a, 0x48, 0xd0, 0x34, 0x68, 0x8c, 0x4f,
	0xbb, 0x5a, 0x8f, 0xe0, 0x05, 0x0c, 0x44, 0x7d, 0x6c, 0x28, 0x6c, 0x28, 0x09, 0x65, 0xb1, 0xb3,
	0x18, 0xfb, 0xea, 0x15, 0xbc, 0x93, 0x17, 0xf0, 0x0a, 0x1e, 0xc4, 0xb2, 0xbb, 0x34, 0x31, 0xea,
	0x43, 0x5f, 0x36, 0x33, 0xff, 0xfc, 0xf9, 0x66, 0x67, 0x06, 0x0e, 0xd2, 0x45, 0xb2, 0xca, 0x39,
	0xad, 0x57, 0x42, 0x0a, 0xe2, 0xcc, 0x8b, 0xb2, 0x2c, 0xaa, 0xdc, 0x0f, 0x72, 0x21, 0xf2, 0x92,
	0xb3, 0xa4, 0x2e, 0x58, 0x52, 0x55, 0x42, 0x26, 0xb2, 0x10, 0x15, 0x6a, 0x9b, 0xef, 0xb6, 0x72,
	0x26, 0xd7, 0x35, 0x47, 0xa6, 0x5e, 0xad, 0x87, 0xe7, 0x70, 0x78, 0xa7, 0x70, 0x11, 0x7f, 0x6e,
	0x38, 0x4a, 0x42, 0x60, 0xaf, 0xad, 0x7b, 0xd6, 0xc4, 0xba, 0x1a, 0x46, 0x2a, 0x0e, 0x63, 0x18,
	0x75, 0x26, 0xac, 0x37, 0x4c, 0x4e, 0x2e, 0xc1, 0xc6, 0x4d, 0x83, 0x06, 0x95, 0x6f, 0x7f, 0x3a,
	0xa2, 0x9a, 0x4d, 0x63, 0xa5, 0x46, 0xa6, 0x4a, 0x4e, 0x60, 0x90, 0x0a, 0x94, 0xb3, 0x06, 0x33,
	0xaf, 0xa7, 0x88, 0x4e, 0x9b, 0x3f, 0x60, 0x16, 0xbe, 0xc2, 0x91, 0x86, 0xde, 0x27, 0xeb, 0x25,
	0xaf, 0xe4, 0xce, 0xec, 0x53, 0x80, 0x25, 0x97, 0x0b, 0x91, 0xcd, 0x90, 0x4b, 0x45, 0x1f, 0x44,
	0x43, 0xad, 0xc4, 0x5c, 0x12, 0x0f, 0x1c, 0x9d, 0xa0, 0xd7, 0x9f, 0xf4, 0xdb, 0xce, 0x26, 0x9d,
	0x7e, 0x58, 0x60, 0xeb, 0xd6, 0xe4, 0x69, 0x1b, 0xb9, 0xd4, 0x2c, 0x92, 0xfe, 0xd8, 0x87, 0x7f,
	0xfc, 0x4b, 0xd7, 0xdf, 0x0c, 0x83, 0xb7, 0xcf, 0xaf, 0xf7, 0x9e, 0x4b, 0xc6, 0xcc, 0x18, 0xd8,
	0xcb, 0x35, 0xbd, 0x61, 0xfa, 0x38, 0x24, 0xed, 0xf6, 0x6a, 0xa6, 0xfb, 0x97, 0x3f, 0xee, 0xa6,
	0x7b, 0x14, 0x45, 0xb6, 0x85, 0x5f, 0x28, 0xf8, 0x19, 0x09, 0xfe, 0x82, 0xb3, 0x5a, 0x33, 0xe7,
	0xb6, 0xba, 0xe1, 0xed, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xec, 0x21, 0x6d, 0xfc, 0x12, 0x02,
	0x00, 0x00,
}
