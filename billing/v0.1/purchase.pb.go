// Code generated by protoc-gen-go.
// source: purchase.proto
// DO NOT EDIT!

package billing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PurchaseBeginRequest struct {
	ProductSku string `protobuf:"bytes,1,opt,name=product_sku,json=productSku" json:"product_sku,omitempty"`
	Count      int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *PurchaseBeginRequest) Reset()                    { *m = PurchaseBeginRequest{} }
func (m *PurchaseBeginRequest) String() string            { return proto.CompactTextString(m) }
func (*PurchaseBeginRequest) ProtoMessage()               {}
func (*PurchaseBeginRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type PurchaseBeginResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Phid   string         `protobuf:"bytes,2,opt,name=phid" json:"phid,omitempty"`
}

func (m *PurchaseBeginResponse) Reset()                    { *m = PurchaseBeginResponse{} }
func (m *PurchaseBeginResponse) String() string            { return proto.CompactTextString(m) }
func (*PurchaseBeginResponse) ProtoMessage()               {}
func (*PurchaseBeginResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PurchaseBeginResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type PurchaseConfirmRequest struct {
	Phid       string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	ObjectPhid string `protobuf:"bytes,2,opt,name=object_phid,json=objectPhid" json:"object_phid,omitempty"`
}

func (m *PurchaseConfirmRequest) Reset()                    { *m = PurchaseConfirmRequest{} }
func (m *PurchaseConfirmRequest) String() string            { return proto.CompactTextString(m) }
func (*PurchaseConfirmRequest) ProtoMessage()               {}
func (*PurchaseConfirmRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type PurchaseCloseRequest struct {
	ObjectPhid string `protobuf:"bytes,1,opt,name=object_phid,json=objectPhid" json:"object_phid,omitempty"`
}

func (m *PurchaseCloseRequest) Reset()                    { *m = PurchaseCloseRequest{} }
func (m *PurchaseCloseRequest) String() string            { return proto.CompactTextString(m) }
func (*PurchaseCloseRequest) ProtoMessage()               {}
func (*PurchaseCloseRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func init() {
	proto.RegisterType((*PurchaseBeginRequest)(nil), "billing.PurchaseBeginRequest")
	proto.RegisterType((*PurchaseBeginResponse)(nil), "billing.PurchaseBeginResponse")
	proto.RegisterType((*PurchaseConfirmRequest)(nil), "billing.PurchaseConfirmRequest")
	proto.RegisterType((*PurchaseCloseRequest)(nil), "billing.PurchaseCloseRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Purchase service

type PurchaseClient interface {
	Begin(ctx context.Context, in *PurchaseBeginRequest, opts ...grpc.CallOption) (*PurchaseBeginResponse, error)
	Confirm(ctx context.Context, in *PurchaseConfirmRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Close(ctx context.Context, in *PurchaseCloseRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type purchaseClient struct {
	cc *grpc.ClientConn
}

func NewPurchaseClient(cc *grpc.ClientConn) PurchaseClient {
	return &purchaseClient{cc}
}

func (c *purchaseClient) Begin(ctx context.Context, in *PurchaseBeginRequest, opts ...grpc.CallOption) (*PurchaseBeginResponse, error) {
	out := new(PurchaseBeginResponse)
	err := grpc.Invoke(ctx, "/billing.Purchase/Begin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseClient) Confirm(ctx context.Context, in *PurchaseConfirmRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/billing.Purchase/Confirm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseClient) Close(ctx context.Context, in *PurchaseCloseRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/billing.Purchase/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Purchase service

type PurchaseServer interface {
	Begin(context.Context, *PurchaseBeginRequest) (*PurchaseBeginResponse, error)
	Confirm(context.Context, *PurchaseConfirmRequest) (*dtypes.VoidResponse, error)
	Close(context.Context, *PurchaseCloseRequest) (*dtypes.VoidResponse, error)
}

func RegisterPurchaseServer(s *grpc.Server, srv PurchaseServer) {
	s.RegisterService(&_Purchase_serviceDesc, srv)
}

func _Purchase_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Purchase/Begin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).Begin(ctx, req.(*PurchaseBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchase_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Purchase/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).Confirm(ctx, req.(*PurchaseConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchase_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Purchase/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).Close(ctx, req.(*PurchaseCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Purchase_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.Purchase",
	HandlerType: (*PurchaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Begin",
			Handler:    _Purchase_Begin_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _Purchase_Confirm_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Purchase_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor3 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x4d, 0x79, 0x0f, 0x78, 0x0c, 0x09, 0x8b, 0x09, 0x8f, 0x90, 0x46, 0xc5, 0x60, 0x34, 0x04,
	0x93, 0xa9, 0xc0, 0xc2, 0xe8, 0x52, 0xd6, 0x26, 0xa4, 0x24, 0x6e, 0x4d, 0x69, 0xc7, 0x32, 0x52,
	0x67, 0x46, 0x66, 0x46, 0x63, 0x8c, 0x1b, 0x7f, 0xc1, 0x4f, 0xf3, 0x17, 0x5c, 0xf9, 0x15, 0x0e,
	0x33, 0xad, 0x54, 0x84, 0x84, 0x4d, 0xd3, 0x9e, 0x7b, 0xef, 0x39, 0xe7, 0x9e, 0x5b, 0x50, 0xe3,
	0x6a, 0x1e, 0x4e, 0x03, 0x81, 0x11, 0x9f, 0x33, 0xc9, 0x60, 0x79, 0x42, 0x92, 0x84, 0xd0, 0xd8,
	0xdd, 0x89, 0x19, 0x8b, 0x13, 0xec, 0x05, 0x9c, 0x78, 0x01, 0xa5, 0x4c, 0x06, 0x92, 0x30, 0x2a,
	0x6c, 0x9b, 0xdb, 0x58, 0xc0, 0x91, 0x7c, 0xe2, 0x58, 0x78, 0xe6, 0x69, 0xf1, 0xf6, 0x25, 0xa8,
	0x8f, 0x52, 0xc2, 0x0b, 0x1c, 0x13, 0xea, 0xe3, 0x7b, 0x85, 0x85, 0x84, 0x2d, 0x50, 0xd5, 0x0d,
	0x91, 0x0a, 0xe5, 0xb5, 0x98, 0xa9, 0xa6, 0xb3, 0xef, 0x74, 0x2a, 0x3e, 0x48, 0xa1, 0xf1, 0x4c,
	0xc1, 0x3a, 0x28, 0x86, 0x4c, 0x51, 0xd9, 0x2c, 0xe8, 0xd2, 0x1f, 0xdf, 0x7e, 0xb4, 0xc7, 0xe0,
	0xff, 0x0a, 0x9d, 0xe0, 0xda, 0x04, 0x86, 0x47, 0xa0, 0x24, 0xb4, 0x23, 0x25, 0x0c, 0x55, 0xb5,
	0x5f, 0x43, 0xd6, 0x0c, 0x1a, 0x1b, 0xd4, 0x4f, 0xab, 0x10, 0x82, 0xbf, 0x7c, 0x4a, 0x22, 0xc3,
	0x5a, 0xf1, 0xcd, 0xbb, 0xf6, 0xd8, 0xc8, 0x48, 0x87, 0x8c, 0xde, 0x90, 0xf9, 0x5d, 0xe6, 0x32,
	0xeb, 0x76, 0x96, 0xdd, 0x0b, 0xe7, 0x6c, 0x72, 0x8b, 0xb5, 0xf1, 0x1c, 0x11, 0xb0, 0xd0, 0x68,
	0x41, 0x77, 0xba, 0x5c, 0x79, 0x98, 0x30, 0x81, 0x73, 0x2b, 0xe7, 0x07, 0x9d, 0xd5, 0xc1, 0xfe,
	0x67, 0x01, 0xfc, 0xcb, 0x26, 0xa1, 0x00, 0x45, 0xb3, 0x21, 0xdc, 0x45, 0xe9, 0x05, 0xd0, 0xba,
	0x20, 0xdd, 0xbd, 0x4d, 0x65, 0x1b, 0x4c, 0xfb, 0xf8, 0xf5, 0xfd, 0xe3, 0xad, 0x70, 0x08, 0x0f,
	0xf4, 0xe1, 0xb8, 0x08, 0x59, 0x64, 0x2f, 0x98, 0x0e, 0x79, 0x0f, 0x27, 0xa8, 0xe7, 0x65, 0x27,
	0x87, 0x1c, 0x94, 0xd3, 0x04, 0x60, 0xeb, 0x17, 0xef, 0xcf, 0x6c, 0xdc, 0x7a, 0x96, 0xf0, 0x15,
	0x23, 0xd1, 0xb7, 0x1c, 0x32, 0x72, 0x1d, 0x77, 0x1b, 0xb9, 0x73, 0xa7, 0x0b, 0x1f, 0x41, 0xd1,
	0x84, 0xb4, 0x66, 0xcd, 0x7c, 0x78, 0x1b, 0xd4, 0xce, 0x8c, 0xda, 0xa0, 0xdb, 0xdb, 0x42, 0xcd,
	0x7b, 0xce, 0xa5, 0xff, 0x32, 0x29, 0x99, 0xff, 0x73, 0xf0, 0x15, 0x00, 0x00, 0xff, 0xff, 0x4d,
	0xf3, 0x36, 0x29, 0xf0, 0x02, 0x00, 0x00,
}
