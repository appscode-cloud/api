<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: subscription.proto
//   Date: 2016-04-19 16:27:17

namespace billing {

  class Resource extends \DrSlump\Protobuf\Enum {
    const USER = 0;
    const CLUSTER = 1;
    const NODE = 2;
    const DB = 3;
    const CI = 4;
  }
}
namespace billing {

  class SubscriptionDescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.SubscriptionDescribeRequest');

      // OPTIONAL STRING time = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <time> value
     *
     * @return \billing\SubscriptionDescribeRequest
     */
    public function clearTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <time> value
     *
     * @return string
     */
    public function getTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <time> value
     *
     * @param string $value
     * @return \billing\SubscriptionDescribeRequest
     */
    public function setTime( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace billing {

  class SubscriptionDescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \billing\Subscription[]  */
    public $subscriptions = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.SubscriptionDescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE subscriptions = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "subscriptions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\billing\Subscription';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \billing\SubscriptionDescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \billing\SubscriptionDescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <subscriptions> has a value
     *
     * @return boolean
     */
    public function hasSubscriptions(){
      return $this->_has(2);
    }
    
    /**
     * Clear <subscriptions> value
     *
     * @return \billing\SubscriptionDescribeResponse
     */
    public function clearSubscriptions(){
      return $this->_clear(2);
    }
    
    /**
     * Get <subscriptions> value
     *
     * @param int $idx
     * @return \billing\Subscription
     */
    public function getSubscriptions($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <subscriptions> value
     *
     * @param \billing\Subscription $value
     * @return \billing\SubscriptionDescribeResponse
     */
    public function setSubscriptions(\billing\Subscription $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <subscriptions>
     *
     * @return \billing\Subscription[]
     */
    public function getSubscriptionsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <subscriptions>
     *
     * @param \billing\Subscription $value
     * @return \billing\SubscriptionDescribeResponse
     */
    public function addSubscriptions(\billing\Subscription $value){
     return $this->_add(2, $value);
    }
  }
}

namespace billing {

  class Subscription extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $author = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $product_sku = null;
    
    /**  @var \billing\Quota */
    public $quota = null;
    
    /**  @var string */
    public $date_started = null;
    
    /**  @var string */
    public $date_ended = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.Subscription');

      // OPTIONAL STRING author = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "author";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING product_sku = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "product_sku";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE quota = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "quota";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\billing\Quota';
      $descriptor->addField($f);

      // OPTIONAL STRING date_started = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "date_started";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING date_ended = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "date_ended";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <author> has a value
     *
     * @return boolean
     */
    public function hasAuthor(){
      return $this->_has(1);
    }
    
    /**
     * Clear <author> value
     *
     * @return \billing\Subscription
     */
    public function clearAuthor(){
      return $this->_clear(1);
    }
    
    /**
     * Get <author> value
     *
     * @return string
     */
    public function getAuthor(){
      return $this->_get(1);
    }
    
    /**
     * Set <author> value
     *
     * @param string $value
     * @return \billing\Subscription
     */
    public function setAuthor( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \billing\Subscription
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \billing\Subscription
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <product_sku> has a value
     *
     * @return boolean
     */
    public function hasProductSku(){
      return $this->_has(3);
    }
    
    /**
     * Clear <product_sku> value
     *
     * @return \billing\Subscription
     */
    public function clearProductSku(){
      return $this->_clear(3);
    }
    
    /**
     * Get <product_sku> value
     *
     * @return string
     */
    public function getProductSku(){
      return $this->_get(3);
    }
    
    /**
     * Set <product_sku> value
     *
     * @param string $value
     * @return \billing\Subscription
     */
    public function setProductSku( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <quota> has a value
     *
     * @return boolean
     */
    public function hasQuota(){
      return $this->_has(4);
    }
    
    /**
     * Clear <quota> value
     *
     * @return \billing\Subscription
     */
    public function clearQuota(){
      return $this->_clear(4);
    }
    
    /**
     * Get <quota> value
     *
     * @return \billing\Quota
     */
    public function getQuota(){
      return $this->_get(4);
    }
    
    /**
     * Set <quota> value
     *
     * @param \billing\Quota $value
     * @return \billing\Subscription
     */
    public function setQuota(\billing\Quota $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <date_started> has a value
     *
     * @return boolean
     */
    public function hasDateStarted(){
      return $this->_has(5);
    }
    
    /**
     * Clear <date_started> value
     *
     * @return \billing\Subscription
     */
    public function clearDateStarted(){
      return $this->_clear(5);
    }
    
    /**
     * Get <date_started> value
     *
     * @return string
     */
    public function getDateStarted(){
      return $this->_get(5);
    }
    
    /**
     * Set <date_started> value
     *
     * @param string $value
     * @return \billing\Subscription
     */
    public function setDateStarted( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <date_ended> has a value
     *
     * @return boolean
     */
    public function hasDateEnded(){
      return $this->_has(6);
    }
    
    /**
     * Clear <date_ended> value
     *
     * @return \billing\Subscription
     */
    public function clearDateEnded(){
      return $this->_clear(6);
    }
    
    /**
     * Get <date_ended> value
     *
     * @return string
     */
    public function getDateEnded(){
      return $this->_get(6);
    }
    
    /**
     * Set <date_ended> value
     *
     * @param string $value
     * @return \billing\Subscription
     */
    public function setDateEnded( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace billing {

  class SubscriptionOpenRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $product_type = null;
    
    /**  @var string */
    public $author_phid = null;
    
    /**  @var string */
    public $object_phid = null;
    
    /**  @var string */
    public $subscription_phid = null;
    
    /**  @var string */
    public $metadata = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.SubscriptionOpenRequest');

      // OPTIONAL STRING product_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "product_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING author_phid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "author_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING object_phid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "object_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING subscription_phid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "subscription_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING metadata = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "metadata";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <product_type> has a value
     *
     * @return boolean
     */
    public function hasProductType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <product_type> value
     *
     * @return \billing\SubscriptionOpenRequest
     */
    public function clearProductType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <product_type> value
     *
     * @return string
     */
    public function getProductType(){
      return $this->_get(1);
    }
    
    /**
     * Set <product_type> value
     *
     * @param string $value
     * @return \billing\SubscriptionOpenRequest
     */
    public function setProductType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <author_phid> has a value
     *
     * @return boolean
     */
    public function hasAuthorPhid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <author_phid> value
     *
     * @return \billing\SubscriptionOpenRequest
     */
    public function clearAuthorPhid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <author_phid> value
     *
     * @return string
     */
    public function getAuthorPhid(){
      return $this->_get(2);
    }
    
    /**
     * Set <author_phid> value
     *
     * @param string $value
     * @return \billing\SubscriptionOpenRequest
     */
    public function setAuthorPhid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <object_phid> has a value
     *
     * @return boolean
     */
    public function hasObjectPhid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <object_phid> value
     *
     * @return \billing\SubscriptionOpenRequest
     */
    public function clearObjectPhid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <object_phid> value
     *
     * @return string
     */
    public function getObjectPhid(){
      return $this->_get(3);
    }
    
    /**
     * Set <object_phid> value
     *
     * @param string $value
     * @return \billing\SubscriptionOpenRequest
     */
    public function setObjectPhid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <subscription_phid> has a value
     *
     * @return boolean
     */
    public function hasSubscriptionPhid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <subscription_phid> value
     *
     * @return \billing\SubscriptionOpenRequest
     */
    public function clearSubscriptionPhid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <subscription_phid> value
     *
     * @return string
     */
    public function getSubscriptionPhid(){
      return $this->_get(4);
    }
    
    /**
     * Set <subscription_phid> value
     *
     * @param string $value
     * @return \billing\SubscriptionOpenRequest
     */
    public function setSubscriptionPhid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <metadata> has a value
     *
     * @return boolean
     */
    public function hasMetadata(){
      return $this->_has(5);
    }
    
    /**
     * Clear <metadata> value
     *
     * @return \billing\SubscriptionOpenRequest
     */
    public function clearMetadata(){
      return $this->_clear(5);
    }
    
    /**
     * Get <metadata> value
     *
     * @return string
     */
    public function getMetadata(){
      return $this->_get(5);
    }
    
    /**
     * Set <metadata> value
     *
     * @param string $value
     * @return \billing\SubscriptionOpenRequest
     */
    public function setMetadata( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace billing {

  class SubscriptionCloseRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $product_type = null;
    
    /**  @var string */
    public $object_phid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.SubscriptionCloseRequest');

      // OPTIONAL STRING product_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "product_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING object_phid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "object_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <product_type> has a value
     *
     * @return boolean
     */
    public function hasProductType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <product_type> value
     *
     * @return \billing\SubscriptionCloseRequest
     */
    public function clearProductType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <product_type> value
     *
     * @return string
     */
    public function getProductType(){
      return $this->_get(1);
    }
    
    /**
     * Set <product_type> value
     *
     * @param string $value
     * @return \billing\SubscriptionCloseRequest
     */
    public function setProductType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <object_phid> has a value
     *
     * @return boolean
     */
    public function hasObjectPhid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <object_phid> value
     *
     * @return \billing\SubscriptionCloseRequest
     */
    public function clearObjectPhid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <object_phid> value
     *
     * @return string
     */
    public function getObjectPhid(){
      return $this->_get(2);
    }
    
    /**
     * Set <object_phid> value
     *
     * @param string $value
     * @return \billing\SubscriptionCloseRequest
     */
    public function setObjectPhid( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace billing {

  class SubscriptionCreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $author_phid = null;
    
    /**  @var string */
    public $product_phid = null;
    
    /**  @var string */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.SubscriptionCreateRequest');

      // OPTIONAL STRING author_phid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "author_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING product_phid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "product_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <author_phid> has a value
     *
     * @return boolean
     */
    public function hasAuthorPhid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <author_phid> value
     *
     * @return \billing\SubscriptionCreateRequest
     */
    public function clearAuthorPhid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <author_phid> value
     *
     * @return string
     */
    public function getAuthorPhid(){
      return $this->_get(1);
    }
    
    /**
     * Set <author_phid> value
     *
     * @param string $value
     * @return \billing\SubscriptionCreateRequest
     */
    public function setAuthorPhid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <product_phid> has a value
     *
     * @return boolean
     */
    public function hasProductPhid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <product_phid> value
     *
     * @return \billing\SubscriptionCreateRequest
     */
    public function clearProductPhid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <product_phid> value
     *
     * @return string
     */
    public function getProductPhid(){
      return $this->_get(2);
    }
    
    /**
     * Set <product_phid> value
     *
     * @param string $value
     * @return \billing\SubscriptionCreateRequest
     */
    public function setProductPhid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \billing\SubscriptionCreateRequest
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \billing\SubscriptionCreateRequest
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace billing {

  class Quota extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $user = null;
    
    /**  @var \billing\PhabricatorQuota */
    public $phabricator = null;
    
    /**  @var \billing\ArtifactoryQuota */
    public $artifact = null;
    
    /**  @var \billing\ClusterQuota */
    public $kube = null;
    
    /**  @var \billing\CIQuota */
    public $ci = null;
    
    /**  @var \billing\DBQuota */
    public $db = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.Quota');

      // OPTIONAL INT64 user = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "user";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE phabricator = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "phabricator";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\billing\PhabricatorQuota';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE artifact = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "artifact";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\billing\ArtifactoryQuota';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE kube = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "kube";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\billing\ClusterQuota';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ci = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "ci";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\billing\CIQuota';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE db = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "db";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\billing\DBQuota';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <user> has a value
     *
     * @return boolean
     */
    public function hasUser(){
      return $this->_has(1);
    }
    
    /**
     * Clear <user> value
     *
     * @return \billing\Quota
     */
    public function clearUser(){
      return $this->_clear(1);
    }
    
    /**
     * Get <user> value
     *
     * @return int
     */
    public function getUser(){
      return $this->_get(1);
    }
    
    /**
     * Set <user> value
     *
     * @param int $value
     * @return \billing\Quota
     */
    public function setUser( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <phabricator> has a value
     *
     * @return boolean
     */
    public function hasPhabricator(){
      return $this->_has(2);
    }
    
    /**
     * Clear <phabricator> value
     *
     * @return \billing\Quota
     */
    public function clearPhabricator(){
      return $this->_clear(2);
    }
    
    /**
     * Get <phabricator> value
     *
     * @return \billing\PhabricatorQuota
     */
    public function getPhabricator(){
      return $this->_get(2);
    }
    
    /**
     * Set <phabricator> value
     *
     * @param \billing\PhabricatorQuota $value
     * @return \billing\Quota
     */
    public function setPhabricator(\billing\PhabricatorQuota $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <artifact> has a value
     *
     * @return boolean
     */
    public function hasArtifact(){
      return $this->_has(3);
    }
    
    /**
     * Clear <artifact> value
     *
     * @return \billing\Quota
     */
    public function clearArtifact(){
      return $this->_clear(3);
    }
    
    /**
     * Get <artifact> value
     *
     * @return \billing\ArtifactoryQuota
     */
    public function getArtifact(){
      return $this->_get(3);
    }
    
    /**
     * Set <artifact> value
     *
     * @param \billing\ArtifactoryQuota $value
     * @return \billing\Quota
     */
    public function setArtifact(\billing\ArtifactoryQuota $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <kube> has a value
     *
     * @return boolean
     */
    public function hasKube(){
      return $this->_has(4);
    }
    
    /**
     * Clear <kube> value
     *
     * @return \billing\Quota
     */
    public function clearKube(){
      return $this->_clear(4);
    }
    
    /**
     * Get <kube> value
     *
     * @return \billing\ClusterQuota
     */
    public function getKube(){
      return $this->_get(4);
    }
    
    /**
     * Set <kube> value
     *
     * @param \billing\ClusterQuota $value
     * @return \billing\Quota
     */
    public function setKube(\billing\ClusterQuota $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <ci> has a value
     *
     * @return boolean
     */
    public function hasCi(){
      return $this->_has(5);
    }
    
    /**
     * Clear <ci> value
     *
     * @return \billing\Quota
     */
    public function clearCi(){
      return $this->_clear(5);
    }
    
    /**
     * Get <ci> value
     *
     * @return \billing\CIQuota
     */
    public function getCi(){
      return $this->_get(5);
    }
    
    /**
     * Set <ci> value
     *
     * @param \billing\CIQuota $value
     * @return \billing\Quota
     */
    public function setCi(\billing\CIQuota $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <db> has a value
     *
     * @return boolean
     */
    public function hasDb(){
      return $this->_has(6);
    }
    
    /**
     * Clear <db> value
     *
     * @return \billing\Quota
     */
    public function clearDb(){
      return $this->_clear(6);
    }
    
    /**
     * Get <db> value
     *
     * @return \billing\DBQuota
     */
    public function getDb(){
      return $this->_get(6);
    }
    
    /**
     * Set <db> value
     *
     * @param \billing\DBQuota $value
     * @return \billing\Quota
     */
    public function setDb(\billing\DBQuota $value){
      return $this->_set(6, $value);
    }
  }
}

namespace billing {

  class PhabricatorQuota extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $disk_size = null;
    
    /**  @var int */
    public $repository = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.PhabricatorQuota');

      // OPTIONAL INT64 disk_size = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "disk_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 repository = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "repository";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <disk_size> has a value
     *
     * @return boolean
     */
    public function hasDiskSize(){
      return $this->_has(1);
    }
    
    /**
     * Clear <disk_size> value
     *
     * @return \billing\PhabricatorQuota
     */
    public function clearDiskSize(){
      return $this->_clear(1);
    }
    
    /**
     * Get <disk_size> value
     *
     * @return int
     */
    public function getDiskSize(){
      return $this->_get(1);
    }
    
    /**
     * Set <disk_size> value
     *
     * @param int $value
     * @return \billing\PhabricatorQuota
     */
    public function setDiskSize( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <repository> has a value
     *
     * @return boolean
     */
    public function hasRepository(){
      return $this->_has(2);
    }
    
    /**
     * Clear <repository> value
     *
     * @return \billing\PhabricatorQuota
     */
    public function clearRepository(){
      return $this->_clear(2);
    }
    
    /**
     * Get <repository> value
     *
     * @return int
     */
    public function getRepository(){
      return $this->_get(2);
    }
    
    /**
     * Set <repository> value
     *
     * @param int $value
     * @return \billing\PhabricatorQuota
     */
    public function setRepository( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace billing {

  class CIQuota extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $agent = null;
    
    /**  @var int */
    public $executors = null;
    
    /**  @var int */
    public $jobs = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.CIQuota');

      // OPTIONAL INT64 agent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "agent";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 executors = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "executors";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 jobs = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "jobs";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <agent> has a value
     *
     * @return boolean
     */
    public function hasAgent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <agent> value
     *
     * @return \billing\CIQuota
     */
    public function clearAgent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <agent> value
     *
     * @return int
     */
    public function getAgent(){
      return $this->_get(1);
    }
    
    /**
     * Set <agent> value
     *
     * @param int $value
     * @return \billing\CIQuota
     */
    public function setAgent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <executors> has a value
     *
     * @return boolean
     */
    public function hasExecutors(){
      return $this->_has(2);
    }
    
    /**
     * Clear <executors> value
     *
     * @return \billing\CIQuota
     */
    public function clearExecutors(){
      return $this->_clear(2);
    }
    
    /**
     * Get <executors> value
     *
     * @return int
     */
    public function getExecutors(){
      return $this->_get(2);
    }
    
    /**
     * Set <executors> value
     *
     * @param int $value
     * @return \billing\CIQuota
     */
    public function setExecutors( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <jobs> has a value
     *
     * @return boolean
     */
    public function hasJobs(){
      return $this->_has(3);
    }
    
    /**
     * Clear <jobs> value
     *
     * @return \billing\CIQuota
     */
    public function clearJobs(){
      return $this->_clear(3);
    }
    
    /**
     * Get <jobs> value
     *
     * @return int
     */
    public function getJobs(){
      return $this->_get(3);
    }
    
    /**
     * Set <jobs> value
     *
     * @param int $value
     * @return \billing\CIQuota
     */
    public function setJobs( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace billing {

  class ArtifactoryQuota extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $disk_size = null;
    
    /**  @var int */
    public $repository = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.ArtifactoryQuota');

      // OPTIONAL INT64 disk_size = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "disk_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 repository = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "repository";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <disk_size> has a value
     *
     * @return boolean
     */
    public function hasDiskSize(){
      return $this->_has(1);
    }
    
    /**
     * Clear <disk_size> value
     *
     * @return \billing\ArtifactoryQuota
     */
    public function clearDiskSize(){
      return $this->_clear(1);
    }
    
    /**
     * Get <disk_size> value
     *
     * @return int
     */
    public function getDiskSize(){
      return $this->_get(1);
    }
    
    /**
     * Set <disk_size> value
     *
     * @param int $value
     * @return \billing\ArtifactoryQuota
     */
    public function setDiskSize( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <repository> has a value
     *
     * @return boolean
     */
    public function hasRepository(){
      return $this->_has(2);
    }
    
    /**
     * Clear <repository> value
     *
     * @return \billing\ArtifactoryQuota
     */
    public function clearRepository(){
      return $this->_clear(2);
    }
    
    /**
     * Get <repository> value
     *
     * @return int
     */
    public function getRepository(){
      return $this->_get(2);
    }
    
    /**
     * Set <repository> value
     *
     * @param int $value
     * @return \billing\ArtifactoryQuota
     */
    public function setRepository( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace billing {

  class ClusterQuota extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $cluster = null;
    
    /**  @var int */
    public $nodes = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.ClusterQuota');

      // OPTIONAL INT64 cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 nodes = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "nodes";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \billing\ClusterQuota
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return int
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param int $value
     * @return \billing\ClusterQuota
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <nodes> has a value
     *
     * @return boolean
     */
    public function hasNodes(){
      return $this->_has(2);
    }
    
    /**
     * Clear <nodes> value
     *
     * @return \billing\ClusterQuota
     */
    public function clearNodes(){
      return $this->_clear(2);
    }
    
    /**
     * Get <nodes> value
     *
     * @return int
     */
    public function getNodes(){
      return $this->_get(2);
    }
    
    /**
     * Set <nodes> value
     *
     * @param int $value
     * @return \billing\ClusterQuota
     */
    public function setNodes( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace billing {

  class DBQuota extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $postgres = null;
    
    /**  @var int */
    public $elasticsearch = null;
    
    /**  @var int */
    public $influxdb = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.DBQuota');

      // OPTIONAL INT64 postgres = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "postgres";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 elasticsearch = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "elasticsearch";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 influxdb = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "influxdb";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <postgres> has a value
     *
     * @return boolean
     */
    public function hasPostgres(){
      return $this->_has(1);
    }
    
    /**
     * Clear <postgres> value
     *
     * @return \billing\DBQuota
     */
    public function clearPostgres(){
      return $this->_clear(1);
    }
    
    /**
     * Get <postgres> value
     *
     * @return int
     */
    public function getPostgres(){
      return $this->_get(1);
    }
    
    /**
     * Set <postgres> value
     *
     * @param int $value
     * @return \billing\DBQuota
     */
    public function setPostgres( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <elasticsearch> has a value
     *
     * @return boolean
     */
    public function hasElasticsearch(){
      return $this->_has(2);
    }
    
    /**
     * Clear <elasticsearch> value
     *
     * @return \billing\DBQuota
     */
    public function clearElasticsearch(){
      return $this->_clear(2);
    }
    
    /**
     * Get <elasticsearch> value
     *
     * @return int
     */
    public function getElasticsearch(){
      return $this->_get(2);
    }
    
    /**
     * Set <elasticsearch> value
     *
     * @param int $value
     * @return \billing\DBQuota
     */
    public function setElasticsearch( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <influxdb> has a value
     *
     * @return boolean
     */
    public function hasInfluxdb(){
      return $this->_has(3);
    }
    
    /**
     * Clear <influxdb> value
     *
     * @return \billing\DBQuota
     */
    public function clearInfluxdb(){
      return $this->_clear(3);
    }
    
    /**
     * Get <influxdb> value
     *
     * @return int
     */
    public function getInfluxdb(){
      return $this->_get(3);
    }
    
    /**
     * Set <influxdb> value
     *
     * @param int $value
     * @return \billing\DBQuota
     */
    public function setInfluxdb( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace billing {

  class SubscriptionQutaRequest extends \DrSlump\Protobuf\Message {

    /**  @var int - \billing\Resource */
    public $resource = null;
    
    /**  @var string */
    public $subresource = null;
    
    /**  @var string */
    public $object_phid = null;
    
    /**  @var int */
    public $count = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.SubscriptionQutaRequest');

      // OPTIONAL ENUM resource = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "resource";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\billing\Resource';
      $descriptor->addField($f);

      // OPTIONAL STRING subresource = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "subresource";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING object_phid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "object_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 count = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <resource> has a value
     *
     * @return boolean
     */
    public function hasResource(){
      return $this->_has(1);
    }
    
    /**
     * Clear <resource> value
     *
     * @return \billing\SubscriptionQutaRequest
     */
    public function clearResource(){
      return $this->_clear(1);
    }
    
    /**
     * Get <resource> value
     *
     * @return int - \billing\Resource
     */
    public function getResource(){
      return $this->_get(1);
    }
    
    /**
     * Set <resource> value
     *
     * @param int - \billing\Resource $value
     * @return \billing\SubscriptionQutaRequest
     */
    public function setResource( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <subresource> has a value
     *
     * @return boolean
     */
    public function hasSubresource(){
      return $this->_has(2);
    }
    
    /**
     * Clear <subresource> value
     *
     * @return \billing\SubscriptionQutaRequest
     */
    public function clearSubresource(){
      return $this->_clear(2);
    }
    
    /**
     * Get <subresource> value
     *
     * @return string
     */
    public function getSubresource(){
      return $this->_get(2);
    }
    
    /**
     * Set <subresource> value
     *
     * @param string $value
     * @return \billing\SubscriptionQutaRequest
     */
    public function setSubresource( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <object_phid> has a value
     *
     * @return boolean
     */
    public function hasObjectPhid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <object_phid> value
     *
     * @return \billing\SubscriptionQutaRequest
     */
    public function clearObjectPhid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <object_phid> value
     *
     * @return string
     */
    public function getObjectPhid(){
      return $this->_get(3);
    }
    
    /**
     * Set <object_phid> value
     *
     * @param string $value
     * @return \billing\SubscriptionQutaRequest
     */
    public function setObjectPhid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(5);
    }
    
    /**
     * Clear <count> value
     *
     * @return \billing\SubscriptionQutaRequest
     */
    public function clearCount(){
      return $this->_clear(5);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(5);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \billing\SubscriptionQutaRequest
     */
    public function setCount( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace billing {

  class SubscriptionQutaResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $subscription_phid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'billing.SubscriptionQutaResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING subscription_phid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "subscription_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \billing\SubscriptionQutaResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \billing\SubscriptionQutaResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <subscription_phid> has a value
     *
     * @return boolean
     */
    public function hasSubscriptionPhid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <subscription_phid> value
     *
     * @return \billing\SubscriptionQutaResponse
     */
    public function clearSubscriptionPhid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <subscription_phid> value
     *
     * @return string
     */
    public function getSubscriptionPhid(){
      return $this->_get(3);
    }
    
    /**
     * Set <subscription_phid> value
     *
     * @param string $value
     * @return \billing\SubscriptionQutaResponse
     */
    public function setSubscriptionPhid( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace billing {

  class SubscriptionsClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param billing\SubscriptionCreateRequest $input
     */
    public function Create(\billing\SubscriptionCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/billing.Subscriptions/Create', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param billing\SubscriptionDescribeRequest $input
     */
    public function Describe(\billing\SubscriptionDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/billing.Subscriptions/Describe', $argument, '\billing\SubscriptionDescribeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param billing\SubscriptionOpenRequest $input
     */
    public function Subscribe(\billing\SubscriptionOpenRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/billing.Subscriptions/Subscribe', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param billing\SubscriptionCloseRequest $input
     */
    public function UnSubscribe(\billing\SubscriptionCloseRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/billing.Subscriptions/UnSubscribe', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param billing\SubscriptionQutaRequest $input
     */
    public function Quota(\billing\SubscriptionQutaRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/billing.Subscriptions/Quota', $argument, '\billing\SubscriptionQutaResponse::deserialize', $metadata, $options);
    }
  }
}
