// Code generated by protoc-gen-go.
// source: namespace.proto
// DO NOT EDIT!

/*
Package namespace is a generated protocol buffer package.

It is generated from these files:
	namespace.proto

It has these top-level messages:
	CheckRequest
	CheckResponse
	CreateRequest
	CreateResponse
	LogRequest
	LogResponse
	Log
	StatusRequest
	StatusResponse
*/
package namespace

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CheckRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CheckResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *CheckResponse) Reset()                    { *m = CheckResponse{} }
func (m *CheckResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse) ProtoMessage()               {}
func (*CheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CheckResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type CreateRequest struct {
	Name             string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DisplayName      string   `protobuf:"bytes,2,opt,name=display_name" json:"display_name,omitempty"`
	Email            string   `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	UserName         string   `protobuf:"bytes,4,opt,name=user_name" json:"user_name,omitempty"`
	Password         string   `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	InviteEmail      []string `protobuf:"bytes,6,rep,name=invite_email" json:"invite_email,omitempty"`
	UserIp           string   `protobuf:"bytes,7,opt,name=user_ip" json:"user_ip,omitempty"`
	SubscriptionType string   `protobuf:"bytes,8,opt,name=subscription_type" json:"subscription_type,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CreateResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type LogRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *LogRequest) Reset()                    { *m = LogRequest{} }
func (m *LogRequest) String() string            { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()               {}
func (*LogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type LogResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Logs   []*Log         `protobuf:"bytes,2,rep,name=logs" json:"logs,omitempty"`
}

func (m *LogResponse) Reset()                    { *m = LogResponse{} }
func (m *LogResponse) String() string            { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()               {}
func (*LogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LogResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *LogResponse) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

type Log struct {
	Info    string `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Details string `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type StatusRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type StatusResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StatusResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*CheckRequest)(nil), "namespace.CheckRequest")
	proto.RegisterType((*CheckResponse)(nil), "namespace.CheckResponse")
	proto.RegisterType((*CreateRequest)(nil), "namespace.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "namespace.CreateResponse")
	proto.RegisterType((*LogRequest)(nil), "namespace.LogRequest")
	proto.RegisterType((*LogResponse)(nil), "namespace.LogResponse")
	proto.RegisterType((*Log)(nil), "namespace.Log")
	proto.RegisterType((*StatusRequest)(nil), "namespace.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "namespace.StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Namespace service

type NamespaceClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type namespaceClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceClient(cc *grpc.ClientConn) NamespaceClient {
	return &namespaceClient{cc}
}

func (c *namespaceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := grpc.Invoke(ctx, "/namespace.Namespace/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/namespace.Namespace/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/namespace.Namespace/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := grpc.Invoke(ctx, "/namespace.Namespace/Log", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Namespace service

type NamespaceServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Log(context.Context, *LogRequest) (*LogResponse, error)
}

func RegisterNamespaceServer(s *grpc.Server, srv NamespaceServer) {
	s.RegisterService(&_Namespace_serviceDesc, srv)
}

func _Namespace_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namespace.Namespace/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namespace.Namespace/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namespace.Namespace/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namespace.Namespace/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Namespace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "namespace.Namespace",
	HandlerType: (*NamespaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Namespace_Check_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Namespace_Create_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Namespace_Status_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _Namespace_Log_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x51, 0x6e, 0xd3, 0x40,
	0x10, 0x55, 0xea, 0xc4, 0x6d, 0xa6, 0x49, 0x4b, 0x57, 0x50, 0x5c, 0x2b, 0xa0, 0xca, 0x80, 0x28,
	0x05, 0xd9, 0x25, 0xfc, 0xf1, 0xcb, 0x27, 0x88, 0x0f, 0x38, 0x40, 0xb4, 0x8d, 0x17, 0xb3, 0x22,
	0xf1, 0x6e, 0x3d, 0x9b, 0xa2, 0x0a, 0xf1, 0xc3, 0x15, 0x38, 0x05, 0x87, 0xe0, 0x14, 0x5c, 0x81,
	0x83, 0xb0, 0x9e, 0xb5, 0x8b, 0x0d, 0x56, 0xe5, 0x9f, 0x44, 0xfb, 0x66, 0xe6, 0xbd, 0x99, 0x37,
	0x63, 0xd8, 0xcf, 0xf9, 0x5a, 0xa0, 0xe6, 0x4b, 0x11, 0xeb, 0x42, 0x19, 0xc5, 0xc6, 0xd7, 0x40,
	0x38, 0xcb, 0x94, 0xca, 0x56, 0x22, 0xe1, 0x5a, 0x26, 0x3c, 0xcf, 0x95, 0xe1, 0x46, 0xaa, 0x1c,
	0x5d, 0x62, 0x78, 0x58, 0xc2, 0xa9, 0xb9, 0xd2, 0x02, 0x13, 0xfa, 0x75, 0x78, 0x34, 0x83, 0xc9,
	0xab, 0x8f, 0x62, 0xf9, 0xe9, 0x9d, 0xb8, 0xd8, 0x08, 0x34, 0x6c, 0x02, 0xc3, 0x92, 0x32, 0x18,
	0x1c, 0x0f, 0x4e, 0xc6, 0x51, 0x02, 0xd3, 0x2a, 0x8a, 0xda, 0x72, 0x09, 0x76, 0x1f, 0x7c, 0xb4,
	0xc4, 0x1b, 0xa4, 0x84, 0xdd, 0xf9, 0x5e, 0xec, 0x38, 0xe3, 0xf7, 0x84, 0x46, 0x3f, 0x06, 0xb6,
	0xa2, 0x10, 0xdc, 0x88, 0x4e, 0x42, 0x76, 0x1b, 0x26, 0xa9, 0x44, 0xbd, 0xe2, 0x57, 0x0b, 0x42,
	0xb7, 0x08, 0x9d, 0xc2, 0x48, 0xac, 0xb9, 0x5c, 0x05, 0x1e, 0x3d, 0x0f, 0x60, 0xbc, 0x41, 0x51,
	0xb8, 0x8c, 0x21, 0x41, 0xb7, 0x60, 0x47, 0x73, 0xc4, 0xcf, 0xaa, 0x48, 0x83, 0x51, 0xcd, 0x24,
	0xf3, 0x4b, 0x69, 0xc4, 0xc2, 0x95, 0xfa, 0xc7, 0x9e, 0x45, 0xf7, 0x61, 0x9b, 0x4a, 0xa5, 0x0e,
	0xb6, 0x29, 0xed, 0x08, 0x0e, 0x70, 0x73, 0x8e, 0xcb, 0x42, 0xea, 0xd2, 0x8e, 0x45, 0xd9, 0x6d,
	0xb0, 0x43, 0xc3, 0x9d, 0xc1, 0x5e, 0xdd, 0x6a, 0xcf, 0xe9, 0x42, 0x80, 0x37, 0x2a, 0xeb, 0xb6,
	0xea, 0x35, 0xec, 0x52, 0xac, 0x1f, 0x15, 0x9b, 0xc1, 0x70, 0xa5, 0x32, 0xb4, 0x06, 0x78, 0x14,
	0xfd, 0xbb, 0x58, 0xcb, 0x12, 0x3d, 0x04, 0xcf, 0xfe, 0x95, 0x0a, 0x32, 0xff, 0xa0, 0x2a, 0xef,
	0xec, 0x6c, 0xa9, 0x30, 0x76, 0x56, 0x74, 0xb6, 0x45, 0xf7, 0x60, 0xea, 0xd8, 0xba, 0x3b, 0xb2,
	0xf3, 0xd5, 0xe1, 0x7e, 0x4d, 0xcd, 0x7f, 0x7a, 0x30, 0x7e, 0x5b, 0x37, 0xc2, 0x32, 0x18, 0xd1,
	0xf2, 0xd9, 0xdd, 0x46, 0x77, 0xcd, 0x63, 0x09, 0x83, 0xff, 0x03, 0x4e, 0x29, 0x7a, 0xfa, 0xed,
	0xd7, 0xef, 0xef, 0x5b, 0x8f, 0xd8, 0x03, 0x7b, 0x8e, 0x1a, 0x97, 0x2a, 0x75, 0x77, 0x79, 0x9d,
	0x9e, 0x5c, 0x9e, 0xc5, 0xcf, 0x93, 0x2f, 0xe5, 0xfb, 0x2b, 0x5b, 0x83, 0xef, 0x16, 0xc1, 0x5a,
	0x84, 0xcd, 0x33, 0x0a, 0x8f, 0x3a, 0x22, 0x95, 0x56, 0x4c, 0x5a, 0x27, 0x61, 0x1f, 0xad, 0x97,
	0x83, 0x53, 0x76, 0x01, 0x7e, 0xb5, 0x84, 0xa6, 0x5c, 0xcb, 0xc9, 0x96, 0x5c, 0xdb, 0xc4, 0x68,
	0x4e, 0x72, 0xcf, 0xd8, 0xe9, 0x8d, 0x72, 0xce, 0xe7, 0x7a, 0x42, 0xe1, 0xf6, 0x79, 0xa7, 0xbd,
	0xe6, 0x5a, 0xec, 0xf0, 0x5f, 0xb8, 0x52, 0x4a, 0x48, 0xe9, 0x09, 0x7b, 0x7c, 0xa3, 0x92, 0x3d,
	0xa3, 0x4a, 0xe6, 0xdc, 0xa7, 0x6f, 0xfa, 0xc5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x39,
	0xfd, 0x88, 0x27, 0x04, 0x00, 0x00,
}
