// Code generated by protoc-gen-go.
// source: namespace.proto
// DO NOT EDIT!

/*
Package namespace is a generated protocol buffer package.

It is generated from these files:
	namespace.proto

It has these top-level messages:
	NamespaceCheckRequest
	NamespaceCheckResponse
	NamespaceCreateRequest
	NamespaceCreateResponse
	NamespaceLogResponse
	NamespaceLog
*/
package namespace

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type NamespaceCheckRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *NamespaceCheckRequest) Reset()                    { *m = NamespaceCheckRequest{} }
func (m *NamespaceCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*NamespaceCheckRequest) ProtoMessage()               {}
func (*NamespaceCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NamespaceCheckResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *NamespaceCheckResponse) Reset()                    { *m = NamespaceCheckResponse{} }
func (m *NamespaceCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*NamespaceCheckResponse) ProtoMessage()               {}
func (*NamespaceCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NamespaceCheckResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type NamespaceCreateRequest struct {
	Name         string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DisplayName  string   `protobuf:"bytes,2,opt,name=display_name" json:"display_name,omitempty"`
	Email        string   `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	UserName     string   `protobuf:"bytes,4,opt,name=user_name" json:"user_name,omitempty"`
	Password     string   `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	InviteeEmail []string `protobuf:"bytes,6,rep,name=invitee_email" json:"invitee_email,omitempty"`
	UserIp       string   `protobuf:"bytes,7,opt,name=user_ip" json:"user_ip,omitempty"`
}

func (m *NamespaceCreateRequest) Reset()                    { *m = NamespaceCreateRequest{} }
func (m *NamespaceCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*NamespaceCreateRequest) ProtoMessage()               {}
func (*NamespaceCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type NamespaceCreateResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *NamespaceCreateResponse) Reset()                    { *m = NamespaceCreateResponse{} }
func (m *NamespaceCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*NamespaceCreateResponse) ProtoMessage()               {}
func (*NamespaceCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NamespaceCreateResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type NamespaceLogResponse struct {
	Status *dtypes.Status  `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Logs   []*NamespaceLog `protobuf:"bytes,2,rep,name=logs" json:"logs,omitempty"`
}

func (m *NamespaceLogResponse) Reset()                    { *m = NamespaceLogResponse{} }
func (m *NamespaceLogResponse) String() string            { return proto.CompactTextString(m) }
func (*NamespaceLogResponse) ProtoMessage()               {}
func (*NamespaceLogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NamespaceLogResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NamespaceLogResponse) GetLogs() []*NamespaceLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type NamespaceLog struct {
	Info    string `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Details string `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
}

func (m *NamespaceLog) Reset()                    { *m = NamespaceLog{} }
func (m *NamespaceLog) String() string            { return proto.CompactTextString(m) }
func (*NamespaceLog) ProtoMessage()               {}
func (*NamespaceLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*NamespaceCheckRequest)(nil), "namespace.NamespaceCheckRequest")
	proto.RegisterType((*NamespaceCheckResponse)(nil), "namespace.NamespaceCheckResponse")
	proto.RegisterType((*NamespaceCreateRequest)(nil), "namespace.NamespaceCreateRequest")
	proto.RegisterType((*NamespaceCreateResponse)(nil), "namespace.NamespaceCreateResponse")
	proto.RegisterType((*NamespaceLogResponse)(nil), "namespace.NamespaceLogResponse")
	proto.RegisterType((*NamespaceLog)(nil), "namespace.NamespaceLog")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Namespace service

type NamespaceClient interface {
	NamespaceCheck(ctx context.Context, in *NamespaceCheckRequest, opts ...grpc.CallOption) (*NamespaceCheckResponse, error)
	NamespaceCreate(ctx context.Context, in *NamespaceCreateRequest, opts ...grpc.CallOption) (*NamespaceCreateResponse, error)
	NamespaceStatus(ctx context.Context, in *NamespaceCheckRequest, opts ...grpc.CallOption) (*NamespaceCheckResponse, error)
	NamespaceLogDetails(ctx context.Context, in *NamespaceCheckRequest, opts ...grpc.CallOption) (*NamespaceLogResponse, error)
}

type namespaceClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceClient(cc *grpc.ClientConn) NamespaceClient {
	return &namespaceClient{cc}
}

func (c *namespaceClient) NamespaceCheck(ctx context.Context, in *NamespaceCheckRequest, opts ...grpc.CallOption) (*NamespaceCheckResponse, error) {
	out := new(NamespaceCheckResponse)
	err := grpc.Invoke(ctx, "/namespace.Namespace/NamespaceCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) NamespaceCreate(ctx context.Context, in *NamespaceCreateRequest, opts ...grpc.CallOption) (*NamespaceCreateResponse, error) {
	out := new(NamespaceCreateResponse)
	err := grpc.Invoke(ctx, "/namespace.Namespace/NamespaceCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) NamespaceStatus(ctx context.Context, in *NamespaceCheckRequest, opts ...grpc.CallOption) (*NamespaceCheckResponse, error) {
	out := new(NamespaceCheckResponse)
	err := grpc.Invoke(ctx, "/namespace.Namespace/NamespaceStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) NamespaceLogDetails(ctx context.Context, in *NamespaceCheckRequest, opts ...grpc.CallOption) (*NamespaceLogResponse, error) {
	out := new(NamespaceLogResponse)
	err := grpc.Invoke(ctx, "/namespace.Namespace/NamespaceLogDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Namespace service

type NamespaceServer interface {
	NamespaceCheck(context.Context, *NamespaceCheckRequest) (*NamespaceCheckResponse, error)
	NamespaceCreate(context.Context, *NamespaceCreateRequest) (*NamespaceCreateResponse, error)
	NamespaceStatus(context.Context, *NamespaceCheckRequest) (*NamespaceCheckResponse, error)
	NamespaceLogDetails(context.Context, *NamespaceCheckRequest) (*NamespaceLogResponse, error)
}

func RegisterNamespaceServer(s *grpc.Server, srv NamespaceServer) {
	s.RegisterService(&_Namespace_serviceDesc, srv)
}

func _Namespace_NamespaceCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(NamespaceCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NamespaceServer).NamespaceCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Namespace_NamespaceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(NamespaceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NamespaceServer).NamespaceCreate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Namespace_NamespaceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(NamespaceCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NamespaceServer).NamespaceStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Namespace_NamespaceLogDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(NamespaceCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NamespaceServer).NamespaceLogDetails(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Namespace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "namespace.Namespace",
	HandlerType: (*NamespaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NamespaceCheck",
			Handler:    _Namespace_NamespaceCheck_Handler,
		},
		{
			MethodName: "NamespaceCreate",
			Handler:    _Namespace_NamespaceCreate_Handler,
		},
		{
			MethodName: "NamespaceStatus",
			Handler:    _Namespace_NamespaceStatus_Handler,
		},
		{
			MethodName: "NamespaceLogDetails",
			Handler:    _Namespace_NamespaceLogDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x1b, 0x37, 0xc5, 0x43, 0xda, 0xc0, 0xd2, 0x0f, 0xcb, 0x2a, 0xad, 0x6b, 0xa8, 0x40,
	0x48, 0xd8, 0xa8, 0x5c, 0x80, 0x2b, 0x1c, 0x11, 0x07, 0x38, 0xa3, 0x6a, 0x89, 0x17, 0xb3, 0xc2,
	0xf5, 0x2e, 0xde, 0x4d, 0xa3, 0x08, 0x05, 0x24, 0xc4, 0x3f, 0xe0, 0xc2, 0xff, 0xe2, 0x2f, 0xf0,
	0x43, 0x58, 0xcf, 0x3a, 0xc6, 0x24, 0x26, 0xca, 0xa1, 0x97, 0x48, 0xfb, 0xf2, 0x66, 0xde, 0xbc,
	0x79, 0x63, 0x18, 0x16, 0xf4, 0x82, 0x29, 0x49, 0x47, 0x2c, 0x96, 0xa5, 0xd0, 0x82, 0x78, 0x0d,
	0x10, 0x1c, 0x66, 0x42, 0x64, 0x39, 0x4b, 0xa8, 0xe4, 0x09, 0x2d, 0x0a, 0xa1, 0xa9, 0xe6, 0xa2,
	0x50, 0x96, 0x18, 0xec, 0x57, 0x70, 0xaa, 0xa7, 0x92, 0xa9, 0x04, 0x7f, 0x2d, 0x1e, 0x9d, 0xc2,
	0xde, 0xab, 0x79, 0x8b, 0xe7, 0x1f, 0xd8, 0xe8, 0xe3, 0x6b, 0xf6, 0x69, 0xcc, 0x94, 0x26, 0x03,
	0x70, 0xab, 0xde, 0xbe, 0x13, 0x3a, 0xf7, 0xbd, 0xe8, 0x09, 0xec, 0x2f, 0xd2, 0x94, 0x34, 0xdd,
	0x19, 0x39, 0x82, 0xbe, 0x32, 0x52, 0x63, 0x85, 0xcc, 0xeb, 0x67, 0x3b, 0xb1, 0x55, 0x89, 0xdf,
	0x20, 0x1a, 0xfd, 0x74, 0xda, 0xa5, 0x25, 0xa3, 0x9a, 0x75, 0x4a, 0x90, 0x5d, 0x18, 0xa4, 0x5c,
	0xc9, 0x9c, 0x4e, 0xcf, 0x11, 0xdd, 0x40, 0x74, 0x1b, 0x36, 0xd9, 0x05, 0xe5, 0xb9, 0xdf, 0xc3,
	0xe7, 0x4d, 0xf0, 0xc6, 0x8a, 0x95, 0x96, 0xe1, 0x22, 0x74, 0x03, 0xae, 0x49, 0xaa, 0xd4, 0x44,
	0x94, 0xa9, 0xbf, 0x89, 0xc8, 0x1e, 0x6c, 0xf3, 0xe2, 0x92, 0x6b, 0xc6, 0xce, 0x6d, 0x6d, 0x3f,
	0xec, 0x19, 0x78, 0x08, 0x5b, 0x58, 0xcb, 0xa5, 0xbf, 0x85, 0xa6, 0x9e, 0xc2, 0xc1, 0xd2, 0x64,
	0x6b, 0xba, 0x7a, 0x0b, 0xbb, 0x4d, 0xe9, 0x4b, 0x91, 0xad, 0x5b, 0x47, 0x4e, 0xc1, 0xcd, 0x45,
	0xa6, 0x8c, 0xb9, 0x9e, 0xf9, 0xf7, 0x20, 0xfe, 0x9b, 0x67, 0xbb, 0x5d, 0xf4, 0x10, 0x06, 0xed,
	0x77, 0xb5, 0x29, 0x5e, 0xbc, 0x17, 0xf5, 0xa6, 0x8c, 0x91, 0x94, 0x69, 0x63, 0x4c, 0xd9, 0x25,
	0x9d, 0x7d, 0x77, 0xc1, 0x6b, 0xf8, 0x64, 0x02, 0x3b, 0xff, 0x66, 0x45, 0xc2, 0x2e, 0x9d, 0x76,
	0xda, 0xc1, 0xc9, 0x0a, 0x86, 0xb5, 0x16, 0x85, 0xdf, 0x7e, 0xfd, 0xfe, 0xb1, 0x11, 0x10, 0x1f,
	0x2f, 0xac, 0xa1, 0x27, 0x97, 0x8f, 0x92, 0xcf, 0xd5, 0x6b, 0x46, 0x66, 0x30, 0x5c, 0xd8, 0x27,
	0xe9, 0xee, 0xdb, 0xbe, 0x82, 0x20, 0x5a, 0x45, 0xa9, 0xb5, 0xef, 0xa0, 0xf6, 0xed, 0xa8, 0x43,
	0x7b, 0x84, 0xcc, 0x67, 0xce, 0x03, 0xf2, 0xb5, 0x25, 0x5f, 0xaf, 0xfb, 0x4a, 0x8c, 0xdf, 0x43,
	0xf1, 0x13, 0x72, 0xbc, 0x2c, 0x6e, 0xb3, 0x9e, 0xfb, 0xff, 0x02, 0xb7, 0xda, 0xa9, 0xbd, 0xb0,
	0x19, 0xad, 0x31, 0xc4, 0xf1, 0x7f, 0xee, 0xa0, 0x19, 0xe1, 0x2e, 0x8e, 0x70, 0x44, 0x0e, 0x97,
	0x47, 0x30, 0xe7, 0x54, 0xeb, 0xbf, 0xeb, 0xe3, 0x27, 0xfd, 0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x9e, 0x4b, 0x0a, 0xa8, 0x26, 0x04, 0x00, 0x00,
}
