<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: gearman.proto
//   Date: 2016-04-19 16:27:26

namespace gearman {

  class OperationType extends \DrSlump\Protobuf\Enum {
    const UNKNOWN = 0;
    const CLUSTER_CREATE = 1;
    const CLUSTER_SCALE = 2;
    const CLUSTER_DELETE = 3;
    const NAMESPACE_CREATE = 4;
    const SLAVE_CREATE = 5;
    const SLAVE_DELETE = 6;
    const CLUSTER_UPDATE = 7;
  }
}
namespace gearman {

  class Operation extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $phid = null;
    
    /**  @var int - \gearman\OperationType */
    public $type = null;
    
    /**  @var \kubernetes\ClusterCreateRequest */
    public $cluster_create_request = null;
    
    /**  @var \kubernetes\ClusterScaleRequest */
    public $cluster_scale_request = null;
    
    /**  @var \kubernetes\ClusterDeleteRequest */
    public $cluster_delete_request = null;
    
    /**  @var \ci\SlaveCreateRequest */
    public $ci_slave_create_request = null;
    
    /**  @var \ci\SlaveDeleteRequest */
    public $ci_slave_delete_request = null;
    
    /**  @var \kubernetes\ClusterUpdateRequest */
    public $cluster_update_request = null;
    
    /**  @var \gearman\Auth */
    public $auth = null;
    
    /**  @var int */
    public $request_time = null;
    
    /**  @var \gearman\Metadata */
    public $metadata = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'gearman.Operation');

      // OPTIONAL STRING phid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\gearman\OperationType';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cluster_create_request = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_create_request";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\kubernetes\ClusterCreateRequest';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cluster_scale_request = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cluster_scale_request";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\kubernetes\ClusterScaleRequest';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cluster_delete_request = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cluster_delete_request";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\kubernetes\ClusterDeleteRequest';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ci_slave_create_request = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "ci_slave_create_request";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ci\SlaveCreateRequest';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ci_slave_delete_request = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "ci_slave_delete_request";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ci\SlaveDeleteRequest';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cluster_update_request = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "cluster_update_request";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\kubernetes\ClusterUpdateRequest';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE auth = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "auth";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\gearman\Auth';
      $descriptor->addField($f);

      // OPTIONAL INT64 request_time = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "request_time";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE metadata = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "metadata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\gearman\Metadata';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <phid> has a value
     *
     * @return boolean
     */
    public function hasPhid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <phid> value
     *
     * @return \gearman\Operation
     */
    public function clearPhid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <phid> value
     *
     * @return string
     */
    public function getPhid(){
      return $this->_get(1);
    }
    
    /**
     * Set <phid> value
     *
     * @param string $value
     * @return \gearman\Operation
     */
    public function setPhid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \gearman\Operation
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \gearman\OperationType
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \gearman\OperationType $value
     * @return \gearman\Operation
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_create_request> has a value
     *
     * @return boolean
     */
    public function hasClusterCreateRequest(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_create_request> value
     *
     * @return \gearman\Operation
     */
    public function clearClusterCreateRequest(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_create_request> value
     *
     * @return \kubernetes\ClusterCreateRequest
     */
    public function getClusterCreateRequest(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_create_request> value
     *
     * @param \kubernetes\ClusterCreateRequest $value
     * @return \gearman\Operation
     */
    public function setClusterCreateRequest(\kubernetes\ClusterCreateRequest $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <cluster_scale_request> has a value
     *
     * @return boolean
     */
    public function hasClusterScaleRequest(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cluster_scale_request> value
     *
     * @return \gearman\Operation
     */
    public function clearClusterScaleRequest(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cluster_scale_request> value
     *
     * @return \kubernetes\ClusterScaleRequest
     */
    public function getClusterScaleRequest(){
      return $this->_get(4);
    }
    
    /**
     * Set <cluster_scale_request> value
     *
     * @param \kubernetes\ClusterScaleRequest $value
     * @return \gearman\Operation
     */
    public function setClusterScaleRequest(\kubernetes\ClusterScaleRequest $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <cluster_delete_request> has a value
     *
     * @return boolean
     */
    public function hasClusterDeleteRequest(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cluster_delete_request> value
     *
     * @return \gearman\Operation
     */
    public function clearClusterDeleteRequest(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cluster_delete_request> value
     *
     * @return \kubernetes\ClusterDeleteRequest
     */
    public function getClusterDeleteRequest(){
      return $this->_get(5);
    }
    
    /**
     * Set <cluster_delete_request> value
     *
     * @param \kubernetes\ClusterDeleteRequest $value
     * @return \gearman\Operation
     */
    public function setClusterDeleteRequest(\kubernetes\ClusterDeleteRequest $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <ci_slave_create_request> has a value
     *
     * @return boolean
     */
    public function hasCiSlaveCreateRequest(){
      return $this->_has(6);
    }
    
    /**
     * Clear <ci_slave_create_request> value
     *
     * @return \gearman\Operation
     */
    public function clearCiSlaveCreateRequest(){
      return $this->_clear(6);
    }
    
    /**
     * Get <ci_slave_create_request> value
     *
     * @return \ci\SlaveCreateRequest
     */
    public function getCiSlaveCreateRequest(){
      return $this->_get(6);
    }
    
    /**
     * Set <ci_slave_create_request> value
     *
     * @param \ci\SlaveCreateRequest $value
     * @return \gearman\Operation
     */
    public function setCiSlaveCreateRequest(\ci\SlaveCreateRequest $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <ci_slave_delete_request> has a value
     *
     * @return boolean
     */
    public function hasCiSlaveDeleteRequest(){
      return $this->_has(7);
    }
    
    /**
     * Clear <ci_slave_delete_request> value
     *
     * @return \gearman\Operation
     */
    public function clearCiSlaveDeleteRequest(){
      return $this->_clear(7);
    }
    
    /**
     * Get <ci_slave_delete_request> value
     *
     * @return \ci\SlaveDeleteRequest
     */
    public function getCiSlaveDeleteRequest(){
      return $this->_get(7);
    }
    
    /**
     * Set <ci_slave_delete_request> value
     *
     * @param \ci\SlaveDeleteRequest $value
     * @return \gearman\Operation
     */
    public function setCiSlaveDeleteRequest(\ci\SlaveDeleteRequest $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <cluster_update_request> has a value
     *
     * @return boolean
     */
    public function hasClusterUpdateRequest(){
      return $this->_has(11);
    }
    
    /**
     * Clear <cluster_update_request> value
     *
     * @return \gearman\Operation
     */
    public function clearClusterUpdateRequest(){
      return $this->_clear(11);
    }
    
    /**
     * Get <cluster_update_request> value
     *
     * @return \kubernetes\ClusterUpdateRequest
     */
    public function getClusterUpdateRequest(){
      return $this->_get(11);
    }
    
    /**
     * Set <cluster_update_request> value
     *
     * @param \kubernetes\ClusterUpdateRequest $value
     * @return \gearman\Operation
     */
    public function setClusterUpdateRequest(\kubernetes\ClusterUpdateRequest $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <auth> has a value
     *
     * @return boolean
     */
    public function hasAuth(){
      return $this->_has(8);
    }
    
    /**
     * Clear <auth> value
     *
     * @return \gearman\Operation
     */
    public function clearAuth(){
      return $this->_clear(8);
    }
    
    /**
     * Get <auth> value
     *
     * @return \gearman\Auth
     */
    public function getAuth(){
      return $this->_get(8);
    }
    
    /**
     * Set <auth> value
     *
     * @param \gearman\Auth $value
     * @return \gearman\Operation
     */
    public function setAuth(\gearman\Auth $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <request_time> has a value
     *
     * @return boolean
     */
    public function hasRequestTime(){
      return $this->_has(9);
    }
    
    /**
     * Clear <request_time> value
     *
     * @return \gearman\Operation
     */
    public function clearRequestTime(){
      return $this->_clear(9);
    }
    
    /**
     * Get <request_time> value
     *
     * @return int
     */
    public function getRequestTime(){
      return $this->_get(9);
    }
    
    /**
     * Set <request_time> value
     *
     * @param int $value
     * @return \gearman\Operation
     */
    public function setRequestTime( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <metadata> has a value
     *
     * @return boolean
     */
    public function hasMetadata(){
      return $this->_has(10);
    }
    
    /**
     * Clear <metadata> value
     *
     * @return \gearman\Operation
     */
    public function clearMetadata(){
      return $this->_clear(10);
    }
    
    /**
     * Get <metadata> value
     *
     * @return \gearman\Metadata
     */
    public function getMetadata(){
      return $this->_get(10);
    }
    
    /**
     * Set <metadata> value
     *
     * @param \gearman\Metadata $value
     * @return \gearman\Operation
     */
    public function setMetadata(\gearman\Metadata $value){
      return $this->_set(10, $value);
    }
  }
}

namespace gearman {

  class Auth extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $username = null;
    
    /**  @var string */
    public $token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'gearman.Auth');

      // OPTIONAL STRING namespace = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING username = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(1);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \gearman\Auth
     */
    public function clearNamespace(){
      return $this->_clear(1);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(1);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \gearman\Auth
     */
    public function setNamespace( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(2);
    }
    
    /**
     * Clear <username> value
     *
     * @return \gearman\Auth
     */
    public function clearUsername(){
      return $this->_clear(2);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(2);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \gearman\Auth
     */
    public function setUsername( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <token> has a value
     *
     * @return boolean
     */
    public function hasToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <token> value
     *
     * @return \gearman\Auth
     */
    public function clearToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <token> value
     *
     * @return string
     */
    public function getToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <token> value
     *
     * @param string $value
     * @return \gearman\Auth
     */
    public function setToken( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace gearman {

  class Metadata extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $subscription_phid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'gearman.Metadata');

      // OPTIONAL STRING subscription_phid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "subscription_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <subscription_phid> has a value
     *
     * @return boolean
     */
    public function hasSubscriptionPhid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <subscription_phid> value
     *
     * @return \gearman\Metadata
     */
    public function clearSubscriptionPhid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <subscription_phid> value
     *
     * @return string
     */
    public function getSubscriptionPhid(){
      return $this->_get(1);
    }
    
    /**
     * Set <subscription_phid> value
     *
     * @param string $value
     * @return \gearman\Metadata
     */
    public function setSubscriptionPhid( $value){
      return $this->_set(1, $value);
    }
  }
}

