<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: pv.proto
//   Date: 2016-04-20 05:49:30

namespace pv {

  class PVRegisterRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $identifier = null;
    
    /**  @var string */
    public $plugin = null;
    
    /**  @var int */
    public $size = null;
    
    /**  @var string */
    public $endpoint = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.PVRegisterRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING identifier = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "identifier";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING plugin = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "plugin";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING endpoint = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "endpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \pv\PVRegisterRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \pv\PVRegisterRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \pv\PVRegisterRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \pv\PVRegisterRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <identifier> has a value
     *
     * @return boolean
     */
    public function hasIdentifier(){
      return $this->_has(3);
    }
    
    /**
     * Clear <identifier> value
     *
     * @return \pv\PVRegisterRequest
     */
    public function clearIdentifier(){
      return $this->_clear(3);
    }
    
    /**
     * Get <identifier> value
     *
     * @return string
     */
    public function getIdentifier(){
      return $this->_get(3);
    }
    
    /**
     * Set <identifier> value
     *
     * @param string $value
     * @return \pv\PVRegisterRequest
     */
    public function setIdentifier( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <plugin> has a value
     *
     * @return boolean
     */
    public function hasPlugin(){
      return $this->_has(4);
    }
    
    /**
     * Clear <plugin> value
     *
     * @return \pv\PVRegisterRequest
     */
    public function clearPlugin(){
      return $this->_clear(4);
    }
    
    /**
     * Get <plugin> value
     *
     * @return string
     */
    public function getPlugin(){
      return $this->_get(4);
    }
    
    /**
     * Set <plugin> value
     *
     * @param string $value
     * @return \pv\PVRegisterRequest
     */
    public function setPlugin( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(5);
    }
    
    /**
     * Clear <size> value
     *
     * @return \pv\PVRegisterRequest
     */
    public function clearSize(){
      return $this->_clear(5);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(5);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \pv\PVRegisterRequest
     */
    public function setSize( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <endpoint> has a value
     *
     * @return boolean
     */
    public function hasEndpoint(){
      return $this->_has(6);
    }
    
    /**
     * Clear <endpoint> value
     *
     * @return \pv\PVRegisterRequest
     */
    public function clearEndpoint(){
      return $this->_clear(6);
    }
    
    /**
     * Get <endpoint> value
     *
     * @return string
     */
    public function getEndpoint(){
      return $this->_get(6);
    }
    
    /**
     * Set <endpoint> value
     *
     * @param string $value
     * @return \pv\PVRegisterRequest
     */
    public function setEndpoint( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace pv {

  class PVUnregisterRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.PVUnregisterRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \pv\PVUnregisterRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \pv\PVUnregisterRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \pv\PVUnregisterRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \pv\PVUnregisterRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace pv {

  class PVDescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.PVDescribeRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \pv\PVDescribeRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \pv\PVDescribeRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \pv\PVDescribeRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \pv\PVDescribeRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace pv {

  class PVInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $size = null;
    
    /**  @var string */
    public $status = null;
    
    /**  @var string */
    public $volume = null;
    
    /**  @var string */
    public $claim = null;
    
    /**  @var string */
    public $plugin = null;
    
    /**  @var string[]  */
    public $accessModes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.PVInfo');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING status = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING volume = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "volume";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING claim = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "claim";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING plugin = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "plugin";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING accessModes = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "accessModes";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \pv\PVInfo
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \pv\PVInfo
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <size> value
     *
     * @return \pv\PVInfo
     */
    public function clearSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \pv\PVInfo
     */
    public function setSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(3);
    }
    
    /**
     * Clear <status> value
     *
     * @return \pv\PVInfo
     */
    public function clearStatus(){
      return $this->_clear(3);
    }
    
    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus(){
      return $this->_get(3);
    }
    
    /**
     * Set <status> value
     *
     * @param string $value
     * @return \pv\PVInfo
     */
    public function setStatus( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <volume> has a value
     *
     * @return boolean
     */
    public function hasVolume(){
      return $this->_has(4);
    }
    
    /**
     * Clear <volume> value
     *
     * @return \pv\PVInfo
     */
    public function clearVolume(){
      return $this->_clear(4);
    }
    
    /**
     * Get <volume> value
     *
     * @return string
     */
    public function getVolume(){
      return $this->_get(4);
    }
    
    /**
     * Set <volume> value
     *
     * @param string $value
     * @return \pv\PVInfo
     */
    public function setVolume( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <claim> has a value
     *
     * @return boolean
     */
    public function hasClaim(){
      return $this->_has(5);
    }
    
    /**
     * Clear <claim> value
     *
     * @return \pv\PVInfo
     */
    public function clearClaim(){
      return $this->_clear(5);
    }
    
    /**
     * Get <claim> value
     *
     * @return string
     */
    public function getClaim(){
      return $this->_get(5);
    }
    
    /**
     * Set <claim> value
     *
     * @param string $value
     * @return \pv\PVInfo
     */
    public function setClaim( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <plugin> has a value
     *
     * @return boolean
     */
    public function hasPlugin(){
      return $this->_has(6);
    }
    
    /**
     * Clear <plugin> value
     *
     * @return \pv\PVInfo
     */
    public function clearPlugin(){
      return $this->_clear(6);
    }
    
    /**
     * Get <plugin> value
     *
     * @return string
     */
    public function getPlugin(){
      return $this->_get(6);
    }
    
    /**
     * Set <plugin> value
     *
     * @param string $value
     * @return \pv\PVInfo
     */
    public function setPlugin( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <accessModes> has a value
     *
     * @return boolean
     */
    public function hasAccessModes(){
      return $this->_has(7);
    }
    
    /**
     * Clear <accessModes> value
     *
     * @return \pv\PVInfo
     */
    public function clearAccessModes(){
      return $this->_clear(7);
    }
    
    /**
     * Get <accessModes> value
     *
     * @param int $idx
     * @return string
     */
    public function getAccessModes($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <accessModes> value
     *
     * @param string $value
     * @return \pv\PVInfo
     */
    public function setAccessModes( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <accessModes>
     *
     * @return string[]
     */
    public function getAccessModesList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <accessModes>
     *
     * @param string $value
     * @return \pv\PVInfo
     */
    public function addAccessModes( $value){
     return $this->_add(7, $value);
    }
  }
}

namespace pv {

  class PVDescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \pv\PVInfo */
    public $pv = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.PVDescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pv = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "pv";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\pv\PVInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \pv\PVDescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \pv\PVDescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pv> has a value
     *
     * @return boolean
     */
    public function hasPv(){
      return $this->_has(2);
    }
    
    /**
     * Clear <pv> value
     *
     * @return \pv\PVDescribeResponse
     */
    public function clearPv(){
      return $this->_clear(2);
    }
    
    /**
     * Get <pv> value
     *
     * @return \pv\PVInfo
     */
    public function getPv(){
      return $this->_get(2);
    }
    
    /**
     * Set <pv> value
     *
     * @param \pv\PVInfo $value
     * @return \pv\PVDescribeResponse
     */
    public function setPv(\pv\PVInfo $value){
      return $this->_set(2, $value);
    }
  }
}

namespace pv {

  class PersistentVolumesClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param pv\PVDescribeRequest $input
     */
    public function Describe(\pv\PVDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/pv.PersistentVolumes/Describe', $argument, '\pv\PVDescribeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param pv\PVRegisterRequest $input
     */
    public function Register(\pv\PVRegisterRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/pv.PersistentVolumes/Register', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param pv\PVUnregisterRequest $input
     */
    public function Unregister(\pv\PVUnregisterRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/pv.PersistentVolumes/Unregister', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
  }
}
