// Code generated by protoc-gen-go.
// source: pv.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	pv.proto

It has these top-level messages:
	PVUnregisterRequest
	PVCUnregisterRequest
	PVCRegisterRequest
	PVRegisterRequest
	PVDeleteRequest
	PVCreateRequest
	CommonResponse
	PVListRequest
	PVListResponse
	DataList
	GfsVolume
	PV
	PVC
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type PVUnregisterRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	PvName  string `protobuf:"bytes,2,opt,name=pv_name,json=pvName" json:"pv_name,omitempty"`
}

func (m *PVUnregisterRequest) Reset()                    { *m = PVUnregisterRequest{} }
func (m *PVUnregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVUnregisterRequest) ProtoMessage()               {}
func (*PVUnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PVCUnregisterRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	PvcName   string `protobuf:"bytes,3,opt,name=pvc_name,json=pvcName" json:"pvc_name,omitempty"`
}

func (m *PVCUnregisterRequest) Reset()                    { *m = PVCUnregisterRequest{} }
func (m *PVCUnregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVCUnregisterRequest) ProtoMessage()               {}
func (*PVCUnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PVCRegisterRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Cluster   string `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	Provider  string `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *PVCRegisterRequest) Reset()                    { *m = PVCRegisterRequest{} }
func (m *PVCRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVCRegisterRequest) ProtoMessage()               {}
func (*PVCRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PVRegisterRequest struct {
	Provider string `protobuf:"bytes,1,opt,name=provider" json:"provider,omitempty"`
	Cluster  string `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *PVRegisterRequest) Reset()                    { *m = PVRegisterRequest{} }
func (m *PVRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVRegisterRequest) ProtoMessage()               {}
func (*PVRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PVDeleteRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Provider   string `protobuf:"bytes,2,opt,name=provider" json:"provider,omitempty"`
	Cluster    string `protobuf:"bytes,3,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *PVDeleteRequest) Reset()                    { *m = PVDeleteRequest{} }
func (m *PVDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*PVDeleteRequest) ProtoMessage()               {}
func (*PVDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PVCreateRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Zone     string `protobuf:"bytes,2,opt,name=zone" json:"zone,omitempty"`
	DiskType string `protobuf:"bytes,3,opt,name=disk_type,json=diskType" json:"disk_type,omitempty"`
	Size     int64  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Cluster  string `protobuf:"bytes,5,opt,name=cluster" json:"cluster,omitempty"`
	Provider string `protobuf:"bytes,6,opt,name=provider" json:"provider,omitempty"`
}

func (m *PVCreateRequest) Reset()                    { *m = PVCreateRequest{} }
func (m *PVCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*PVCreateRequest) ProtoMessage()               {}
func (*PVCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type CommonResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *CommonResponse) Reset()                    { *m = CommonResponse{} }
func (m *CommonResponse) String() string            { return proto.CompactTextString(m) }
func (*CommonResponse) ProtoMessage()               {}
func (*CommonResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CommonResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type PVListRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *PVListRequest) Reset()                    { *m = PVListRequest{} }
func (m *PVListRequest) String() string            { return proto.CompactTextString(m) }
func (*PVListRequest) ProtoMessage()               {}
func (*PVListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type PVListResponse struct {
	KubeName        string         `protobuf:"bytes,1,opt,name=kube_name,json=kubeName" json:"kube_name,omitempty"`
	Data            []*DataList    `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	Status          *dtypes.Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	GlusterfsVolume []*GfsVolume   `protobuf:"bytes,4,rep,name=glusterfs_volume,json=glusterfsVolume" json:"glusterfs_volume,omitempty"`
	Pv              []*PV          `protobuf:"bytes,5,rep,name=pv" json:"pv,omitempty"`
	Pvc             []*PVC         `protobuf:"bytes,6,rep,name=pvc" json:"pvc,omitempty"`
}

func (m *PVListResponse) Reset()                    { *m = PVListResponse{} }
func (m *PVListResponse) String() string            { return proto.CompactTextString(m) }
func (*PVListResponse) ProtoMessage()               {}
func (*PVListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PVListResponse) GetData() []*DataList {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PVListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PVListResponse) GetGlusterfsVolume() []*GfsVolume {
	if m != nil {
		return m.GlusterfsVolume
	}
	return nil
}

func (m *PVListResponse) GetPv() []*PV {
	if m != nil {
		return m.Pv
	}
	return nil
}

func (m *PVListResponse) GetPvc() []*PVC {
	if m != nil {
		return m.Pvc
	}
	return nil
}

type DataList struct {
	Name      string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size      int64    `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Zone      string   `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	Type      string   `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Status    string   `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	Iops      int64    `protobuf:"varint,6,opt,name=iops" json:"iops,omitempty"`
	Snapshots string   `protobuf:"bytes,7,opt,name=snapshots" json:"snapshots,omitempty"`
	AwsVolId  string   `protobuf:"bytes,8,opt,name=aws_vol_id,json=awsVolId" json:"aws_vol_id,omitempty"`
	GceVolId  int64    `protobuf:"varint,9,opt,name=gce_vol_id,json=gceVolId" json:"gce_vol_id,omitempty"`
	Users     []string `protobuf:"bytes,10,rep,name=users" json:"users,omitempty"`
	Kind      string   `protobuf:"bytes,11,opt,name=kind" json:"kind,omitempty"`
}

func (m *DataList) Reset()                    { *m = DataList{} }
func (m *DataList) String() string            { return proto.CompactTextString(m) }
func (*DataList) ProtoMessage()               {}
func (*DataList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type GfsVolume struct {
	Path     string   `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Endpoint string   `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	Replica  int64    `protobuf:"varint,3,opt,name=replica" json:"replica,omitempty"`
	Master   string   `protobuf:"bytes,4,opt,name=master" json:"master,omitempty"`
	Ip       []string `protobuf:"bytes,5,rep,name=ip" json:"ip,omitempty"`
}

func (m *GfsVolume) Reset()                    { *m = GfsVolume{} }
func (m *GfsVolume) String() string            { return proto.CompactTextString(m) }
func (*GfsVolume) ProtoMessage()               {}
func (*GfsVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type PV struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	King   string            `protobuf:"bytes,2,opt,name=king" json:"king,omitempty"`
	Label  map[string]string `protobuf:"bytes,3,rep,name=label" json:"label,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Size   int64             `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Status string            `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
}

func (m *PV) Reset()                    { *m = PV{} }
func (m *PV) String() string            { return proto.CompactTextString(m) }
func (*PV) ProtoMessage()               {}
func (*PV) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PV) GetLabel() map[string]string {
	if m != nil {
		return m.Label
	}
	return nil
}

type PVC struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Kind   string            `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	Label  map[string]string `protobuf:"bytes,3,rep,name=label" json:"label,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Size   int64             `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Status string            `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
}

func (m *PVC) Reset()                    { *m = PVC{} }
func (m *PVC) String() string            { return proto.CompactTextString(m) }
func (*PVC) ProtoMessage()               {}
func (*PVC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PVC) GetLabel() map[string]string {
	if m != nil {
		return m.Label
	}
	return nil
}

func init() {
	proto.RegisterType((*PVUnregisterRequest)(nil), "api.PVUnregisterRequest")
	proto.RegisterType((*PVCUnregisterRequest)(nil), "api.PVCUnregisterRequest")
	proto.RegisterType((*PVCRegisterRequest)(nil), "api.PVCRegisterRequest")
	proto.RegisterType((*PVRegisterRequest)(nil), "api.PVRegisterRequest")
	proto.RegisterType((*PVDeleteRequest)(nil), "api.PVDeleteRequest")
	proto.RegisterType((*PVCreateRequest)(nil), "api.PVCreateRequest")
	proto.RegisterType((*CommonResponse)(nil), "api.CommonResponse")
	proto.RegisterType((*PVListRequest)(nil), "api.PVListRequest")
	proto.RegisterType((*PVListResponse)(nil), "api.PVListResponse")
	proto.RegisterType((*DataList)(nil), "api.DataList")
	proto.RegisterType((*GfsVolume)(nil), "api.GfsVolume")
	proto.RegisterType((*PV)(nil), "api.PV")
	proto.RegisterType((*PVC)(nil), "api.PVC")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for PersistentVolume service

type PersistentVolumeClient interface {
	List(ctx context.Context, in *PVListRequest, opts ...grpc.CallOption) (*PVListResponse, error)
	Create(ctx context.Context, in *PVCreateRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	Delete(ctx context.Context, in *PVDeleteRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	PVRegister(ctx context.Context, in *PVRegisterRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	PVUnregister(ctx context.Context, in *PVUnregisterRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	PVCRegister(ctx context.Context, in *PVCRegisterRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	PVCUnregister(ctx context.Context, in *PVCUnregisterRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type persistentVolumeClient struct {
	cc *grpc.ClientConn
}

func NewPersistentVolumeClient(cc *grpc.ClientConn) PersistentVolumeClient {
	return &persistentVolumeClient{cc}
}

func (c *persistentVolumeClient) List(ctx context.Context, in *PVListRequest, opts ...grpc.CallOption) (*PVListResponse, error) {
	out := new(PVListResponse)
	err := grpc.Invoke(ctx, "/api.PersistentVolume/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClient) Create(ctx context.Context, in *PVCreateRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/api.PersistentVolume/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClient) Delete(ctx context.Context, in *PVDeleteRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/api.PersistentVolume/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClient) PVRegister(ctx context.Context, in *PVRegisterRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/api.PersistentVolume/PVRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClient) PVUnregister(ctx context.Context, in *PVUnregisterRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/api.PersistentVolume/PVUnregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClient) PVCRegister(ctx context.Context, in *PVCRegisterRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/api.PersistentVolume/PVCRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClient) PVCUnregister(ctx context.Context, in *PVCUnregisterRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/api.PersistentVolume/PVCUnregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PersistentVolume service

type PersistentVolumeServer interface {
	List(context.Context, *PVListRequest) (*PVListResponse, error)
	Create(context.Context, *PVCreateRequest) (*CommonResponse, error)
	Delete(context.Context, *PVDeleteRequest) (*CommonResponse, error)
	PVRegister(context.Context, *PVRegisterRequest) (*CommonResponse, error)
	PVUnregister(context.Context, *PVUnregisterRequest) (*CommonResponse, error)
	PVCRegister(context.Context, *PVCRegisterRequest) (*CommonResponse, error)
	PVCUnregister(context.Context, *PVCUnregisterRequest) (*CommonResponse, error)
}

func RegisterPersistentVolumeServer(s *grpc.Server, srv PersistentVolumeServer) {
	s.RegisterService(&_PersistentVolume_serviceDesc, srv)
}

func _PersistentVolume_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumeServer).List(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PersistentVolume_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumeServer).Create(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PersistentVolume_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumeServer).Delete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PersistentVolume_PVRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumeServer).PVRegister(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PersistentVolume_PVUnregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumeServer).PVUnregister(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PersistentVolume_PVCRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVCRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumeServer).PVCRegister(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PersistentVolume_PVCUnregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVCUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumeServer).PVCUnregister(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PersistentVolume_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PersistentVolume",
	HandlerType: (*PersistentVolumeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PersistentVolume_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PersistentVolume_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PersistentVolume_Delete_Handler,
		},
		{
			MethodName: "PVRegister",
			Handler:    _PersistentVolume_PVRegister_Handler,
		},
		{
			MethodName: "PVUnregister",
			Handler:    _PersistentVolume_PVUnregister_Handler,
		},
		{
			MethodName: "PVCRegister",
			Handler:    _PersistentVolume_PVCRegister_Handler,
		},
		{
			MethodName: "PVCUnregister",
			Handler:    _PersistentVolume_PVCUnregister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 993 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xd6, 0xee, 0x26, 0x8e, 0x7d, 0x42, 0xd3, 0x30, 0x89, 0x52, 0xd7, 0x8d, 0x50, 0xd9, 0x8b,
	0xaa, 0x29, 0xc8, 0xa6, 0x05, 0x41, 0x28, 0x82, 0x1b, 0x17, 0x01, 0x52, 0x41, 0xd6, 0x02, 0xbe,
	0x41, 0xc8, 0xda, 0x78, 0x27, 0xee, 0x2a, 0xf6, 0xee, 0xb0, 0xb3, 0x5e, 0x94, 0x16, 0x0b, 0xc4,
	0x25, 0xb7, 0x7d, 0x01, 0x1e, 0x04, 0xf1, 0x12, 0xbc, 0x02, 0x17, 0x3c, 0x06, 0xe7, 0xcc, 0xec,
	0xd8, 0xb3, 0xee, 0xba, 0xa4, 0x57, 0xdc, 0x58, 0x73, 0xce, 0x8c, 0xbf, 0xef, 0x3b, 0x7f, 0xb3,
	0x03, 0x4d, 0x51, 0x74, 0x45, 0x96, 0xe6, 0x29, 0xf3, 0x42, 0x11, 0x77, 0x8e, 0x27, 0x69, 0x3a,
	0x99, 0xf2, 0x1e, 0xae, 0x7b, 0x61, 0x92, 0xa4, 0x79, 0x98, 0xc7, 0x69, 0x22, 0xf5, 0x91, 0xce,
	0x11, 0xb9, 0xa3, 0xfc, 0x52, 0x70, 0xd9, 0x53, 0xbf, 0xda, 0xef, 0x7f, 0x0e, 0x07, 0x83, 0xe1,
	0xb7, 0x49, 0xc6, 0x27, 0xb1, 0xcc, 0x79, 0x16, 0xf0, 0x1f, 0xe6, 0x5c, 0xe6, 0xac, 0x0d, 0x3b,
	0xe3, 0xe9, 0x9c, 0x3c, 0x6d, 0xe7, 0xb6, 0x73, 0xb7, 0x15, 0x18, 0x93, 0xdd, 0x80, 0x1d, 0x51,
	0x8c, 0x92, 0x70, 0xc6, 0xdb, 0xae, 0xda, 0x69, 0x88, 0xe2, 0x2b, 0xb4, 0xfc, 0x18, 0x0e, 0x07,
	0xc3, 0xfe, 0xab, 0x40, 0x1d, 0x43, 0x8b, 0x70, 0xa4, 0x08, 0xc7, 0x06, 0x6c, 0xe5, 0x60, 0x37,
	0x29, 0xc0, 0xb1, 0x66, 0xf2, 0xf4, 0x1f, 0xd1, 0x56, 0x54, 0x3f, 0x01, 0x43, 0xaa, 0x60, 0x8d,
	0x88, 0xc1, 0x96, 0x3a, 0xac, 0x59, 0xd4, 0xda, 0x26, 0x77, 0xab, 0xe4, 0x1d, 0x84, 0xcf, 0xd2,
	0x22, 0x8e, 0x70, 0x4b, 0xc3, 0x2f, 0xed, 0xaa, 0xb0, 0xad, 0x35, 0x61, 0xfe, 0xf7, 0xf0, 0xfa,
	0x60, 0xb8, 0x4e, 0x6e, 0xc3, 0x39, 0x6b, 0x70, 0x9b, 0x45, 0x18, 0xc9, 0xde, 0x4a, 0xb2, 0x3f,
	0x81, 0xeb, 0x83, 0xe1, 0x23, 0x3e, 0xe5, 0x39, 0x37, 0xe0, 0x6f, 0x00, 0x20, 0x50, 0x92, 0xc7,
	0xe7, 0xf1, 0x12, 0xde, 0xf2, 0x54, 0xc8, 0xdd, 0xcd, 0xe4, 0x5e, 0x85, 0xdc, 0xff, 0xdd, 0x21,
	0xa6, 0x7e, 0xc6, 0xc3, 0x15, 0x53, 0x5d, 0x0e, 0xd1, 0xf7, 0x34, 0x4d, 0x4c, 0x85, 0xd4, 0x9a,
	0xdd, 0x82, 0x56, 0x14, 0xcb, 0x8b, 0x11, 0xb5, 0x92, 0x49, 0x1f, 0x39, 0xbe, 0x41, 0x9b, 0xfe,
	0x20, 0xe3, 0xa7, 0x3a, 0x73, 0x5e, 0xa0, 0xd6, 0xb6, 0x8c, 0xed, 0xcd, 0x85, 0x68, 0x54, 0xc5,
	0xfb, 0xa7, 0xb0, 0xd7, 0x4f, 0x67, 0xb3, 0x34, 0x09, 0x30, 0xf7, 0xd8, 0xcc, 0x9c, 0xdd, 0x81,
	0x86, 0xc4, 0xce, 0x9e, 0x4b, 0x25, 0x71, 0xf7, 0xc1, 0x5e, 0x57, 0x37, 0x75, 0xf7, 0x6b, 0xe5,
	0x0d, 0xca, 0x5d, 0xff, 0x04, 0xae, 0x0d, 0x86, 0x8f, 0xb1, 0x44, 0xff, 0xd9, 0x86, 0xfe, 0x3f,
	0x0e, 0xec, 0x99, 0xb3, 0x25, 0x0b, 0x86, 0x77, 0x31, 0x3f, 0xe3, 0x23, 0x2b, 0x17, 0x4d, 0x72,
	0x50, 0xf7, 0xb1, 0x37, 0x61, 0x2b, 0x0a, 0xf3, 0x10, 0xf3, 0xe1, 0xa1, 0x80, 0x6b, 0x5d, 0x9c,
	0xac, 0xee, 0x23, 0x74, 0x28, 0x04, 0xb5, 0x65, 0xa9, 0xf4, 0x5e, 0xa6, 0x92, 0x7d, 0x08, 0xfb,
	0x13, 0xad, 0xe2, 0x5c, 0x8e, 0x8a, 0x74, 0x3a, 0x9f, 0x51, 0xd6, 0x3c, 0xf5, 0x0f, 0x82, 0xfd,
	0xec, 0x5c, 0x0e, 0x95, 0x37, 0xb8, 0xbe, 0x3c, 0xa7, 0x1d, 0x38, 0x87, 0xae, 0x28, 0x30, 0x97,
	0x74, 0x78, 0x47, 0x1d, 0xc6, 0xa6, 0x44, 0x17, 0xe6, 0xd3, 0xc3, 0x39, 0xc1, 0x54, 0xd2, 0x4e,
	0xb3, 0xdc, 0xe9, 0x07, 0xe4, 0xf4, 0x7f, 0x73, 0xa1, 0x69, 0xa4, 0x6e, 0xaa, 0xb5, 0x2a, 0x9d,
	0x6b, 0x95, 0xce, 0xd4, 0xdf, 0xb3, 0xea, 0x8f, 0x3e, 0x55, 0x7a, 0x3d, 0x1c, 0x6a, 0xcd, 0x8e,
	0x96, 0x41, 0xeb, 0x0a, 0x9b, 0x20, 0xf1, 0x6c, 0x9c, 0x0a, 0xa9, 0x8a, 0x8b, 0x98, 0xb4, 0xa6,
	0x09, 0x93, 0x49, 0x28, 0xe4, 0x93, 0x34, 0x97, 0xed, 0x1d, 0x3d, 0x61, 0x4b, 0x07, 0xee, 0x42,
	0xf8, 0xa3, 0x4a, 0xc8, 0x28, 0x8e, 0xda, 0x4d, 0x9d, 0x7f, 0xf4, 0x60, 0xe8, 0x5f, 0x44, 0xb4,
	0x3b, 0x19, 0x73, 0xb3, 0xdb, 0x52, 0xa8, 0x4d, 0xf4, 0xe8, 0xdd, 0x43, 0xd8, 0x9e, 0x4b, 0x9e,
	0xc9, 0x36, 0x60, 0x02, 0x5a, 0x81, 0x36, 0x48, 0xc3, 0x45, 0x9c, 0x44, 0xed, 0x5d, 0xad, 0x97,
	0xd6, 0xfe, 0x02, 0x5a, 0xcb, 0xfc, 0xd2, 0x01, 0x11, 0xe6, 0x4f, 0x4c, 0x32, 0x68, 0x4d, 0x9d,
	0xc9, 0x93, 0x48, 0xa4, 0x71, 0x92, 0x9b, 0xb1, 0x32, 0x36, 0xb5, 0x53, 0xc6, 0xc5, 0x34, 0x1e,
	0x87, 0x2a, 0x2f, 0x5e, 0x60, 0x4c, 0x4a, 0xc3, 0x2c, 0x54, 0x7d, 0xa6, 0x93, 0x53, 0x5a, 0x6c,
	0x0f, 0xdc, 0x58, 0xa8, 0x82, 0xb5, 0x02, 0x5c, 0xf9, 0x7f, 0x38, 0xe0, 0x0e, 0x86, 0x9b, 0xaa,
	0x80, 0x0a, 0x27, 0x66, 0xe2, 0x68, 0xcd, 0xee, 0xc2, 0xf6, 0x34, 0x3c, 0xe3, 0x53, 0xa4, 0xa3,
	0xc2, 0xb2, 0xb2, 0xb0, 0xdd, 0xc7, 0xe4, 0xfc, 0x34, 0xc9, 0xb3, 0xcb, 0x40, 0x1f, 0xa8, 0x1d,
	0xbf, 0x0d, 0xb5, 0xe9, 0x9c, 0x02, 0xac, 0x00, 0xd8, 0x3e, 0x78, 0x17, 0xfc, 0xb2, 0x94, 0x42,
	0x4b, 0xca, 0x66, 0x11, 0x4e, 0xe7, 0x66, 0xf8, 0xb5, 0xf1, 0xd0, 0x3d, 0x75, 0xfc, 0x3f, 0x1d,
	0xf0, 0xb0, 0xaf, 0x5e, 0xa2, 0x3f, 0xb2, 0xf4, 0x47, 0xec, 0xa4, 0xaa, 0xff, 0xc0, 0x34, 0xe6,
	0xff, 0x15, 0xc0, 0x83, 0xe7, 0x0d, 0xd8, 0x1f, 0x60, 0x6f, 0xd0, 0x35, 0x9e, 0xe4, 0x65, 0x1b,
	0x7c, 0x09, 0x5b, 0x7a, 0x36, 0x4a, 0x79, 0xd6, 0x0d, 0xd2, 0x39, 0xa8, 0xf8, 0xf4, 0x4d, 0xe1,
	0x1f, 0xff, 0xfa, 0xd7, 0xdf, 0xcf, 0xdd, 0x23, 0x76, 0xa8, 0xbe, 0xbb, 0xa2, 0xe8, 0x15, 0xef,
	0xf4, 0x9e, 0x95, 0x37, 0xcb, 0x82, 0x7d, 0x07, 0x0d, 0x7d, 0xbf, 0xb2, 0x43, 0x13, 0xaf, 0x7d,
	0xdd, 0x96, 0x90, 0xd5, 0x2b, 0xce, 0xbf, 0xa3, 0x20, 0x6f, 0x77, 0x6e, 0xd5, 0x41, 0xf6, 0x9e,
	0x51, 0x86, 0x17, 0x0f, 0x9d, 0x7b, 0x2c, 0x86, 0x86, 0xfe, 0x4c, 0x2c, 0xc1, 0x2b, 0x5f, 0x8d,
	0x7a, 0xf0, 0xf7, 0x14, 0x78, 0xf7, 0xde, 0xdb, 0xf5, 0xe0, 0xab, 0x8f, 0x0a, 0x1a, 0xe6, 0x1a,
	0x5e, 0xb0, 0x0c, 0x60, 0xf5, 0xc9, 0x63, 0x47, 0xe6, 0xba, 0xa9, 0x7e, 0x03, 0xeb, 0x09, 0x3f,
	0x50, 0x84, 0xf7, 0x59, 0xcf, 0x22, 0x34, 0x4f, 0x84, 0x17, 0xc2, 0xb2, 0x39, 0x05, 0xbc, 0x66,
	0xbf, 0x4c, 0x58, 0xbb, 0x64, 0x7d, 0xe1, 0x85, 0x51, 0xcf, 0x7b, 0x5f, 0xf1, 0xbe, 0xc5, 0x4e,
	0x2c, 0xde, 0x79, 0x52, 0xc7, 0x5c, 0x3e, 0x67, 0x16, 0xec, 0x17, 0x07, 0x76, 0xad, 0x77, 0x05,
	0xbb, 0xb1, 0xbc, 0x3c, 0xaf, 0x42, 0xd8, 0x57, 0x84, 0x1f, 0xb3, 0x8f, 0x5e, 0x31, 0x50, 0xed,
	0x51, 0x4f, 0x8b, 0x05, 0xfb, 0x99, 0x3e, 0x5b, 0xd6, 0x23, 0x8a, 0xdd, 0x34, 0x1a, 0xae, 0x18,
	0xf6, 0x27, 0x4a, 0xc5, 0x29, 0x7b, 0xff, 0x0a, 0x61, 0xeb, 0xc7, 0x55, 0x45, 0xc0, 0x59, 0x43,
	0x3d, 0x0b, 0xdf, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x09, 0x64, 0x52, 0xc8, 0x5d, 0x0a, 0x00,
	0x00,
}
