// Code generated by protoc-gen-go.
// source: pv.proto
// DO NOT EDIT!

package pv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PVRegisterRequest struct {
	Cluster    string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Identifier string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	Provider   string `protobuf:"bytes,4,opt,name=provider" json:"provider,omitempty"`
	Size       int64  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Path       string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
}

func (m *PVRegisterRequest) Reset()                    { *m = PVRegisterRequest{} }
func (m *PVRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVRegisterRequest) ProtoMessage()               {}
func (*PVRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type PVUnregisterRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *PVUnregisterRequest) Reset()                    { *m = PVUnregisterRequest{} }
func (m *PVUnregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVUnregisterRequest) ProtoMessage()               {}
func (*PVUnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type PVListRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *PVListRequest) Reset()                    { *m = PVListRequest{} }
func (m *PVListRequest) String() string            { return proto.CompactTextString(m) }
func (*PVListRequest) ProtoMessage()               {}
func (*PVListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type PVListResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*PVList      `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *PVListResponse) Reset()                    { *m = PVListResponse{} }
func (m *PVListResponse) String() string            { return proto.CompactTextString(m) }
func (*PVListResponse) ProtoMessage()               {}
func (*PVListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *PVListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PVListResponse) GetList() []*PVList {
	if m != nil {
		return m.List
	}
	return nil
}

type PVList struct {
	Name   string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size   int64    `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Status string   `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Volume string   `protobuf:"bytes,4,opt,name=volume" json:"volume,omitempty"`
	Claim  string   `protobuf:"bytes,5,opt,name=claim" json:"claim,omitempty"`
	Users  []string `protobuf:"bytes,6,rep,name=users" json:"users,omitempty"`
}

func (m *PVList) Reset()                    { *m = PVList{} }
func (m *PVList) String() string            { return proto.CompactTextString(m) }
func (*PVList) ProtoMessage()               {}
func (*PVList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func init() {
	proto.RegisterType((*PVRegisterRequest)(nil), "pv.PVRegisterRequest")
	proto.RegisterType((*PVUnregisterRequest)(nil), "pv.PVUnregisterRequest")
	proto.RegisterType((*PVListRequest)(nil), "pv.PVListRequest")
	proto.RegisterType((*PVListResponse)(nil), "pv.PVListResponse")
	proto.RegisterType((*PVList)(nil), "pv.PVList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for PersistentVolume service

type PersistentVolumeClient interface {
	PVList(ctx context.Context, in *PVListRequest, opts ...grpc.CallOption) (*PVListResponse, error)
	PVRegister(ctx context.Context, in *PVRegisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	PVUnregister(ctx context.Context, in *PVUnregisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type persistentVolumeClient struct {
	cc *grpc.ClientConn
}

func NewPersistentVolumeClient(cc *grpc.ClientConn) PersistentVolumeClient {
	return &persistentVolumeClient{cc}
}

func (c *persistentVolumeClient) PVList(ctx context.Context, in *PVListRequest, opts ...grpc.CallOption) (*PVListResponse, error) {
	out := new(PVListResponse)
	err := grpc.Invoke(ctx, "/pv.PersistentVolume/PVList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClient) PVRegister(ctx context.Context, in *PVRegisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/pv.PersistentVolume/PVRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClient) PVUnregister(ctx context.Context, in *PVUnregisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/pv.PersistentVolume/PVUnregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PersistentVolume service

type PersistentVolumeServer interface {
	PVList(context.Context, *PVListRequest) (*PVListResponse, error)
	PVRegister(context.Context, *PVRegisterRequest) (*dtypes.VoidResponse, error)
	PVUnregister(context.Context, *PVUnregisterRequest) (*dtypes.VoidResponse, error)
}

func RegisterPersistentVolumeServer(s *grpc.Server, srv PersistentVolumeServer) {
	s.RegisterService(&_PersistentVolume_serviceDesc, srv)
}

func _PersistentVolume_PVList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumeServer).PVList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PersistentVolume_PVRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumeServer).PVRegister(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PersistentVolume_PVUnregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumeServer).PVUnregister(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PersistentVolume_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pv.PersistentVolume",
	HandlerType: (*PersistentVolumeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PVList",
			Handler:    _PersistentVolume_PVList_Handler,
		},
		{
			MethodName: "PVRegister",
			Handler:    _PersistentVolume_PVRegister_Handler,
		},
		{
			MethodName: "PVUnregister",
			Handler:    _PersistentVolume_PVUnregister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor2 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x95, 0xa4, 0x1b, 0xd8, 0x01, 0x56, 0xac, 0x29, 0x25, 0x0a, 0x0b, 0xaa, 0x82, 0x54,
	0x41, 0x0f, 0x09, 0x2a, 0x37, 0xae, 0x5c, 0x41, 0x8a, 0x82, 0x88, 0xb8, 0xa6, 0xad, 0x29, 0x96,
	0xd2, 0xd8, 0xc4, 0x4e, 0x24, 0xa8, 0x7a, 0xe1, 0xcc, 0x8d, 0x67, 0x40, 0xe2, 0x7d, 0x78, 0x05,
	0x1e, 0x84, 0xb1, 0x9d, 0x84, 0x88, 0xbf, 0x87, 0xbd, 0x54, 0x9e, 0xcf, 0x9e, 0xef, 0x1b, 0xfd,
	0x3a, 0x81, 0xab, 0xa2, 0x8d, 0x45, 0xcd, 0x15, 0x27, 0xae, 0x68, 0xc3, 0x8b, 0x1d, 0xe7, 0xbb,
	0x92, 0x26, 0x85, 0x60, 0x49, 0x51, 0x55, 0x5c, 0x15, 0x8a, 0xf1, 0x4a, 0xda, 0x17, 0xe1, 0x4c,
	0xcb, 0x5b, 0xf5, 0x5e, 0x50, 0x99, 0x98, 0x5f, 0xab, 0x47, 0x5f, 0x1c, 0x38, 0x4f, 0xf3, 0x8c,
	0xee, 0x98, 0x54, 0xb4, 0xce, 0xe8, 0xbb, 0x86, 0x4a, 0x45, 0x02, 0xb8, 0xb2, 0x29, 0x1b, 0xad,
	0x04, 0xce, 0xdc, 0x79, 0x78, 0x9a, 0xf5, 0x25, 0x21, 0x30, 0xa9, 0x8a, 0x3d, 0x0d, 0x5c, 0x23,
	0x9b, 0x33, 0xb9, 0x0f, 0xc0, 0xb6, 0xb4, 0x52, 0xec, 0x0d, 0xc3, 0x06, 0xcf, 0xdc, 0x8c, 0x14,
	0x12, 0xe2, 0xa4, 0x35, 0x6f, 0x51, 0xa9, 0x83, 0x89, 0xb9, 0x1d, 0x6a, 0xed, 0x27, 0xd9, 0x07,
	0x1a, 0x9c, 0xa0, 0xee, 0x65, 0xe6, 0xac, 0x35, 0x51, 0xa8, 0xb7, 0x81, 0x6f, 0x33, 0xf4, 0x39,
	0x7a, 0x06, 0xb7, 0xd2, 0xfc, 0x55, 0x55, 0x5f, 0x66, 0xd0, 0xe8, 0x11, 0xdc, 0x48, 0xf3, 0xe7,
	0x68, 0xf0, 0xdf, 0xf6, 0xe8, 0x35, 0x9c, 0xf5, 0x4f, 0xa5, 0x40, 0x8c, 0x94, 0x2c, 0xc0, 0x97,
	0xc8, 0xb4, 0x91, 0xe6, 0xe9, 0xb5, 0xd5, 0x59, 0x6c, 0x71, 0xc6, 0x2f, 0x8d, 0x9a, 0x75, 0xb7,
	0x48, 0x63, 0x52, 0x62, 0x1f, 0x06, 0x7b, 0xf8, 0x0a, 0x62, 0xfc, 0x93, 0x3a, 0x27, 0xa3, 0x47,
	0x9f, 0x1c, 0xf0, 0xad, 0x30, 0xcc, 0xe8, 0x8c, 0x60, 0xf6, 0x40, 0xdc, 0x11, 0x90, 0xd9, 0x10,
	0x6d, 0xe1, 0xf6, 0x51, 0xa8, 0xb7, 0xbc, 0x6c, 0xd0, 0xc1, 0x62, 0xed, 0x2a, 0x32, 0x85, 0x93,
	0x4d, 0x59, 0xb0, 0xbd, 0xa1, 0x7a, 0x9a, 0xd9, 0x42, 0xab, 0x8d, 0xa4, 0xb5, 0x44, 0xae, 0x9e,
	0x56, 0x4d, 0xb1, 0xfa, 0xea, 0xc2, 0xcd, 0x14, 0x0f, 0x1a, 0x6b, 0xa5, 0x72, 0x6b, 0xf0, 0x62,
	0x18, 0xf1, 0x7c, 0x34, 0xbf, 0x85, 0x16, 0x92, 0xb1, 0x64, 0xe1, 0x44, 0x17, 0x1f, 0xbf, 0x7d,
	0xff, 0xec, 0xce, 0xc8, 0xd4, 0xac, 0x9f, 0x68, 0x93, 0xf6, 0x71, 0x72, 0xe8, 0x58, 0x1e, 0x49,
	0x01, 0xf0, 0x73, 0xc7, 0xc8, 0x6d, 0xdb, 0xff, 0xcb, 0xce, 0x85, 0xd3, 0x9e, 0x67, 0xce, 0xd9,
	0x76, 0x30, 0x5e, 0x18, 0xe3, 0x79, 0x78, 0xf7, 0x4f, 0xc6, 0xc9, 0x41, 0x23, 0x3b, 0x3e, 0x75,
	0x96, 0x64, 0x0d, 0xd7, 0xc7, 0xfb, 0x41, 0xee, 0xd8, 0x90, 0xdf, 0x36, 0xe6, 0x2f, 0x31, 0x0f,
	0x4c, 0xcc, 0xbd, 0xe5, 0xbf, 0x62, 0xd6, 0xbe, 0xf9, 0x64, 0x9e, 0xfc, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xfa, 0x3e, 0x49, 0x66, 0x78, 0x03, 0x00, 0x00,
}
