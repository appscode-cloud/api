// Code generated by protoc-gen-go.
// source: pv.proto
// DO NOT EDIT!

package pv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PVRegisterRequest struct {
	Cluster    string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Identifier string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	Plugin     string `protobuf:"bytes,4,opt,name=plugin" json:"plugin,omitempty"`
	Size       int64  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Endpoint   string `protobuf:"bytes,6,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *PVRegisterRequest) Reset()                    { *m = PVRegisterRequest{} }
func (m *PVRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVRegisterRequest) ProtoMessage()               {}
func (*PVRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type PVUnregisterRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *PVUnregisterRequest) Reset()                    { *m = PVUnregisterRequest{} }
func (m *PVUnregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVUnregisterRequest) ProtoMessage()               {}
func (*PVUnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type PVDescribeRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *PVDescribeRequest) Reset()                    { *m = PVDescribeRequest{} }
func (m *PVDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*PVDescribeRequest) ProtoMessage()               {}
func (*PVDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type PVInfo struct {
	Name        string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size        int64    `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Status      string   `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Volume      string   `protobuf:"bytes,4,opt,name=volume" json:"volume,omitempty"`
	Claim       string   `protobuf:"bytes,5,opt,name=claim" json:"claim,omitempty"`
	Plugin      string   `protobuf:"bytes,6,opt,name=plugin" json:"plugin,omitempty"`
	AccessModes []string `protobuf:"bytes,7,rep,name=accessModes" json:"accessModes,omitempty"`
}

func (m *PVInfo) Reset()                    { *m = PVInfo{} }
func (m *PVInfo) String() string            { return proto.CompactTextString(m) }
func (*PVInfo) ProtoMessage()               {}
func (*PVInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type PVDescribeResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Pv     *PVInfo        `protobuf:"bytes,2,opt,name=pv" json:"pv,omitempty"`
}

func (m *PVDescribeResponse) Reset()                    { *m = PVDescribeResponse{} }
func (m *PVDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*PVDescribeResponse) ProtoMessage()               {}
func (*PVDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *PVDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PVDescribeResponse) GetPv() *PVInfo {
	if m != nil {
		return m.Pv
	}
	return nil
}

func init() {
	proto.RegisterType((*PVRegisterRequest)(nil), "pv.PVRegisterRequest")
	proto.RegisterType((*PVUnregisterRequest)(nil), "pv.PVUnregisterRequest")
	proto.RegisterType((*PVDescribeRequest)(nil), "pv.PVDescribeRequest")
	proto.RegisterType((*PVInfo)(nil), "pv.PVInfo")
	proto.RegisterType((*PVDescribeResponse)(nil), "pv.PVDescribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for PersistentVolumes service

type PersistentVolumesClient interface {
	Describe(ctx context.Context, in *PVDescribeRequest, opts ...grpc.CallOption) (*PVDescribeResponse, error)
	Register(ctx context.Context, in *PVRegisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Unregister(ctx context.Context, in *PVUnregisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type persistentVolumesClient struct {
	cc *grpc.ClientConn
}

func NewPersistentVolumesClient(cc *grpc.ClientConn) PersistentVolumesClient {
	return &persistentVolumesClient{cc}
}

func (c *persistentVolumesClient) Describe(ctx context.Context, in *PVDescribeRequest, opts ...grpc.CallOption) (*PVDescribeResponse, error) {
	out := new(PVDescribeResponse)
	err := grpc.Invoke(ctx, "/pv.PersistentVolumes/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumesClient) Register(ctx context.Context, in *PVRegisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/pv.PersistentVolumes/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumesClient) Unregister(ctx context.Context, in *PVUnregisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/pv.PersistentVolumes/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PersistentVolumes service

type PersistentVolumesServer interface {
	Describe(context.Context, *PVDescribeRequest) (*PVDescribeResponse, error)
	Register(context.Context, *PVRegisterRequest) (*dtypes.VoidResponse, error)
	Unregister(context.Context, *PVUnregisterRequest) (*dtypes.VoidResponse, error)
}

func RegisterPersistentVolumesServer(s *grpc.Server, srv PersistentVolumesServer) {
	s.RegisterService(&_PersistentVolumes_serviceDesc, srv)
}

func _PersistentVolumes_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PVDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumesServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pv.PersistentVolumes/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumesServer).Describe(ctx, req.(*PVDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentVolumes_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PVRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumesServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pv.PersistentVolumes/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumesServer).Register(ctx, req.(*PVRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentVolumes_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PVUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumesServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pv.PersistentVolumes/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumesServer).Unregister(ctx, req.(*PVUnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PersistentVolumes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pv.PersistentVolumes",
	HandlerType: (*PersistentVolumesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _PersistentVolumes_Describe_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _PersistentVolumes_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _PersistentVolumes_Unregister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func init() { proto.RegisterFile("pv.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x95, 0x74, 0x37, 0x1b, 0xa6, 0xb0, 0x80, 0x17, 0x4a, 0x14, 0x21, 0xb4, 0xca, 0x01,
	0xad, 0x16, 0x29, 0x61, 0x03, 0x27, 0xce, 0x5c, 0x90, 0x40, 0xaa, 0x16, 0x91, 0x7b, 0x9a, 0x4c,
	0x23, 0x43, 0x6a, 0x9b, 0xd8, 0x89, 0x80, 0xaa, 0x17, 0x5e, 0x81, 0x47, 0xe3, 0xc0, 0x0b, 0xf0,
	0x20, 0x38, 0x76, 0xd3, 0x96, 0x22, 0xa4, 0xee, 0x25, 0x92, 0xff, 0x8c, 0xf5, 0x7f, 0xff, 0xcc,
	0x18, 0x7c, 0xd1, 0xc5, 0xa2, 0xe1, 0x8a, 0x13, 0x57, 0x74, 0xe1, 0xe3, 0x8a, 0xf3, 0xaa, 0xc6,
	0x24, 0x17, 0x34, 0xc9, 0x19, 0xe3, 0x2a, 0x57, 0x94, 0x33, 0x69, 0x2b, 0xc2, 0x49, 0x2f, 0x97,
	0xea, 0xab, 0x40, 0x99, 0x98, 0xaf, 0xd5, 0xa3, 0x0e, 0xee, 0x4f, 0xb3, 0x6b, 0xac, 0xa8, 0x54,
	0xd8, 0x5c, 0xe3, 0xe7, 0x16, 0xa5, 0x22, 0x77, 0xe1, 0xa4, 0xa8, 0xdb, 0x5e, 0x09, 0x9c, 0x73,
	0xe7, 0xe2, 0x16, 0xb9, 0x0d, 0x47, 0x2c, 0x5f, 0x60, 0xe0, 0x9a, 0x13, 0x01, 0xa0, 0x25, 0x32,
	0x45, 0xe7, 0x54, 0x57, 0x8c, 0x8c, 0x76, 0x0a, 0x9e, 0xa8, 0xdb, 0x8a, 0xb2, 0xe0, 0x68, 0xb8,
	0x21, 0xe9, 0x37, 0x0c, 0x8e, 0xf5, 0x69, 0x44, 0xee, 0x81, 0x8f, 0xac, 0x14, 0x9c, 0x32, 0x15,
	0x78, 0xfd, 0xff, 0xe8, 0x25, 0x9c, 0x4d, 0xb3, 0x0f, 0xac, 0xb9, 0x91, 0x73, 0x94, 0xf6, 0xb4,
	0xaf, 0x51, 0x16, 0x0d, 0x9d, 0xe1, 0x81, 0x77, 0xbe, 0x80, 0x37, 0xcd, 0xde, 0xb0, 0x39, 0xdf,
	0xe8, 0xce, 0x5f, 0x84, 0xae, 0x21, 0xd4, 0xfc, 0x52, 0x77, 0xac, 0x95, 0xdb, 0x3c, 0x1d, 0xaf,
	0x5b, 0x5d, 0x6d, 0xf3, 0xdc, 0x81, 0xe3, 0xa2, 0xce, 0xe9, 0xc2, 0x04, 0xda, 0x8d, 0x6b, 0xe2,
	0x90, 0x33, 0x18, 0xe7, 0x45, 0x81, 0x52, 0xbe, 0xe3, 0x25, 0xca, 0xe0, 0xe4, 0x7c, 0xa4, 0x9d,
	0xdf, 0x02, 0xd9, 0xa5, 0x95, 0x42, 0x8f, 0x03, 0xc9, 0x93, 0x8d, 0x53, 0xcf, 0x31, 0x4e, 0x4f,
	0x63, 0x3b, 0x96, 0xf8, 0xbd, 0x51, 0xc9, 0x04, 0xf4, 0x34, 0x0d, 0xd5, 0x38, 0x85, 0x58, 0x8f,
	0xd8, 0xd2, 0xa7, 0xbf, 0x5c, 0x1d, 0x1e, 0x1b, 0xd9, 0xf7, 0x8b, 0xa9, 0xcc, 0xc0, 0x49, 0x42,
	0xc1, 0x1f, 0x1c, 0xc8, 0x43, 0x5b, 0xbd, 0xd7, 0x9f, 0x70, 0xb2, 0x2f, 0x5b, 0x90, 0x28, 0xfe,
	0xfe, 0xf3, 0xf7, 0x0f, 0xf7, 0x82, 0x3c, 0xd5, 0x2b, 0x23, 0x64, 0xa1, 0xc1, 0xcd, 0xee, 0x88,
	0x2e, 0xe9, 0x9e, 0xc7, 0x57, 0xc9, 0x72, 0xdd, 0xd4, 0x55, 0xb2, 0xec, 0xbb, 0xb6, 0x22, 0x1f,
	0xc1, 0x1f, 0x16, 0x65, 0xb0, 0xda, 0x5b, 0x9c, 0xf0, 0xc1, 0x90, 0x25, 0xe3, 0xb4, 0xdc, 0x18,
	0x5d, 0x19, 0xa3, 0x67, 0xe1, 0x81, 0x46, 0xaf, 0x9c, 0x4b, 0xf2, 0x09, 0x60, 0xbb, 0x1c, 0xe4,
	0x91, 0x75, 0xfb, 0x67, 0x5d, 0xfe, 0xe3, 0xb7, 0x0e, 0x76, 0x79, 0xa0, 0xdf, 0xcc, 0x33, 0x4f,
	0xe1, 0xc5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xed, 0x29, 0x4e, 0x50, 0x03, 0x00, 0x00,
}
