// Code generated by protoc-gen-go.
// source: pv.proto
// DO NOT EDIT!

package pv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PVRegisterRequest struct {
	Cluster    string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Identifier string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	Provider   string `protobuf:"bytes,4,opt,name=provider" json:"provider,omitempty"`
	Size       int64  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Path       string `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
}

func (m *PVRegisterRequest) Reset()                    { *m = PVRegisterRequest{} }
func (m *PVRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVRegisterRequest) ProtoMessage()               {}
func (*PVRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type PVUnregisterRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *PVUnregisterRequest) Reset()                    { *m = PVUnregisterRequest{} }
func (m *PVUnregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*PVUnregisterRequest) ProtoMessage()               {}
func (*PVUnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type PVListRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *PVListRequest) Reset()                    { *m = PVListRequest{} }
func (m *PVListRequest) String() string            { return proto.CompactTextString(m) }
func (*PVListRequest) ProtoMessage()               {}
func (*PVListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type PVInfo struct {
	Name   string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size   int64    `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Status string   `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Volume string   `protobuf:"bytes,4,opt,name=volume" json:"volume,omitempty"`
	Claim  string   `protobuf:"bytes,5,opt,name=claim" json:"claim,omitempty"`
	Users  []string `protobuf:"bytes,6,rep,name=users" json:"users,omitempty"`
}

func (m *PVInfo) Reset()                    { *m = PVInfo{} }
func (m *PVInfo) String() string            { return proto.CompactTextString(m) }
func (*PVInfo) ProtoMessage()               {}
func (*PVInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type PVListResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Pv     []*PVInfo      `protobuf:"bytes,2,rep,name=pv" json:"pv,omitempty"`
}

func (m *PVListResponse) Reset()                    { *m = PVListResponse{} }
func (m *PVListResponse) String() string            { return proto.CompactTextString(m) }
func (*PVListResponse) ProtoMessage()               {}
func (*PVListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *PVListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PVListResponse) GetPv() []*PVInfo {
	if m != nil {
		return m.Pv
	}
	return nil
}

func init() {
	proto.RegisterType((*PVRegisterRequest)(nil), "pv.PVRegisterRequest")
	proto.RegisterType((*PVUnregisterRequest)(nil), "pv.PVUnregisterRequest")
	proto.RegisterType((*PVListRequest)(nil), "pv.PVListRequest")
	proto.RegisterType((*PVInfo)(nil), "pv.PVInfo")
	proto.RegisterType((*PVListResponse)(nil), "pv.PVListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for PersistentVolumes service

type PersistentVolumesClient interface {
	List(ctx context.Context, in *PVListRequest, opts ...grpc.CallOption) (*PVListResponse, error)
	Register(ctx context.Context, in *PVRegisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Unregister(ctx context.Context, in *PVUnregisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type persistentVolumesClient struct {
	cc *grpc.ClientConn
}

func NewPersistentVolumesClient(cc *grpc.ClientConn) PersistentVolumesClient {
	return &persistentVolumesClient{cc}
}

func (c *persistentVolumesClient) List(ctx context.Context, in *PVListRequest, opts ...grpc.CallOption) (*PVListResponse, error) {
	out := new(PVListResponse)
	err := grpc.Invoke(ctx, "/pv.PersistentVolumes/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumesClient) Register(ctx context.Context, in *PVRegisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/pv.PersistentVolumes/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumesClient) Unregister(ctx context.Context, in *PVUnregisterRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/pv.PersistentVolumes/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PersistentVolumes service

type PersistentVolumesServer interface {
	List(context.Context, *PVListRequest) (*PVListResponse, error)
	Register(context.Context, *PVRegisterRequest) (*dtypes.VoidResponse, error)
	Unregister(context.Context, *PVUnregisterRequest) (*dtypes.VoidResponse, error)
}

func RegisterPersistentVolumesServer(s *grpc.Server, srv PersistentVolumesServer) {
	s.RegisterService(&_PersistentVolumes_serviceDesc, srv)
}

func _PersistentVolumes_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumesServer).List(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PersistentVolumes_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumesServer).Register(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PersistentVolumes_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PVUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PersistentVolumesServer).Unregister(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PersistentVolumes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pv.PersistentVolumes",
	HandlerType: (*PersistentVolumesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PersistentVolumes_List_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _PersistentVolumes_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _PersistentVolumes_Unregister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor2 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0x55, 0xb2, 0xdb, 0xd0, 0x0e, 0xa2, 0x52, 0x87, 0xb2, 0x44, 0x11, 0x14, 0x14, 0x09, 0x54,
	0x7a, 0x48, 0xa0, 0xdc, 0xb8, 0x72, 0x42, 0x02, 0x29, 0x0a, 0x90, 0x7b, 0xda, 0x75, 0x17, 0x4b,
	0xa9, 0x6d, 0x62, 0x27, 0x12, 0x54, 0xbd, 0x70, 0xe6, 0xc6, 0x6f, 0xe0, 0xc0, 0xef, 0xe1, 0x2f,
	0xf0, 0x43, 0x18, 0xdb, 0x49, 0x88, 0xf8, 0x3c, 0x70, 0x59, 0x79, 0x5e, 0xec, 0xf7, 0xde, 0xcc,
	0xbc, 0x85, 0x6d, 0xd5, 0x67, 0xaa, 0x95, 0x46, 0x62, 0xa8, 0xfa, 0xe4, 0xd6, 0x46, 0xca, 0x4d,
	0xc3, 0xf2, 0x5a, 0xf1, 0xbc, 0x16, 0x42, 0x9a, 0xda, 0x70, 0x29, 0xb4, 0xbf, 0x91, 0xac, 0x2c,
	0xbc, 0x36, 0xef, 0x14, 0xd3, 0xb9, 0xfb, 0xf5, 0x78, 0xfa, 0x39, 0x80, 0xbd, 0xa2, 0x2a, 0xd9,
	0x86, 0x6b, 0xc3, 0xda, 0x92, 0xbd, 0xed, 0x98, 0x36, 0x18, 0xc3, 0x95, 0xd3, 0xa6, 0xb3, 0x48,
	0x1c, 0xdc, 0x0d, 0x0e, 0x77, 0xca, 0xb1, 0x44, 0x84, 0xa5, 0xa8, 0xcf, 0x59, 0x1c, 0x3a, 0xd8,
	0x9d, 0xf1, 0x00, 0x80, 0xaf, 0x99, 0x30, 0xfc, 0x8c, 0xd3, 0x83, 0x85, 0xfb, 0x32, 0x43, 0x30,
	0x21, 0xa7, 0xad, 0xec, 0x09, 0x69, 0xe3, 0xa5, 0xfb, 0x3a, 0xd5, 0x96, 0x4f, 0xf3, 0xf7, 0x2c,
	0xde, 0x22, 0x7c, 0x51, 0xba, 0xb3, 0xc5, 0x54, 0x6d, 0xde, 0xc4, 0x91, 0xd7, 0xb0, 0xe7, 0xf4,
	0x29, 0x5c, 0x2f, 0xaa, 0xd7, 0xa2, 0xfd, 0x1f, 0xa3, 0xe9, 0x03, 0xb8, 0x56, 0x54, 0xcf, 0x89,
	0xe0, 0x9f, 0xcf, 0xd3, 0x8f, 0x01, 0x44, 0x45, 0xf5, 0x4c, 0x9c, 0xc9, 0x89, 0x29, 0x98, 0xb5,
	0x3c, 0xda, 0x0e, 0x67, 0xb6, 0x57, 0x10, 0x69, 0x1a, 0x7a, 0xa7, 0x87, 0x11, 0x0c, 0x95, 0xc5,
	0x7b, 0xd9, 0x74, 0xc4, 0xe0, 0x9b, 0x1f, 0x2a, 0xdc, 0x87, 0xad, 0xd3, 0xa6, 0xe6, 0xe7, 0xae,
	0xf7, 0x9d, 0xd2, 0x17, 0x16, 0xed, 0x34, 0x6b, 0x35, 0x75, 0xbf, 0xb0, 0xa8, 0x2b, 0xd2, 0x57,
	0xb0, 0x3b, 0x3a, 0xd7, 0x8a, 0xb6, 0xca, 0xf0, 0xfe, 0xa4, 0x66, 0x7d, 0x5d, 0x3d, 0xde, 0xcd,
	0xfc, 0x76, 0xb3, 0x97, 0x0e, 0x9d, 0xd4, 0x13, 0xa0, 0x70, 0x90, 0xcf, 0x05, 0xdd, 0x81, 0x8c,
	0x12, 0xe3, 0xbb, 0x2a, 0x09, 0x3d, 0xfe, 0x12, 0xd2, 0xf2, 0x89, 0xde, 0x8e, 0x54, 0x98, 0xca,
	0xd9, 0xd2, 0xf8, 0x02, 0x96, 0x56, 0x09, 0xf7, 0xfc, 0xed, 0xd9, 0xbc, 0x12, 0x9c, 0x43, 0xde,
	0x48, 0x7a, 0xf0, 0xe1, 0xeb, 0xb7, 0x4f, 0x61, 0x8c, 0x2b, 0x97, 0x3c, 0xd5, 0xe7, 0xfd, 0xc3,
	0xec, 0x51, 0x7e, 0x31, 0x0c, 0xf2, 0x12, 0x6b, 0xd8, 0x1e, 0xe3, 0x85, 0x37, 0xfc, 0xfb, 0x9f,
	0xe2, 0x96, 0xec, 0x8f, 0xde, 0x2b, 0xc9, 0xd7, 0x13, 0xf1, 0xa1, 0x23, 0x4e, 0x93, 0xdb, 0xbf,
	0x27, 0xce, 0x2f, 0xec, 0x26, 0x2e, 0x9f, 0x04, 0x47, 0x78, 0x02, 0xf0, 0x23, 0x1a, 0x78, 0xd3,
	0x8b, 0xfc, 0x12, 0x96, 0x3f, 0xc8, 0xdc, 0x73, 0x32, 0x77, 0x8e, 0xfe, 0x2e, 0x73, 0x12, 0xb9,
	0xff, 0xcb, 0xe3, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x88, 0xe8, 0x2a, 0x75, 0x03, 0x00,
	0x00,
}
