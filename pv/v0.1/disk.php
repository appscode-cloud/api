<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: disk.proto
//   Date: 2016-04-20 05:49:30

namespace pv {

  class DiskCreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $disk_type = null;
    
    /**  @var int */
    public $size = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.DiskCreateRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING disk_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "disk_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \pv\DiskCreateRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \pv\DiskCreateRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \pv\DiskCreateRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \pv\DiskCreateRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(3);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \pv\DiskCreateRequest
     */
    public function clearZone(){
      return $this->_clear(3);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(3);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \pv\DiskCreateRequest
     */
    public function setZone( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <disk_type> has a value
     *
     * @return boolean
     */
    public function hasDiskType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <disk_type> value
     *
     * @return \pv\DiskCreateRequest
     */
    public function clearDiskType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <disk_type> value
     *
     * @return string
     */
    public function getDiskType(){
      return $this->_get(4);
    }
    
    /**
     * Set <disk_type> value
     *
     * @param string $value
     * @return \pv\DiskCreateRequest
     */
    public function setDiskType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(5);
    }
    
    /**
     * Clear <size> value
     *
     * @return \pv\DiskCreateRequest
     */
    public function clearSize(){
      return $this->_clear(5);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(5);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \pv\DiskCreateRequest
     */
    public function setSize( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace pv {

  class DiskDeleteRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $identifier = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.DiskDeleteRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING identifier = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "identifier";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \pv\DiskDeleteRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \pv\DiskDeleteRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <identifier> has a value
     *
     * @return boolean
     */
    public function hasIdentifier(){
      return $this->_has(2);
    }
    
    /**
     * Clear <identifier> value
     *
     * @return \pv\DiskDeleteRequest
     */
    public function clearIdentifier(){
      return $this->_clear(2);
    }
    
    /**
     * Get <identifier> value
     *
     * @return string
     */
    public function getIdentifier(){
      return $this->_get(2);
    }
    
    /**
     * Set <identifier> value
     *
     * @param string $value
     * @return \pv\DiskDeleteRequest
     */
    public function setIdentifier( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace pv {

  class DiskListRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.DiskListRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \pv\DiskListRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \pv\DiskListRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace pv {

  class DiskListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $kube = null;
    
    /**  @var \pv\Result[]  */
    public $result = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.DiskListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING kube = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "kube";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE result = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\pv\Result';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \pv\DiskListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \pv\DiskListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <kube> has a value
     *
     * @return boolean
     */
    public function hasKube(){
      return $this->_has(2);
    }
    
    /**
     * Clear <kube> value
     *
     * @return \pv\DiskListResponse
     */
    public function clearKube(){
      return $this->_clear(2);
    }
    
    /**
     * Get <kube> value
     *
     * @return string
     */
    public function getKube(){
      return $this->_get(2);
    }
    
    /**
     * Set <kube> value
     *
     * @param string $value
     * @return \pv\DiskListResponse
     */
    public function setKube( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(3);
    }
    
    /**
     * Clear <result> value
     *
     * @return \pv\DiskListResponse
     */
    public function clearResult(){
      return $this->_clear(3);
    }
    
    /**
     * Get <result> value
     *
     * @param int $idx
     * @return \pv\Result
     */
    public function getResult($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <result> value
     *
     * @param \pv\Result $value
     * @return \pv\DiskListResponse
     */
    public function setResult(\pv\Result $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <result>
     *
     * @return \pv\Result[]
     */
    public function getResultList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <result>
     *
     * @param \pv\Result $value
     * @return \pv\DiskListResponse
     */
    public function addResult(\pv\Result $value){
     return $this->_add(3, $value);
    }
  }
}

namespace pv {

  class Result extends \DrSlump\Protobuf\Message {

    /**  @var \pv\Disk */
    public $disk = null;
    
    /**  @var \pv\PV */
    public $pv = null;
    
    /**  @var \pv\PVC */
    public $pvc = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.Result');

      // OPTIONAL MESSAGE disk = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "disk";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\pv\Disk';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pv = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "pv";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\pv\PV';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pvc = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pvc";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\pv\PVC';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <disk> has a value
     *
     * @return boolean
     */
    public function hasDisk(){
      return $this->_has(1);
    }
    
    /**
     * Clear <disk> value
     *
     * @return \pv\Result
     */
    public function clearDisk(){
      return $this->_clear(1);
    }
    
    /**
     * Get <disk> value
     *
     * @return \pv\Disk
     */
    public function getDisk(){
      return $this->_get(1);
    }
    
    /**
     * Set <disk> value
     *
     * @param \pv\Disk $value
     * @return \pv\Result
     */
    public function setDisk(\pv\Disk $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pv> has a value
     *
     * @return boolean
     */
    public function hasPv(){
      return $this->_has(2);
    }
    
    /**
     * Clear <pv> value
     *
     * @return \pv\Result
     */
    public function clearPv(){
      return $this->_clear(2);
    }
    
    /**
     * Get <pv> value
     *
     * @return \pv\PV
     */
    public function getPv(){
      return $this->_get(2);
    }
    
    /**
     * Set <pv> value
     *
     * @param \pv\PV $value
     * @return \pv\Result
     */
    public function setPv(\pv\PV $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <pvc> has a value
     *
     * @return boolean
     */
    public function hasPvc(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pvc> value
     *
     * @return \pv\Result
     */
    public function clearPvc(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pvc> value
     *
     * @return \pv\PVC
     */
    public function getPvc(){
      return $this->_get(3);
    }
    
    /**
     * Set <pvc> value
     *
     * @param \pv\PVC $value
     * @return \pv\Result
     */
    public function setPvc(\pv\PVC $value){
      return $this->_set(3, $value);
    }
  }
}

namespace pv {

  class Disk extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $plugin = null;
    
    /**  @var int */
    public $size = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $status = null;
    
    /**  @var string[]  */
    public $users = array();
    
    /**  @var string */
    public $kind = null;
    
    /**  @var string */
    public $endpoint = null;
    
    /**  @var int */
    public $iops = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.Disk');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING plugin = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "plugin";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING status = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING users = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "users";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING kind = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING endpoint = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "endpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 iops = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "iops";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \pv\Disk
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \pv\Disk
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \pv\Disk
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \pv\Disk
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <plugin> has a value
     *
     * @return boolean
     */
    public function hasPlugin(){
      return $this->_has(3);
    }
    
    /**
     * Clear <plugin> value
     *
     * @return \pv\Disk
     */
    public function clearPlugin(){
      return $this->_clear(3);
    }
    
    /**
     * Get <plugin> value
     *
     * @return string
     */
    public function getPlugin(){
      return $this->_get(3);
    }
    
    /**
     * Set <plugin> value
     *
     * @param string $value
     * @return \pv\Disk
     */
    public function setPlugin( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(4);
    }
    
    /**
     * Clear <size> value
     *
     * @return \pv\Disk
     */
    public function clearSize(){
      return $this->_clear(4);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(4);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \pv\Disk
     */
    public function setSize( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \pv\Disk
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \pv\Disk
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(6);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \pv\Disk
     */
    public function clearZone(){
      return $this->_clear(6);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(6);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \pv\Disk
     */
    public function setZone( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(7);
    }
    
    /**
     * Clear <status> value
     *
     * @return \pv\Disk
     */
    public function clearStatus(){
      return $this->_clear(7);
    }
    
    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus(){
      return $this->_get(7);
    }
    
    /**
     * Set <status> value
     *
     * @param string $value
     * @return \pv\Disk
     */
    public function setStatus( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <users> has a value
     *
     * @return boolean
     */
    public function hasUsers(){
      return $this->_has(8);
    }
    
    /**
     * Clear <users> value
     *
     * @return \pv\Disk
     */
    public function clearUsers(){
      return $this->_clear(8);
    }
    
    /**
     * Get <users> value
     *
     * @param int $idx
     * @return string
     */
    public function getUsers($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <users> value
     *
     * @param string $value
     * @return \pv\Disk
     */
    public function setUsers( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <users>
     *
     * @return string[]
     */
    public function getUsersList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <users>
     *
     * @param string $value
     * @return \pv\Disk
     */
    public function addUsers( $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(9);
    }
    
    /**
     * Clear <kind> value
     *
     * @return \pv\Disk
     */
    public function clearKind(){
      return $this->_clear(9);
    }
    
    /**
     * Get <kind> value
     *
     * @return string
     */
    public function getKind(){
      return $this->_get(9);
    }
    
    /**
     * Set <kind> value
     *
     * @param string $value
     * @return \pv\Disk
     */
    public function setKind( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <endpoint> has a value
     *
     * @return boolean
     */
    public function hasEndpoint(){
      return $this->_has(10);
    }
    
    /**
     * Clear <endpoint> value
     *
     * @return \pv\Disk
     */
    public function clearEndpoint(){
      return $this->_clear(10);
    }
    
    /**
     * Get <endpoint> value
     *
     * @return string
     */
    public function getEndpoint(){
      return $this->_get(10);
    }
    
    /**
     * Set <endpoint> value
     *
     * @param string $value
     * @return \pv\Disk
     */
    public function setEndpoint( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <iops> has a value
     *
     * @return boolean
     */
    public function hasIops(){
      return $this->_has(11);
    }
    
    /**
     * Clear <iops> value
     *
     * @return \pv\Disk
     */
    public function clearIops(){
      return $this->_clear(11);
    }
    
    /**
     * Get <iops> value
     *
     * @return int
     */
    public function getIops(){
      return $this->_get(11);
    }
    
    /**
     * Set <iops> value
     *
     * @param int $value
     * @return \pv\Disk
     */
    public function setIops( $value){
      return $this->_set(11, $value);
    }
  }
}

namespace pv {

  class PV extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $size = null;
    
    /**  @var string */
    public $status = null;
    
    /**  @var string */
    public $claim = null;
    
    /**  @var string */
    public $volume = null;
    
    /**  @var string */
    public $plugin = null;
    
    /**  @var string */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.PV');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING status = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING claim = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "claim";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING volume = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "volume";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING plugin = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "plugin";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \pv\PV
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \pv\PV
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <size> value
     *
     * @return \pv\PV
     */
    public function clearSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \pv\PV
     */
    public function setSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(3);
    }
    
    /**
     * Clear <status> value
     *
     * @return \pv\PV
     */
    public function clearStatus(){
      return $this->_clear(3);
    }
    
    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus(){
      return $this->_get(3);
    }
    
    /**
     * Set <status> value
     *
     * @param string $value
     * @return \pv\PV
     */
    public function setStatus( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <claim> has a value
     *
     * @return boolean
     */
    public function hasClaim(){
      return $this->_has(4);
    }
    
    /**
     * Clear <claim> value
     *
     * @return \pv\PV
     */
    public function clearClaim(){
      return $this->_clear(4);
    }
    
    /**
     * Get <claim> value
     *
     * @return string
     */
    public function getClaim(){
      return $this->_get(4);
    }
    
    /**
     * Set <claim> value
     *
     * @param string $value
     * @return \pv\PV
     */
    public function setClaim( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <volume> has a value
     *
     * @return boolean
     */
    public function hasVolume(){
      return $this->_has(5);
    }
    
    /**
     * Clear <volume> value
     *
     * @return \pv\PV
     */
    public function clearVolume(){
      return $this->_clear(5);
    }
    
    /**
     * Get <volume> value
     *
     * @return string
     */
    public function getVolume(){
      return $this->_get(5);
    }
    
    /**
     * Set <volume> value
     *
     * @param string $value
     * @return \pv\PV
     */
    public function setVolume( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <plugin> has a value
     *
     * @return boolean
     */
    public function hasPlugin(){
      return $this->_has(6);
    }
    
    /**
     * Clear <plugin> value
     *
     * @return \pv\PV
     */
    public function clearPlugin(){
      return $this->_clear(6);
    }
    
    /**
     * Get <plugin> value
     *
     * @return string
     */
    public function getPlugin(){
      return $this->_get(6);
    }
    
    /**
     * Set <plugin> value
     *
     * @param string $value
     * @return \pv\PV
     */
    public function setPlugin( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(7);
    }
    
    /**
     * Clear <type> value
     *
     * @return \pv\PV
     */
    public function clearType(){
      return $this->_clear(7);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(7);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \pv\PV
     */
    public function setType( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace pv {

  class PVC extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $size = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $status = null;
    
    /**  @var string */
    public $volume = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.PVC');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING status = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING volume = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "volume";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \pv\PVC
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \pv\PVC
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <size> value
     *
     * @return \pv\PVC
     */
    public function clearSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \pv\PVC
     */
    public function setSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(3);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \pv\PVC
     */
    public function clearNamespace(){
      return $this->_clear(3);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(3);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \pv\PVC
     */
    public function setNamespace( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(4);
    }
    
    /**
     * Clear <status> value
     *
     * @return \pv\PVC
     */
    public function clearStatus(){
      return $this->_clear(4);
    }
    
    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus(){
      return $this->_get(4);
    }
    
    /**
     * Set <status> value
     *
     * @param string $value
     * @return \pv\PVC
     */
    public function setStatus( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <volume> has a value
     *
     * @return boolean
     */
    public function hasVolume(){
      return $this->_has(5);
    }
    
    /**
     * Clear <volume> value
     *
     * @return \pv\PVC
     */
    public function clearVolume(){
      return $this->_clear(5);
    }
    
    /**
     * Get <volume> value
     *
     * @return string
     */
    public function getVolume(){
      return $this->_get(5);
    }
    
    /**
     * Set <volume> value
     *
     * @param string $value
     * @return \pv\PVC
     */
    public function setVolume( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace pv {

  class DiskDescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $plugin = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.DiskDescribeRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING plugin = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "plugin";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \pv\DiskDescribeRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \pv\DiskDescribeRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \pv\DiskDescribeRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \pv\DiskDescribeRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <plugin> has a value
     *
     * @return boolean
     */
    public function hasPlugin(){
      return $this->_has(3);
    }
    
    /**
     * Clear <plugin> value
     *
     * @return \pv\DiskDescribeRequest
     */
    public function clearPlugin(){
      return $this->_clear(3);
    }
    
    /**
     * Get <plugin> value
     *
     * @return string
     */
    public function getPlugin(){
      return $this->_get(3);
    }
    
    /**
     * Set <plugin> value
     *
     * @param string $value
     * @return \pv\DiskDescribeRequest
     */
    public function setPlugin( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace pv {

  class DiskDescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \pv\Disk */
    public $disk = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'pv.DiskDescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE disk = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "disk";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\pv\Disk';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \pv\DiskDescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \pv\DiskDescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <disk> has a value
     *
     * @return boolean
     */
    public function hasDisk(){
      return $this->_has(2);
    }
    
    /**
     * Clear <disk> value
     *
     * @return \pv\DiskDescribeResponse
     */
    public function clearDisk(){
      return $this->_clear(2);
    }
    
    /**
     * Get <disk> value
     *
     * @return \pv\Disk
     */
    public function getDisk(){
      return $this->_get(2);
    }
    
    /**
     * Set <disk> value
     *
     * @param \pv\Disk $value
     * @return \pv\DiskDescribeResponse
     */
    public function setDisk(\pv\Disk $value){
      return $this->_set(2, $value);
    }
  }
}

namespace pv {

  class DisksClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param pv\DiskListRequest $input
     */
    public function List(\pv\DiskListRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/pv.Disks/List', $argument, '\pv\DiskListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param pv\DiskDescribeRequest $input
     */
    public function Describe(\pv\DiskDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/pv.Disks/Describe', $argument, '\pv\DiskDescribeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param pv\DiskCreateRequest $input
     */
    public function Create(\pv\DiskCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/pv.Disks/Create', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param pv\DiskDeleteRequest $input
     */
    public function Delete(\pv\DiskDeleteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/pv.Disks/Delete', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
  }
}
