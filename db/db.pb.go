// Code generated by protoc-gen-go.
// source: db.proto
// DO NOT EDIT!

/*
Package db is a generated protocol buffer package.

It is generated from these files:
	db.proto

It has these top-level messages:
	DbCreateRequest
	DbDeleteRequest
	DbPgAddSlaveRequest
	DbBackupRequest
	DbRestoreRequest
	DbShowRequest
	DbCommonResponse
	DbShowResponse
	DbPodSpecs
	DbVoidRequest
	DbListResponse
	DbListInfo
*/
package db

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type DbCreateRequest struct {
	DbType      string `protobuf:"bytes,1,opt,name=db_type" json:"db_type,omitempty"`
	Sku         string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
	Config      string `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
	ClusterName string `protobuf:"bytes,4,opt,name=cluster_name" json:"cluster_name,omitempty"`
	Pv          string `protobuf:"bytes,5,opt,name=pv" json:"pv,omitempty"`
	PvSize      int64  `protobuf:"varint,6,opt,name=pv_size" json:"pv_size,omitempty"`
	Node        int32  `protobuf:"varint,7,opt,name=node" json:"node,omitempty"`
	DbName      string `protobuf:"bytes,8,opt,name=db_name" json:"db_name,omitempty"`
	BucketName  string `protobuf:"bytes,9,opt,name=bucket_name" json:"bucket_name,omitempty"`
	Credential  string `protobuf:"bytes,10,opt,name=credential" json:"credential,omitempty"`
	Region      string `protobuf:"bytes,11,opt,name=region" json:"region,omitempty"`
}

func (m *DbCreateRequest) Reset()                    { *m = DbCreateRequest{} }
func (m *DbCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*DbCreateRequest) ProtoMessage()               {}
func (*DbCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DbDeleteRequest struct {
	DbType      string `protobuf:"bytes,1,opt,name=db_type" json:"db_type,omitempty"`
	DbName      string `protobuf:"bytes,2,opt,name=db_name" json:"db_name,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name" json:"cluster_name,omitempty"`
}

func (m *DbDeleteRequest) Reset()                    { *m = DbDeleteRequest{} }
func (m *DbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DbDeleteRequest) ProtoMessage()               {}
func (*DbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DbPgAddSlaveRequest struct {
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name" json:"cluster_name,omitempty"`
	DbName      string `protobuf:"bytes,2,opt,name=db_name" json:"db_name,omitempty"`
	Config      string `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *DbPgAddSlaveRequest) Reset()                    { *m = DbPgAddSlaveRequest{} }
func (m *DbPgAddSlaveRequest) String() string            { return proto.CompactTextString(m) }
func (*DbPgAddSlaveRequest) ProtoMessage()               {}
func (*DbPgAddSlaveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DbBackupRequest struct {
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name" json:"cluster_name,omitempty"`
	DbName      string `protobuf:"bytes,2,opt,name=db_name" json:"db_name,omitempty"`
	DbType      string `protobuf:"bytes,3,opt,name=db_type" json:"db_type,omitempty"`
	BucketName  string `protobuf:"bytes,4,opt,name=bucket_name" json:"bucket_name,omitempty"`
	SecretName  string `protobuf:"bytes,5,opt,name=secret_name" json:"secret_name,omitempty"`
	Credential  string `protobuf:"bytes,6,opt,name=credential" json:"credential,omitempty"`
	Region      string `protobuf:"bytes,7,opt,name=region" json:"region,omitempty"`
}

func (m *DbBackupRequest) Reset()                    { *m = DbBackupRequest{} }
func (m *DbBackupRequest) String() string            { return proto.CompactTextString(m) }
func (*DbBackupRequest) ProtoMessage()               {}
func (*DbBackupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DbRestoreRequest struct {
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name" json:"cluster_name,omitempty"`
	DbName      string `protobuf:"bytes,2,opt,name=db_name" json:"db_name,omitempty"`
	DbType      string `protobuf:"bytes,3,opt,name=db_type" json:"db_type,omitempty"`
	Pv          string `protobuf:"bytes,4,opt,name=pv" json:"pv,omitempty"`
	PvSize      int64  `protobuf:"varint,5,opt,name=pv_size" json:"pv_size,omitempty"`
	Config      string `protobuf:"bytes,6,opt,name=config" json:"config,omitempty"`
	Node        int32  `protobuf:"varint,7,opt,name=node" json:"node,omitempty"`
	SnapTime    string `protobuf:"bytes,8,opt,name=snap_time" json:"snap_time,omitempty"`
	BucketName  string `protobuf:"bytes,9,opt,name=bucket_name" json:"bucket_name,omitempty"`
	Credential  string `protobuf:"bytes,10,opt,name=credential" json:"credential,omitempty"`
	Region      string `protobuf:"bytes,11,opt,name=region" json:"region,omitempty"`
	SecretName  string `protobuf:"bytes,12,opt,name=secret_name" json:"secret_name,omitempty"`
}

func (m *DbRestoreRequest) Reset()                    { *m = DbRestoreRequest{} }
func (m *DbRestoreRequest) String() string            { return proto.CompactTextString(m) }
func (*DbRestoreRequest) ProtoMessage()               {}
func (*DbRestoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DbShowRequest struct {
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name" json:"cluster_name,omitempty"`
	DbType      string `protobuf:"bytes,2,opt,name=db_type" json:"db_type,omitempty"`
	DbName      string `protobuf:"bytes,3,opt,name=db_name" json:"db_name,omitempty"`
}

func (m *DbShowRequest) Reset()                    { *m = DbShowRequest{} }
func (m *DbShowRequest) String() string            { return proto.CompactTextString(m) }
func (*DbShowRequest) ProtoMessage()               {}
func (*DbShowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DbCommonResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *DbCommonResponse) Reset()                    { *m = DbCommonResponse{} }
func (m *DbCommonResponse) String() string            { return proto.CompactTextString(m) }
func (*DbCommonResponse) ProtoMessage()               {}
func (*DbCommonResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DbCommonResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type DbShowResponse struct {
	Status      *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Pods        []*DbPodSpecs  `protobuf:"bytes,2,rep,name=pods" json:"pods,omitempty"`
	ServiceName string         `protobuf:"bytes,3,opt,name=service_name" json:"service_name,omitempty"`
	ServiceIp   string         `protobuf:"bytes,4,opt,name=service_ip" json:"service_ip,omitempty"`
}

func (m *DbShowResponse) Reset()                    { *m = DbShowResponse{} }
func (m *DbShowResponse) String() string            { return proto.CompactTextString(m) }
func (*DbShowResponse) ProtoMessage()               {}
func (*DbShowResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DbShowResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DbShowResponse) GetPods() []*DbPodSpecs {
	if m != nil {
		return m.Pods
	}
	return nil
}

type DbPodSpecs struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Phase     string `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	Condition string `protobuf:"bytes,3,opt,name=condition" json:"condition,omitempty"`
	Status    string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Type      string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
}

func (m *DbPodSpecs) Reset()                    { *m = DbPodSpecs{} }
func (m *DbPodSpecs) String() string            { return proto.CompactTextString(m) }
func (*DbPodSpecs) ProtoMessage()               {}
func (*DbPodSpecs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type DbVoidRequest struct {
}

func (m *DbVoidRequest) Reset()                    { *m = DbVoidRequest{} }
func (m *DbVoidRequest) String() string            { return proto.CompactTextString(m) }
func (*DbVoidRequest) ProtoMessage()               {}
func (*DbVoidRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DbListResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	List   []*DbListInfo  `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *DbListResponse) Reset()                    { *m = DbListResponse{} }
func (m *DbListResponse) String() string            { return proto.CompactTextString(m) }
func (*DbListResponse) ProtoMessage()               {}
func (*DbListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DbListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DbListResponse) GetList() []*DbListInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type DbListInfo struct {
	Phid                 string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	KubernetesPhid       string `protobuf:"bytes,2,opt,name=kubernetes_phid" json:"kubernetes_phid,omitempty"`
	KubernetesService    string `protobuf:"bytes,3,opt,name=kubernetes_service" json:"kubernetes_service,omitempty"`
	Type                 string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Sku                  string `protobuf:"bytes,5,opt,name=sku" json:"sku,omitempty"`
	ArchiveBucket        string `protobuf:"bytes,6,opt,name=archive_bucket" json:"archive_bucket,omitempty"`
	ArchiveBucketRegion  string `protobuf:"bytes,7,opt,name=archive_bucket_region" json:"archive_bucket_region,omitempty"`
	AutoSnapshot         int32  `protobuf:"varint,8,opt,name=auto_snapshot" json:"auto_snapshot,omitempty"`
	PersistentVolumeSize int64  `protobuf:"varint,9,opt,name=persistent_volume_size" json:"persistent_volume_size,omitempty"`
	Created              string `protobuf:"bytes,10,opt,name=created" json:"created,omitempty"`
}

func (m *DbListInfo) Reset()                    { *m = DbListInfo{} }
func (m *DbListInfo) String() string            { return proto.CompactTextString(m) }
func (*DbListInfo) ProtoMessage()               {}
func (*DbListInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto.RegisterType((*DbCreateRequest)(nil), "db.DbCreateRequest")
	proto.RegisterType((*DbDeleteRequest)(nil), "db.DbDeleteRequest")
	proto.RegisterType((*DbPgAddSlaveRequest)(nil), "db.DbPgAddSlaveRequest")
	proto.RegisterType((*DbBackupRequest)(nil), "db.DbBackupRequest")
	proto.RegisterType((*DbRestoreRequest)(nil), "db.DbRestoreRequest")
	proto.RegisterType((*DbShowRequest)(nil), "db.DbShowRequest")
	proto.RegisterType((*DbCommonResponse)(nil), "db.DbCommonResponse")
	proto.RegisterType((*DbShowResponse)(nil), "db.DbShowResponse")
	proto.RegisterType((*DbPodSpecs)(nil), "db.DbPodSpecs")
	proto.RegisterType((*DbVoidRequest)(nil), "db.DbVoidRequest")
	proto.RegisterType((*DbListResponse)(nil), "db.DbListResponse")
	proto.RegisterType((*DbListInfo)(nil), "db.DbListInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Db service

type DbClient interface {
	DbCreate(ctx context.Context, in *DbCreateRequest, opts ...grpc.CallOption) (*DbCommonResponse, error)
	DbDelete(ctx context.Context, in *DbDeleteRequest, opts ...grpc.CallOption) (*DbCommonResponse, error)
	DbBackup(ctx context.Context, in *DbBackupRequest, opts ...grpc.CallOption) (*DbCommonResponse, error)
	DbRestore(ctx context.Context, in *DbRestoreRequest, opts ...grpc.CallOption) (*DbCommonResponse, error)
	DbShow(ctx context.Context, in *DbShowRequest, opts ...grpc.CallOption) (*DbShowResponse, error)
	DbPgAddSlave(ctx context.Context, in *DbPgAddSlaveRequest, opts ...grpc.CallOption) (*DbCommonResponse, error)
	DbList(ctx context.Context, in *DbVoidRequest, opts ...grpc.CallOption) (*DbListResponse, error)
}

type dbClient struct {
	cc *grpc.ClientConn
}

func NewDbClient(cc *grpc.ClientConn) DbClient {
	return &dbClient{cc}
}

func (c *dbClient) DbCreate(ctx context.Context, in *DbCreateRequest, opts ...grpc.CallOption) (*DbCommonResponse, error) {
	out := new(DbCommonResponse)
	err := grpc.Invoke(ctx, "/db.Db/DbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) DbDelete(ctx context.Context, in *DbDeleteRequest, opts ...grpc.CallOption) (*DbCommonResponse, error) {
	out := new(DbCommonResponse)
	err := grpc.Invoke(ctx, "/db.Db/DbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) DbBackup(ctx context.Context, in *DbBackupRequest, opts ...grpc.CallOption) (*DbCommonResponse, error) {
	out := new(DbCommonResponse)
	err := grpc.Invoke(ctx, "/db.Db/DbBackup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) DbRestore(ctx context.Context, in *DbRestoreRequest, opts ...grpc.CallOption) (*DbCommonResponse, error) {
	out := new(DbCommonResponse)
	err := grpc.Invoke(ctx, "/db.Db/DbRestore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) DbShow(ctx context.Context, in *DbShowRequest, opts ...grpc.CallOption) (*DbShowResponse, error) {
	out := new(DbShowResponse)
	err := grpc.Invoke(ctx, "/db.Db/DbShow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) DbPgAddSlave(ctx context.Context, in *DbPgAddSlaveRequest, opts ...grpc.CallOption) (*DbCommonResponse, error) {
	out := new(DbCommonResponse)
	err := grpc.Invoke(ctx, "/db.Db/DbPgAddSlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) DbList(ctx context.Context, in *DbVoidRequest, opts ...grpc.CallOption) (*DbListResponse, error) {
	out := new(DbListResponse)
	err := grpc.Invoke(ctx, "/db.Db/DbList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Db service

type DbServer interface {
	DbCreate(context.Context, *DbCreateRequest) (*DbCommonResponse, error)
	DbDelete(context.Context, *DbDeleteRequest) (*DbCommonResponse, error)
	DbBackup(context.Context, *DbBackupRequest) (*DbCommonResponse, error)
	DbRestore(context.Context, *DbRestoreRequest) (*DbCommonResponse, error)
	DbShow(context.Context, *DbShowRequest) (*DbShowResponse, error)
	DbPgAddSlave(context.Context, *DbPgAddSlaveRequest) (*DbCommonResponse, error)
	DbList(context.Context, *DbVoidRequest) (*DbListResponse, error)
}

func RegisterDbServer(s *grpc.Server, srv DbServer) {
	s.RegisterService(&_Db_serviceDesc, srv)
}

func _Db_DbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DbCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).DbCreate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_DbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DbDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).DbDelete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_DbBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DbBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).DbBackup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_DbRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DbRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).DbRestore(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_DbShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DbShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).DbShow(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_DbPgAddSlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DbPgAddSlaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).DbPgAddSlave(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_DbList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DbVoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).DbList(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Db_serviceDesc = grpc.ServiceDesc{
	ServiceName: "db.Db",
	HandlerType: (*DbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DbCreate",
			Handler:    _Db_DbCreate_Handler,
		},
		{
			MethodName: "DbDelete",
			Handler:    _Db_DbDelete_Handler,
		},
		{
			MethodName: "DbBackup",
			Handler:    _Db_DbBackup_Handler,
		},
		{
			MethodName: "DbRestore",
			Handler:    _Db_DbRestore_Handler,
		},
		{
			MethodName: "DbShow",
			Handler:    _Db_DbShow_Handler,
		},
		{
			MethodName: "DbPgAddSlave",
			Handler:    _Db_DbPgAddSlave_Handler,
		},
		{
			MethodName: "DbList",
			Handler:    _Db_DbList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0xcb, 0x6a, 0xe3, 0x48,
	0x14, 0xc5, 0xcf, 0xc4, 0xd7, 0x8e, 0x3d, 0xa9, 0xbc, 0x84, 0xc8, 0x0c, 0x83, 0x66, 0x31, 0x21,
	0x43, 0xac, 0x90, 0x61, 0x66, 0x31, 0xbb, 0x99, 0x18, 0x86, 0x40, 0x68, 0x9a, 0x18, 0x7a, 0xd1,
	0x1b, 0xa1, 0x47, 0xc5, 0x16, 0x96, 0x55, 0xd5, 0x2a, 0xc9, 0xfd, 0x08, 0xd9, 0xf4, 0x2f, 0xf4,
	0xa2, 0xff, 0xa9, 0xb7, 0xf9, 0x85, 0xa6, 0xa1, 0xff, 0xa2, 0xab, 0x6e, 0x49, 0x89, 0x64, 0xe2,
	0x90, 0x90, 0x4d, 0x70, 0x5d, 0x95, 0xce, 0xb9, 0xe7, 0xdc, 0x87, 0x02, 0xeb, 0x81, 0x37, 0xe4,
	0x09, 0x4b, 0x19, 0xa9, 0x07, 0x9e, 0xb9, 0x3f, 0x61, 0x6c, 0x12, 0x51, 0xdb, 0xe5, 0xa1, 0xed,
	0xc6, 0x31, 0x4b, 0xdd, 0x34, 0x64, 0xb1, 0xd0, 0x37, 0xcc, 0x5d, 0x15, 0x0e, 0xd2, 0xf7, 0x9c,
	0x0a, 0x1b, 0xff, 0xea, 0xb8, 0xf5, 0xa5, 0x06, 0x83, 0x91, 0x77, 0x9a, 0x50, 0x37, 0xa5, 0x17,
	0xf4, 0x4d, 0x46, 0x45, 0x4a, 0x06, 0xb0, 0x16, 0x78, 0x8e, 0xba, 0x65, 0xd4, 0x7e, 0xad, 0x1d,
	0x74, 0x48, 0x17, 0x1a, 0x62, 0x96, 0x19, 0x75, 0x3c, 0xf4, 0xa1, 0xed, 0xb3, 0xf8, 0x32, 0x9c,
	0x18, 0x0d, 0x3c, 0x6f, 0x43, 0xcf, 0x8f, 0x32, 0x91, 0xd2, 0xc4, 0x89, 0xdd, 0x39, 0x35, 0x9a,
	0x18, 0x05, 0xa8, 0xf3, 0x85, 0xd1, 0xc2, 0xdf, 0x12, 0x8f, 0x2f, 0x1c, 0x11, 0x7e, 0xa0, 0x46,
	0x5b, 0x06, 0x1a, 0xa4, 0x07, 0xcd, 0x98, 0x05, 0xd4, 0x58, 0x93, 0xa7, 0x56, 0x4e, 0x87, 0xef,
	0xae, 0xe3, 0xfd, 0x2d, 0xe8, 0x7a, 0x99, 0x3f, 0xa3, 0xa9, 0x0e, 0x76, 0x30, 0x28, 0x11, 0xfd,
	0x84, 0x06, 0x34, 0x4e, 0x43, 0x37, 0x32, 0xa0, 0x48, 0x25, 0xa1, 0x13, 0xa9, 0xd2, 0xe8, 0xaa,
	0xb3, 0x75, 0xa6, 0xb4, 0x8c, 0x68, 0x44, 0x1f, 0xd0, 0x52, 0x62, 0xab, 0xdf, 0x9b, 0x3f, 0xaa,
	0xb2, 0xce, 0x61, 0x6b, 0xe4, 0xbd, 0x9c, 0xfc, 0x1b, 0x04, 0xe3, 0xc8, 0x5d, 0xdc, 0xc2, 0x2d,
	0x5f, 0x5e, 0x81, 0xb9, 0xe4, 0x91, 0xf5, 0x19, 0x5d, 0xfe, 0xcf, 0xf5, 0x67, 0x19, 0x7f, 0x22,
	0x54, 0x49, 0x40, 0xe3, 0x3e, 0x77, 0x9a, 0x45, 0x50, 0x50, 0xe9, 0x4f, 0x1e, 0x6c, 0xdd, 0x63,
	0x59, 0x7b, 0xc9, 0xb2, 0x35, 0xcc, 0xec, 0x5b, 0x0d, 0x7e, 0x1a, 0x79, 0x17, 0x32, 0x21, 0x96,
	0xd0, 0xe7, 0xa6, 0xa6, 0x8b, 0xde, 0x5c, 0x2e, 0x7a, 0x0b, 0x8b, 0x7e, 0xe7, 0x89, 0xce, 0xa4,
	0xda, 0x04, 0x9b, 0xd0, 0x11, 0xb1, 0xcb, 0x9d, 0x34, 0x7c, 0x76, 0x1b, 0x2c, 0x9b, 0xd1, 0x43,
	0xa1, 0xff, 0xc3, 0xc6, 0xc8, 0x1b, 0x4f, 0xd9, 0xdb, 0xc7, 0x88, 0x44, 0x4d, 0xf5, 0x65, 0xd5,
	0xba, 0x96, 0x27, 0xca, 0xb0, 0x53, 0x36, 0x9f, 0xb3, 0x58, 0xda, 0xc6, 0xe5, 0x88, 0x51, 0xf2,
	0x0b, 0xb4, 0x85, 0x9c, 0xb7, 0x4c, 0x20, 0x4a, 0xf7, 0xa4, 0x3f, 0xd4, 0xa3, 0x36, 0x1c, 0x63,
	0xd4, 0x7a, 0x07, 0xfd, 0x82, 0xfc, 0x71, 0x6f, 0x90, 0x7d, 0x68, 0x72, 0x16, 0x08, 0x99, 0x44,
	0x43, 0x3f, 0xf5, 0x86, 0xb2, 0x1f, 0x59, 0x30, 0xe6, 0xd4, 0x17, 0x2a, 0x77, 0x41, 0x93, 0x45,
	0xe8, 0xd3, 0x52, 0x66, 0xca, 0x9b, 0x22, 0x1a, 0x72, 0x5d, 0x06, 0xeb, 0x35, 0x40, 0xe9, 0x3d,
	0xe5, 0xf9, 0x9d, 0xd6, 0x0d, 0x68, 0xf1, 0xa9, 0x2b, 0x0a, 0xa5, 0xb2, 0x04, 0xb2, 0x40, 0x41,
	0xa8, 0xd6, 0x46, 0x8e, 0xd8, 0xbf, 0xcd, 0xb2, 0x59, 0xd4, 0x0c, 0xad, 0xc1, 0xfe, 0xb2, 0x06,
	0xca, 0xd2, 0x57, 0x2c, 0x0c, 0x72, 0x4b, 0xad, 0x17, 0x4a, 0xe6, 0x79, 0x28, 0xd2, 0xa7, 0xc8,
	0x8c, 0xe4, 0xfd, 0xaa, 0x4c, 0x85, 0x70, 0x16, 0x5f, 0x32, 0xeb, 0x7b, 0x4d, 0x65, 0x5f, 0x1c,
	0x15, 0x3b, 0x9f, 0x86, 0x41, 0x9e, 0xfd, 0x1e, 0x0c, 0x66, 0x99, 0x47, 0x93, 0x58, 0x4e, 0xbb,
	0x70, 0xf0, 0x81, 0xd6, 0x61, 0x02, 0x29, 0x3d, 0xc8, 0x1d, 0xc9, 0x05, 0x15, 0x02, 0x9a, 0xe5,
	0xbd, 0xa6, 0xa7, 0x65, 0x17, 0xfa, 0x6e, 0xe2, 0x4f, 0xc3, 0x05, 0x75, 0x74, 0xdb, 0xe5, 0x7d,
	0xfa, 0x33, 0xec, 0x54, 0xe3, 0x4e, 0x79, 0x80, 0xc8, 0x0e, 0x6c, 0xb8, 0x59, 0xca, 0x1c, 0xd5,
	0xbd, 0x62, 0xca, 0x52, 0x6c, 0xde, 0x96, 0x14, 0xbe, 0xcb, 0x69, 0x22, 0x64, 0xea, 0xb2, 0x55,
	0x9d, 0x05, 0x8b, 0xb2, 0x39, 0xd5, 0xd3, 0xd0, 0xc1, 0x69, 0x90, 0x6d, 0xe5, 0xe3, 0xd2, 0x0d,
	0x74, 0x13, 0x9f, 0xdc, 0xb4, 0xa0, 0x3e, 0xf2, 0x08, 0x85, 0xf5, 0x62, 0x1d, 0x93, 0x2d, 0x6d,
	0x47, 0x65, 0x39, 0x9b, 0xdb, 0x79, 0xb0, 0xd2, 0x80, 0xd6, 0xf0, 0xe3, 0xcd, 0xd7, 0x4f, 0xf5,
	0x03, 0xf3, 0x37, 0x5c, 0xff, 0x81, 0x67, 0x2f, 0x8e, 0xed, 0xab, 0x72, 0x7b, 0x5f, 0xdb, 0x57,
	0x79, 0x5f, 0x5f, 0xff, 0x53, 0x3b, 0x24, 0x91, 0xa2, 0xd1, 0x9b, 0xb2, 0xa0, 0xa9, 0xec, 0xcd,
	0x15, 0x34, 0x7f, 0x21, 0x8d, 0x7d, 0x78, 0xf4, 0x08, 0x1a, 0xfc, 0x85, 0x31, 0xcd, 0xa6, 0xb7,
	0x5f, 0xc1, 0x56, 0xd9, 0x85, 0x0f, 0xb3, 0x59, 0x87, 0xab, 0xd9, 0x3c, 0x84, 0xa9, 0x6a, 0x63,
	0xd0, 0xb9, 0xdd, 0x68, 0x24, 0x47, 0xae, 0x2e, 0xb8, 0x15, 0x7c, 0x7f, 0x23, 0xdf, 0xb1, 0xf9,
	0xc7, 0x6a, 0xbe, 0x44, 0xe3, 0x54, 0x09, 0x2f, 0xa1, 0xad, 0xa7, 0x9b, 0x6c, 0x6a, 0xdc, 0xd2,
	0x9a, 0x31, 0x49, 0x39, 0x54, 0x15, 0x46, 0x9e, 0x6c, 0x63, 0xaf, 0xfc, 0x4d, 0x22, 0x7b, 0xf9,
	0x56, 0x58, 0xfe, 0x4a, 0xad, 0x90, 0x77, 0x84, 0xac, 0xbf, 0x9b, 0xd6, 0x6a, 0x56, 0x3e, 0xb1,
	0x85, 0x02, 0x52, 0xaa, 0x4e, 0x95, 0x2a, 0x35, 0x7b, 0x85, 0xaa, 0xd2, 0xa4, 0x17, 0xaa, 0xca,
	0xb3, 0x6e, 0x11, 0xc4, 0xef, 0x11, 0xb8, 0xc3, 0xf7, 0xda, 0xf8, 0x5f, 0xc6, 0x9f, 0x3f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x1a, 0x87, 0xcc, 0x16, 0xab, 0x08, 0x00, 0x00,
}
