<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: db.proto
//   Date: 2016-04-19 16:27:24

namespace db {

  class CreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $sku = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $pv = null;
    
    /**  @var int */
    public $pv_size = null;
    
    /**  @var int */
    public $node = null;
    
    /**  @var string */
    public $region = null;
    
    /**  @var string */
    public $bucket_name = null;
    
    /**  @var string */
    public $credential = null;
    
    /**  @var string */
    public $version = null;
    
    /**  @var string */
    public $gfs_endpoint = null;
    
    /**  @var string */
    public $gfs_disk = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.CreateRequest');

      // OPTIONAL STRING type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sku = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sku";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING pv = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "pv";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 pv_size = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "pv_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 node = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "node";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING region = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "region";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bucket_name = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "bucket_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING credential = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "credential";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING version = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING gfs_endpoint = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "gfs_endpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING gfs_disk = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "gfs_disk";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \db\CreateRequest
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \db\CreateRequest
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sku> has a value
     *
     * @return boolean
     */
    public function hasSku(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sku> value
     *
     * @return \db\CreateRequest
     */
    public function clearSku(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sku> value
     *
     * @return string
     */
    public function getSku(){
      return $this->_get(2);
    }
    
    /**
     * Set <sku> value
     *
     * @param string $value
     * @return \db\CreateRequest
     */
    public function setSku( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \db\CreateRequest
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \db\CreateRequest
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \db\CreateRequest
     */
    public function clearCluster(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(4);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \db\CreateRequest
     */
    public function setCluster( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <pv> has a value
     *
     * @return boolean
     */
    public function hasPv(){
      return $this->_has(5);
    }
    
    /**
     * Clear <pv> value
     *
     * @return \db\CreateRequest
     */
    public function clearPv(){
      return $this->_clear(5);
    }
    
    /**
     * Get <pv> value
     *
     * @return string
     */
    public function getPv(){
      return $this->_get(5);
    }
    
    /**
     * Set <pv> value
     *
     * @param string $value
     * @return \db\CreateRequest
     */
    public function setPv( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <pv_size> has a value
     *
     * @return boolean
     */
    public function hasPvSize(){
      return $this->_has(6);
    }
    
    /**
     * Clear <pv_size> value
     *
     * @return \db\CreateRequest
     */
    public function clearPvSize(){
      return $this->_clear(6);
    }
    
    /**
     * Get <pv_size> value
     *
     * @return int
     */
    public function getPvSize(){
      return $this->_get(6);
    }
    
    /**
     * Set <pv_size> value
     *
     * @param int $value
     * @return \db\CreateRequest
     */
    public function setPvSize( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <node> has a value
     *
     * @return boolean
     */
    public function hasNode(){
      return $this->_has(7);
    }
    
    /**
     * Clear <node> value
     *
     * @return \db\CreateRequest
     */
    public function clearNode(){
      return $this->_clear(7);
    }
    
    /**
     * Get <node> value
     *
     * @return int
     */
    public function getNode(){
      return $this->_get(7);
    }
    
    /**
     * Set <node> value
     *
     * @param int $value
     * @return \db\CreateRequest
     */
    public function setNode( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <region> has a value
     *
     * @return boolean
     */
    public function hasRegion(){
      return $this->_has(8);
    }
    
    /**
     * Clear <region> value
     *
     * @return \db\CreateRequest
     */
    public function clearRegion(){
      return $this->_clear(8);
    }
    
    /**
     * Get <region> value
     *
     * @return string
     */
    public function getRegion(){
      return $this->_get(8);
    }
    
    /**
     * Set <region> value
     *
     * @param string $value
     * @return \db\CreateRequest
     */
    public function setRegion( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <bucket_name> has a value
     *
     * @return boolean
     */
    public function hasBucketName(){
      return $this->_has(9);
    }
    
    /**
     * Clear <bucket_name> value
     *
     * @return \db\CreateRequest
     */
    public function clearBucketName(){
      return $this->_clear(9);
    }
    
    /**
     * Get <bucket_name> value
     *
     * @return string
     */
    public function getBucketName(){
      return $this->_get(9);
    }
    
    /**
     * Set <bucket_name> value
     *
     * @param string $value
     * @return \db\CreateRequest
     */
    public function setBucketName( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <credential> has a value
     *
     * @return boolean
     */
    public function hasCredential(){
      return $this->_has(10);
    }
    
    /**
     * Clear <credential> value
     *
     * @return \db\CreateRequest
     */
    public function clearCredential(){
      return $this->_clear(10);
    }
    
    /**
     * Get <credential> value
     *
     * @return string
     */
    public function getCredential(){
      return $this->_get(10);
    }
    
    /**
     * Set <credential> value
     *
     * @param string $value
     * @return \db\CreateRequest
     */
    public function setCredential( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(11);
    }
    
    /**
     * Clear <version> value
     *
     * @return \db\CreateRequest
     */
    public function clearVersion(){
      return $this->_clear(11);
    }
    
    /**
     * Get <version> value
     *
     * @return string
     */
    public function getVersion(){
      return $this->_get(11);
    }
    
    /**
     * Set <version> value
     *
     * @param string $value
     * @return \db\CreateRequest
     */
    public function setVersion( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <gfs_endpoint> has a value
     *
     * @return boolean
     */
    public function hasGfsEndpoint(){
      return $this->_has(12);
    }
    
    /**
     * Clear <gfs_endpoint> value
     *
     * @return \db\CreateRequest
     */
    public function clearGfsEndpoint(){
      return $this->_clear(12);
    }
    
    /**
     * Get <gfs_endpoint> value
     *
     * @return string
     */
    public function getGfsEndpoint(){
      return $this->_get(12);
    }
    
    /**
     * Set <gfs_endpoint> value
     *
     * @param string $value
     * @return \db\CreateRequest
     */
    public function setGfsEndpoint( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <gfs_disk> has a value
     *
     * @return boolean
     */
    public function hasGfsDisk(){
      return $this->_has(13);
    }
    
    /**
     * Clear <gfs_disk> value
     *
     * @return \db\CreateRequest
     */
    public function clearGfsDisk(){
      return $this->_clear(13);
    }
    
    /**
     * Get <gfs_disk> value
     *
     * @return string
     */
    public function getGfsDisk(){
      return $this->_get(13);
    }
    
    /**
     * Set <gfs_disk> value
     *
     * @param string $value
     * @return \db\CreateRequest
     */
    public function setGfsDisk( $value){
      return $this->_set(13, $value);
    }
  }
}

namespace db {

  class DeleteRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $cluster = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.DeleteRequest');

      // OPTIONAL STRING type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \db\DeleteRequest
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \db\DeleteRequest
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \db\DeleteRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \db\DeleteRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \db\DeleteRequest
     */
    public function clearCluster(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \db\DeleteRequest
     */
    public function setCluster( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace db {

  class BackupRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $bucket_name = null;
    
    /**  @var string */
    public $secret_name = null;
    
    /**  @var string */
    public $snapshot_name = null;
    
    /**  @var string */
    public $credential = null;
    
    /**  @var string */
    public $region = null;
    
    /**  @var string */
    public $auth_secret_name = null;
    
    /**  @var boolean */
    public $force = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.BackupRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bucket_name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "bucket_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING secret_name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "secret_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING snapshot_name = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "snapshot_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING credential = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "credential";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING region = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "region";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING auth_secret_name = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "auth_secret_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL force = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "force";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \db\BackupRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \db\BackupRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \db\BackupRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \db\BackupRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \db\BackupRequest
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \db\BackupRequest
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <bucket_name> has a value
     *
     * @return boolean
     */
    public function hasBucketName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <bucket_name> value
     *
     * @return \db\BackupRequest
     */
    public function clearBucketName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <bucket_name> value
     *
     * @return string
     */
    public function getBucketName(){
      return $this->_get(4);
    }
    
    /**
     * Set <bucket_name> value
     *
     * @param string $value
     * @return \db\BackupRequest
     */
    public function setBucketName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <secret_name> has a value
     *
     * @return boolean
     */
    public function hasSecretName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <secret_name> value
     *
     * @return \db\BackupRequest
     */
    public function clearSecretName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <secret_name> value
     *
     * @return string
     */
    public function getSecretName(){
      return $this->_get(5);
    }
    
    /**
     * Set <secret_name> value
     *
     * @param string $value
     * @return \db\BackupRequest
     */
    public function setSecretName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <snapshot_name> has a value
     *
     * @return boolean
     */
    public function hasSnapshotName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <snapshot_name> value
     *
     * @return \db\BackupRequest
     */
    public function clearSnapshotName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <snapshot_name> value
     *
     * @return string
     */
    public function getSnapshotName(){
      return $this->_get(6);
    }
    
    /**
     * Set <snapshot_name> value
     *
     * @param string $value
     * @return \db\BackupRequest
     */
    public function setSnapshotName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <credential> has a value
     *
     * @return boolean
     */
    public function hasCredential(){
      return $this->_has(7);
    }
    
    /**
     * Clear <credential> value
     *
     * @return \db\BackupRequest
     */
    public function clearCredential(){
      return $this->_clear(7);
    }
    
    /**
     * Get <credential> value
     *
     * @return string
     */
    public function getCredential(){
      return $this->_get(7);
    }
    
    /**
     * Set <credential> value
     *
     * @param string $value
     * @return \db\BackupRequest
     */
    public function setCredential( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <region> has a value
     *
     * @return boolean
     */
    public function hasRegion(){
      return $this->_has(8);
    }
    
    /**
     * Clear <region> value
     *
     * @return \db\BackupRequest
     */
    public function clearRegion(){
      return $this->_clear(8);
    }
    
    /**
     * Get <region> value
     *
     * @return string
     */
    public function getRegion(){
      return $this->_get(8);
    }
    
    /**
     * Set <region> value
     *
     * @param string $value
     * @return \db\BackupRequest
     */
    public function setRegion( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <auth_secret_name> has a value
     *
     * @return boolean
     */
    public function hasAuthSecretName(){
      return $this->_has(9);
    }
    
    /**
     * Clear <auth_secret_name> value
     *
     * @return \db\BackupRequest
     */
    public function clearAuthSecretName(){
      return $this->_clear(9);
    }
    
    /**
     * Get <auth_secret_name> value
     *
     * @return string
     */
    public function getAuthSecretName(){
      return $this->_get(9);
    }
    
    /**
     * Set <auth_secret_name> value
     *
     * @param string $value
     * @return \db\BackupRequest
     */
    public function setAuthSecretName( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <force> has a value
     *
     * @return boolean
     */
    public function hasForce(){
      return $this->_has(10);
    }
    
    /**
     * Clear <force> value
     *
     * @return \db\BackupRequest
     */
    public function clearForce(){
      return $this->_clear(10);
    }
    
    /**
     * Get <force> value
     *
     * @return boolean
     */
    public function getForce(){
      return $this->_get(10);
    }
    
    /**
     * Set <force> value
     *
     * @param boolean $value
     * @return \db\BackupRequest
     */
    public function setForce( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace db {

  class RestoreRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $pv = null;
    
    /**  @var int */
    public $pv_size = null;
    
    /**  @var string */
    public $sku = null;
    
    /**  @var int */
    public $node = null;
    
    /**  @var string */
    public $snapshot_phid = null;
    
    /**  @var string */
    public $bucket_name = null;
    
    /**  @var string */
    public $credential = null;
    
    /**  @var string */
    public $region = null;
    
    /**  @var string */
    public $secret_name = null;
    
    /**  @var string */
    public $version = null;
    
    /**  @var boolean */
    public $force = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.RestoreRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING pv = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "pv";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 pv_size = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "pv_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sku = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "sku";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 node = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "node";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING snapshot_phid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "snapshot_phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bucket_name = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "bucket_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING credential = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "credential";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING region = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "region";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING secret_name = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "secret_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING version = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL force = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "force";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \db\RestoreRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \db\RestoreRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \db\RestoreRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \db\RestoreRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \db\RestoreRequest
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \db\RestoreRequest
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <pv> has a value
     *
     * @return boolean
     */
    public function hasPv(){
      return $this->_has(4);
    }
    
    /**
     * Clear <pv> value
     *
     * @return \db\RestoreRequest
     */
    public function clearPv(){
      return $this->_clear(4);
    }
    
    /**
     * Get <pv> value
     *
     * @return string
     */
    public function getPv(){
      return $this->_get(4);
    }
    
    /**
     * Set <pv> value
     *
     * @param string $value
     * @return \db\RestoreRequest
     */
    public function setPv( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <pv_size> has a value
     *
     * @return boolean
     */
    public function hasPvSize(){
      return $this->_has(5);
    }
    
    /**
     * Clear <pv_size> value
     *
     * @return \db\RestoreRequest
     */
    public function clearPvSize(){
      return $this->_clear(5);
    }
    
    /**
     * Get <pv_size> value
     *
     * @return int
     */
    public function getPvSize(){
      return $this->_get(5);
    }
    
    /**
     * Set <pv_size> value
     *
     * @param int $value
     * @return \db\RestoreRequest
     */
    public function setPvSize( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <sku> has a value
     *
     * @return boolean
     */
    public function hasSku(){
      return $this->_has(6);
    }
    
    /**
     * Clear <sku> value
     *
     * @return \db\RestoreRequest
     */
    public function clearSku(){
      return $this->_clear(6);
    }
    
    /**
     * Get <sku> value
     *
     * @return string
     */
    public function getSku(){
      return $this->_get(6);
    }
    
    /**
     * Set <sku> value
     *
     * @param string $value
     * @return \db\RestoreRequest
     */
    public function setSku( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <node> has a value
     *
     * @return boolean
     */
    public function hasNode(){
      return $this->_has(7);
    }
    
    /**
     * Clear <node> value
     *
     * @return \db\RestoreRequest
     */
    public function clearNode(){
      return $this->_clear(7);
    }
    
    /**
     * Get <node> value
     *
     * @return int
     */
    public function getNode(){
      return $this->_get(7);
    }
    
    /**
     * Set <node> value
     *
     * @param int $value
     * @return \db\RestoreRequest
     */
    public function setNode( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <snapshot_phid> has a value
     *
     * @return boolean
     */
    public function hasSnapshotPhid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <snapshot_phid> value
     *
     * @return \db\RestoreRequest
     */
    public function clearSnapshotPhid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <snapshot_phid> value
     *
     * @return string
     */
    public function getSnapshotPhid(){
      return $this->_get(8);
    }
    
    /**
     * Set <snapshot_phid> value
     *
     * @param string $value
     * @return \db\RestoreRequest
     */
    public function setSnapshotPhid( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <bucket_name> has a value
     *
     * @return boolean
     */
    public function hasBucketName(){
      return $this->_has(9);
    }
    
    /**
     * Clear <bucket_name> value
     *
     * @return \db\RestoreRequest
     */
    public function clearBucketName(){
      return $this->_clear(9);
    }
    
    /**
     * Get <bucket_name> value
     *
     * @return string
     */
    public function getBucketName(){
      return $this->_get(9);
    }
    
    /**
     * Set <bucket_name> value
     *
     * @param string $value
     * @return \db\RestoreRequest
     */
    public function setBucketName( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <credential> has a value
     *
     * @return boolean
     */
    public function hasCredential(){
      return $this->_has(10);
    }
    
    /**
     * Clear <credential> value
     *
     * @return \db\RestoreRequest
     */
    public function clearCredential(){
      return $this->_clear(10);
    }
    
    /**
     * Get <credential> value
     *
     * @return string
     */
    public function getCredential(){
      return $this->_get(10);
    }
    
    /**
     * Set <credential> value
     *
     * @param string $value
     * @return \db\RestoreRequest
     */
    public function setCredential( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <region> has a value
     *
     * @return boolean
     */
    public function hasRegion(){
      return $this->_has(11);
    }
    
    /**
     * Clear <region> value
     *
     * @return \db\RestoreRequest
     */
    public function clearRegion(){
      return $this->_clear(11);
    }
    
    /**
     * Get <region> value
     *
     * @return string
     */
    public function getRegion(){
      return $this->_get(11);
    }
    
    /**
     * Set <region> value
     *
     * @param string $value
     * @return \db\RestoreRequest
     */
    public function setRegion( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <secret_name> has a value
     *
     * @return boolean
     */
    public function hasSecretName(){
      return $this->_has(12);
    }
    
    /**
     * Clear <secret_name> value
     *
     * @return \db\RestoreRequest
     */
    public function clearSecretName(){
      return $this->_clear(12);
    }
    
    /**
     * Get <secret_name> value
     *
     * @return string
     */
    public function getSecretName(){
      return $this->_get(12);
    }
    
    /**
     * Set <secret_name> value
     *
     * @param string $value
     * @return \db\RestoreRequest
     */
    public function setSecretName( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(13);
    }
    
    /**
     * Clear <version> value
     *
     * @return \db\RestoreRequest
     */
    public function clearVersion(){
      return $this->_clear(13);
    }
    
    /**
     * Get <version> value
     *
     * @return string
     */
    public function getVersion(){
      return $this->_get(13);
    }
    
    /**
     * Set <version> value
     *
     * @param string $value
     * @return \db\RestoreRequest
     */
    public function setVersion( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <force> has a value
     *
     * @return boolean
     */
    public function hasForce(){
      return $this->_has(14);
    }
    
    /**
     * Clear <force> value
     *
     * @return \db\RestoreRequest
     */
    public function clearForce(){
      return $this->_clear(14);
    }
    
    /**
     * Get <force> value
     *
     * @return boolean
     */
    public function getForce(){
      return $this->_get(14);
    }
    
    /**
     * Set <force> value
     *
     * @param boolean $value
     * @return \db\RestoreRequest
     */
    public function setForce( $value){
      return $this->_set(14, $value);
    }
  }
}

namespace db {

  class DescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.DescribeRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \db\DescribeRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \db\DescribeRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \db\DescribeRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \db\DescribeRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace db {

  class DescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $phid = null;
    
    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $sku = null;
    
    /**  @var string */
    public $version = null;
    
    /**  @var int */
    public $auto_snapshot = null;
    
    /**  @var string */
    public $last_backup = null;
    
    /**  @var \db\kubeInfo */
    public $kube = null;
    
    /**  @var string */
    public $created = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.DescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING phid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sku = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "sku";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING version = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 auto_snapshot = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "auto_snapshot";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING last_backup = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "last_backup";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE kube = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "kube";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\db\kubeInfo';
      $descriptor->addField($f);

      // OPTIONAL STRING created = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "created";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \db\DescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \db\DescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \db\DescribeResponse
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \db\DescribeResponse
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <phid> has a value
     *
     * @return boolean
     */
    public function hasPhid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <phid> value
     *
     * @return \db\DescribeResponse
     */
    public function clearPhid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <phid> value
     *
     * @return string
     */
    public function getPhid(){
      return $this->_get(3);
    }
    
    /**
     * Set <phid> value
     *
     * @param string $value
     * @return \db\DescribeResponse
     */
    public function setPhid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \db\DescribeResponse
     */
    public function clearCluster(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(4);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \db\DescribeResponse
     */
    public function setCluster( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \db\DescribeResponse
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \db\DescribeResponse
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <sku> has a value
     *
     * @return boolean
     */
    public function hasSku(){
      return $this->_has(6);
    }
    
    /**
     * Clear <sku> value
     *
     * @return \db\DescribeResponse
     */
    public function clearSku(){
      return $this->_clear(6);
    }
    
    /**
     * Get <sku> value
     *
     * @return string
     */
    public function getSku(){
      return $this->_get(6);
    }
    
    /**
     * Set <sku> value
     *
     * @param string $value
     * @return \db\DescribeResponse
     */
    public function setSku( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(7);
    }
    
    /**
     * Clear <version> value
     *
     * @return \db\DescribeResponse
     */
    public function clearVersion(){
      return $this->_clear(7);
    }
    
    /**
     * Get <version> value
     *
     * @return string
     */
    public function getVersion(){
      return $this->_get(7);
    }
    
    /**
     * Set <version> value
     *
     * @param string $value
     * @return \db\DescribeResponse
     */
    public function setVersion( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <auto_snapshot> has a value
     *
     * @return boolean
     */
    public function hasAutoSnapshot(){
      return $this->_has(8);
    }
    
    /**
     * Clear <auto_snapshot> value
     *
     * @return \db\DescribeResponse
     */
    public function clearAutoSnapshot(){
      return $this->_clear(8);
    }
    
    /**
     * Get <auto_snapshot> value
     *
     * @return int
     */
    public function getAutoSnapshot(){
      return $this->_get(8);
    }
    
    /**
     * Set <auto_snapshot> value
     *
     * @param int $value
     * @return \db\DescribeResponse
     */
    public function setAutoSnapshot( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <last_backup> has a value
     *
     * @return boolean
     */
    public function hasLastBackup(){
      return $this->_has(9);
    }
    
    /**
     * Clear <last_backup> value
     *
     * @return \db\DescribeResponse
     */
    public function clearLastBackup(){
      return $this->_clear(9);
    }
    
    /**
     * Get <last_backup> value
     *
     * @return string
     */
    public function getLastBackup(){
      return $this->_get(9);
    }
    
    /**
     * Set <last_backup> value
     *
     * @param string $value
     * @return \db\DescribeResponse
     */
    public function setLastBackup( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <kube> has a value
     *
     * @return boolean
     */
    public function hasKube(){
      return $this->_has(10);
    }
    
    /**
     * Clear <kube> value
     *
     * @return \db\DescribeResponse
     */
    public function clearKube(){
      return $this->_clear(10);
    }
    
    /**
     * Get <kube> value
     *
     * @return \db\kubeInfo
     */
    public function getKube(){
      return $this->_get(10);
    }
    
    /**
     * Set <kube> value
     *
     * @param \db\kubeInfo $value
     * @return \db\DescribeResponse
     */
    public function setKube(\db\kubeInfo $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <created> has a value
     *
     * @return boolean
     */
    public function hasCreated(){
      return $this->_has(11);
    }
    
    /**
     * Clear <created> value
     *
     * @return \db\DescribeResponse
     */
    public function clearCreated(){
      return $this->_clear(11);
    }
    
    /**
     * Get <created> value
     *
     * @return string
     */
    public function getCreated(){
      return $this->_get(11);
    }
    
    /**
     * Set <created> value
     *
     * @param string $value
     * @return \db\DescribeResponse
     */
    public function setCreated( $value){
      return $this->_set(11, $value);
    }
  }
}

namespace db {

  class kubeInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $svc = null;
    
    /**  @var int */
    public $pods = null;
    
    /**  @var int */
    public $rc = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.kubeInfo');

      // OPTIONAL INT64 svc = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "svc";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 pods = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "pods";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 rc = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rc";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <svc> has a value
     *
     * @return boolean
     */
    public function hasSvc(){
      return $this->_has(1);
    }
    
    /**
     * Clear <svc> value
     *
     * @return \db\kubeInfo
     */
    public function clearSvc(){
      return $this->_clear(1);
    }
    
    /**
     * Get <svc> value
     *
     * @return int
     */
    public function getSvc(){
      return $this->_get(1);
    }
    
    /**
     * Set <svc> value
     *
     * @param int $value
     * @return \db\kubeInfo
     */
    public function setSvc( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pods> has a value
     *
     * @return boolean
     */
    public function hasPods(){
      return $this->_has(2);
    }
    
    /**
     * Clear <pods> value
     *
     * @return \db\kubeInfo
     */
    public function clearPods(){
      return $this->_clear(2);
    }
    
    /**
     * Get <pods> value
     *
     * @return int
     */
    public function getPods(){
      return $this->_get(2);
    }
    
    /**
     * Set <pods> value
     *
     * @param int $value
     * @return \db\kubeInfo
     */
    public function setPods( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <rc> has a value
     *
     * @return boolean
     */
    public function hasRc(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rc> value
     *
     * @return \db\kubeInfo
     */
    public function clearRc(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rc> value
     *
     * @return int
     */
    public function getRc(){
      return $this->_get(3);
    }
    
    /**
     * Set <rc> value
     *
     * @param int $value
     * @return \db\kubeInfo
     */
    public function setRc( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace db {

  class ListRequest extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.ListRequest');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace db {

  class ListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \db\Database[]  */
    public $databases = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.ListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE databases = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "databases";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\db\Database';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \db\ListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \db\ListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <databases> has a value
     *
     * @return boolean
     */
    public function hasDatabases(){
      return $this->_has(2);
    }
    
    /**
     * Clear <databases> value
     *
     * @return \db\ListResponse
     */
    public function clearDatabases(){
      return $this->_clear(2);
    }
    
    /**
     * Get <databases> value
     *
     * @param int $idx
     * @return \db\Database
     */
    public function getDatabases($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <databases> value
     *
     * @param \db\Database $value
     * @return \db\ListResponse
     */
    public function setDatabases(\db\Database $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <databases>
     *
     * @return \db\Database[]
     */
    public function getDatabasesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <databases>
     *
     * @param \db\Database $value
     * @return \db\ListResponse
     */
    public function addDatabases(\db\Database $value){
     return $this->_add(2, $value);
    }
  }
}

namespace db {

  class Database extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $phid = null;
    
    /**  @var string */
    public $cluster_name = null;
    
    /**  @var string */
    public $kubernetes_service = null;
    
    /**  @var string */
    public $namespace = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $sku = null;
    
    /**  @var string */
    public $version = null;
    
    /**  @var string */
    public $archive_bucket = null;
    
    /**  @var string */
    public $archive_bucket_region = null;
    
    /**  @var int */
    public $auto_snapshot = null;
    
    /**  @var int */
    public $pv_size = null;
    
    /**  @var string */
    public $created = null;
    
    /**  @var string */
    public $last_backup = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.Database');

      // OPTIONAL STRING phid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cluster_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kubernetes_service = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "kubernetes_service";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sku = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "sku";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING version = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING archive_bucket = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "archive_bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING archive_bucket_region = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "archive_bucket_region";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 auto_snapshot = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "auto_snapshot";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 pv_size = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "pv_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "created";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING last_backup = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "last_backup";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <phid> has a value
     *
     * @return boolean
     */
    public function hasPhid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <phid> value
     *
     * @return \db\Database
     */
    public function clearPhid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <phid> value
     *
     * @return string
     */
    public function getPhid(){
      return $this->_get(1);
    }
    
    /**
     * Set <phid> value
     *
     * @param string $value
     * @return \db\Database
     */
    public function setPhid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cluster_name> has a value
     *
     * @return boolean
     */
    public function hasClusterName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cluster_name> value
     *
     * @return \db\Database
     */
    public function clearClusterName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cluster_name> value
     *
     * @return string
     */
    public function getClusterName(){
      return $this->_get(2);
    }
    
    /**
     * Set <cluster_name> value
     *
     * @param string $value
     * @return \db\Database
     */
    public function setClusterName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <kubernetes_service> has a value
     *
     * @return boolean
     */
    public function hasKubernetesService(){
      return $this->_has(3);
    }
    
    /**
     * Clear <kubernetes_service> value
     *
     * @return \db\Database
     */
    public function clearKubernetesService(){
      return $this->_clear(3);
    }
    
    /**
     * Get <kubernetes_service> value
     *
     * @return string
     */
    public function getKubernetesService(){
      return $this->_get(3);
    }
    
    /**
     * Set <kubernetes_service> value
     *
     * @param string $value
     * @return \db\Database
     */
    public function setKubernetesService( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(4);
    }
    
    /**
     * Clear <namespace> value
     *
     * @return \db\Database
     */
    public function clearNamespace(){
      return $this->_clear(4);
    }
    
    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(4);
    }
    
    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \db\Database
     */
    public function setNamespace( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \db\Database
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \db\Database
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <sku> has a value
     *
     * @return boolean
     */
    public function hasSku(){
      return $this->_has(6);
    }
    
    /**
     * Clear <sku> value
     *
     * @return \db\Database
     */
    public function clearSku(){
      return $this->_clear(6);
    }
    
    /**
     * Get <sku> value
     *
     * @return string
     */
    public function getSku(){
      return $this->_get(6);
    }
    
    /**
     * Set <sku> value
     *
     * @param string $value
     * @return \db\Database
     */
    public function setSku( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(7);
    }
    
    /**
     * Clear <version> value
     *
     * @return \db\Database
     */
    public function clearVersion(){
      return $this->_clear(7);
    }
    
    /**
     * Get <version> value
     *
     * @return string
     */
    public function getVersion(){
      return $this->_get(7);
    }
    
    /**
     * Set <version> value
     *
     * @param string $value
     * @return \db\Database
     */
    public function setVersion( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <archive_bucket> has a value
     *
     * @return boolean
     */
    public function hasArchiveBucket(){
      return $this->_has(8);
    }
    
    /**
     * Clear <archive_bucket> value
     *
     * @return \db\Database
     */
    public function clearArchiveBucket(){
      return $this->_clear(8);
    }
    
    /**
     * Get <archive_bucket> value
     *
     * @return string
     */
    public function getArchiveBucket(){
      return $this->_get(8);
    }
    
    /**
     * Set <archive_bucket> value
     *
     * @param string $value
     * @return \db\Database
     */
    public function setArchiveBucket( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <archive_bucket_region> has a value
     *
     * @return boolean
     */
    public function hasArchiveBucketRegion(){
      return $this->_has(9);
    }
    
    /**
     * Clear <archive_bucket_region> value
     *
     * @return \db\Database
     */
    public function clearArchiveBucketRegion(){
      return $this->_clear(9);
    }
    
    /**
     * Get <archive_bucket_region> value
     *
     * @return string
     */
    public function getArchiveBucketRegion(){
      return $this->_get(9);
    }
    
    /**
     * Set <archive_bucket_region> value
     *
     * @param string $value
     * @return \db\Database
     */
    public function setArchiveBucketRegion( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <auto_snapshot> has a value
     *
     * @return boolean
     */
    public function hasAutoSnapshot(){
      return $this->_has(10);
    }
    
    /**
     * Clear <auto_snapshot> value
     *
     * @return \db\Database
     */
    public function clearAutoSnapshot(){
      return $this->_clear(10);
    }
    
    /**
     * Get <auto_snapshot> value
     *
     * @return int
     */
    public function getAutoSnapshot(){
      return $this->_get(10);
    }
    
    /**
     * Set <auto_snapshot> value
     *
     * @param int $value
     * @return \db\Database
     */
    public function setAutoSnapshot( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <pv_size> has a value
     *
     * @return boolean
     */
    public function hasPvSize(){
      return $this->_has(11);
    }
    
    /**
     * Clear <pv_size> value
     *
     * @return \db\Database
     */
    public function clearPvSize(){
      return $this->_clear(11);
    }
    
    /**
     * Get <pv_size> value
     *
     * @return int
     */
    public function getPvSize(){
      return $this->_get(11);
    }
    
    /**
     * Set <pv_size> value
     *
     * @param int $value
     * @return \db\Database
     */
    public function setPvSize( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <created> has a value
     *
     * @return boolean
     */
    public function hasCreated(){
      return $this->_has(12);
    }
    
    /**
     * Clear <created> value
     *
     * @return \db\Database
     */
    public function clearCreated(){
      return $this->_clear(12);
    }
    
    /**
     * Get <created> value
     *
     * @return string
     */
    public function getCreated(){
      return $this->_get(12);
    }
    
    /**
     * Set <created> value
     *
     * @param string $value
     * @return \db\Database
     */
    public function setCreated( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <last_backup> has a value
     *
     * @return boolean
     */
    public function hasLastBackup(){
      return $this->_has(13);
    }
    
    /**
     * Clear <last_backup> value
     *
     * @return \db\Database
     */
    public function clearLastBackup(){
      return $this->_clear(13);
    }
    
    /**
     * Get <last_backup> value
     *
     * @return string
     */
    public function getLastBackup(){
      return $this->_get(13);
    }
    
    /**
     * Set <last_backup> value
     *
     * @param string $value
     * @return \db\Database
     */
    public function setLastBackup( $value){
      return $this->_set(13, $value);
    }
  }
}

namespace db {

  class SnapshotListRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.SnapshotListRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \db\SnapshotListRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \db\SnapshotListRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace db {

  class SnapshotListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \db\Snapshot[]  */
    public $list = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.SnapshotListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE list = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\db\Snapshot';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \db\SnapshotListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \db\SnapshotListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <list> has a value
     *
     * @return boolean
     */
    public function hasList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <list> value
     *
     * @return \db\SnapshotListResponse
     */
    public function clearList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <list> value
     *
     * @param int $idx
     * @return \db\Snapshot
     */
    public function getList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <list> value
     *
     * @param \db\Snapshot $value
     * @return \db\SnapshotListResponse
     */
    public function setList(\db\Snapshot $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <list>
     *
     * @return \db\Snapshot[]
     */
    public function getListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <list>
     *
     * @param \db\Snapshot $value
     * @return \db\SnapshotListResponse
     */
    public function addList(\db\Snapshot $value){
     return $this->_add(2, $value);
    }
  }
}

namespace db {

  class Snapshot extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $db_name = null;
    
    /**  @var string */
    public $db_cluster = null;
    
    /**  @var string */
    public $provider = null;
    
    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $region = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $status = null;
    
    /**  @var string */
    public $process = null;
    
    /**  @var string */
    public $restore_db = null;
    
    /**  @var string */
    public $restore_snap = null;
    
    /**  @var string */
    public $created = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.Snapshot');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING db_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "db_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING db_cluster = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "db_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING provider = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "provider";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bucket = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING region = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "region";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING status = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING process = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "process";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING restore_db = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "restore_db";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING restore_snap = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "restore_snap";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "created";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \db\Snapshot
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <db_name> has a value
     *
     * @return boolean
     */
    public function hasDbName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <db_name> value
     *
     * @return \db\Snapshot
     */
    public function clearDbName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <db_name> value
     *
     * @return string
     */
    public function getDbName(){
      return $this->_get(2);
    }
    
    /**
     * Set <db_name> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setDbName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <db_cluster> has a value
     *
     * @return boolean
     */
    public function hasDbCluster(){
      return $this->_has(3);
    }
    
    /**
     * Clear <db_cluster> value
     *
     * @return \db\Snapshot
     */
    public function clearDbCluster(){
      return $this->_clear(3);
    }
    
    /**
     * Get <db_cluster> value
     *
     * @return string
     */
    public function getDbCluster(){
      return $this->_get(3);
    }
    
    /**
     * Set <db_cluster> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setDbCluster( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <provider> has a value
     *
     * @return boolean
     */
    public function hasProvider(){
      return $this->_has(4);
    }
    
    /**
     * Clear <provider> value
     *
     * @return \db\Snapshot
     */
    public function clearProvider(){
      return $this->_clear(4);
    }
    
    /**
     * Get <provider> value
     *
     * @return string
     */
    public function getProvider(){
      return $this->_get(4);
    }
    
    /**
     * Set <provider> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setProvider( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(5);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \db\Snapshot
     */
    public function clearBucket(){
      return $this->_clear(5);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(5);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setBucket( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <region> has a value
     *
     * @return boolean
     */
    public function hasRegion(){
      return $this->_has(6);
    }
    
    /**
     * Clear <region> value
     *
     * @return \db\Snapshot
     */
    public function clearRegion(){
      return $this->_clear(6);
    }
    
    /**
     * Get <region> value
     *
     * @return string
     */
    public function getRegion(){
      return $this->_get(6);
    }
    
    /**
     * Set <region> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setRegion( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(7);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \db\Snapshot
     */
    public function clearZone(){
      return $this->_clear(7);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(7);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setZone( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(8);
    }
    
    /**
     * Clear <status> value
     *
     * @return \db\Snapshot
     */
    public function clearStatus(){
      return $this->_clear(8);
    }
    
    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus(){
      return $this->_get(8);
    }
    
    /**
     * Set <status> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setStatus( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <process> has a value
     *
     * @return boolean
     */
    public function hasProcess(){
      return $this->_has(9);
    }
    
    /**
     * Clear <process> value
     *
     * @return \db\Snapshot
     */
    public function clearProcess(){
      return $this->_clear(9);
    }
    
    /**
     * Get <process> value
     *
     * @return string
     */
    public function getProcess(){
      return $this->_get(9);
    }
    
    /**
     * Set <process> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setProcess( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <restore_db> has a value
     *
     * @return boolean
     */
    public function hasRestoreDb(){
      return $this->_has(10);
    }
    
    /**
     * Clear <restore_db> value
     *
     * @return \db\Snapshot
     */
    public function clearRestoreDb(){
      return $this->_clear(10);
    }
    
    /**
     * Get <restore_db> value
     *
     * @return string
     */
    public function getRestoreDb(){
      return $this->_get(10);
    }
    
    /**
     * Set <restore_db> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setRestoreDb( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <restore_snap> has a value
     *
     * @return boolean
     */
    public function hasRestoreSnap(){
      return $this->_has(11);
    }
    
    /**
     * Clear <restore_snap> value
     *
     * @return \db\Snapshot
     */
    public function clearRestoreSnap(){
      return $this->_clear(11);
    }
    
    /**
     * Get <restore_snap> value
     *
     * @return string
     */
    public function getRestoreSnap(){
      return $this->_get(11);
    }
    
    /**
     * Set <restore_snap> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setRestoreSnap( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <created> has a value
     *
     * @return boolean
     */
    public function hasCreated(){
      return $this->_has(12);
    }
    
    /**
     * Clear <created> value
     *
     * @return \db\Snapshot
     */
    public function clearCreated(){
      return $this->_clear(12);
    }
    
    /**
     * Get <created> value
     *
     * @return string
     */
    public function getCreated(){
      return $this->_get(12);
    }
    
    /**
     * Set <created> value
     *
     * @param string $value
     * @return \db\Snapshot
     */
    public function setCreated( $value){
      return $this->_set(12, $value);
    }
  }
}

namespace db {

  class DatabasesClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param db\CreateRequest $input
     */
    public function Create(\db\CreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/db.Databases/Create', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param db\DeleteRequest $input
     */
    public function Delete(\db\DeleteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/db.Databases/Delete', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param db\BackupRequest $input
     */
    public function Backup(\db\BackupRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/db.Databases/Backup', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param db\SnapshotListRequest $input
     */
    public function SnapshotList(\db\SnapshotListRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/db.Databases/SnapshotList', $argument, '\db\SnapshotListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param db\RestoreRequest $input
     */
    public function Restore(\db\RestoreRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/db.Databases/Restore', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param db\DescribeRequest $input
     */
    public function Describe(\db\DescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/db.Databases/Describe', $argument, '\db\DescribeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param dtypes\VoidRequest $input
     */
    public function List(\dtypes\VoidRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/db.Databases/List', $argument, '\db\ListResponse::deserialize', $metadata, $options);
    }
  }
}
