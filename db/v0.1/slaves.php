<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: slaves.proto
//   Date: 2016-04-20 05:49:24

namespace db {

  class SlaveAddRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $config = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'db.SlaveAddRequest');

      // OPTIONAL STRING cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING config = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "config";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \db\SlaveAddRequest
     */
    public function clearCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster> value
     *
     * @return string
     */
    public function getCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster> value
     *
     * @param string $value
     * @return \db\SlaveAddRequest
     */
    public function setCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \db\SlaveAddRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \db\SlaveAddRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <config> has a value
     *
     * @return boolean
     */
    public function hasConfig(){
      return $this->_has(3);
    }
    
    /**
     * Clear <config> value
     *
     * @return \db\SlaveAddRequest
     */
    public function clearConfig(){
      return $this->_clear(3);
    }
    
    /**
     * Get <config> value
     *
     * @return string
     */
    public function getConfig(){
      return $this->_get(3);
    }
    
    /**
     * Set <config> value
     *
     * @param string $value
     * @return \db\SlaveAddRequest
     */
    public function setConfig( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace db {

  class SlavesClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param db\SlaveAddRequest $input
     */
    public function Add(\db\SlaveAddRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/db.Slaves/Add', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
  }
}
