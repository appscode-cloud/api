<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: job.proto
//   Date: 2016-04-20 05:49:23

namespace ci {

  class JobListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \ci\Job[]  */
    public $jobs = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.JobListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE jobs = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "jobs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ci\Job';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \ci\JobListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \ci\JobListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <jobs> has a value
     *
     * @return boolean
     */
    public function hasJobs(){
      return $this->_has(2);
    }
    
    /**
     * Clear <jobs> value
     *
     * @return \ci\JobListResponse
     */
    public function clearJobs(){
      return $this->_clear(2);
    }
    
    /**
     * Get <jobs> value
     *
     * @param int $idx
     * @return \ci\Job
     */
    public function getJobs($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <jobs> value
     *
     * @param \ci\Job $value
     * @return \ci\JobListResponse
     */
    public function setJobs(\ci\Job $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <jobs>
     *
     * @return \ci\Job[]
     */
    public function getJobsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <jobs>
     *
     * @param \ci\Job $value
     * @return \ci\JobListResponse
     */
    public function addJobs(\ci\Job $value){
     return $this->_add(2, $value);
    }
  }
}

namespace ci {

  class JobBuildRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $param = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.JobBuildRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ci\JobBuildRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ci\JobBuildRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \ci\JobBuildRequest
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return string
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param string $value
     * @return \ci\JobBuildRequest
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ci {

  class JobDescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.JobDescribeRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ci\JobDescribeRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ci\JobDescribeRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ci {

  class JobDescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $description = null;
    
    /**  @var string */
    public $display_name = null;
    
    /**  @var int */
    public $build_count = null;
    
    /**  @var string */
    public $job_color = null;
    
    /**  @var string */
    public $builds_command = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.JobDescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING display_name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "display_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 build_count = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "build_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING job_color = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "job_color";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING builds_command = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "builds_command";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \ci\JobDescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \ci\JobDescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ci\JobDescribeResponse
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ci\JobDescribeResponse
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \ci\JobDescribeResponse
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(3);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \ci\JobDescribeResponse
     */
    public function setDescription( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <display_name> has a value
     *
     * @return boolean
     */
    public function hasDisplayName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <display_name> value
     *
     * @return \ci\JobDescribeResponse
     */
    public function clearDisplayName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <display_name> value
     *
     * @return string
     */
    public function getDisplayName(){
      return $this->_get(4);
    }
    
    /**
     * Set <display_name> value
     *
     * @param string $value
     * @return \ci\JobDescribeResponse
     */
    public function setDisplayName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <build_count> has a value
     *
     * @return boolean
     */
    public function hasBuildCount(){
      return $this->_has(5);
    }
    
    /**
     * Clear <build_count> value
     *
     * @return \ci\JobDescribeResponse
     */
    public function clearBuildCount(){
      return $this->_clear(5);
    }
    
    /**
     * Get <build_count> value
     *
     * @return int
     */
    public function getBuildCount(){
      return $this->_get(5);
    }
    
    /**
     * Set <build_count> value
     *
     * @param int $value
     * @return \ci\JobDescribeResponse
     */
    public function setBuildCount( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <job_color> has a value
     *
     * @return boolean
     */
    public function hasJobColor(){
      return $this->_has(6);
    }
    
    /**
     * Clear <job_color> value
     *
     * @return \ci\JobDescribeResponse
     */
    public function clearJobColor(){
      return $this->_clear(6);
    }
    
    /**
     * Get <job_color> value
     *
     * @return string
     */
    public function getJobColor(){
      return $this->_get(6);
    }
    
    /**
     * Set <job_color> value
     *
     * @param string $value
     * @return \ci\JobDescribeResponse
     */
    public function setJobColor( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <builds_command> has a value
     *
     * @return boolean
     */
    public function hasBuildsCommand(){
      return $this->_has(7);
    }
    
    /**
     * Clear <builds_command> value
     *
     * @return \ci\JobDescribeResponse
     */
    public function clearBuildsCommand(){
      return $this->_clear(7);
    }
    
    /**
     * Get <builds_command> value
     *
     * @return string
     */
    public function getBuildsCommand(){
      return $this->_get(7);
    }
    
    /**
     * Set <builds_command> value
     *
     * @param string $value
     * @return \ci\JobDescribeResponse
     */
    public function setBuildsCommand( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace ci {

  class JobDeleteRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.JobDeleteRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ci\JobDeleteRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ci\JobDeleteRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ci {

  class JobCreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $sh_file = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.JobCreateRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sh_file = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sh_file";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ci\JobCreateRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ci\JobCreateRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sh_file> has a value
     *
     * @return boolean
     */
    public function hasShFile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sh_file> value
     *
     * @return \ci\JobCreateRequest
     */
    public function clearShFile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sh_file> value
     *
     * @return string
     */
    public function getShFile(){
      return $this->_get(2);
    }
    
    /**
     * Set <sh_file> value
     *
     * @param string $value
     * @return \ci\JobCreateRequest
     */
    public function setShFile( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ci {

  class JobCopyRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $source = null;
    
    /**  @var string */
    public $destination = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.JobCopyRequest');

      // OPTIONAL STRING source = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "source";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING destination = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "destination";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <source> has a value
     *
     * @return boolean
     */
    public function hasSource(){
      return $this->_has(1);
    }
    
    /**
     * Clear <source> value
     *
     * @return \ci\JobCopyRequest
     */
    public function clearSource(){
      return $this->_clear(1);
    }
    
    /**
     * Get <source> value
     *
     * @return string
     */
    public function getSource(){
      return $this->_get(1);
    }
    
    /**
     * Set <source> value
     *
     * @param string $value
     * @return \ci\JobCopyRequest
     */
    public function setSource( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <destination> has a value
     *
     * @return boolean
     */
    public function hasDestination(){
      return $this->_has(2);
    }
    
    /**
     * Clear <destination> value
     *
     * @return \ci\JobCopyRequest
     */
    public function clearDestination(){
      return $this->_clear(2);
    }
    
    /**
     * Get <destination> value
     *
     * @return string
     */
    public function getDestination(){
      return $this->_get(2);
    }
    
    /**
     * Set <destination> value
     *
     * @param string $value
     * @return \ci\JobCopyRequest
     */
    public function setDestination( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ci {

  class Job extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $color = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.Job');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING color = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "color";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ci\Job
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ci\Job
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <color> has a value
     *
     * @return boolean
     */
    public function hasColor(){
      return $this->_has(2);
    }
    
    /**
     * Clear <color> value
     *
     * @return \ci\Job
     */
    public function clearColor(){
      return $this->_clear(2);
    }
    
    /**
     * Get <color> value
     *
     * @return string
     */
    public function getColor(){
      return $this->_get(2);
    }
    
    /**
     * Set <color> value
     *
     * @param string $value
     * @return \ci\Job
     */
    public function setColor( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ci {

  class JobsClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param dtypes\VoidRequest $input
     */
    public function List(\dtypes\VoidRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Jobs/List', $argument, '\ci\JobListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param ci\JobDescribeRequest $input
     */
    public function Describe(\ci\JobDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Jobs/Describe', $argument, '\ci\JobDescribeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param ci\JobCreateRequest $input
     */
    public function Create(\ci\JobCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Jobs/Create', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param ci\JobCopyRequest $input
     */
    public function Copy(\ci\JobCopyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Jobs/Copy', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param ci\JobBuildRequest $input
     */
    public function Build(\ci\JobBuildRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Jobs/Build', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param ci\JobDeleteRequest $input
     */
    public function Delete(\ci\JobDeleteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Jobs/Delete', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
  }
}
