// Code generated by protoc-gen-go.
// source: slave.proto
// DO NOT EDIT!

package ci

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"
import ssh "github.com/appscode/api/ssh/v0.1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SlaveListResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Slaves []*Slave       `protobuf:"bytes,2,rep,name=slaves" json:"slaves,omitempty"`
}

func (m *SlaveListResponse) Reset()                    { *m = SlaveListResponse{} }
func (m *SlaveListResponse) String() string            { return proto.CompactTextString(m) }
func (*SlaveListResponse) ProtoMessage()               {}
func (*SlaveListResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *SlaveListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SlaveListResponse) GetSlaves() []*Slave {
	if m != nil {
		return m.Slaves
	}
	return nil
}

type Slave struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *Slave) Reset()                    { *m = Slave{} }
func (m *Slave) String() string            { return proto.CompactTextString(m) }
func (*Slave) ProtoMessage()               {}
func (*Slave) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type SlaveCreateRequest struct {
	Executors     int32  `protobuf:"varint,1,opt,name=executors" json:"executors,omitempty"`
	Labels        string `protobuf:"bytes,2,opt,name=labels" json:"labels,omitempty"`
	StartupScript string `protobuf:"bytes,3,opt,name=startup_script,json=startupScript" json:"startup_script,omitempty"`
}

func (m *SlaveCreateRequest) Reset()                    { *m = SlaveCreateRequest{} }
func (m *SlaveCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*SlaveCreateRequest) ProtoMessage()               {}
func (*SlaveCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type StartupConfig struct {
	Provider        string   `protobuf:"bytes,1,opt,name=provider" json:"provider,omitempty"`
	OS              string   `protobuf:"bytes,2,opt,name=oS" json:"oS,omitempty"`
	JenkinsVersion  string   `protobuf:"bytes,3,opt,name=jenkins_version,json=jenkinsVersion" json:"jenkins_version,omitempty"`
	SaltbaseVersion string   `protobuf:"bytes,4,opt,name=saltbase_version,json=saltbaseVersion" json:"saltbase_version,omitempty"`
	Role            string   `protobuf:"bytes,5,opt,name=role" json:"role,omitempty"`
	Namespace       string   `protobuf:"bytes,6,opt,name=namespace" json:"namespace,omitempty"`
	Labels          string   `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	MasterAddr      string   `protobuf:"bytes,8,opt,name=master_addr,json=masterAddr" json:"master_addr,omitempty"`
	Executors       int32    `protobuf:"varint,9,opt,name=executors" json:"executors,omitempty"`
	Secrets         *Secrets `protobuf:"bytes,10,opt,name=secrets" json:"secrets,omitempty"`
}

func (m *StartupConfig) Reset()                    { *m = StartupConfig{} }
func (m *StartupConfig) String() string            { return proto.CompactTextString(m) }
func (*StartupConfig) ProtoMessage()               {}
func (*StartupConfig) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *StartupConfig) GetSecrets() *Secrets {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type Secrets struct {
	JenkinsUser  string        `protobuf:"bytes,1,opt,name=jenkins_user,json=jenkinsUser" json:"jenkins_user,omitempty"`
	JenkinsToken string        `protobuf:"bytes,2,opt,name=jenkins_token,json=jenkinsToken" json:"jenkins_token,omitempty"`
	SshKey       *ssh.SSHKey   `protobuf:"bytes,3,opt,name=ssh_key,json=sshKey" json:"ssh_key,omitempty"`
	DockerRepos  []*DockerRepo `protobuf:"bytes,4,rep,name=docker_repos,json=dockerRepos" json:"docker_repos,omitempty"`
	MavenRepo    *MavenRepo    `protobuf:"bytes,5,opt,name=maven_repo,json=mavenRepo" json:"maven_repo,omitempty"`
}

func (m *Secrets) Reset()                    { *m = Secrets{} }
func (m *Secrets) String() string            { return proto.CompactTextString(m) }
func (*Secrets) ProtoMessage()               {}
func (*Secrets) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *Secrets) GetSshKey() *ssh.SSHKey {
	if m != nil {
		return m.SshKey
	}
	return nil
}

func (m *Secrets) GetDockerRepos() []*DockerRepo {
	if m != nil {
		return m.DockerRepos
	}
	return nil
}

func (m *Secrets) GetMavenRepo() *MavenRepo {
	if m != nil {
		return m.MavenRepo
	}
	return nil
}

type MavenRepo struct {
	Url      string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *MavenRepo) Reset()                    { *m = MavenRepo{} }
func (m *MavenRepo) String() string            { return proto.CompactTextString(m) }
func (*MavenRepo) ProtoMessage()               {}
func (*MavenRepo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

type DockerRepo struct {
	Url   string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Auth  string `protobuf:"bytes,3,opt,name=auth" json:"auth,omitempty"`
}

func (m *DockerRepo) Reset()                    { *m = DockerRepo{} }
func (m *DockerRepo) String() string            { return proto.CompactTextString(m) }
func (*DockerRepo) ProtoMessage()               {}
func (*DockerRepo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

type SlaveDescribeRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SlaveDescribeRequest) Reset()                    { *m = SlaveDescribeRequest{} }
func (m *SlaveDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SlaveDescribeRequest) ProtoMessage()               {}
func (*SlaveDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

type SlaveDescribeResponse struct {
	Status        *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Name          string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Executors     int64          `protobuf:"varint,3,opt,name=executors" json:"executors,omitempty"`
	NodeStatus    string         `protobuf:"bytes,4,opt,name=node_status,json=nodeStatus" json:"node_status,omitempty"`
	OfflineReason string         `protobuf:"bytes,5,opt,name=offline_reason,json=offlineReason" json:"offline_reason,omitempty"`
	Label         string         `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	Provider      string         `protobuf:"bytes,7,opt,name=provider" json:"provider,omitempty"`
	Sku           string         `protobuf:"bytes,8,opt,name=sku" json:"sku,omitempty"`
	StartupScript string         `protobuf:"bytes,9,opt,name=startup_script,json=startupScript" json:"startup_script,omitempty"`
	CreatedAt     string         `protobuf:"bytes,10,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *SlaveDescribeResponse) Reset()                    { *m = SlaveDescribeResponse{} }
func (m *SlaveDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SlaveDescribeResponse) ProtoMessage()               {}
func (*SlaveDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *SlaveDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type SlaveDeleteRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SlaveDeleteRequest) Reset()                    { *m = SlaveDeleteRequest{} }
func (m *SlaveDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SlaveDeleteRequest) ProtoMessage()               {}
func (*SlaveDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

type SlaveRestartRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SlaveRestartRequest) Reset()                    { *m = SlaveRestartRequest{} }
func (m *SlaveRestartRequest) String() string            { return proto.CompactTextString(m) }
func (*SlaveRestartRequest) ProtoMessage()               {}
func (*SlaveRestartRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

type SlaveRestartResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *SlaveRestartResponse) Reset()                    { *m = SlaveRestartResponse{} }
func (m *SlaveRestartResponse) String() string            { return proto.CompactTextString(m) }
func (*SlaveRestartResponse) ProtoMessage()               {}
func (*SlaveRestartResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *SlaveRestartResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*SlaveListResponse)(nil), "ci.SlaveListResponse")
	proto.RegisterType((*Slave)(nil), "ci.Slave")
	proto.RegisterType((*SlaveCreateRequest)(nil), "ci.SlaveCreateRequest")
	proto.RegisterType((*StartupConfig)(nil), "ci.StartupConfig")
	proto.RegisterType((*Secrets)(nil), "ci.Secrets")
	proto.RegisterType((*MavenRepo)(nil), "ci.MavenRepo")
	proto.RegisterType((*DockerRepo)(nil), "ci.DockerRepo")
	proto.RegisterType((*SlaveDescribeRequest)(nil), "ci.SlaveDescribeRequest")
	proto.RegisterType((*SlaveDescribeResponse)(nil), "ci.SlaveDescribeResponse")
	proto.RegisterType((*SlaveDeleteRequest)(nil), "ci.SlaveDeleteRequest")
	proto.RegisterType((*SlaveRestartRequest)(nil), "ci.SlaveRestartRequest")
	proto.RegisterType((*SlaveRestartResponse)(nil), "ci.SlaveRestartResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Slaves service

type SlavesClient interface {
	List(ctx context.Context, in *dtypes.VoidRequest, opts ...grpc.CallOption) (*SlaveListResponse, error)
	Describe(ctx context.Context, in *SlaveDescribeRequest, opts ...grpc.CallOption) (*SlaveDescribeResponse, error)
	Create(ctx context.Context, in *SlaveCreateRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error)
	Delete(ctx context.Context, in *SlaveDeleteRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error)
	Restart(ctx context.Context, in *SlaveRestartRequest, opts ...grpc.CallOption) (*SlaveRestartResponse, error)
}

type slavesClient struct {
	cc *grpc.ClientConn
}

func NewSlavesClient(cc *grpc.ClientConn) SlavesClient {
	return &slavesClient{cc}
}

func (c *slavesClient) List(ctx context.Context, in *dtypes.VoidRequest, opts ...grpc.CallOption) (*SlaveListResponse, error) {
	out := new(SlaveListResponse)
	err := grpc.Invoke(ctx, "/ci.Slaves/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slavesClient) Describe(ctx context.Context, in *SlaveDescribeRequest, opts ...grpc.CallOption) (*SlaveDescribeResponse, error) {
	out := new(SlaveDescribeResponse)
	err := grpc.Invoke(ctx, "/ci.Slaves/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slavesClient) Create(ctx context.Context, in *SlaveCreateRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error) {
	out := new(dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/ci.Slaves/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slavesClient) Delete(ctx context.Context, in *SlaveDeleteRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error) {
	out := new(dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/ci.Slaves/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slavesClient) Restart(ctx context.Context, in *SlaveRestartRequest, opts ...grpc.CallOption) (*SlaveRestartResponse, error) {
	out := new(SlaveRestartResponse)
	err := grpc.Invoke(ctx, "/ci.Slaves/Restart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Slaves service

type SlavesServer interface {
	List(context.Context, *dtypes.VoidRequest) (*SlaveListResponse, error)
	Describe(context.Context, *SlaveDescribeRequest) (*SlaveDescribeResponse, error)
	Create(context.Context, *SlaveCreateRequest) (*dtypes.LongRunningResponse, error)
	Delete(context.Context, *SlaveDeleteRequest) (*dtypes.LongRunningResponse, error)
	Restart(context.Context, *SlaveRestartRequest) (*SlaveRestartResponse, error)
}

func RegisterSlavesServer(s *grpc.Server, srv SlavesServer) {
	s.RegisterService(&_Slaves_serviceDesc, srv)
}

func _Slaves_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(dtypes.VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SlavesServer).List(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Slaves_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SlaveDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SlavesServer).Describe(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Slaves_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SlaveCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SlavesServer).Create(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Slaves_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SlaveDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SlavesServer).Delete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Slaves_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SlaveRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SlavesServer).Restart(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Slaves_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ci.Slaves",
	HandlerType: (*SlavesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Slaves_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Slaves_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Slaves_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Slaves_Delete_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Slaves_Restart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor3 = []byte{
	// 899 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x6f, 0xdb, 0x36,
	0x14, 0x47, 0xe4, 0xc4, 0x8e, 0x9f, 0xeb, 0xb4, 0x65, 0xda, 0x4c, 0xd5, 0x32, 0x34, 0xd5, 0xd6,
	0xb5, 0x0d, 0x06, 0x7b, 0x4d, 0x6f, 0x3b, 0x0c, 0x28, 0x9a, 0x43, 0x81, 0xb5, 0x17, 0x79, 0xed,
	0x65, 0xc0, 0x0c, 0x5a, 0x7a, 0x49, 0x34, 0xcb, 0xa2, 0x2a, 0x52, 0xde, 0x82, 0x61, 0x97, 0x7d,
	0x85, 0x7d, 0xa0, 0x1d, 0xf6, 0x11, 0x76, 0xd9, 0x6d, 0x97, 0x7d, 0x90, 0x91, 0x8f, 0x94, 0xfc,
	0x27, 0x6e, 0x80, 0x5c, 0x6c, 0xf2, 0xc7, 0xc7, 0xdf, 0x23, 0x7f, 0xfc, 0xbd, 0x27, 0xe8, 0xc9,
	0x8c, 0xcf, 0x71, 0x50, 0x94, 0x42, 0x09, 0xe6, 0xc5, 0x69, 0x70, 0x78, 0x2e, 0xc4, 0x79, 0x86,
	0x43, 0x5e, 0xa4, 0x43, 0x9e, 0xe7, 0x42, 0x71, 0x95, 0x8a, 0x5c, 0xda, 0x88, 0xe0, 0xc0, 0xc0,
	0x89, 0xba, 0x2c, 0x50, 0x0e, 0xe9, 0x77, 0x19, 0x97, 0xf2, 0x62, 0x38, 0xff, 0x7a, 0xf0, 0xdc,
	0x0c, 0x2c, 0x1e, 0xfe, 0x08, 0x77, 0x47, 0x26, 0xc1, 0x9b, 0x54, 0xaa, 0x08, 0x65, 0xa1, 0x99,
	0x90, 0x7d, 0x09, 0x6d, 0xa9, 0x69, 0x2b, 0xe9, 0x6f, 0x1d, 0x6d, 0x3d, 0xed, 0x9d, 0xec, 0x0d,
	0x2c, 0xe3, 0x60, 0x44, 0x68, 0xe4, 0x56, 0xd9, 0x23, 0x1d, 0x67, 0x36, 0x4b, 0xdf, 0x3b, 0x6a,
	0xe9, 0xb8, 0xee, 0x20, 0x4e, 0x07, 0x44, 0x17, 0xb9, 0x85, 0xf0, 0x05, 0xec, 0x10, 0xc0, 0x18,
	0x6c, 0xe7, 0x7c, 0x86, 0xc4, 0xd8, 0x8d, 0x68, 0xcc, 0x0e, 0x9a, 0x3c, 0x1e, 0xa1, 0x6e, 0x16,
	0x7e, 0x00, 0x46, 0x9b, 0x5e, 0x95, 0xc8, 0x15, 0x46, 0xf8, 0xa1, 0x42, 0xa9, 0xd8, 0x21, 0x74,
	0xf1, 0x17, 0x8c, 0x2b, 0x25, 0x4a, 0x7b, 0xb0, 0x9d, 0x68, 0x01, 0x18, 0xae, 0x8c, 0x4f, 0x30,
	0x6b, 0xb8, 0xec, 0x8c, 0x3d, 0x86, 0x3d, 0xcd, 0x5a, 0xaa, 0xaa, 0x18, 0xcb, 0xb8, 0x4c, 0x0b,
	0xe5, 0xb7, 0x68, 0xbd, 0xef, 0xd0, 0x11, 0x81, 0xe1, 0x9f, 0x1e, 0xf4, 0x47, 0x16, 0x79, 0x25,
	0xf2, 0xb3, 0xf4, 0x9c, 0x05, 0xb0, 0xab, 0x25, 0x9a, 0xa7, 0x09, 0x96, 0xee, 0xd0, 0xcd, 0x9c,
	0xed, 0x81, 0x27, 0x46, 0x2e, 0x91, 0x1e, 0xb1, 0x27, 0x70, 0xfb, 0x27, 0xcc, 0xa7, 0x69, 0x2e,
	0xc7, 0x73, 0x2c, 0xa5, 0x7e, 0x0f, 0x97, 0x65, 0xcf, 0xc1, 0xef, 0x2d, 0xca, 0x9e, 0xc1, 0x1d,
	0xc9, 0x33, 0x35, 0xe1, 0x12, 0x9b, 0xc8, 0x6d, 0x8a, 0xbc, 0x5d, 0xe3, 0x75, 0xa8, 0x16, 0xac,
	0x14, 0x19, 0xfa, 0x3b, 0x56, 0x30, 0x33, 0x36, 0x12, 0x18, 0xe1, 0x64, 0xc1, 0x63, 0xf4, 0xdb,
	0xb4, 0xb0, 0x00, 0x96, 0x24, 0xe8, 0xac, 0x48, 0xf0, 0x10, 0x7a, 0x33, 0x2e, 0x15, 0x96, 0x63,
	0x9e, 0x24, 0xa5, 0xbf, 0x4b, 0x8b, 0x60, 0xa1, 0x97, 0x1a, 0x59, 0x55, 0xb6, 0xbb, 0xae, 0xec,
	0x63, 0xe8, 0x48, 0x8c, 0x4b, 0x54, 0xd2, 0x07, 0xb2, 0x43, 0x8f, 0x9e, 0xd9, 0x42, 0x51, 0xbd,
	0x16, 0xfe, 0xb3, 0x05, 0x1d, 0x07, 0x6a, 0x63, 0xdc, 0xaa, 0xf5, 0xa8, 0x64, 0xa3, 0x5f, 0xcf,
	0x61, 0xef, 0x34, 0xc4, 0x3e, 0x87, 0x7e, 0x1d, 0xa2, 0xc4, 0x14, 0x73, 0xa7, 0x66, 0xbd, 0xef,
	0x7b, 0x83, 0xb1, 0x2f, 0x74, 0x6a, 0x79, 0x31, 0x9e, 0xe2, 0x25, 0xe9, 0x69, 0x52, 0x1b, 0xeb,
	0x8e, 0x46, 0xaf, 0xbf, 0xc3, 0x4b, 0x6d, 0x17, 0x79, 0xa1, 0xff, 0xd9, 0x73, 0xb8, 0x95, 0x88,
	0x78, 0xaa, 0xef, 0x57, 0x62, 0x21, 0xa4, 0x16, 0xb4, 0x45, 0xa6, 0xd5, 0xa7, 0x3c, 0x25, 0x3c,
	0xd2, 0x70, 0xd4, 0x4b, 0x9a, 0xb1, 0x64, 0x5f, 0x81, 0xbe, 0xff, 0x1c, 0x73, 0xda, 0x41, 0x12,
	0xf7, 0x4e, 0xfa, 0x66, 0xc3, 0x5b, 0x83, 0x52, 0x7c, 0x77, 0x56, 0x0f, 0xc3, 0x77, 0xd0, 0x6d,
	0x70, 0x76, 0x07, 0x5a, 0x55, 0x99, 0xb9, 0x2b, 0x99, 0xa1, 0x71, 0x8a, 0xb9, 0x25, 0xd9, 0xdb,
	0xde, 0xa2, 0x99, 0x93, 0x8b, 0xb8, 0x94, 0x3f, 0x8b, 0x32, 0x71, 0x96, 0x68, 0xe6, 0xe1, 0x6b,
	0x80, 0xc5, 0xf9, 0x36, 0xf0, 0xde, 0x83, 0x1d, 0x9c, 0xf1, 0x34, 0x73, 0xa4, 0x76, 0x62, 0x7c,
	0xc1, 0x2b, 0x75, 0xe1, 0xd8, 0x68, 0x1c, 0x1e, 0xc3, 0x3d, 0x2a, 0x98, 0x53, 0x34, 0x1e, 0x9f,
	0x34, 0x25, 0xb3, 0xa1, 0xe8, 0xc2, 0xbf, 0x3c, 0xb8, 0xbf, 0x16, 0x7c, 0xc3, 0xb2, 0xaf, 0x59,
	0xbd, 0xa5, 0x52, 0x5e, 0xb1, 0x90, 0x39, 0x5a, 0x6b, 0xd9, 0x42, 0xda, 0x81, 0xb9, 0x48, 0x70,
	0xec, 0xe8, 0xad, 0xe3, 0xc1, 0x40, 0x96, 0xda, 0x54, 0xa9, 0x38, 0x3b, 0xcb, 0xd2, 0x1c, 0xf5,
	0x8b, 0x70, 0xa9, 0xab, 0xc2, 0xda, 0xbe, 0xef, 0xd0, 0x88, 0x40, 0xa3, 0x08, 0x79, 0xda, 0x79,
	0xdf, 0x4e, 0x56, 0x2a, 0xb5, 0xb3, 0x56, 0xa9, 0x5a, 0x55, 0x39, 0xad, 0x9c, 0xe7, 0xcd, 0x70,
	0x43, 0x43, 0xe8, 0x6e, 0x68, 0x08, 0xec, 0x33, 0x80, 0x98, 0xda, 0x4f, 0x32, 0xe6, 0x8a, 0x8c,
	0xaf, 0x6b, 0xcd, 0x21, 0x2f, 0x55, 0xf8, 0xd4, 0xb5, 0xa8, 0x53, 0xcc, 0x50, 0x5d, 0xab, 0xf7,
	0x33, 0xd8, 0xb7, 0x2d, 0x11, 0x29, 0xc1, 0x75, 0xa1, 0xdf, 0xba, 0x67, 0x6c, 0x42, 0x6f, 0xf6,
	0x30, 0x27, 0xff, 0xb6, 0xa0, 0x4d, 0x04, 0x92, 0xbd, 0x85, 0x6d, 0xd3, 0xd2, 0xd9, 0x7e, 0x1d,
	0xfa, 0x5e, 0xa4, 0x89, 0xcb, 0x1d, 0xdc, 0x6f, 0xfa, 0xf4, 0x72, 0xdb, 0x0f, 0x1f, 0xfc, 0xfe,
	0xf7, 0x7f, 0x7f, 0x78, 0xfb, 0xec, 0x2e, 0x7d, 0x5b, 0xe2, 0x54, 0x7f, 0x2b, 0x86, 0xb6, 0x8d,
	0x33, 0x0e, 0xbb, 0xb5, 0x5d, 0x98, 0xdf, 0xec, 0x5e, 0xb3, 0x5b, 0xf0, 0x60, 0xc3, 0x8a, 0xe3,
	0x3e, 0x22, 0xee, 0x80, 0xf9, 0x57, 0xb8, 0x87, 0xbf, 0x9a, 0xbb, 0xff, 0xc6, 0x7e, 0x80, 0xb6,
	0xed, 0xf7, 0xec, 0xa0, 0xa1, 0x59, 0xf9, 0x00, 0x04, 0x9f, 0xd6, 0x77, 0x79, 0x23, 0xf2, 0xf3,
	0xa8, 0xca, 0xf3, 0x54, 0xff, 0xd5, 0x09, 0x0e, 0x29, 0xc1, 0x41, 0x70, 0xf5, 0xf0, 0xdf, 0x6c,
	0x1d, 0xb3, 0x31, 0xb4, 0xed, 0x4b, 0x2d, 0x91, 0xaf, 0x3c, 0xdd, 0xf5, 0xe4, 0xee, 0xf4, 0xc7,
	0x1f, 0x3f, 0x3d, 0x42, 0xc7, 0xbd, 0x1a, 0xfb, 0x64, 0xf1, 0x15, 0x5c, 0x79, 0xf2, 0xc0, 0xbf,
	0xba, 0xe0, 0xf8, 0x9f, 0x10, 0xff, 0x23, 0xf6, 0xf0, 0x63, 0xfc, 0xc3, 0x12, 0x27, 0x42, 0xa8,
	0x49, 0x9b, 0xbe, 0xda, 0x2f, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x72, 0x0e, 0x5e, 0x9e, 0x16,
	0x08, 0x00, 0x00,
}
