<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: slave.proto
//   Date: 2016-04-19 16:27:21

namespace ci {

  class SlaveListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \ci\Slave[]  */
    public $slaves = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.SlaveListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE slaves = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "slaves";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ci\Slave';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \ci\SlaveListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \ci\SlaveListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <slaves> has a value
     *
     * @return boolean
     */
    public function hasSlaves(){
      return $this->_has(2);
    }
    
    /**
     * Clear <slaves> value
     *
     * @return \ci\SlaveListResponse
     */
    public function clearSlaves(){
      return $this->_clear(2);
    }
    
    /**
     * Get <slaves> value
     *
     * @param int $idx
     * @return \ci\Slave
     */
    public function getSlaves($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <slaves> value
     *
     * @param \ci\Slave $value
     * @return \ci\SlaveListResponse
     */
    public function setSlaves(\ci\Slave $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <slaves>
     *
     * @return \ci\Slave[]
     */
    public function getSlavesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <slaves>
     *
     * @param \ci\Slave $value
     * @return \ci\SlaveListResponse
     */
    public function addSlaves(\ci\Slave $value){
     return $this->_add(2, $value);
    }
  }
}

namespace ci {

  class Slave extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.Slave');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ci\Slave
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ci\Slave
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \ci\Slave
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param string $value
     * @return \ci\Slave
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ci {

  class SlaveCreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $executors = null;
    
    /**  @var string */
    public $labels = null;
    
    /**  @var string */
    public $user_startup_script = null;
    
    /**  @var string */
    public $saltbase_version = null;
    
    /**  @var string */
    public $ci_starter_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.SlaveCreateRequest');

      // OPTIONAL INT32 executors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "executors";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING labels = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING user_startup_script = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "user_startup_script";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING saltbase_version = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "saltbase_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ci_starter_version = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "ci_starter_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <executors> has a value
     *
     * @return boolean
     */
    public function hasExecutors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <executors> value
     *
     * @return \ci\SlaveCreateRequest
     */
    public function clearExecutors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <executors> value
     *
     * @return int
     */
    public function getExecutors(){
      return $this->_get(1);
    }
    
    /**
     * Set <executors> value
     *
     * @param int $value
     * @return \ci\SlaveCreateRequest
     */
    public function setExecutors( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(2);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \ci\SlaveCreateRequest
     */
    public function clearLabels(){
      return $this->_clear(2);
    }
    
    /**
     * Get <labels> value
     *
     * @return string
     */
    public function getLabels(){
      return $this->_get(2);
    }
    
    /**
     * Set <labels> value
     *
     * @param string $value
     * @return \ci\SlaveCreateRequest
     */
    public function setLabels( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <user_startup_script> has a value
     *
     * @return boolean
     */
    public function hasUserStartupScript(){
      return $this->_has(3);
    }
    
    /**
     * Clear <user_startup_script> value
     *
     * @return \ci\SlaveCreateRequest
     */
    public function clearUserStartupScript(){
      return $this->_clear(3);
    }
    
    /**
     * Get <user_startup_script> value
     *
     * @return string
     */
    public function getUserStartupScript(){
      return $this->_get(3);
    }
    
    /**
     * Set <user_startup_script> value
     *
     * @param string $value
     * @return \ci\SlaveCreateRequest
     */
    public function setUserStartupScript( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <saltbase_version> has a value
     *
     * @return boolean
     */
    public function hasSaltbaseVersion(){
      return $this->_has(4);
    }
    
    /**
     * Clear <saltbase_version> value
     *
     * @return \ci\SlaveCreateRequest
     */
    public function clearSaltbaseVersion(){
      return $this->_clear(4);
    }
    
    /**
     * Get <saltbase_version> value
     *
     * @return string
     */
    public function getSaltbaseVersion(){
      return $this->_get(4);
    }
    
    /**
     * Set <saltbase_version> value
     *
     * @param string $value
     * @return \ci\SlaveCreateRequest
     */
    public function setSaltbaseVersion( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <ci_starter_version> has a value
     *
     * @return boolean
     */
    public function hasCiStarterVersion(){
      return $this->_has(5);
    }
    
    /**
     * Clear <ci_starter_version> value
     *
     * @return \ci\SlaveCreateRequest
     */
    public function clearCiStarterVersion(){
      return $this->_clear(5);
    }
    
    /**
     * Get <ci_starter_version> value
     *
     * @return string
     */
    public function getCiStarterVersion(){
      return $this->_get(5);
    }
    
    /**
     * Set <ci_starter_version> value
     *
     * @param string $value
     * @return \ci\SlaveCreateRequest
     */
    public function setCiStarterVersion( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace ci {

  class SlaveDescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.SlaveDescribeRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ci\SlaveDescribeRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ci\SlaveDescribeRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ci {

  class SlaveDescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $executors = null;
    
    /**  @var string */
    public $node_status = null;
    
    /**  @var string */
    public $offline_reason = null;
    
    /**  @var string */
    public $label = null;
    
    /**  @var string */
    public $provider = null;
    
    /**  @var string */
    public $sku = null;
    
    /**  @var string */
    public $startup_script = null;
    
    /**  @var string */
    public $created_at = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.SlaveDescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 executors = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "executors";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING node_status = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "node_status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING offline_reason = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "offline_reason";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING label = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "label";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING provider = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "provider";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sku = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "sku";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING startup_script = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "startup_script";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \ci\SlaveDescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \ci\SlaveDescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ci\SlaveDescribeResponse
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ci\SlaveDescribeResponse
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <executors> has a value
     *
     * @return boolean
     */
    public function hasExecutors(){
      return $this->_has(3);
    }
    
    /**
     * Clear <executors> value
     *
     * @return \ci\SlaveDescribeResponse
     */
    public function clearExecutors(){
      return $this->_clear(3);
    }
    
    /**
     * Get <executors> value
     *
     * @return int
     */
    public function getExecutors(){
      return $this->_get(3);
    }
    
    /**
     * Set <executors> value
     *
     * @param int $value
     * @return \ci\SlaveDescribeResponse
     */
    public function setExecutors( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <node_status> has a value
     *
     * @return boolean
     */
    public function hasNodeStatus(){
      return $this->_has(4);
    }
    
    /**
     * Clear <node_status> value
     *
     * @return \ci\SlaveDescribeResponse
     */
    public function clearNodeStatus(){
      return $this->_clear(4);
    }
    
    /**
     * Get <node_status> value
     *
     * @return string
     */
    public function getNodeStatus(){
      return $this->_get(4);
    }
    
    /**
     * Set <node_status> value
     *
     * @param string $value
     * @return \ci\SlaveDescribeResponse
     */
    public function setNodeStatus( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <offline_reason> has a value
     *
     * @return boolean
     */
    public function hasOfflineReason(){
      return $this->_has(5);
    }
    
    /**
     * Clear <offline_reason> value
     *
     * @return \ci\SlaveDescribeResponse
     */
    public function clearOfflineReason(){
      return $this->_clear(5);
    }
    
    /**
     * Get <offline_reason> value
     *
     * @return string
     */
    public function getOfflineReason(){
      return $this->_get(5);
    }
    
    /**
     * Set <offline_reason> value
     *
     * @param string $value
     * @return \ci\SlaveDescribeResponse
     */
    public function setOfflineReason( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <label> has a value
     *
     * @return boolean
     */
    public function hasLabel(){
      return $this->_has(6);
    }
    
    /**
     * Clear <label> value
     *
     * @return \ci\SlaveDescribeResponse
     */
    public function clearLabel(){
      return $this->_clear(6);
    }
    
    /**
     * Get <label> value
     *
     * @return string
     */
    public function getLabel(){
      return $this->_get(6);
    }
    
    /**
     * Set <label> value
     *
     * @param string $value
     * @return \ci\SlaveDescribeResponse
     */
    public function setLabel( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <provider> has a value
     *
     * @return boolean
     */
    public function hasProvider(){
      return $this->_has(7);
    }
    
    /**
     * Clear <provider> value
     *
     * @return \ci\SlaveDescribeResponse
     */
    public function clearProvider(){
      return $this->_clear(7);
    }
    
    /**
     * Get <provider> value
     *
     * @return string
     */
    public function getProvider(){
      return $this->_get(7);
    }
    
    /**
     * Set <provider> value
     *
     * @param string $value
     * @return \ci\SlaveDescribeResponse
     */
    public function setProvider( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <sku> has a value
     *
     * @return boolean
     */
    public function hasSku(){
      return $this->_has(8);
    }
    
    /**
     * Clear <sku> value
     *
     * @return \ci\SlaveDescribeResponse
     */
    public function clearSku(){
      return $this->_clear(8);
    }
    
    /**
     * Get <sku> value
     *
     * @return string
     */
    public function getSku(){
      return $this->_get(8);
    }
    
    /**
     * Set <sku> value
     *
     * @param string $value
     * @return \ci\SlaveDescribeResponse
     */
    public function setSku( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <startup_script> has a value
     *
     * @return boolean
     */
    public function hasStartupScript(){
      return $this->_has(9);
    }
    
    /**
     * Clear <startup_script> value
     *
     * @return \ci\SlaveDescribeResponse
     */
    public function clearStartupScript(){
      return $this->_clear(9);
    }
    
    /**
     * Get <startup_script> value
     *
     * @return string
     */
    public function getStartupScript(){
      return $this->_get(9);
    }
    
    /**
     * Set <startup_script> value
     *
     * @param string $value
     * @return \ci\SlaveDescribeResponse
     */
    public function setStartupScript( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(10);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \ci\SlaveDescribeResponse
     */
    public function clearCreatedAt(){
      return $this->_clear(10);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(10);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \ci\SlaveDescribeResponse
     */
    public function setCreatedAt( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace ci {

  class SlaveDeleteRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.SlaveDeleteRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ci\SlaveDeleteRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ci\SlaveDeleteRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ci {

  class SlaveRestartRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.SlaveRestartRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \ci\SlaveRestartRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \ci\SlaveRestartRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ci {

  class SlaveRestartResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.SlaveRestartResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \ci\SlaveRestartResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \ci\SlaveRestartResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ci {

  class SlavesClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param dtypes\VoidRequest $input
     */
    public function List(\dtypes\VoidRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Slaves/List', $argument, '\ci\SlaveListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param ci\SlaveDescribeRequest $input
     */
    public function Describe(\ci\SlaveDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Slaves/Describe', $argument, '\ci\SlaveDescribeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param ci\SlaveCreateRequest $input
     */
    public function Create(\ci\SlaveCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Slaves/Create', $argument, '\dtypes\LongRunningResponse::deserialize', $metadata, $options);
    }
    /**
     * @param ci\SlaveDeleteRequest $input
     */
    public function Delete(\ci\SlaveDeleteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Slaves/Delete', $argument, '\dtypes\LongRunningResponse::deserialize', $metadata, $options);
    }
    /**
     * @param ci\SlaveRestartRequest $input
     */
    public function Restart(\ci\SlaveRestartRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Slaves/Restart', $argument, '\ci\SlaveRestartResponse::deserialize', $metadata, $options);
    }
  }
}
