<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: build.proto
//   Date: 2016-04-19 16:27:21

namespace ci {

  class BuildDescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $job_name = null;
    
    /**  @var int */
    public $number = null;
    
    /**  @var string */
    public $console = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.BuildDescribeRequest');

      // OPTIONAL STRING job_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "job_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 number = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING console = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "console";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <job_name> has a value
     *
     * @return boolean
     */
    public function hasJobName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <job_name> value
     *
     * @return \ci\BuildDescribeRequest
     */
    public function clearJobName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <job_name> value
     *
     * @return string
     */
    public function getJobName(){
      return $this->_get(1);
    }
    
    /**
     * Set <job_name> value
     *
     * @param string $value
     * @return \ci\BuildDescribeRequest
     */
    public function setJobName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <number> value
     *
     * @return \ci\BuildDescribeRequest
     */
    public function clearNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \ci\BuildDescribeRequest
     */
    public function setNumber( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <console> has a value
     *
     * @return boolean
     */
    public function hasConsole(){
      return $this->_has(3);
    }
    
    /**
     * Clear <console> value
     *
     * @return \ci\BuildDescribeRequest
     */
    public function clearConsole(){
      return $this->_clear(3);
    }
    
    /**
     * Get <console> value
     *
     * @return string
     */
    public function getConsole(){
      return $this->_get(3);
    }
    
    /**
     * Set <console> value
     *
     * @param string $value
     * @return \ci\BuildDescribeRequest
     */
    public function setConsole( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace ci {

  class BuildDescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var int */
    public $build_number = null;
    
    /**  @var string */
    public $job_name = null;
    
    /**  @var string */
    public $base_url = null;
    
    /**  @var string */
    public $result = null;
    
    /**  @var string */
    public $console_output = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.BuildDescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL INT64 build_number = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "build_number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING job_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "job_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING base_url = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "base_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING result = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING console_output = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "console_output";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \ci\BuildDescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \ci\BuildDescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <build_number> has a value
     *
     * @return boolean
     */
    public function hasBuildNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <build_number> value
     *
     * @return \ci\BuildDescribeResponse
     */
    public function clearBuildNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <build_number> value
     *
     * @return int
     */
    public function getBuildNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <build_number> value
     *
     * @param int $value
     * @return \ci\BuildDescribeResponse
     */
    public function setBuildNumber( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <job_name> has a value
     *
     * @return boolean
     */
    public function hasJobName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <job_name> value
     *
     * @return \ci\BuildDescribeResponse
     */
    public function clearJobName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <job_name> value
     *
     * @return string
     */
    public function getJobName(){
      return $this->_get(3);
    }
    
    /**
     * Set <job_name> value
     *
     * @param string $value
     * @return \ci\BuildDescribeResponse
     */
    public function setJobName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <base_url> has a value
     *
     * @return boolean
     */
    public function hasBaseUrl(){
      return $this->_has(4);
    }
    
    /**
     * Clear <base_url> value
     *
     * @return \ci\BuildDescribeResponse
     */
    public function clearBaseUrl(){
      return $this->_clear(4);
    }
    
    /**
     * Get <base_url> value
     *
     * @return string
     */
    public function getBaseUrl(){
      return $this->_get(4);
    }
    
    /**
     * Set <base_url> value
     *
     * @param string $value
     * @return \ci\BuildDescribeResponse
     */
    public function setBaseUrl( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(5);
    }
    
    /**
     * Clear <result> value
     *
     * @return \ci\BuildDescribeResponse
     */
    public function clearResult(){
      return $this->_clear(5);
    }
    
    /**
     * Get <result> value
     *
     * @return string
     */
    public function getResult(){
      return $this->_get(5);
    }
    
    /**
     * Set <result> value
     *
     * @param string $value
     * @return \ci\BuildDescribeResponse
     */
    public function setResult( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <console_output> has a value
     *
     * @return boolean
     */
    public function hasConsoleOutput(){
      return $this->_has(6);
    }
    
    /**
     * Clear <console_output> value
     *
     * @return \ci\BuildDescribeResponse
     */
    public function clearConsoleOutput(){
      return $this->_clear(6);
    }
    
    /**
     * Get <console_output> value
     *
     * @return string
     */
    public function getConsoleOutput(){
      return $this->_get(6);
    }
    
    /**
     * Set <console_output> value
     *
     * @param string $value
     * @return \ci\BuildDescribeResponse
     */
    public function setConsoleOutput( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace ci {

  class BuildListRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $job_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.BuildListRequest');

      // OPTIONAL STRING job_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "job_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <job_name> has a value
     *
     * @return boolean
     */
    public function hasJobName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <job_name> value
     *
     * @return \ci\BuildListRequest
     */
    public function clearJobName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <job_name> value
     *
     * @return string
     */
    public function getJobName(){
      return $this->_get(1);
    }
    
    /**
     * Set <job_name> value
     *
     * @param string $value
     * @return \ci\BuildListRequest
     */
    public function setJobName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ci {

  class BuildListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var string */
    public $job_name = null;
    
    /**  @var \ci\Build[]  */
    public $builds = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.BuildListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING job_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "job_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE builds = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "builds";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ci\Build';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \ci\BuildListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \ci\BuildListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <job_name> has a value
     *
     * @return boolean
     */
    public function hasJobName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <job_name> value
     *
     * @return \ci\BuildListResponse
     */
    public function clearJobName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <job_name> value
     *
     * @return string
     */
    public function getJobName(){
      return $this->_get(2);
    }
    
    /**
     * Set <job_name> value
     *
     * @param string $value
     * @return \ci\BuildListResponse
     */
    public function setJobName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <builds> has a value
     *
     * @return boolean
     */
    public function hasBuilds(){
      return $this->_has(3);
    }
    
    /**
     * Clear <builds> value
     *
     * @return \ci\BuildListResponse
     */
    public function clearBuilds(){
      return $this->_clear(3);
    }
    
    /**
     * Get <builds> value
     *
     * @param int $idx
     * @return \ci\Build
     */
    public function getBuilds($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <builds> value
     *
     * @param \ci\Build $value
     * @return \ci\BuildListResponse
     */
    public function setBuilds(\ci\Build $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <builds>
     *
     * @return \ci\Build[]
     */
    public function getBuildsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <builds>
     *
     * @param \ci\Build $value
     * @return \ci\BuildListResponse
     */
    public function addBuilds(\ci\Build $value){
     return $this->_add(3, $value);
    }
  }
}

namespace ci {

  class Build extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $build_number = null;
    
    /**  @var string */
    public $result = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.Build');

      // OPTIONAL INT64 build_number = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "build_number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING result = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <build_number> has a value
     *
     * @return boolean
     */
    public function hasBuildNumber(){
      return $this->_has(1);
    }
    
    /**
     * Clear <build_number> value
     *
     * @return \ci\Build
     */
    public function clearBuildNumber(){
      return $this->_clear(1);
    }
    
    /**
     * Get <build_number> value
     *
     * @return int
     */
    public function getBuildNumber(){
      return $this->_get(1);
    }
    
    /**
     * Set <build_number> value
     *
     * @param int $value
     * @return \ci\Build
     */
    public function setBuildNumber( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(2);
    }
    
    /**
     * Clear <result> value
     *
     * @return \ci\Build
     */
    public function clearResult(){
      return $this->_clear(2);
    }
    
    /**
     * Get <result> value
     *
     * @return string
     */
    public function getResult(){
      return $this->_get(2);
    }
    
    /**
     * Set <result> value
     *
     * @param string $value
     * @return \ci\Build
     */
    public function setResult( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ci {

  class BuildsClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param ci\BuildDescribeRequest $input
     */
    public function Describe(\ci\BuildDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Builds/Describe', $argument, '\ci\BuildDescribeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param ci\BuildListRequest $input
     */
    public function List(\ci\BuildListRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Builds/List', $argument, '\ci\BuildListResponse::deserialize', $metadata, $options);
    }
  }
}
