// Code generated by protoc-gen-go.
// source: job.proto
// DO NOT EDIT!

package ci

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type JobListRequest struct {
	Parents string `protobuf:"bytes,1,opt,name=parents" json:"parents,omitempty"`
}

func (m *JobListRequest) Reset()                    { *m = JobListRequest{} }
func (m *JobListRequest) String() string            { return proto.CompactTextString(m) }
func (*JobListRequest) ProtoMessage()               {}
func (*JobListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type JobListResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Jobs   []*Job         `protobuf:"bytes,2,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *JobListResponse) Reset()                    { *m = JobListResponse{} }
func (m *JobListResponse) String() string            { return proto.CompactTextString(m) }
func (*JobListResponse) ProtoMessage()               {}
func (*JobListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *JobListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *JobListResponse) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type JobBuildRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Parents string `protobuf:"bytes,2,opt,name=parents" json:"parents,omitempty"`
	Param   string `protobuf:"bytes,3,opt,name=param" json:"param,omitempty"`
}

func (m *JobBuildRequest) Reset()                    { *m = JobBuildRequest{} }
func (m *JobBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*JobBuildRequest) ProtoMessage()               {}
func (*JobBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type JobDescribeRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Parents string `protobuf:"bytes,2,opt,name=parents" json:"parents,omitempty"`
}

func (m *JobDescribeRequest) Reset()                    { *m = JobDescribeRequest{} }
func (m *JobDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*JobDescribeRequest) ProtoMessage()               {}
func (*JobDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type JobDescribeResponse struct {
	Status        *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Name          string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Parents       string         `protobuf:"bytes,3,opt,name=parents" json:"parents,omitempty"`
	Description   string         `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	DisplayName   string         `protobuf:"bytes,5,opt,name=display_name" json:"display_name,omitempty"`
	BuildCount    int64          `protobuf:"varint,6,opt,name=build_count" json:"build_count,omitempty"`
	JobColor      string         `protobuf:"bytes,7,opt,name=job_color" json:"job_color,omitempty"`
	BuildsCommand string         `protobuf:"bytes,8,opt,name=builds_command" json:"builds_command,omitempty"`
}

func (m *JobDescribeResponse) Reset()                    { *m = JobDescribeResponse{} }
func (m *JobDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*JobDescribeResponse) ProtoMessage()               {}
func (*JobDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *JobDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type JobDeleteRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Parents string `protobuf:"bytes,2,opt,name=parents" json:"parents,omitempty"`
}

func (m *JobDeleteRequest) Reset()                    { *m = JobDeleteRequest{} }
func (m *JobDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*JobDeleteRequest) ProtoMessage()               {}
func (*JobDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type JobCreateRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Parents string `protobuf:"bytes,2,opt,name=parents" json:"parents,omitempty"`
	ShFile  string `protobuf:"bytes,3,opt,name=sh_file" json:"sh_file,omitempty"`
}

func (m *JobCreateRequest) Reset()                    { *m = JobCreateRequest{} }
func (m *JobCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*JobCreateRequest) ProtoMessage()               {}
func (*JobCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type JobCopyRequest struct {
	Source      string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
}

func (m *JobCopyRequest) Reset()                    { *m = JobCopyRequest{} }
func (m *JobCopyRequest) String() string            { return proto.CompactTextString(m) }
func (*JobCopyRequest) ProtoMessage()               {}
func (*JobCopyRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type Job struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Parents string `protobuf:"bytes,2,opt,name=parents" json:"parents,omitempty"`
	JobType string `protobuf:"bytes,3,opt,name=job_type" json:"job_type,omitempty"`
	Color   string `protobuf:"bytes,4,opt,name=color" json:"color,omitempty"`
	Url     string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func init() {
	proto.RegisterType((*JobListRequest)(nil), "ci.JobListRequest")
	proto.RegisterType((*JobListResponse)(nil), "ci.JobListResponse")
	proto.RegisterType((*JobBuildRequest)(nil), "ci.JobBuildRequest")
	proto.RegisterType((*JobDescribeRequest)(nil), "ci.JobDescribeRequest")
	proto.RegisterType((*JobDescribeResponse)(nil), "ci.JobDescribeResponse")
	proto.RegisterType((*JobDeleteRequest)(nil), "ci.JobDeleteRequest")
	proto.RegisterType((*JobCreateRequest)(nil), "ci.JobCreateRequest")
	proto.RegisterType((*JobCopyRequest)(nil), "ci.JobCopyRequest")
	proto.RegisterType((*Job)(nil), "ci.Job")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Jobs service

type JobsClient interface {
	List(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error)
	Describe(ctx context.Context, in *JobDescribeRequest, opts ...grpc.CallOption) (*JobDescribeResponse, error)
	Create(ctx context.Context, in *JobCreateRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Copy(ctx context.Context, in *JobCopyRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Build(ctx context.Context, in *JobBuildRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Delete(ctx context.Context, in *JobDeleteRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type jobsClient struct {
	cc *grpc.ClientConn
}

func NewJobsClient(cc *grpc.ClientConn) JobsClient {
	return &jobsClient{cc}
}

func (c *jobsClient) List(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := grpc.Invoke(ctx, "/ci.Jobs/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) Describe(ctx context.Context, in *JobDescribeRequest, opts ...grpc.CallOption) (*JobDescribeResponse, error) {
	out := new(JobDescribeResponse)
	err := grpc.Invoke(ctx, "/ci.Jobs/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) Create(ctx context.Context, in *JobCreateRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/ci.Jobs/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) Copy(ctx context.Context, in *JobCopyRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/ci.Jobs/Copy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) Build(ctx context.Context, in *JobBuildRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/ci.Jobs/Build", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsClient) Delete(ctx context.Context, in *JobDeleteRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/ci.Jobs/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Jobs service

type JobsServer interface {
	List(context.Context, *JobListRequest) (*JobListResponse, error)
	Describe(context.Context, *JobDescribeRequest) (*JobDescribeResponse, error)
	Create(context.Context, *JobCreateRequest) (*dtypes.VoidResponse, error)
	Copy(context.Context, *JobCopyRequest) (*dtypes.VoidResponse, error)
	Build(context.Context, *JobBuildRequest) (*dtypes.VoidResponse, error)
	Delete(context.Context, *JobDeleteRequest) (*dtypes.VoidResponse, error)
}

func RegisterJobsServer(s *grpc.Server, srv JobsServer) {
	s.RegisterService(&_Jobs_serviceDesc, srv)
}

func _Jobs_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ci.Jobs/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).List(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ci.Jobs/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Describe(ctx, req.(*JobDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ci.Jobs/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Create(ctx, req.(*JobCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ci.Jobs/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Copy(ctx, req.(*JobCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ci.Jobs/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Build(ctx, req.(*JobBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobs_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ci.Jobs/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServer).Delete(ctx, req.(*JobDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jobs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ci.Jobs",
	HandlerType: (*JobsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Jobs_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Jobs_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Jobs_Create_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _Jobs_Copy_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _Jobs_Build_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Jobs_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func init() { proto.RegisterFile("job.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x56, 0x12, 0x37, 0x49, 0x27, 0x25, 0x2d, 0x9b, 0x10, 0x2c, 0xab, 0x42, 0xad, 0x91, 0xf8,
	0xa9, 0x2a, 0x9b, 0xa4, 0x82, 0x03, 0x42, 0x42, 0x6a, 0x39, 0x20, 0xc4, 0xa9, 0x95, 0xb8, 0x46,
	0xfe, 0xd9, 0x94, 0x45, 0x8e, 0xd7, 0x78, 0xd7, 0x48, 0x51, 0xd5, 0x0b, 0xaf, 0xc0, 0x03, 0xf1,
	0x10, 0xbc, 0x00, 0x07, 0x1e, 0x84, 0xdd, 0x59, 0x3b, 0x72, 0x8a, 0x42, 0x72, 0xc9, 0xe1, 0xcb,
	0xcc, 0xf7, 0xed, 0x7c, 0xdf, 0x8c, 0x61, 0xf7, 0x0b, 0x0f, 0xbd, 0x2c, 0xe7, 0x92, 0x93, 0x66,
	0xc4, 0x9c, 0xc3, 0x6b, 0xce, 0xaf, 0x13, 0xea, 0x07, 0x19, 0xf3, 0x83, 0x34, 0xe5, 0x32, 0x90,
	0x8c, 0xa7, 0xc2, 0x54, 0x38, 0x23, 0x0d, 0xc7, 0x72, 0x91, 0x51, 0xe1, 0xe3, 0xaf, 0xc1, 0xdd,
	0x63, 0xe8, 0x7f, 0xe0, 0xe1, 0x47, 0x26, 0xe4, 0x25, 0xfd, 0x5a, 0x50, 0x21, 0xc9, 0x3e, 0x74,
	0xb2, 0x20, 0xa7, 0xa9, 0x14, 0x76, 0xe3, 0xa8, 0xf1, 0x6c, 0xd7, 0x7d, 0x0f, 0xfb, 0xcb, 0x12,
	0x91, 0x29, 0x4a, 0x4a, 0x1e, 0x41, 0x5b, 0x28, 0xfe, 0xc2, 0x94, 0xf4, 0x26, 0x7d, 0xcf, 0x50,
	0x7b, 0x57, 0x88, 0x92, 0x07, 0x60, 0xa9, 0xc7, 0x09, 0xbb, 0x79, 0xd4, 0x52, 0xff, 0x76, 0xbc,
	0x88, 0x79, 0x8a, 0xc2, 0x7d, 0x8b, 0x4c, 0xe7, 0x05, 0x4b, 0xe2, 0x4a, 0x6d, 0x0f, 0xac, 0x34,
	0x98, 0x53, 0x23, 0x55, 0xd7, 0x6e, 0x22, 0x70, 0x0f, 0x76, 0x14, 0x10, 0xcc, 0xed, 0x16, 0x3e,
	0xe5, 0x0c, 0x88, 0x22, 0x78, 0x47, 0x45, 0x94, 0xb3, 0x90, 0x6e, 0xc7, 0xe1, 0xfe, 0x6c, 0xc0,
	0x60, 0xa5, 0x6b, 0xcb, 0x21, 0x2a, 0xda, 0xe6, 0x5d, 0x5a, 0x7c, 0x0b, 0x19, 0x40, 0x2f, 0x46,
	0xca, 0x4c, 0xfb, 0x6c, 0x5b, 0x08, 0x0e, 0x61, 0x2f, 0x66, 0x22, 0x4b, 0x82, 0xc5, 0x14, 0x7b,
	0x77, 0xaa, 0xd2, 0x50, 0x0f, 0x3d, 0x8d, 0x78, 0x91, 0x4a, 0xbb, 0xad, 0xc0, 0x16, 0xb9, 0x8f,
	0x01, 0x2a, 0x28, 0xe1, 0xb9, 0xdd, 0xc1, 0xba, 0x11, 0xf4, 0xb1, 0x4e, 0x28, 0x74, 0x3e, 0x0f,
	0xd2, 0xd8, 0xee, 0xe2, 0x04, 0x63, 0x38, 0xc0, 0x01, 0x12, 0x2a, 0xb7, 0x1d, 0xfa, 0x1c, 0x5b,
	0x2e, 0x72, 0x1a, 0x6c, 0xdb, 0xa2, 0x01, 0xf1, 0x79, 0x3a, 0x63, 0x09, 0x2d, 0xdd, 0x7e, 0x89,
	0xbb, 0x71, 0xc1, 0xb3, 0x45, 0xc5, 0xd0, 0x57, 0x96, 0xf1, 0x22, 0x8f, 0x2a, 0x0e, 0xe3, 0x81,
	0x64, 0x29, 0xee, 0x5a, 0x29, 0x7d, 0x09, 0x2d, 0xd5, 0xb6, 0x49, 0xed, 0x00, 0xba, 0x7a, 0x7c,
	0xed, 0x78, 0x69, 0xa8, 0xca, 0xda, 0x98, 0x61, 0xac, 0xec, 0x41, 0xab, 0xc8, 0x13, 0xe3, 0xe0,
	0xe4, 0xb7, 0x05, 0x96, 0x22, 0x15, 0xe4, 0x0a, 0x2c, 0xbd, 0x89, 0x84, 0x94, 0x3b, 0x55, 0xdb,
	0x5c, 0x67, 0xb0, 0x82, 0x99, 0x94, 0x5d, 0xf7, 0xfb, 0xaf, 0x3f, 0x3f, 0x9a, 0x87, 0xc4, 0x51,
	0x87, 0x91, 0x89, 0x88, 0xc7, 0xe6, 0x42, 0x22, 0xe6, 0x7f, 0x7b, 0xe1, 0x8d, 0x7d, 0xbd, 0xa6,
	0x64, 0x06, 0xdd, 0x6a, 0x3b, 0xc8, 0xa8, 0x24, 0xb9, 0xb3, 0x64, 0xce, 0xc3, 0x7f, 0xf0, 0x52,
	0xe0, 0x39, 0x0a, 0x3c, 0x26, 0xc7, 0xeb, 0x05, 0xfc, 0x1b, 0xed, 0xc4, 0x2d, 0x09, 0xa1, 0x6d,
	0x12, 0x21, 0xc3, 0x92, 0x6d, 0x25, 0x20, 0x67, 0x58, 0x6d, 0xe0, 0x27, 0xce, 0xe2, 0xa5, 0xc0,
	0x29, 0x0a, 0x3c, 0x71, 0x36, 0x0b, 0xbc, 0x6e, 0x9c, 0x90, 0x14, 0x2c, 0x9d, 0xd8, 0xd2, 0xa0,
	0x5a, 0x7c, 0x6b, 0xf8, 0xdf, 0x20, 0xff, 0x2b, 0x77, 0xfc, 0x3f, 0x7e, 0x13, 0xfb, 0xad, 0x7f,
	0x53, 0xcb, 0x1b, 0xf5, 0x66, 0xb0, 0x83, 0x07, 0x4d, 0x2a, 0xf7, 0xeb, 0xe7, 0xbd, 0x46, 0x71,
	0x82, 0x8a, 0xa7, 0xce, 0xd3, 0x8d, 0x13, 0xf9, 0x78, 0x0f, 0x5a, 0x67, 0x0a, 0x6d, 0x73, 0x00,
	0x4b, 0xef, 0x56, 0xee, 0x61, 0x8d, 0x52, 0x19, 0xce, 0xc9, 0x66, 0xef, 0xc2, 0x36, 0x7e, 0x10,
	0xcf, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x63, 0xb1, 0x1d, 0xc3, 0x57, 0x05, 0x00, 0x00,
}
