<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: master.proto
//   Date: 2016-04-20 05:49:23

namespace ci {

  class MasterCreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster_name = null;
    
    /**  @var string */
    public $volume_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.MasterCreateRequest');

      // OPTIONAL STRING cluster_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING volume_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "volume_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster_name> has a value
     *
     * @return boolean
     */
    public function hasClusterName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster_name> value
     *
     * @return \ci\MasterCreateRequest
     */
    public function clearClusterName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster_name> value
     *
     * @return string
     */
    public function getClusterName(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster_name> value
     *
     * @param string $value
     * @return \ci\MasterCreateRequest
     */
    public function setClusterName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <volume_id> has a value
     *
     * @return boolean
     */
    public function hasVolumeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <volume_id> value
     *
     * @return \ci\MasterCreateRequest
     */
    public function clearVolumeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <volume_id> value
     *
     * @return string
     */
    public function getVolumeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <volume_id> value
     *
     * @param string $value
     * @return \ci\MasterCreateRequest
     */
    public function setVolumeId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ci {

  class MasterCreateResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.MasterCreateResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \ci\MasterCreateResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \ci\MasterCreateResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ci {

  class MasterDeleteRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cluster_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.MasterDeleteRequest');

      // OPTIONAL STRING cluster_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cluster_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cluster_name> has a value
     *
     * @return boolean
     */
    public function hasClusterName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cluster_name> value
     *
     * @return \ci\MasterDeleteRequest
     */
    public function clearClusterName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cluster_name> value
     *
     * @return string
     */
    public function getClusterName(){
      return $this->_get(1);
    }
    
    /**
     * Set <cluster_name> value
     *
     * @param string $value
     * @return \ci\MasterDeleteRequest
     */
    public function setClusterName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ci {

  class MasterDeleteResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ci.MasterDeleteResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \ci\MasterDeleteResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \ci\MasterDeleteResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
  }
}

namespace ci {

  class MasterClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param ci\MasterCreateRequest $input
     */
    public function Create(\ci\MasterCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Master/Create', $argument, '\ci\MasterCreateResponse::deserialize', $metadata, $options);
    }
    /**
     * @param ci\MasterDeleteRequest $input
     */
    public function Delete(\ci\MasterDeleteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ci.Master/Delete', $argument, '\ci\MasterDeleteResponse::deserialize', $metadata, $options);
    }
  }
}
