// Code generated by protoc-gen-go.
// source: ci.proto
// DO NOT EDIT!

/*
Package ci is a generated protocol buffer package.

It is generated from these files:
	ci.proto

It has these top-level messages:
	CIVoidRequest
	CICommonResponse
	CIStatusResponse
	CIBuildDescribeRequest
	CIBuildDescribeResponse
	CIBuildJobRequest
	CIGetBuildsRequest
	CIGetBuildsResponse
	CIJobsResponse
	CIDescribeJobRequest
	CIDescribeJobResponse
	CIDeleteJobRequest
	CICreateJobRequest
	CICopyJobRequest
	CIStatusMessage
	CIBuild
	CIJob
	CICreateSlaveRequest
	CICreateMasterRequest
	CICreateMasterResponse
	CIStartupConfig
	CISecrets
	MavenRepo
	DockerRepo
	CISlaveOperationRequest
	CISlaveDetailsResponse
	CISlaveOperationResponse
*/
package ci

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"
import ssh "api/ssh"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type CIVoidRequest struct {
}

func (m *CIVoidRequest) Reset()                    { *m = CIVoidRequest{} }
func (m *CIVoidRequest) String() string            { return proto.CompactTextString(m) }
func (*CIVoidRequest) ProtoMessage()               {}
func (*CIVoidRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CICommonResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *CICommonResponse) Reset()                    { *m = CICommonResponse{} }
func (m *CICommonResponse) String() string            { return proto.CompactTextString(m) }
func (*CICommonResponse) ProtoMessage()               {}
func (*CICommonResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CICommonResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type CIStatusResponse struct {
	Status   *dtypes.Status     `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	NodeList []*CIStatusMessage `protobuf:"bytes,2,rep,name=node_list" json:"node_list,omitempty"`
}

func (m *CIStatusResponse) Reset()                    { *m = CIStatusResponse{} }
func (m *CIStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*CIStatusResponse) ProtoMessage()               {}
func (*CIStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CIStatusResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CIStatusResponse) GetNodeList() []*CIStatusMessage {
	if m != nil {
		return m.NodeList
	}
	return nil
}

type CIBuildDescribeRequest struct {
	JobName     string `protobuf:"bytes,1,opt,name=job_name" json:"job_name,omitempty"`
	BuildNumber int64  `protobuf:"varint,2,opt,name=build_number" json:"build_number,omitempty"`
	Console     string `protobuf:"bytes,3,opt,name=console" json:"console,omitempty"`
}

func (m *CIBuildDescribeRequest) Reset()                    { *m = CIBuildDescribeRequest{} }
func (m *CIBuildDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*CIBuildDescribeRequest) ProtoMessage()               {}
func (*CIBuildDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CIBuildDescribeResponse struct {
	Status        *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	BuildNumber   int64          `protobuf:"varint,2,opt,name=build_number" json:"build_number,omitempty"`
	JobName       string         `protobuf:"bytes,3,opt,name=job_name" json:"job_name,omitempty"`
	BaseUrl       string         `protobuf:"bytes,4,opt,name=base_url" json:"base_url,omitempty"`
	Result        string         `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
	ConsoleOutput string         `protobuf:"bytes,6,opt,name=console_output" json:"console_output,omitempty"`
}

func (m *CIBuildDescribeResponse) Reset()                    { *m = CIBuildDescribeResponse{} }
func (m *CIBuildDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*CIBuildDescribeResponse) ProtoMessage()               {}
func (*CIBuildDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CIBuildDescribeResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type CIBuildJobRequest struct {
	JobName string `protobuf:"bytes,1,opt,name=job_name" json:"job_name,omitempty"`
	Param   string `protobuf:"bytes,2,opt,name=param" json:"param,omitempty"`
}

func (m *CIBuildJobRequest) Reset()                    { *m = CIBuildJobRequest{} }
func (m *CIBuildJobRequest) String() string            { return proto.CompactTextString(m) }
func (*CIBuildJobRequest) ProtoMessage()               {}
func (*CIBuildJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type CIGetBuildsRequest struct {
	JobName string `protobuf:"bytes,1,opt,name=job_name" json:"job_name,omitempty"`
}

func (m *CIGetBuildsRequest) Reset()                    { *m = CIGetBuildsRequest{} }
func (m *CIGetBuildsRequest) String() string            { return proto.CompactTextString(m) }
func (*CIGetBuildsRequest) ProtoMessage()               {}
func (*CIGetBuildsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type CIGetBuildsResponse struct {
	Status  *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	JobName string         `protobuf:"bytes,2,opt,name=job_name" json:"job_name,omitempty"`
	Builds  []*CIBuild     `protobuf:"bytes,3,rep,name=builds" json:"builds,omitempty"`
}

func (m *CIGetBuildsResponse) Reset()                    { *m = CIGetBuildsResponse{} }
func (m *CIGetBuildsResponse) String() string            { return proto.CompactTextString(m) }
func (*CIGetBuildsResponse) ProtoMessage()               {}
func (*CIGetBuildsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CIGetBuildsResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CIGetBuildsResponse) GetBuilds() []*CIBuild {
	if m != nil {
		return m.Builds
	}
	return nil
}

type CIJobsResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Jobs   []*CIJob       `protobuf:"bytes,2,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *CIJobsResponse) Reset()                    { *m = CIJobsResponse{} }
func (m *CIJobsResponse) String() string            { return proto.CompactTextString(m) }
func (*CIJobsResponse) ProtoMessage()               {}
func (*CIJobsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CIJobsResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CIJobsResponse) GetJobs() []*CIJob {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type CIDescribeJobRequest struct {
	JobName string `protobuf:"bytes,1,opt,name=job_name" json:"job_name,omitempty"`
}

func (m *CIDescribeJobRequest) Reset()                    { *m = CIDescribeJobRequest{} }
func (m *CIDescribeJobRequest) String() string            { return proto.CompactTextString(m) }
func (*CIDescribeJobRequest) ProtoMessage()               {}
func (*CIDescribeJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type CIDescribeJobResponse struct {
	Status        *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	JobName       string         `protobuf:"bytes,2,opt,name=job_name" json:"job_name,omitempty"`
	Description   string         `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	DisplayName   string         `protobuf:"bytes,4,opt,name=display_name" json:"display_name,omitempty"`
	BuildCount    int64          `protobuf:"varint,5,opt,name=build_count" json:"build_count,omitempty"`
	JobColor      string         `protobuf:"bytes,6,opt,name=job_color" json:"job_color,omitempty"`
	BuildsCommand string         `protobuf:"bytes,7,opt,name=builds_command" json:"builds_command,omitempty"`
}

func (m *CIDescribeJobResponse) Reset()                    { *m = CIDescribeJobResponse{} }
func (m *CIDescribeJobResponse) String() string            { return proto.CompactTextString(m) }
func (*CIDescribeJobResponse) ProtoMessage()               {}
func (*CIDescribeJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CIDescribeJobResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type CIDeleteJobRequest struct {
	JobName string `protobuf:"bytes,1,opt,name=job_name" json:"job_name,omitempty"`
}

func (m *CIDeleteJobRequest) Reset()                    { *m = CIDeleteJobRequest{} }
func (m *CIDeleteJobRequest) String() string            { return proto.CompactTextString(m) }
func (*CIDeleteJobRequest) ProtoMessage()               {}
func (*CIDeleteJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type CICreateJobRequest struct {
	JobName string `protobuf:"bytes,1,opt,name=job_name" json:"job_name,omitempty"`
	ShFile  string `protobuf:"bytes,2,opt,name=shFile" json:"shFile,omitempty"`
}

func (m *CICreateJobRequest) Reset()                    { *m = CICreateJobRequest{} }
func (m *CICreateJobRequest) String() string            { return proto.CompactTextString(m) }
func (*CICreateJobRequest) ProtoMessage()               {}
func (*CICreateJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type CICopyJobRequest struct {
	JobFrom string `protobuf:"bytes,1,opt,name=job_from" json:"job_from,omitempty"`
	JobTo   string `protobuf:"bytes,2,opt,name=job_to" json:"job_to,omitempty"`
}

func (m *CICopyJobRequest) Reset()                    { *m = CICopyJobRequest{} }
func (m *CICopyJobRequest) String() string            { return proto.CompactTextString(m) }
func (*CICopyJobRequest) ProtoMessage()               {}
func (*CICopyJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type CIStatusMessage struct {
	NodeName string `protobuf:"bytes,1,opt,name=node_name" json:"node_name,omitempty"`
	Status   string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *CIStatusMessage) Reset()                    { *m = CIStatusMessage{} }
func (m *CIStatusMessage) String() string            { return proto.CompactTextString(m) }
func (*CIStatusMessage) ProtoMessage()               {}
func (*CIStatusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type CIBuild struct {
	BuildNumber int64  `protobuf:"varint,1,opt,name=build_number" json:"build_number,omitempty"`
	Result      string `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *CIBuild) Reset()                    { *m = CIBuild{} }
func (m *CIBuild) String() string            { return proto.CompactTextString(m) }
func (*CIBuild) ProtoMessage()               {}
func (*CIBuild) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type CIJob struct {
	JobName string `protobuf:"bytes,1,opt,name=job_name" json:"job_name,omitempty"`
	Color   string `protobuf:"bytes,2,opt,name=color" json:"color,omitempty"`
}

func (m *CIJob) Reset()                    { *m = CIJob{} }
func (m *CIJob) String() string            { return proto.CompactTextString(m) }
func (*CIJob) ProtoMessage()               {}
func (*CIJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type CICreateSlaveRequest struct {
	Executors     int32  `protobuf:"varint,1,opt,name=executors" json:"executors,omitempty"`
	Labels        string `protobuf:"bytes,2,opt,name=labels" json:"labels,omitempty"`
	StartupScript string `protobuf:"bytes,3,opt,name=startup_script" json:"startup_script,omitempty"`
}

func (m *CICreateSlaveRequest) Reset()                    { *m = CICreateSlaveRequest{} }
func (m *CICreateSlaveRequest) String() string            { return proto.CompactTextString(m) }
func (*CICreateSlaveRequest) ProtoMessage()               {}
func (*CICreateSlaveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type CICreateMasterRequest struct {
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id" json:"volume_id,omitempty"`
}

func (m *CICreateMasterRequest) Reset()                    { *m = CICreateMasterRequest{} }
func (m *CICreateMasterRequest) String() string            { return proto.CompactTextString(m) }
func (*CICreateMasterRequest) ProtoMessage()               {}
func (*CICreateMasterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type CICreateMasterResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *CICreateMasterResponse) Reset()                    { *m = CICreateMasterResponse{} }
func (m *CICreateMasterResponse) String() string            { return proto.CompactTextString(m) }
func (*CICreateMasterResponse) ProtoMessage()               {}
func (*CICreateMasterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CICreateMasterResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type CIStartupConfig struct {
	Provider        string     `protobuf:"bytes,1,opt,name=provider" json:"provider,omitempty"`
	OS              string     `protobuf:"bytes,2,opt,name=oS" json:"oS,omitempty"`
	JenkinsVersion  string     `protobuf:"bytes,3,opt,name=jenkins_version" json:"jenkins_version,omitempty"`
	SaltbaseVersion string     `protobuf:"bytes,4,opt,name=saltbase_version" json:"saltbase_version,omitempty"`
	Role            string     `protobuf:"bytes,5,opt,name=role" json:"role,omitempty"`
	Namespace       string     `protobuf:"bytes,6,opt,name=namespace" json:"namespace,omitempty"`
	Labels          string     `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
	MasterAddr      string     `protobuf:"bytes,8,opt,name=master_addr" json:"master_addr,omitempty"`
	Executors       int32      `protobuf:"varint,9,opt,name=executors" json:"executors,omitempty"`
	Secrets         *CISecrets `protobuf:"bytes,10,opt,name=secrets" json:"secrets,omitempty"`
}

func (m *CIStartupConfig) Reset()                    { *m = CIStartupConfig{} }
func (m *CIStartupConfig) String() string            { return proto.CompactTextString(m) }
func (*CIStartupConfig) ProtoMessage()               {}
func (*CIStartupConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CIStartupConfig) GetSecrets() *CISecrets {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type CISecrets struct {
	JenkinsUser  string        `protobuf:"bytes,1,opt,name=jenkins_user" json:"jenkins_user,omitempty"`
	JenkinsToken string        `protobuf:"bytes,2,opt,name=jenkins_token" json:"jenkins_token,omitempty"`
	SshKey       *ssh.SSHKey   `protobuf:"bytes,3,opt,name=ssh_key" json:"ssh_key,omitempty"`
	DockerRepos  []*DockerRepo `protobuf:"bytes,4,rep,name=docker_repos" json:"docker_repos,omitempty"`
	MavenRepo    *MavenRepo    `protobuf:"bytes,5,opt,name=maven_repo" json:"maven_repo,omitempty"`
}

func (m *CISecrets) Reset()                    { *m = CISecrets{} }
func (m *CISecrets) String() string            { return proto.CompactTextString(m) }
func (*CISecrets) ProtoMessage()               {}
func (*CISecrets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CISecrets) GetSshKey() *ssh.SSHKey {
	if m != nil {
		return m.SshKey
	}
	return nil
}

func (m *CISecrets) GetDockerRepos() []*DockerRepo {
	if m != nil {
		return m.DockerRepos
	}
	return nil
}

func (m *CISecrets) GetMavenRepo() *MavenRepo {
	if m != nil {
		return m.MavenRepo
	}
	return nil
}

type MavenRepo struct {
	Url      string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *MavenRepo) Reset()                    { *m = MavenRepo{} }
func (m *MavenRepo) String() string            { return proto.CompactTextString(m) }
func (*MavenRepo) ProtoMessage()               {}
func (*MavenRepo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type DockerRepo struct {
	Url   string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Auth  string `protobuf:"bytes,3,opt,name=auth" json:"auth,omitempty"`
}

func (m *DockerRepo) Reset()                    { *m = DockerRepo{} }
func (m *DockerRepo) String() string            { return proto.CompactTextString(m) }
func (*DockerRepo) ProtoMessage()               {}
func (*DockerRepo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type CISlaveOperationRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CISlaveOperationRequest) Reset()                    { *m = CISlaveOperationRequest{} }
func (m *CISlaveOperationRequest) String() string            { return proto.CompactTextString(m) }
func (*CISlaveOperationRequest) ProtoMessage()               {}
func (*CISlaveOperationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type CISlaveDetailsResponse struct {
	Status        *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Name          string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Executors     int64          `protobuf:"varint,3,opt,name=executors" json:"executors,omitempty"`
	NodeStatus    string         `protobuf:"bytes,4,opt,name=node_status" json:"node_status,omitempty"`
	OfflineReason string         `protobuf:"bytes,5,opt,name=offline_reason" json:"offline_reason,omitempty"`
	Label         string         `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	Provider      string         `protobuf:"bytes,7,opt,name=provider" json:"provider,omitempty"`
	Sku           string         `protobuf:"bytes,8,opt,name=sku" json:"sku,omitempty"`
	StartupScript string         `protobuf:"bytes,9,opt,name=startup_script" json:"startup_script,omitempty"`
	CreatedAt     string         `protobuf:"bytes,10,opt,name=created_at" json:"created_at,omitempty"`
}

func (m *CISlaveDetailsResponse) Reset()                    { *m = CISlaveDetailsResponse{} }
func (m *CISlaveDetailsResponse) String() string            { return proto.CompactTextString(m) }
func (*CISlaveDetailsResponse) ProtoMessage()               {}
func (*CISlaveDetailsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CISlaveDetailsResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type CISlaveOperationResponse struct {
	Status *dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *CISlaveOperationResponse) Reset()                    { *m = CISlaveOperationResponse{} }
func (m *CISlaveOperationResponse) String() string            { return proto.CompactTextString(m) }
func (*CISlaveOperationResponse) ProtoMessage()               {}
func (*CISlaveOperationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CISlaveOperationResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*CIVoidRequest)(nil), "ci.CIVoidRequest")
	proto.RegisterType((*CICommonResponse)(nil), "ci.CICommonResponse")
	proto.RegisterType((*CIStatusResponse)(nil), "ci.CIStatusResponse")
	proto.RegisterType((*CIBuildDescribeRequest)(nil), "ci.CIBuildDescribeRequest")
	proto.RegisterType((*CIBuildDescribeResponse)(nil), "ci.CIBuildDescribeResponse")
	proto.RegisterType((*CIBuildJobRequest)(nil), "ci.CIBuildJobRequest")
	proto.RegisterType((*CIGetBuildsRequest)(nil), "ci.CIGetBuildsRequest")
	proto.RegisterType((*CIGetBuildsResponse)(nil), "ci.CIGetBuildsResponse")
	proto.RegisterType((*CIJobsResponse)(nil), "ci.CIJobsResponse")
	proto.RegisterType((*CIDescribeJobRequest)(nil), "ci.CIDescribeJobRequest")
	proto.RegisterType((*CIDescribeJobResponse)(nil), "ci.CIDescribeJobResponse")
	proto.RegisterType((*CIDeleteJobRequest)(nil), "ci.CIDeleteJobRequest")
	proto.RegisterType((*CICreateJobRequest)(nil), "ci.CICreateJobRequest")
	proto.RegisterType((*CICopyJobRequest)(nil), "ci.CICopyJobRequest")
	proto.RegisterType((*CIStatusMessage)(nil), "ci.CIStatusMessage")
	proto.RegisterType((*CIBuild)(nil), "ci.CIBuild")
	proto.RegisterType((*CIJob)(nil), "ci.CIJob")
	proto.RegisterType((*CICreateSlaveRequest)(nil), "ci.CICreateSlaveRequest")
	proto.RegisterType((*CICreateMasterRequest)(nil), "ci.CICreateMasterRequest")
	proto.RegisterType((*CICreateMasterResponse)(nil), "ci.CICreateMasterResponse")
	proto.RegisterType((*CIStartupConfig)(nil), "ci.CIStartupConfig")
	proto.RegisterType((*CISecrets)(nil), "ci.CISecrets")
	proto.RegisterType((*MavenRepo)(nil), "ci.MavenRepo")
	proto.RegisterType((*DockerRepo)(nil), "ci.DockerRepo")
	proto.RegisterType((*CISlaveOperationRequest)(nil), "ci.CISlaveOperationRequest")
	proto.RegisterType((*CISlaveDetailsResponse)(nil), "ci.CISlaveDetailsResponse")
	proto.RegisterType((*CISlaveOperationResponse)(nil), "ci.CISlaveOperationResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for CI service

type CIClient interface {
	CIStatus(ctx context.Context, in *CIVoidRequest, opts ...grpc.CallOption) (*CIStatusResponse, error)
	CIDescribeBuild(ctx context.Context, in *CIBuildDescribeRequest, opts ...grpc.CallOption) (*CIBuildDescribeResponse, error)
	CIBuildJob(ctx context.Context, in *CIBuildJobRequest, opts ...grpc.CallOption) (*CICommonResponse, error)
	CIGetBuilds(ctx context.Context, in *CIGetBuildsRequest, opts ...grpc.CallOption) (*CIGetBuildsResponse, error)
	CIGetJobs(ctx context.Context, in *CIVoidRequest, opts ...grpc.CallOption) (*CIJobsResponse, error)
	CIDescribeJob(ctx context.Context, in *CIDescribeJobRequest, opts ...grpc.CallOption) (*CIDescribeJobResponse, error)
	CIDeleteJob(ctx context.Context, in *CIDeleteJobRequest, opts ...grpc.CallOption) (*CICommonResponse, error)
	CICreateJob(ctx context.Context, in *CICreateJobRequest, opts ...grpc.CallOption) (*CICommonResponse, error)
	CICopyJob(ctx context.Context, in *CICopyJobRequest, opts ...grpc.CallOption) (*CICommonResponse, error)
	CICreateMaster(ctx context.Context, in *CICreateMasterRequest, opts ...grpc.CallOption) (*CICreateMasterResponse, error)
	CICreateSlave(ctx context.Context, in *CICreateSlaveRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error)
	CISlaveDetails(ctx context.Context, in *CISlaveOperationRequest, opts ...grpc.CallOption) (*CISlaveDetailsResponse, error)
	CISlaveDelete(ctx context.Context, in *CISlaveOperationRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error)
	CISlaveRestart(ctx context.Context, in *CISlaveOperationRequest, opts ...grpc.CallOption) (*CISlaveOperationResponse, error)
}

type cIClient struct {
	cc *grpc.ClientConn
}

func NewCIClient(cc *grpc.ClientConn) CIClient {
	return &cIClient{cc}
}

func (c *cIClient) CIStatus(ctx context.Context, in *CIVoidRequest, opts ...grpc.CallOption) (*CIStatusResponse, error) {
	out := new(CIStatusResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CIStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CIDescribeBuild(ctx context.Context, in *CIBuildDescribeRequest, opts ...grpc.CallOption) (*CIBuildDescribeResponse, error) {
	out := new(CIBuildDescribeResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CIDescribeBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CIBuildJob(ctx context.Context, in *CIBuildJobRequest, opts ...grpc.CallOption) (*CICommonResponse, error) {
	out := new(CICommonResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CIBuildJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CIGetBuilds(ctx context.Context, in *CIGetBuildsRequest, opts ...grpc.CallOption) (*CIGetBuildsResponse, error) {
	out := new(CIGetBuildsResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CIGetBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CIGetJobs(ctx context.Context, in *CIVoidRequest, opts ...grpc.CallOption) (*CIJobsResponse, error) {
	out := new(CIJobsResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CIGetJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CIDescribeJob(ctx context.Context, in *CIDescribeJobRequest, opts ...grpc.CallOption) (*CIDescribeJobResponse, error) {
	out := new(CIDescribeJobResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CIDescribeJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CIDeleteJob(ctx context.Context, in *CIDeleteJobRequest, opts ...grpc.CallOption) (*CICommonResponse, error) {
	out := new(CICommonResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CIDeleteJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CICreateJob(ctx context.Context, in *CICreateJobRequest, opts ...grpc.CallOption) (*CICommonResponse, error) {
	out := new(CICommonResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CICreateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CICopyJob(ctx context.Context, in *CICopyJobRequest, opts ...grpc.CallOption) (*CICommonResponse, error) {
	out := new(CICommonResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CICopyJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CICreateMaster(ctx context.Context, in *CICreateMasterRequest, opts ...grpc.CallOption) (*CICreateMasterResponse, error) {
	out := new(CICreateMasterResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CICreateMaster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CICreateSlave(ctx context.Context, in *CICreateSlaveRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error) {
	out := new(dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CICreateSlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CISlaveDetails(ctx context.Context, in *CISlaveOperationRequest, opts ...grpc.CallOption) (*CISlaveDetailsResponse, error) {
	out := new(CISlaveDetailsResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CISlaveDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CISlaveDelete(ctx context.Context, in *CISlaveOperationRequest, opts ...grpc.CallOption) (*dtypes.LongRunningResponse, error) {
	out := new(dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CISlaveDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cIClient) CISlaveRestart(ctx context.Context, in *CISlaveOperationRequest, opts ...grpc.CallOption) (*CISlaveOperationResponse, error) {
	out := new(CISlaveOperationResponse)
	err := grpc.Invoke(ctx, "/ci.CI/CISlaveRestart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CI service

type CIServer interface {
	CIStatus(context.Context, *CIVoidRequest) (*CIStatusResponse, error)
	CIDescribeBuild(context.Context, *CIBuildDescribeRequest) (*CIBuildDescribeResponse, error)
	CIBuildJob(context.Context, *CIBuildJobRequest) (*CICommonResponse, error)
	CIGetBuilds(context.Context, *CIGetBuildsRequest) (*CIGetBuildsResponse, error)
	CIGetJobs(context.Context, *CIVoidRequest) (*CIJobsResponse, error)
	CIDescribeJob(context.Context, *CIDescribeJobRequest) (*CIDescribeJobResponse, error)
	CIDeleteJob(context.Context, *CIDeleteJobRequest) (*CICommonResponse, error)
	CICreateJob(context.Context, *CICreateJobRequest) (*CICommonResponse, error)
	CICopyJob(context.Context, *CICopyJobRequest) (*CICommonResponse, error)
	CICreateMaster(context.Context, *CICreateMasterRequest) (*CICreateMasterResponse, error)
	CICreateSlave(context.Context, *CICreateSlaveRequest) (*dtypes.LongRunningResponse, error)
	CISlaveDetails(context.Context, *CISlaveOperationRequest) (*CISlaveDetailsResponse, error)
	CISlaveDelete(context.Context, *CISlaveOperationRequest) (*dtypes.LongRunningResponse, error)
	CISlaveRestart(context.Context, *CISlaveOperationRequest) (*CISlaveOperationResponse, error)
}

func RegisterCIServer(s *grpc.Server, srv CIServer) {
	s.RegisterService(&_CI_serviceDesc, srv)
}

func _CI_CIStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CIVoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CIStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CIDescribeBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CIBuildDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CIDescribeBuild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CIBuildJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CIBuildJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CIBuildJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CIGetBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CIGetBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CIGetBuilds(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CIGetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CIVoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CIGetJobs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CIDescribeJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CIDescribeJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CIDescribeJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CIDeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CIDeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CIDeleteJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CICreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CICreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CICreateJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CICopyJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CICopyJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CICopyJob(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CICreateMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CICreateMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CICreateMaster(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CICreateSlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CICreateSlaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CICreateSlave(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CISlaveDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CISlaveOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CISlaveDetails(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CISlaveDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CISlaveOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CISlaveDelete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CI_CISlaveRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CISlaveOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CIServer).CISlaveRestart(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _CI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ci.CI",
	HandlerType: (*CIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CIStatus",
			Handler:    _CI_CIStatus_Handler,
		},
		{
			MethodName: "CIDescribeBuild",
			Handler:    _CI_CIDescribeBuild_Handler,
		},
		{
			MethodName: "CIBuildJob",
			Handler:    _CI_CIBuildJob_Handler,
		},
		{
			MethodName: "CIGetBuilds",
			Handler:    _CI_CIGetBuilds_Handler,
		},
		{
			MethodName: "CIGetJobs",
			Handler:    _CI_CIGetJobs_Handler,
		},
		{
			MethodName: "CIDescribeJob",
			Handler:    _CI_CIDescribeJob_Handler,
		},
		{
			MethodName: "CIDeleteJob",
			Handler:    _CI_CIDeleteJob_Handler,
		},
		{
			MethodName: "CICreateJob",
			Handler:    _CI_CICreateJob_Handler,
		},
		{
			MethodName: "CICopyJob",
			Handler:    _CI_CICopyJob_Handler,
		},
		{
			MethodName: "CICreateMaster",
			Handler:    _CI_CICreateMaster_Handler,
		},
		{
			MethodName: "CICreateSlave",
			Handler:    _CI_CICreateSlave_Handler,
		},
		{
			MethodName: "CISlaveDetails",
			Handler:    _CI_CISlaveDetails_Handler,
		},
		{
			MethodName: "CISlaveDelete",
			Handler:    _CI_CISlaveDelete_Handler,
		},
		{
			MethodName: "CISlaveRestart",
			Handler:    _CI_CISlaveRestart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 1361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x57, 0xcd, 0x6e, 0x1c, 0x45,
	0x10, 0xd6, 0xee, 0xfa, 0x6f, 0x7b, 0x63, 0x3b, 0xdb, 0x4e, 0xec, 0xf1, 0xc4, 0x4a, 0xec, 0x01,
	0x1c, 0x63, 0x81, 0x37, 0x72, 0x50, 0x14, 0x45, 0x9c, 0x58, 0x0b, 0x58, 0x82, 0x41, 0xb1, 0x25,
	0x0e, 0x5c, 0x46, 0xb3, 0x33, 0xed, 0xf5, 0x64, 0x67, 0xa6, 0x87, 0xe9, 0x1e, 0x83, 0x65, 0xf9,
	0x82, 0x78, 0x03, 0x8e, 0x1c, 0x78, 0x09, 0xc4, 0x8b, 0x70, 0xe4, 0xc2, 0x81, 0x07, 0xa1, 0xab,
	0xba, 0x67, 0x77, 0xbc, 0x7f, 0x59, 0x71, 0x48, 0x62, 0xd7, 0x54, 0xd5, 0x57, 0x3f, 0x5f, 0x55,
	0x75, 0xc8, 0x8a, 0x1f, 0x1e, 0xa5, 0x19, 0x97, 0x9c, 0x56, 0xfd, 0xd0, 0xde, 0xe9, 0x71, 0xde,
	0x8b, 0x58, 0xcb, 0x4b, 0xc3, 0x96, 0x97, 0x24, 0x5c, 0x7a, 0x32, 0xe4, 0x89, 0xd0, 0x1a, 0xf6,
	0x26, 0x88, 0x03, 0x79, 0x9d, 0x32, 0xd1, 0xc2, 0xbf, 0x8d, 0xbc, 0x09, 0x72, 0x21, 0x2e, 0xe1,
	0x8f, 0x16, 0x39, 0xeb, 0x64, 0xb5, 0xdd, 0xf9, 0x8e, 0x87, 0xc1, 0x19, 0xfb, 0x21, 0x67, 0x42,
	0x3a, 0xc7, 0xe4, 0x7e, 0xbb, 0xd3, 0xe6, 0x71, 0xcc, 0x93, 0x33, 0x26, 0x52, 0xe5, 0x94, 0xd1,
	0xc7, 0x64, 0x49, 0x28, 0x84, 0x5c, 0x58, 0x95, 0xdd, 0xca, 0x41, 0xe3, 0x78, 0xed, 0x48, 0x3b,
	0x3f, 0x3a, 0x47, 0xa9, 0xf3, 0x3d, 0xd8, 0xe8, 0x9f, 0xe7, 0xb5, 0xa1, 0xfb, 0xa4, 0x9e, 0xf0,
	0x80, 0xb9, 0x51, 0x28, 0xa4, 0x55, 0xdd, 0xad, 0x29, 0x95, 0x8d, 0x23, 0x95, 0x63, 0xe1, 0xe8,
	0x94, 0x09, 0xe1, 0xf5, 0x98, 0xf3, 0x86, 0x6c, 0xb6, 0x3b, 0x9f, 0xe5, 0x61, 0x14, 0x9c, 0x30,
	0xe1, 0x67, 0x61, 0x97, 0x99, 0x48, 0xe9, 0x7d, 0xb2, 0xf2, 0x96, 0x77, 0xdd, 0xc4, 0x8b, 0x19,
	0x62, 0xd4, 0xe9, 0x03, 0x72, 0xaf, 0x0b, 0x9a, 0x6e, 0x92, 0xc7, 0x5d, 0x96, 0x29, 0xb7, 0x95,
	0x83, 0x1a, 0x5d, 0x27, 0xcb, 0xbe, 0x0a, 0x89, 0x47, 0xcc, 0xaa, 0x81, 0x9a, 0xf3, 0x5b, 0x85,
	0x6c, 0x8d, 0xf9, 0x9c, 0x33, 0xec, 0xc9, 0x10, 0xe5, 0x50, 0x10, 0x03, 0x24, 0x5d, 0x4f, 0x30,
	0x37, 0xcf, 0x22, 0x6b, 0x01, 0x25, 0x6b, 0x64, 0x29, 0x63, 0x22, 0x8f, 0xa4, 0xb5, 0x88, 0xbf,
	0x6f, 0x92, 0x35, 0x13, 0x96, 0xcb, 0x73, 0x99, 0xe6, 0xd2, 0x5a, 0xc2, 0xe8, 0x3e, 0x21, 0x4d,
	0x13, 0xdc, 0x57, 0xbc, 0x3b, 0x3d, 0xd7, 0x55, 0xb2, 0x98, 0x7a, 0x99, 0x17, 0x63, 0x04, 0x75,
	0x67, 0x9f, 0xd0, 0x76, 0xe7, 0x0b, 0x26, 0xd1, 0x50, 0x4c, 0x35, 0x73, 0x02, 0xb2, 0x71, 0x47,
	0x6f, 0xce, 0xb4, 0xcb, 0x8e, 0x10, 0x90, 0x3e, 0x22, 0x4b, 0x58, 0x08, 0xa1, 0x12, 0x86, 0xe6,
	0x35, 0x74, 0xf3, 0xd0, 0xaf, 0xd3, 0x21, 0x6b, 0xed, 0x8e, 0x0a, 0x7f, 0x7e, 0x80, 0x2d, 0xb2,
	0xa0, 0x00, 0x84, 0x61, 0x42, 0x5d, 0x3b, 0x53, 0x1e, 0x9c, 0x03, 0xf2, 0xa0, 0xdd, 0x29, 0xda,
	0x34, 0xab, 0x22, 0xce, 0x1f, 0x15, 0xf2, 0x70, 0x44, 0xf5, 0x7f, 0x67, 0xb7, 0x41, 0x1a, 0x01,
	0x3a, 0x4a, 0x61, 0xae, 0x4c, 0x4f, 0x55, 0xef, 0x83, 0x50, 0xa4, 0x91, 0x77, 0xad, 0x55, 0x17,
	0x0a, 0x55, 0xcd, 0x08, 0x9f, 0xe7, 0x89, 0x6e, 0x6e, 0x8d, 0x36, 0x49, 0x1d, 0x3c, 0xfa, 0x3c,
	0xe2, 0x99, 0xee, 0x2b, 0xf4, 0x5b, 0x17, 0x4c, 0x49, 0xe3, 0xd8, 0x4b, 0x02, 0x6b, 0x79, 0xd8,
	0xb9, 0x13, 0x16, 0x31, 0x39, 0x3b, 0xbd, 0x17, 0xa0, 0xd7, 0xce, 0x98, 0x37, 0x5b, 0x0f, 0x78,
	0x26, 0x2e, 0x3f, 0x0f, 0x23, 0x93, 0x8a, 0xe2, 0x13, 0x0e, 0x74, 0x7a, 0x3d, 0x6e, 0x75, 0x91,
	0xf1, 0x78, 0x68, 0x05, 0x12, 0xc9, 0x07, 0x56, 0xeb, 0x23, 0x93, 0x08, 0x39, 0xe1, 0xc4, 0x8e,
	0x60, 0xe9, 0xc2, 0x6a, 0xab, 0x16, 0x59, 0x36, 0x14, 0x18, 0x1b, 0x94, 0x0a, 0xd6, 0x65, 0x38,
	0x04, 0xda, 0xe0, 0x80, 0x2c, 0x62, 0x9b, 0x27, 0x13, 0x5c, 0x97, 0x4f, 0x6b, 0xbe, 0x01, 0x1e,
	0xe8, 0xf4, 0xcf, 0x23, 0xef, 0x6a, 0xb0, 0x05, 0x54, 0x54, 0xec, 0x27, 0xe6, 0xe7, 0x92, 0x67,
	0xba, 0xbd, 0x8b, 0x00, 0x12, 0x79, 0x5d, 0x16, 0x99, 0xa8, 0xa0, 0xf2, 0x2a, 0xca, 0x4c, 0xe6,
	0xa9, 0xab, 0x5b, 0x6a, 0xf6, 0xc0, 0x21, 0xf0, 0x45, 0xbb, 0x3c, 0xf5, 0x84, 0x64, 0x59, 0xc9,
	0xe7, 0x15, 0x8f, 0xf2, 0x98, 0xb9, 0x61, 0x60, 0xaa, 0xff, 0x12, 0xd6, 0xd0, 0x5d, 0xdd, 0x39,
	0x97, 0xe3, 0xdf, 0x15, 0x53, 0x4a, 0x08, 0xa0, 0xcd, 0x93, 0x8b, 0xb0, 0x07, 0xd9, 0xaa, 0xf5,
	0x7b, 0x15, 0x06, 0xa6, 0x30, 0x75, 0x4a, 0x48, 0x95, 0x9f, 0x9b, 0x78, 0xb7, 0xc8, 0xfa, 0x5b,
	0x96, 0xf4, 0xc3, 0x44, 0xb8, 0x57, 0x2c, 0x13, 0x43, 0x02, 0x5a, 0xe4, 0xbe, 0xf0, 0x22, 0x89,
	0x8b, 0xa5, 0xf8, 0xa2, 0x49, 0x78, 0x8f, 0x2c, 0x64, 0xb0, 0xe0, 0xf4, 0x6a, 0x81, 0x4e, 0xa9,
	0x42, 0x8a, 0xd4, 0xf3, 0x99, 0x61, 0xdf, 0xb0, 0x26, 0xcb, 0x05, 0x6b, 0x63, 0xcc, 0xc3, 0xf5,
	0x82, 0x20, 0xb3, 0x56, 0x0a, 0xbb, 0x61, 0x2d, 0xeb, 0x58, 0xcb, 0xc7, 0x64, 0x59, 0x30, 0x3f,
	0x63, 0x52, 0x58, 0x04, 0xd3, 0x5b, 0x35, 0x4b, 0x5a, 0x0b, 0x9d, 0xdf, 0x2b, 0xa4, 0x3e, 0xf8,
	0x0d, 0x9a, 0x5e, 0x44, 0x9e, 0x8b, 0x41, 0x6e, 0x0f, 0xc9, 0x6a, 0x21, 0x95, 0xbc, 0xcf, 0x12,
	0x93, 0xe6, 0x8e, 0x72, 0x2d, 0x2e, 0xdd, 0x3e, 0xbb, 0xc6, 0xf4, 0x60, 0x85, 0xc0, 0x5d, 0x3a,
	0x3f, 0xff, 0xf2, 0x35, 0xbb, 0xa6, 0xef, 0xab, 0x61, 0xe3, 0x7e, 0x5f, 0x05, 0x98, 0xb1, 0x94,
	0x0b, 0x95, 0x67, 0x0d, 0x8b, 0xab, 0xd0, 0x4f, 0x50, 0x7e, 0xa6, 0xc4, 0x74, 0x8f, 0x90, 0x58,
	0x91, 0x21, 0x41, 0x25, 0xcc, 0xde, 0x44, 0x78, 0x0a, 0x52, 0x50, 0x71, 0x3e, 0x25, 0xf5, 0xc1,
	0x2f, 0xb4, 0x41, 0x6a, 0xb0, 0x91, 0x2b, 0xc5, 0x8e, 0x86, 0x28, 0x4b, 0x63, 0x0f, 0x7d, 0xf1,
	0x84, 0xf8, 0x91, 0x67, 0x81, 0xe1, 0xc8, 0x0b, 0x42, 0x4a, 0x70, 0x77, 0xcc, 0x15, 0x41, 0x59,
	0xec, 0x85, 0x91, 0xb1, 0x55, 0x2d, 0xf0, 0x72, 0x79, 0x69, 0xec, 0x9e, 0xc2, 0x89, 0x41, 0xa2,
	0x7e, 0x9b, 0xb2, 0x0c, 0xaf, 0x73, 0xc1, 0x2e, 0xa5, 0x58, 0x1a, 0xeb, 0x7f, 0x2a, 0xc0, 0x2c,
	0xd4, 0x3c, 0x61, 0x52, 0xb9, 0x9b, 0x7f, 0x67, 0x16, 0x8e, 0xaa, 0xe3, 0xcd, 0xab, 0xe1, 0xb4,
	0xa9, 0x26, 0xe3, 0xc4, 0x1a, 0x2f, 0x0b, 0xc5, 0x34, 0xf0, 0x8b, 0x8b, 0x28, 0x4c, 0x98, 0x2a,
	0x9a, 0x27, 0x14, 0x85, 0x16, 0x8b, 0x74, 0x90, 0x21, 0x86, 0x30, 0x65, 0x8a, 0x6a, 0xca, 0xa8,
	0xe4, 0x45, 0x3f, 0x37, 0x54, 0x19, 0x9f, 0xa9, 0x3a, 0xca, 0x15, 0x91, 0x7d, 0x9c, 0x92, 0xc0,
	0xf5, 0x24, 0x52, 0xa6, 0xee, 0xbc, 0x22, 0xd6, 0x78, 0x2d, 0xe6, 0xcb, 0xf1, 0xf8, 0xcf, 0x06,
	0xa9, 0xb6, 0x3b, 0xf4, 0x1b, 0xb2, 0x52, 0xac, 0x23, 0xda, 0xd4, 0x0c, 0x2c, 0x3d, 0x5a, 0xec,
	0x07, 0xe5, 0x97, 0x43, 0xe1, 0xdb, 0xd9, 0xfe, 0xf9, 0xaf, 0x7f, 0x7f, 0xad, 0x6e, 0xd0, 0x26,
	0x3e, 0x93, 0xfc, 0xb0, 0x75, 0xf5, 0xac, 0x25, 0x20, 0x0c, 0x41, 0x7f, 0xc1, 0xa1, 0x2c, 0x6e,
	0x85, 0xde, 0x58, 0x76, 0xe9, 0x82, 0x8d, 0xbc, 0x35, 0xec, 0x47, 0x13, 0xbf, 0x19, 0x9c, 0x97,
	0x88, 0x73, 0x4c, 0x9f, 0x95, 0x70, 0xe0, 0x98, 0xb5, 0x6e, 0x8a, 0x95, 0x76, 0xdb, 0xd2, 0xab,
	0xbf, 0x75, 0x53, 0xde, 0x89, 0xb7, 0xb4, 0x47, 0xc8, 0xf0, 0xd6, 0xd3, 0x87, 0x25, 0x90, 0xe1,
	0xb2, 0x2e, 0x92, 0xbb, 0xfb, 0x26, 0x73, 0x3e, 0x42, 0xd0, 0x7d, 0x7b, 0xef, 0x9d, 0xa0, 0xaf,
	0x2a, 0x87, 0x34, 0x24, 0x8d, 0xd2, 0xd9, 0xa7, 0x9b, 0xda, 0xe5, 0xe8, 0x7b, 0xc1, 0xde, 0x1a,
	0x93, 0x1b, 0xb4, 0x0f, 0x11, 0xed, 0x3d, 0xfa, 0x6e, 0x34, 0xfa, 0x1a, 0x16, 0x82, 0xf2, 0x00,
	0xe7, 0x7f, 0x52, 0xaf, 0xe8, 0xe0, 0xb6, 0x0f, 0xdd, 0x6f, 0xa1, 0xfb, 0x26, 0x5d, 0x1f, 0x71,
	0x4f, 0x2f, 0xe1, 0x79, 0x5a, 0x3a, 0xe9, 0xd4, 0xd2, 0xd6, 0xe3, 0x0f, 0x02, 0x7b, 0x7b, 0xc2,
	0x17, 0xe3, 0xde, 0x41, 0xf7, 0x3b, 0xd4, 0x9e, 0x1e, 0x3d, 0x75, 0xa1, 0x42, 0x83, 0x33, 0x5c,
	0x54, 0x68, 0xf4, 0x2e, 0x4f, 0x69, 0x86, 0x01, 0x38, 0x9c, 0x05, 0xd0, 0x05, 0x80, 0xc1, 0xfd,
	0x2e, 0x00, 0x46, 0x0f, 0xfa, 0x14, 0x80, 0x0f, 0x10, 0xe0, 0x89, 0x3d, 0x03, 0x00, 0xda, 0x1c,
	0x41, 0xed, 0xcd, 0xad, 0xa7, 0x03, 0x4f, 0xe5, 0xd3, 0x3f, 0xc5, 0xff, 0x73, 0xf4, 0xff, 0xb1,
	0x7d, 0x30, 0xea, 0xdf, 0x57, 0xd6, 0x1a, 0x04, 0x1e, 0x0b, 0xb7, 0xfa, 0x47, 0xc9, 0x11, 0x8d,
	0xc1, 0x2b, 0xaf, 0x7c, 0x13, 0xe9, 0x76, 0x39, 0xa9, 0x3b, 0x37, 0xd5, 0xb6, 0x27, 0x7d, 0x32,
	0xe8, 0x3b, 0x88, 0xbe, 0x69, 0x97, 0x07, 0x55, 0x5f, 0x27, 0x80, 0x09, 0x80, 0x03, 0xa5, 0xcb,
	0x5f, 0x70, 0x60, 0xfc, 0x31, 0xa0, 0xc6, 0xd4, 0x6c, 0x8f, 0xaf, 0x79, 0xd2, 0x3b, 0xcb, 0x93,
	0x24, 0x54, 0xff, 0xcc, 0x42, 0xd1, 0xeb, 0x00, 0x50, 0xfa, 0x90, 0x4c, 0x79, 0x0d, 0x53, 0x33,
	0xf3, 0x13, 0x97, 0x78, 0x91, 0xce, 0xa4, 0xbd, 0xed, 0xec, 0x22, 0x90, 0x4d, 0xad, 0x31, 0xa0,
	0xd6, 0x8d, 0xe6, 0x42, 0x1f, 0x52, 0x32, 0xb6, 0x40, 0xb0, 0xd9, 0x58, 0x33, 0xb3, 0x32, 0x60,
	0x87, 0xd3, 0xc1, 0xe4, 0x20, 0x33, 0x65, 0x04, 0x3b, 0x7b, 0x36, 0xda, 0xce, 0xe4, 0x8f, 0x06,
	0xee, 0x29, 0xc2, 0xed, 0xd1, 0x27, 0xd3, 0xe0, 0x5a, 0x19, 0xeb, 0x72, 0x2e, 0xbb, 0x4b, 0xf8,
	0xff, 0xcb, 0xe7, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x02, 0xa5, 0xb9, 0xb9, 0xb8, 0x0e, 0x00,
	0x00,
}
