<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: volume.proto
//   Date: 2016-04-20 05:49:26

namespace glusterfs {

  class VolumeCreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $kube_cluster = null;
    
    /**  @var string */
    public $glusterfs_cluster = null;
    
    /**  @var string */
    public $volume = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.VolumeCreateRequest');

      // OPTIONAL STRING kube_cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kube_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING glusterfs_cluster = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "glusterfs_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING volume = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "volume";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kube_cluster> has a value
     *
     * @return boolean
     */
    public function hasKubeCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <kube_cluster> value
     *
     * @return \glusterfs\VolumeCreateRequest
     */
    public function clearKubeCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <kube_cluster> value
     *
     * @return string
     */
    public function getKubeCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <kube_cluster> value
     *
     * @param string $value
     * @return \glusterfs\VolumeCreateRequest
     */
    public function setKubeCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <glusterfs_cluster> has a value
     *
     * @return boolean
     */
    public function hasGlusterfsCluster(){
      return $this->_has(2);
    }
    
    /**
     * Clear <glusterfs_cluster> value
     *
     * @return \glusterfs\VolumeCreateRequest
     */
    public function clearGlusterfsCluster(){
      return $this->_clear(2);
    }
    
    /**
     * Get <glusterfs_cluster> value
     *
     * @return string
     */
    public function getGlusterfsCluster(){
      return $this->_get(2);
    }
    
    /**
     * Set <glusterfs_cluster> value
     *
     * @param string $value
     * @return \glusterfs\VolumeCreateRequest
     */
    public function setGlusterfsCluster( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <volume> has a value
     *
     * @return boolean
     */
    public function hasVolume(){
      return $this->_has(3);
    }
    
    /**
     * Clear <volume> value
     *
     * @return \glusterfs\VolumeCreateRequest
     */
    public function clearVolume(){
      return $this->_clear(3);
    }
    
    /**
     * Get <volume> value
     *
     * @return string
     */
    public function getVolume(){
      return $this->_get(3);
    }
    
    /**
     * Set <volume> value
     *
     * @param string $value
     * @return \glusterfs\VolumeCreateRequest
     */
    public function setVolume( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace glusterfs {

  class VolumeDeleteRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $kube_cluster = null;
    
    /**  @var string */
    public $glusterfs_cluster = null;
    
    /**  @var string */
    public $volume = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.VolumeDeleteRequest');

      // OPTIONAL STRING kube_cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kube_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING glusterfs_cluster = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "glusterfs_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING volume = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "volume";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kube_cluster> has a value
     *
     * @return boolean
     */
    public function hasKubeCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <kube_cluster> value
     *
     * @return \glusterfs\VolumeDeleteRequest
     */
    public function clearKubeCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <kube_cluster> value
     *
     * @return string
     */
    public function getKubeCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <kube_cluster> value
     *
     * @param string $value
     * @return \glusterfs\VolumeDeleteRequest
     */
    public function setKubeCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <glusterfs_cluster> has a value
     *
     * @return boolean
     */
    public function hasGlusterfsCluster(){
      return $this->_has(2);
    }
    
    /**
     * Clear <glusterfs_cluster> value
     *
     * @return \glusterfs\VolumeDeleteRequest
     */
    public function clearGlusterfsCluster(){
      return $this->_clear(2);
    }
    
    /**
     * Get <glusterfs_cluster> value
     *
     * @return string
     */
    public function getGlusterfsCluster(){
      return $this->_get(2);
    }
    
    /**
     * Set <glusterfs_cluster> value
     *
     * @param string $value
     * @return \glusterfs\VolumeDeleteRequest
     */
    public function setGlusterfsCluster( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <volume> has a value
     *
     * @return boolean
     */
    public function hasVolume(){
      return $this->_has(3);
    }
    
    /**
     * Clear <volume> value
     *
     * @return \glusterfs\VolumeDeleteRequest
     */
    public function clearVolume(){
      return $this->_clear(3);
    }
    
    /**
     * Get <volume> value
     *
     * @return string
     */
    public function getVolume(){
      return $this->_get(3);
    }
    
    /**
     * Set <volume> value
     *
     * @param string $value
     * @return \glusterfs\VolumeDeleteRequest
     */
    public function setVolume( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace glusterfs {

  class VolumeListRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $kube_cluster = null;
    
    /**  @var string */
    public $glusterfs_cluster = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.VolumeListRequest');

      // OPTIONAL STRING kube_cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kube_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING glusterfs_cluster = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "glusterfs_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kube_cluster> has a value
     *
     * @return boolean
     */
    public function hasKubeCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <kube_cluster> value
     *
     * @return \glusterfs\VolumeListRequest
     */
    public function clearKubeCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <kube_cluster> value
     *
     * @return string
     */
    public function getKubeCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <kube_cluster> value
     *
     * @param string $value
     * @return \glusterfs\VolumeListRequest
     */
    public function setKubeCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <glusterfs_cluster> has a value
     *
     * @return boolean
     */
    public function hasGlusterfsCluster(){
      return $this->_has(2);
    }
    
    /**
     * Clear <glusterfs_cluster> value
     *
     * @return \glusterfs\VolumeListRequest
     */
    public function clearGlusterfsCluster(){
      return $this->_clear(2);
    }
    
    /**
     * Get <glusterfs_cluster> value
     *
     * @return string
     */
    public function getGlusterfsCluster(){
      return $this->_get(2);
    }
    
    /**
     * Set <glusterfs_cluster> value
     *
     * @param string $value
     * @return \glusterfs\VolumeListRequest
     */
    public function setGlusterfsCluster( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace glusterfs {

  class VolumeListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \glusterfs\Volume[]  */
    public $volumes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.VolumeListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE volumes = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "volumes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\glusterfs\Volume';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \glusterfs\VolumeListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \glusterfs\VolumeListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <volumes> has a value
     *
     * @return boolean
     */
    public function hasVolumes(){
      return $this->_has(2);
    }
    
    /**
     * Clear <volumes> value
     *
     * @return \glusterfs\VolumeListResponse
     */
    public function clearVolumes(){
      return $this->_clear(2);
    }
    
    /**
     * Get <volumes> value
     *
     * @param int $idx
     * @return \glusterfs\Volume
     */
    public function getVolumes($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <volumes> value
     *
     * @param \glusterfs\Volume $value
     * @return \glusterfs\VolumeListResponse
     */
    public function setVolumes(\glusterfs\Volume $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <volumes>
     *
     * @return \glusterfs\Volume[]
     */
    public function getVolumesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <volumes>
     *
     * @param \glusterfs\Volume $value
     * @return \glusterfs\VolumeListResponse
     */
    public function addVolumes(\glusterfs\Volume $value){
     return $this->_add(2, $value);
    }
  }
}

namespace glusterfs {

  class Volume extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $path = null;
    
    /**  @var string */
    public $bricks = null;
    
    /**  @var string */
    public $endpoint = null;
    
    /**  @var int */
    public $replica = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.Volume');

      // OPTIONAL STRING path = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bricks = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bricks";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING endpoint = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "endpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 replica = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "replica";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(1);
    }
    
    /**
     * Clear <path> value
     *
     * @return \glusterfs\Volume
     */
    public function clearPath(){
      return $this->_clear(1);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(1);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \glusterfs\Volume
     */
    public function setPath( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bricks> has a value
     *
     * @return boolean
     */
    public function hasBricks(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bricks> value
     *
     * @return \glusterfs\Volume
     */
    public function clearBricks(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bricks> value
     *
     * @return string
     */
    public function getBricks(){
      return $this->_get(2);
    }
    
    /**
     * Set <bricks> value
     *
     * @param string $value
     * @return \glusterfs\Volume
     */
    public function setBricks( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <endpoint> has a value
     *
     * @return boolean
     */
    public function hasEndpoint(){
      return $this->_has(3);
    }
    
    /**
     * Clear <endpoint> value
     *
     * @return \glusterfs\Volume
     */
    public function clearEndpoint(){
      return $this->_clear(3);
    }
    
    /**
     * Get <endpoint> value
     *
     * @return string
     */
    public function getEndpoint(){
      return $this->_get(3);
    }
    
    /**
     * Set <endpoint> value
     *
     * @param string $value
     * @return \glusterfs\Volume
     */
    public function setEndpoint( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <replica> has a value
     *
     * @return boolean
     */
    public function hasReplica(){
      return $this->_has(4);
    }
    
    /**
     * Clear <replica> value
     *
     * @return \glusterfs\Volume
     */
    public function clearReplica(){
      return $this->_clear(4);
    }
    
    /**
     * Get <replica> value
     *
     * @return int
     */
    public function getReplica(){
      return $this->_get(4);
    }
    
    /**
     * Set <replica> value
     *
     * @param int $value
     * @return \glusterfs\Volume
     */
    public function setReplica( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace glusterfs {

  class VolumesClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param glusterfs\VolumeListRequest $input
     */
    public function List(\glusterfs\VolumeListRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/glusterfs.Volumes/List', $argument, '\glusterfs\VolumeListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param glusterfs\VolumeCreateRequest $input
     */
    public function Create(\glusterfs\VolumeCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/glusterfs.Volumes/Create', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param glusterfs\VolumeDeleteRequest $input
     */
    public function Delete(\glusterfs\VolumeDeleteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/glusterfs.Volumes/Delete', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
  }
}
