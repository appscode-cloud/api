<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: cluster.proto
//   Date: 2016-04-19 16:27:28

namespace glusterfs {

  class Cluster extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $phid = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $kube_cluster = null;
    
    /**  @var string */
    public $mood = null;
    
    /**  @var string */
    public $kube_namespace = null;
    
    /**  @var int */
    public $replica = null;
    
    /**  @var string */
    public $created = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.Cluster');

      // OPTIONAL STRING phid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "phid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kube_cluster = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "kube_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mood = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mood";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING kube_namespace = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "kube_namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 replica = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "replica";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "created";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <phid> has a value
     *
     * @return boolean
     */
    public function hasPhid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <phid> value
     *
     * @return \glusterfs\Cluster
     */
    public function clearPhid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <phid> value
     *
     * @return string
     */
    public function getPhid(){
      return $this->_get(1);
    }
    
    /**
     * Set <phid> value
     *
     * @param string $value
     * @return \glusterfs\Cluster
     */
    public function setPhid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \glusterfs\Cluster
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \glusterfs\Cluster
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <kube_cluster> has a value
     *
     * @return boolean
     */
    public function hasKubeCluster(){
      return $this->_has(3);
    }
    
    /**
     * Clear <kube_cluster> value
     *
     * @return \glusterfs\Cluster
     */
    public function clearKubeCluster(){
      return $this->_clear(3);
    }
    
    /**
     * Get <kube_cluster> value
     *
     * @return string
     */
    public function getKubeCluster(){
      return $this->_get(3);
    }
    
    /**
     * Set <kube_cluster> value
     *
     * @param string $value
     * @return \glusterfs\Cluster
     */
    public function setKubeCluster( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <mood> has a value
     *
     * @return boolean
     */
    public function hasMood(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mood> value
     *
     * @return \glusterfs\Cluster
     */
    public function clearMood(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mood> value
     *
     * @return string
     */
    public function getMood(){
      return $this->_get(4);
    }
    
    /**
     * Set <mood> value
     *
     * @param string $value
     * @return \glusterfs\Cluster
     */
    public function setMood( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <kube_namespace> has a value
     *
     * @return boolean
     */
    public function hasKubeNamespace(){
      return $this->_has(5);
    }
    
    /**
     * Clear <kube_namespace> value
     *
     * @return \glusterfs\Cluster
     */
    public function clearKubeNamespace(){
      return $this->_clear(5);
    }
    
    /**
     * Get <kube_namespace> value
     *
     * @return string
     */
    public function getKubeNamespace(){
      return $this->_get(5);
    }
    
    /**
     * Set <kube_namespace> value
     *
     * @param string $value
     * @return \glusterfs\Cluster
     */
    public function setKubeNamespace( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <replica> has a value
     *
     * @return boolean
     */
    public function hasReplica(){
      return $this->_has(6);
    }
    
    /**
     * Clear <replica> value
     *
     * @return \glusterfs\Cluster
     */
    public function clearReplica(){
      return $this->_clear(6);
    }
    
    /**
     * Get <replica> value
     *
     * @return int
     */
    public function getReplica(){
      return $this->_get(6);
    }
    
    /**
     * Set <replica> value
     *
     * @param int $value
     * @return \glusterfs\Cluster
     */
    public function setReplica( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <created> has a value
     *
     * @return boolean
     */
    public function hasCreated(){
      return $this->_has(7);
    }
    
    /**
     * Clear <created> value
     *
     * @return \glusterfs\Cluster
     */
    public function clearCreated(){
      return $this->_clear(7);
    }
    
    /**
     * Get <created> value
     *
     * @return string
     */
    public function getCreated(){
      return $this->_get(7);
    }
    
    /**
     * Set <created> value
     *
     * @param string $value
     * @return \glusterfs\Cluster
     */
    public function setCreated( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace glusterfs {

  class ClusterListRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $kube_cluster = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.ClusterListRequest');

      // OPTIONAL STRING kube_cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kube_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kube_cluster> has a value
     *
     * @return boolean
     */
    public function hasKubeCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <kube_cluster> value
     *
     * @return \glusterfs\ClusterListRequest
     */
    public function clearKubeCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <kube_cluster> value
     *
     * @return string
     */
    public function getKubeCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <kube_cluster> value
     *
     * @param string $value
     * @return \glusterfs\ClusterListRequest
     */
    public function setKubeCluster( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace glusterfs {

  class ClusterListResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \glusterfs\Cluster[]  */
    public $glusterfs = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.ClusterListResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // REPEATED MESSAGE glusterfs = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "glusterfs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\glusterfs\Cluster';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \glusterfs\ClusterListResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \glusterfs\ClusterListResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <glusterfs> has a value
     *
     * @return boolean
     */
    public function hasGlusterfs(){
      return $this->_has(2);
    }
    
    /**
     * Clear <glusterfs> value
     *
     * @return \glusterfs\ClusterListResponse
     */
    public function clearGlusterfs(){
      return $this->_clear(2);
    }
    
    /**
     * Get <glusterfs> value
     *
     * @param int $idx
     * @return \glusterfs\Cluster
     */
    public function getGlusterfs($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <glusterfs> value
     *
     * @param \glusterfs\Cluster $value
     * @return \glusterfs\ClusterListResponse
     */
    public function setGlusterfs(\glusterfs\Cluster $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <glusterfs>
     *
     * @return \glusterfs\Cluster[]
     */
    public function getGlusterfsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <glusterfs>
     *
     * @param \glusterfs\Cluster $value
     * @return \glusterfs\ClusterListResponse
     */
    public function addGlusterfs(\glusterfs\Cluster $value){
     return $this->_add(2, $value);
    }
  }
}

namespace glusterfs {

  class ClusterDescribeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $kube_cluster = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.ClusterDescribeRequest');

      // OPTIONAL STRING kube_cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kube_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kube_cluster> has a value
     *
     * @return boolean
     */
    public function hasKubeCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <kube_cluster> value
     *
     * @return \glusterfs\ClusterDescribeRequest
     */
    public function clearKubeCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <kube_cluster> value
     *
     * @return string
     */
    public function getKubeCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <kube_cluster> value
     *
     * @param string $value
     * @return \glusterfs\ClusterDescribeRequest
     */
    public function setKubeCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \glusterfs\ClusterDescribeRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \glusterfs\ClusterDescribeRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace glusterfs {

  class ClusterDescribeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.ClusterDescribeResponse');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \glusterfs\ClusterDescribeResponse
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \glusterfs\ClusterDescribeResponse
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
  }
}

namespace glusterfs {

  class ClusterCreateRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $node = null;
    
    /**  @var string */
    public $mood = null;
    
    /**  @var string[]  */
    public $disks = array();
    
    /**  @var string */
    public $kube_cluster = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.ClusterCreateRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 node = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "node";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mood = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mood";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING disks = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "disks";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING kube_cluster = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "kube_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \glusterfs\ClusterCreateRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \glusterfs\ClusterCreateRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <node> has a value
     *
     * @return boolean
     */
    public function hasNode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <node> value
     *
     * @return \glusterfs\ClusterCreateRequest
     */
    public function clearNode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <node> value
     *
     * @return int
     */
    public function getNode(){
      return $this->_get(2);
    }
    
    /**
     * Set <node> value
     *
     * @param int $value
     * @return \glusterfs\ClusterCreateRequest
     */
    public function setNode( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mood> has a value
     *
     * @return boolean
     */
    public function hasMood(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mood> value
     *
     * @return \glusterfs\ClusterCreateRequest
     */
    public function clearMood(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mood> value
     *
     * @return string
     */
    public function getMood(){
      return $this->_get(3);
    }
    
    /**
     * Set <mood> value
     *
     * @param string $value
     * @return \glusterfs\ClusterCreateRequest
     */
    public function setMood( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <disks> has a value
     *
     * @return boolean
     */
    public function hasDisks(){
      return $this->_has(4);
    }
    
    /**
     * Clear <disks> value
     *
     * @return \glusterfs\ClusterCreateRequest
     */
    public function clearDisks(){
      return $this->_clear(4);
    }
    
    /**
     * Get <disks> value
     *
     * @param int $idx
     * @return string
     */
    public function getDisks($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <disks> value
     *
     * @param string $value
     * @return \glusterfs\ClusterCreateRequest
     */
    public function setDisks( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <disks>
     *
     * @return string[]
     */
    public function getDisksList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <disks>
     *
     * @param string $value
     * @return \glusterfs\ClusterCreateRequest
     */
    public function addDisks( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <kube_cluster> has a value
     *
     * @return boolean
     */
    public function hasKubeCluster(){
      return $this->_has(5);
    }
    
    /**
     * Clear <kube_cluster> value
     *
     * @return \glusterfs\ClusterCreateRequest
     */
    public function clearKubeCluster(){
      return $this->_clear(5);
    }
    
    /**
     * Get <kube_cluster> value
     *
     * @return string
     */
    public function getKubeCluster(){
      return $this->_get(5);
    }
    
    /**
     * Set <kube_cluster> value
     *
     * @param string $value
     * @return \glusterfs\ClusterCreateRequest
     */
    public function setKubeCluster( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace glusterfs {

  class ClusterDeleteRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $kube_cluster = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'glusterfs.ClusterDeleteRequest');

      // OPTIONAL STRING kube_cluster = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kube_cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kube_cluster> has a value
     *
     * @return boolean
     */
    public function hasKubeCluster(){
      return $this->_has(1);
    }
    
    /**
     * Clear <kube_cluster> value
     *
     * @return \glusterfs\ClusterDeleteRequest
     */
    public function clearKubeCluster(){
      return $this->_clear(1);
    }
    
    /**
     * Get <kube_cluster> value
     *
     * @return string
     */
    public function getKubeCluster(){
      return $this->_get(1);
    }
    
    /**
     * Set <kube_cluster> value
     *
     * @param string $value
     * @return \glusterfs\ClusterDeleteRequest
     */
    public function setKubeCluster( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \glusterfs\ClusterDeleteRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \glusterfs\ClusterDeleteRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace glusterfs {

  class ClustersClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param glusterfs\ClusterListRequest $input
     */
    public function List(\glusterfs\ClusterListRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/glusterfs.Clusters/List', $argument, '\glusterfs\ClusterListResponse::deserialize', $metadata, $options);
    }
    /**
     * @param glusterfs\ClusterDescribeRequest $input
     */
    public function Describe(\glusterfs\ClusterDescribeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/glusterfs.Clusters/Describe', $argument, '\glusterfs\ClusterDescribeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param glusterfs\ClusterCreateRequest $input
     */
    public function Create(\glusterfs\ClusterCreateRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/glusterfs.Clusters/Create', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
    /**
     * @param glusterfs\ClusterDeleteRequest $input
     */
    public function Delete(\glusterfs\ClusterDeleteRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/glusterfs.Clusters/Delete', $argument, '\dtypes\VoidResponse::deserialize', $metadata, $options);
    }
  }
}
