<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: health.proto
//   Date: 2016-04-20 05:49:27

namespace health {

  class Response extends \DrSlump\Protobuf\Message {

    /**  @var \dtypes\Status */
    public $status = null;
    
    /**  @var \health\Version */
    public $version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'health.Response');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dtypes\Status';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE version = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\health\Version';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \health\Response
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \dtypes\Status
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \dtypes\Status $value
     * @return \health\Response
     */
    public function setStatus(\dtypes\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(2);
    }
    
    /**
     * Clear <version> value
     *
     * @return \health\Response
     */
    public function clearVersion(){
      return $this->_clear(2);
    }
    
    /**
     * Get <version> value
     *
     * @return \health\Version
     */
    public function getVersion(){
      return $this->_get(2);
    }
    
    /**
     * Set <version> value
     *
     * @param \health\Version $value
     * @return \health\Response
     */
    public function setVersion(\health\Version $value){
      return $this->_set(2, $value);
    }
  }
}

namespace health {

  class Version extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $version = null;
    
    /**  @var string */
    public $status = null;
    
    /**  @var string */
    public $endpoint = null;
    
    /**  @var string */
    public $commit_hash = null;
    
    /**  @var string */
    public $Name = null;
    
    /**  @var string */
    public $git_branch = null;
    
    /**  @var string */
    public $git_tag = null;
    
    /**  @var string */
    public $commit_timestamp = null;
    
    /**  @var string */
    public $build_timestamp = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'health.Version');

      // OPTIONAL STRING version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING endpoint = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "endpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING commit_hash = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "commit_hash";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING Name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "Name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING git_branch = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "git_branch";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING git_tag = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "git_tag";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING commit_timestamp = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "commit_timestamp";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING build_timestamp = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "build_timestamp";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <version> value
     *
     * @return \health\Version
     */
    public function clearVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <version> value
     *
     * @return string
     */
    public function getVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <version> value
     *
     * @param string $value
     * @return \health\Version
     */
    public function setVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \health\Version
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param string $value
     * @return \health\Version
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <endpoint> has a value
     *
     * @return boolean
     */
    public function hasEndpoint(){
      return $this->_has(3);
    }
    
    /**
     * Clear <endpoint> value
     *
     * @return \health\Version
     */
    public function clearEndpoint(){
      return $this->_clear(3);
    }
    
    /**
     * Get <endpoint> value
     *
     * @return string
     */
    public function getEndpoint(){
      return $this->_get(3);
    }
    
    /**
     * Set <endpoint> value
     *
     * @param string $value
     * @return \health\Version
     */
    public function setEndpoint( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <commit_hash> has a value
     *
     * @return boolean
     */
    public function hasCommitHash(){
      return $this->_has(4);
    }
    
    /**
     * Clear <commit_hash> value
     *
     * @return \health\Version
     */
    public function clearCommitHash(){
      return $this->_clear(4);
    }
    
    /**
     * Get <commit_hash> value
     *
     * @return string
     */
    public function getCommitHash(){
      return $this->_get(4);
    }
    
    /**
     * Set <commit_hash> value
     *
     * @param string $value
     * @return \health\Version
     */
    public function setCommitHash( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <Name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <Name> value
     *
     * @return \health\Version
     */
    public function clearName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <Name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(5);
    }
    
    /**
     * Set <Name> value
     *
     * @param string $value
     * @return \health\Version
     */
    public function setName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <git_branch> has a value
     *
     * @return boolean
     */
    public function hasGitBranch(){
      return $this->_has(6);
    }
    
    /**
     * Clear <git_branch> value
     *
     * @return \health\Version
     */
    public function clearGitBranch(){
      return $this->_clear(6);
    }
    
    /**
     * Get <git_branch> value
     *
     * @return string
     */
    public function getGitBranch(){
      return $this->_get(6);
    }
    
    /**
     * Set <git_branch> value
     *
     * @param string $value
     * @return \health\Version
     */
    public function setGitBranch( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <git_tag> has a value
     *
     * @return boolean
     */
    public function hasGitTag(){
      return $this->_has(7);
    }
    
    /**
     * Clear <git_tag> value
     *
     * @return \health\Version
     */
    public function clearGitTag(){
      return $this->_clear(7);
    }
    
    /**
     * Get <git_tag> value
     *
     * @return string
     */
    public function getGitTag(){
      return $this->_get(7);
    }
    
    /**
     * Set <git_tag> value
     *
     * @param string $value
     * @return \health\Version
     */
    public function setGitTag( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <commit_timestamp> has a value
     *
     * @return boolean
     */
    public function hasCommitTimestamp(){
      return $this->_has(8);
    }
    
    /**
     * Clear <commit_timestamp> value
     *
     * @return \health\Version
     */
    public function clearCommitTimestamp(){
      return $this->_clear(8);
    }
    
    /**
     * Get <commit_timestamp> value
     *
     * @return string
     */
    public function getCommitTimestamp(){
      return $this->_get(8);
    }
    
    /**
     * Set <commit_timestamp> value
     *
     * @param string $value
     * @return \health\Version
     */
    public function setCommitTimestamp( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <build_timestamp> has a value
     *
     * @return boolean
     */
    public function hasBuildTimestamp(){
      return $this->_has(9);
    }
    
    /**
     * Clear <build_timestamp> value
     *
     * @return \health\Version
     */
    public function clearBuildTimestamp(){
      return $this->_clear(9);
    }
    
    /**
     * Get <build_timestamp> value
     *
     * @return string
     */
    public function getBuildTimestamp(){
      return $this->_get(9);
    }
    
    /**
     * Set <build_timestamp> value
     *
     * @param string $value
     * @return \health\Version
     */
    public function setBuildTimestamp( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace health {

  class HealthClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts) {
      parent::__construct($hostname, $opts);
    }
    /**
     * @param dtypes\VoidRequest $input
     */
    public function Status(\dtypes\VoidRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/health.Health/Status', $argument, '\health\Response::deserialize', $metadata, $options);
    }
  }
}
