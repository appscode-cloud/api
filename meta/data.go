// Code generated by go-bindata.
// sources:
// meta/config.yaml
// DO NOT EDIT!

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x6a\xdc\x40\x0c\x86\xef\xf3\x14\xc2\x7b\xae\xcd\xf6\xb8\x37\xc7\x2d\xad\xa1\x87\xc0\x86\xde\xe5\x19\xc5\x16\x19\x6b\x86\x19\x8d\x4b\xde\xbe\x78\xcb\xba\x09\x09\x8b\xf7\x64\x8c\xbe\x4f\xd2\xfc\x3a\x40\x17\xe4\x99\xc7\x92\x50\x39\x48\x86\xe7\x90\xa0\x7d\xec\xbf\x8b\x8b\x81\x45\x73\xbd\xfe\x9d\x29\x2d\x94\xe0\x0f\x7b\x6f\x0e\x80\x56\x21\x08\xb0\x38\x5e\xd8\x15\xf4\x30\x93\x4e\xc1\x65\x28\x31\x08\xe8\x44\x60\xdf\x35\x35\x07\x88\x29\x2c\xec\xc8\xd5\xc6\xe8\x6b\xa4\x13\x54\xbd\x28\x25\x4b\x51\x43\xfa\xb7\x42\x65\x16\xf4\xec\x2e\xca\x9b\xe2\xc9\x00\x84\xe4\x28\x9d\xe0\x68\x00\x24\xfc\xde\xa8\xb5\x04\xf0\x05\xaa\x06\x63\xcc\x36\x38\xaa\x27\x42\xaf\x53\xfd\xf3\xf2\x69\xce\x8a\x5a\x72\x65\xb0\xe8\x44\xa2\x6c\x6f\x34\xff\x6a\x00\x8a\xbc\x21\xc9\x5d\x43\xd8\x3d\xe7\x03\xb6\xb6\xab\x97\xe3\x40\x8a\xc7\xba\x7d\xb7\x45\xf3\x2b\x8c\x2c\x9f\x38\x2f\x65\xa0\x24\xa4\x94\x37\xb3\xf3\x25\x2b\xa5\xbc\x0e\x4a\x5a\xe2\x35\xb0\xbb\xdc\x5e\xb2\xa2\x58\x7a\x78\xed\x1f\x3f\x51\x05\x67\xca\x11\x2d\x6d\xe6\x13\xe1\x9c\x9b\x2e\x11\x2a\xdd\x21\xfc\x20\xbd\x83\xee\x73\xbb\x20\x7b\x1c\xfc\xbe\x19\x0f\xec\x3d\xcb\xd8\x74\x9e\x49\xf4\x29\xbc\xd0\x25\xc3\x0d\x6c\xdd\xcc\xd2\xee\xbc\xa2\xe5\xff\xc7\x19\x49\xf4\xc6\x6b\x3f\xa2\xdf\xc8\xd3\xce\x60\xae\x4b\x9f\xcb\x90\x6d\xe2\x81\x2a\xf3\x37\x00\x00\xff\xff\x9c\x1b\x8e\x7f\x79\x03\x00\x00")

func metaConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaConfigYaml,
		"meta/config.yaml",
	)
}

func metaConfigYaml() (*asset, error) {
	bytes, err := metaConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta/config.yaml", size: 889, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta/config.yaml": metaConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"meta": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{metaConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

