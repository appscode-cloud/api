// Code generated by go-bindata.
// sources:
// meta/config.yaml
// DO NOT EDIT!

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x41\x8f\x9b\x30\x10\x85\xef\xfc\x8a\x11\x39\x17\xd4\x1e\x73\x43\x69\xd4\x46\x4a\xab\xaa\xd9\xdd\xbb\xb1\x27\x61\x14\x33\x46\xf6\x98\x55\xfe\xfd\x9a\x44\x64\x89\x90\xc8\x9e\x78\xf0\xbe\x79\x1e\xe1\xb7\x82\x8d\xe3\x23\x9d\xa2\x57\x42\x8e\x03\x1c\x9d\x87\xea\xdf\x6e\xcb\xa6\x73\xc4\x12\x8a\xe1\xed\x80\xbe\x47\x0f\xef\x64\x6d\xb6\x02\xa5\x05\x1c\x03\xb1\xa1\x9e\x4c\x54\x16\x5a\x94\xc6\x99\x00\xb1\x4b\xdf\xa5\x41\xd0\x0f\xa1\x69\xa6\xf3\x2e\xb1\x68\x8a\x2c\x93\x4b\x87\x6b\xc8\x77\x2c\xe8\x35\x76\xe2\xfc\x6d\x85\x3c\x53\x31\xcd\xb2\x90\xbe\x8e\x4d\x80\x75\x06\xe0\xbc\x41\xbf\x86\xef\x49\x46\x9e\x90\x68\xc6\x5d\x07\x0a\xe0\x1b\xe4\x65\x83\xca\x4a\x53\xfc\xbe\x3e\xca\x83\x28\x89\x21\xbf\xbb\xc3\x70\x51\x3d\x9c\x55\xee\xdd\x89\xf8\x29\xe2\xa2\x2c\x33\x2f\xee\x8c\x93\x98\x56\x91\x25\x3e\x59\x0a\x52\xfc\xb9\xe9\x7d\xd2\xe5\x01\xd9\x6c\x07\xf3\x0b\x68\xac\x83\xf6\x54\xe3\x73\xf4\x95\xc3\x1c\x66\xd5\x62\xe8\x94\xc6\xe2\xef\xa8\xca\x8d\xc7\xf4\xdf\x96\x99\x5f\x28\xcb\xc0\x2e\x54\x7d\x3a\x5c\xd5\xf6\x9a\x14\x2e\x41\xb0\xad\x96\xef\x45\x53\x5a\x38\x71\x7e\xb6\xc2\xa7\xf3\x13\x2d\x4e\x9d\x5a\xe9\x73\xec\x8a\x8d\xa5\x14\x5c\xfe\xc7\xb1\xaf\x73\xe4\xd6\xd2\x59\xf4\xa3\x3b\xc6\xf7\xca\x92\x59\xe8\xd9\x8f\x24\xd9\xbd\xdd\xa9\x27\xe5\xfa\x08\x00\x00\xff\xff\xa6\xa2\xd9\xb0\x48\x03\x00\x00")

func metaConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaConfigYaml,
		"meta/config.yaml",
	)
}

func metaConfigYaml() (*asset, error) {
	bytes, err := metaConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta/config.yaml", size: 840, mode: os.FileMode(436), modTime: time.Unix(1467428150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta/config.yaml": metaConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"meta": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{metaConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

